{"ast":null,"code":"import React from 'react';\nimport styled, { css } from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Image from '../../atomic-ui/components/Image';\nimport Meta from '../../atomic-ui/components/Meta';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport { useQuery } from '@apollo/react-hooks';\nimport queries from '../../graphql/queries';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { Loader } from '../Styled';\nimport Spinner from '../../atomic-ui/components/Spinner';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"CategoryView__Wrap\",\n  componentId: \"sc-1leuzf2-0\"\n})([\"\", \" \", \" \", \"\"], ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Poster = styled(Image).withConfig({\n  displayName: \"CategoryView__Poster\",\n  componentId: \"sc-1leuzf2-1\"\n})([\"object-fit:cover;width:100%;height:512px;border-radius:var(--surface-border-radius);\"]);\nexport const Content = styled(Column).withConfig({\n  displayName: \"CategoryView__Content\",\n  componentId: \"sc-1leuzf2-2\"\n})([\"grid-gap:0;\"]);\nexport const View = ({\n  category,\n  appearance,\n  className,\n  style\n}) => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_CATEGORY, {\n    variables: {\n      id: category\n    }\n  });\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance\n  }, !loading && data ? /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Meta, {\n    date: data.getCategory.createdAt,\n    category: getLabelCategory(data.getCategory.type)\n  }), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, data.getCategory.name), /*#__PURE__*/React.createElement(Text, null, data.getCategory.description)) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0441\\u0442\\u0430\\u0442\\u044C\\u0435\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)));\n};\nView.defaultProps = {\n  appearance: 'default'\n};\nexport default View;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/CategoryView/index.js"],"names":["React","styled","css","Column","Title","Text","Image","Meta","getLabelCategory","useQuery","queries","Alert","Loader","Spinner","Wrap","appearance","Poster","Content","View","category","className","style","data","loading","error","GET_CATEGORY","variables","id","getCategory","createdAt","type","name","description","width","textAlign","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AAEA,OAAO,MAAMC,IAAI,GAAGb,MAAM,CAACE,MAAD,CAAT;AAAA;AAAA;AAAA,uBACb,CAAC;AAAEY,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,SAAf,IACAb,GADA,+KAFa,EAWb,CAAC;AAAEa,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,OAAf,IACAb,GADA,4EAZa,EAqBb,CAAC;AAAEa,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,OAAf,IACAb,GADA,4EAtBa,CAAV;AAgCP,OAAO,MAAMc,MAAM,GAAGf,MAAM,CAACK,KAAD,CAAT;AAAA;AAAA;AAAA,4FAAZ;AAOP,OAAO,MAAMW,OAAO,GAAGhB,MAAM,CAACE,MAAD,CAAT;AAAA;AAAA;AAAA,mBAAb;AAIP,OAAO,MAAMe,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYJ,EAAAA,UAAZ;AAAwBK,EAAAA,SAAxB;AAAmCC,EAAAA;AAAnC,CAAD,KAAgD;AAClE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2Bf,QAAQ,CAACC,OAAO,CAACe,YAAT,EAAuB;AAC9DC,IAAAA,SAAS,EAAE;AACTC,MAAAA,EAAE,EAAER;AADK;AADmD,GAAvB,CAAzC;AAMA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEC,SAAjB;AAA4B,IAAA,KAAK,EAAEC,KAAnC;AAA0C,IAAA,UAAU,EAAEN;AAAtD,KACG,CAACQ,OAAD,IAAYD,IAAZ,gBACC,oBAAC,OAAD,qBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAI,CAACM,WAAL,CAAiBC,SAA7B;AAAwC,IAAA,QAAQ,EAAErB,gBAAgB,CAACc,IAAI,CAACM,WAAL,CAAiBE,IAAlB;AAAlE,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE;AAAZ,KAAmBR,IAAI,CAACM,WAAL,CAAiBG,IAApC,CAFF,eAGE,oBAAC,IAAD,QAAOT,IAAI,CAACM,WAAL,CAAiBI,WAAxB,CAHF,CADD,GAMGR,KAAK,gBACP,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAE,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAES,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B;AAAnC,mPADO,gBAKP,oBAAC,MAAD,qBACE,oBAAC,OAAD,OADF,CAZJ,CADF;AAmBD,CA1BM;AA4BPhB,IAAI,CAACiB,YAAL,GAAoB;AAClBpB,EAAAA,UAAU,EAAE;AADM,CAApB;AAIA,eAAeG,IAAf","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Image from '../../atomic-ui/components/Image'\nimport Meta from '../../atomic-ui/components/Meta'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\nimport { useQuery } from '@apollo/react-hooks'\nimport queries from '../../graphql/queries'\nimport Alert from '../../atomic-ui/components/Alert'\nimport { Loader } from '../Styled'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nexport const Wrap = styled(Column)`\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const Poster = styled(Image)`\n  object-fit: cover;\n  width: 100%;\n  height: 512px;\n  border-radius: var(--surface-border-radius);\n`\n\nexport const Content = styled(Column)`\n  grid-gap: 0;\n`\n\nexport const View = ({ category, appearance, className, style }) => {\n  const { data, loading, error } = useQuery(queries.GET_CATEGORY, {\n    variables: {\n      id: category\n    }\n  })\n\n  return (\n    <Wrap className={className} style={style} appearance={appearance}>\n      {!loading && data ? (\n        <Content>\n          <Meta date={data.getCategory.createdAt} category={getLabelCategory(data.getCategory.type)} />\n          <Title tag={'h4'}>{data.getCategory.name}</Title>\n          <Text>{data.getCategory.description}</Text>\n        </Content>\n      ) : error ? (\n        <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n          Упс! Не удалось загрузить информацию о статье\n        </Alert>\n      ) : (\n        <Loader>\n          <Spinner />\n        </Loader>\n      )}\n    </Wrap>\n  )\n}\n\nView.defaultProps = {\n  appearance: 'default'\n}\n\nexport default View\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Controller } from 'react-hook-form';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport TextArea from '../../atomic-ui/components/TextArea';\nimport TextEditor from '../../atomic-ui/components/TextEditor';\nimport CharacteristicEditor from '../../atomic-ui/components/CharacteristicEditor';\nimport Dropzone from '../../atomic-ui/components/Dropzone';\nimport ActionRow from '../../atomic-ui/components/ActionRow';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Icon from '../../atomic-ui/components/Icon';\nimport { getLabelStatus, getLabelCategory, getLabelRole, getFileSize } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nimport { Loader } from '../Styled';\nimport { setProjectMembers, setProjectScreenshots, setProjectFiles } from '../../store/actions/root';\nimport queries from '../../graphql/queries';\nimport config from '../../config';\nexport const AdaptiveRow = styled(Row).withConfig({\n  displayName: \"FormProject__AdaptiveRow\",\n  componentId: \"sc-1t0r6a3-0\"\n})([\"grid-gap:var(--default-gap);@media only screen and (max-width:768px){flex-wrap:wrap;}\"]);\nexport const Preview = styled(Dropzone).withConfig({\n  displayName: \"FormProject__Preview\",\n  componentId: \"sc-1t0r6a3-1\"\n})([\"width:40%;height:289px;@media only screen and (max-width:768px){width:100%;height:256px;}\"]);\nexport const General = styled(Column).withConfig({\n  displayName: \"FormProject__General\",\n  componentId: \"sc-1t0r6a3-2\"\n})([\"width:60%;@media only screen and (max-width:768px){width:100%;}\"]);\nexport const DescriptionArea = styled(TextArea).withConfig({\n  displayName: \"FormProject__DescriptionArea\",\n  componentId: \"sc-1t0r6a3-3\"\n})([\"height:100%;\"]);\nexport const RemoveTooltip = styled(Tooltip).withConfig({\n  displayName: \"FormProject__RemoveTooltip\",\n  componentId: \"sc-1t0r6a3-4\"\n})([\"display:none;\"]);\nexport const AlignmentRow = styled(Row).withConfig({\n  displayName: \"FormProject__AlignmentRow\",\n  componentId: \"sc-1t0r6a3-5\"\n})([\"position:relative;justify-content:space-between;align-items:center;&:hover{\", \"{display:flex;}}\"], RemoveTooltip);\nexport const Characteristics = ({\n  project,\n  watch,\n  control,\n  getValues\n}) => {\n  var _getValues, _project$characterist, _getValues2, _project$characterist2;\n\n  const [isPreviewCharacteristics, setIsPreviewCharacteristics] = useState(((_getValues = getValues('characteristics')) === null || _getValues === void 0 ? void 0 : _getValues.length) > 0 || (project === null || project === void 0 ? void 0 : (_project$characterist = project.characteristics) === null || _project$characterist === void 0 ? void 0 : _project$characterist.length) > 0);\n  watch('characteristics');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AdaptiveRow, {\n    style: {\n      justifyContent: 'space-between'\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u0425\\u0430\\u0440\\u0430\\u043A\\u0442\\u0435\\u0440\\u0438\\u0441\\u0442\\u0438\\u043A\\u0438\"), /*#__PURE__*/React.createElement(Checkbox, {\n    label: 'Превью',\n    disabled: ((_getValues2 = getValues('characteristics')) === null || _getValues2 === void 0 ? void 0 : _getValues2.length) === 0 || (project === null || project === void 0 ? void 0 : (_project$characterist2 = project.characteristics) === null || _project$characterist2 === void 0 ? void 0 : _project$characterist2.length) === 0,\n    defaultChecked: isPreviewCharacteristics,\n    onChange: e => setIsPreviewCharacteristics(e.target.checked),\n    rtl: true\n  })), isPreviewCharacteristics && /*#__PURE__*/React.createElement(CharacteristicEditor, {\n    appearance: 'ghost',\n    defaultValue: getValues('characteristics') || (project === null || project === void 0 ? void 0 : project.characteristics) || null,\n    readOnly: true\n  }), /*#__PURE__*/React.createElement(Controller, {\n    name: 'characteristics',\n    control: control,\n    defaultValue: getValues('characteristics') || (project === null || project === void 0 ? void 0 : project.characteristics) || null,\n    render: ({\n      value,\n      onChange\n    }) => /*#__PURE__*/React.createElement(CharacteristicEditor, {\n      appearance: 'ghost',\n      defaultValue: value,\n      onChange: onChange\n    })\n  }));\n};\nexport const Project = ({\n  project,\n  mutation,\n  appearance,\n  className,\n  canEditStatus,\n  onMemberAdd,\n  onScreenshotAdd,\n  onFileAdd,\n  onMemberRemove,\n  onScreenshotRemove,\n  onFileRemove,\n  onSubmit,\n  isPurpose\n}) => {\n  const {\n    data,\n    loading: loadingData,\n    error\n  } = project ? useQuery(queries.GET_PROJECT, {\n    variables: {\n      id: project\n    }\n  }) : {\n    data: {\n      getProject: {}\n    },\n    loading: false,\n    error: false\n  };\n  const {\n    data: dataCompanies,\n    loading: loadingCompanies\n  } = useQuery(queries.GET_USERS, {\n    variables: {\n      account: ['ENTITY']\n    }\n  });\n  const {\n    data: dataCategories,\n    loading: loadingCategories\n  } = useQuery(queries.GET_CATEGORIES);\n  const {\n    data: dataStatuses,\n    loading: loadingStatuses\n  } = useQuery(queries.GET_POST_STATUSES);\n  const [companies, setCompanies] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [statuses, setStatuses] = useState([]);\n  const {\n    members,\n    screenshots,\n    files\n  } = useSelector(state => ({\n    members: state.root.members,\n    screenshots: state.root.screenshots,\n    files: state.root.files\n  }));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!loadingData && data) {\n      var _data$getProject, _data$getProject2, _data$getProject3;\n\n      if ((_data$getProject = data.getProject) !== null && _data$getProject !== void 0 && _data$getProject.members) {\n        dispatch(setProjectMembers(data.getProject.members));\n      }\n\n      if ((_data$getProject2 = data.getProject) !== null && _data$getProject2 !== void 0 && _data$getProject2.screenshots) {\n        dispatch(setProjectScreenshots(data.getProject.screenshots));\n      }\n\n      if ((_data$getProject3 = data.getProject) !== null && _data$getProject3 !== void 0 && _data$getProject3.files) {\n        dispatch(setProjectFiles(data.getProject.files));\n      }\n    }\n  }, [loadingData, data]);\n  useEffect(() => {\n    if (!loadingCompanies && dataCompanies) {\n      setCompanies(dataCompanies.getUsers);\n    }\n  }, [loadingCompanies, dataCompanies]);\n  useEffect(() => {\n    if (!loadingCategories && dataCategories) {\n      setCategories(dataCategories.getCategories);\n    }\n  }, [loadingCategories, dataCategories]);\n  useEffect(() => {\n    if (!loadingStatuses && dataStatuses) {\n      setStatuses(dataStatuses.getPostStatus);\n    }\n  }, [loadingStatuses, dataStatuses]);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => onSubmit({ ...form,\n      screenshots,\n      members,\n      files\n    }, action)\n  }, ({\n    watch,\n    register,\n    loading,\n    errors,\n    control,\n    getValues\n  }) => {\n    var _data$getProject4, _data$getProject5, _data$getProject6, _data$getProject7, _data$getProject8, _data$getProject9, _data$getProject10, _data$getProject11;\n\n    return !loading && !loadingData && data ? /*#__PURE__*/React.createElement(React.Fragment, null, errors && errors.preview && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043F\\u0440\\u0435\\u0432\\u044C\\u044E\"), errors && errors.title && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u0430\"), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), /*#__PURE__*/React.createElement(AdaptiveRow, null, /*#__PURE__*/React.createElement(Controller, {\n      name: 'preview',\n      control: control,\n      rules: {\n        required: true\n      },\n      defaultValue: getValues('preview') || ((_data$getProject4 = data.getProject) === null || _data$getProject4 === void 0 ? void 0 : _data$getProject4.preview) || null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Preview, {\n        accept: 'image/*',\n        defaultValue: value,\n        onChange: onChange,\n        placeholder: 'Перетащите сюда изображение для превью',\n        tooltip: 'Разрешение: 700x600px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB'\n      })\n    }), /*#__PURE__*/React.createElement(General, null, /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'title',\n      ref: register({\n        required: true\n      }),\n      defaultValue: getValues('title') || ((_data$getProject5 = data.getProject) === null || _data$getProject5 === void 0 ? void 0 : _data$getProject5.title),\n      placeholder: 'Название',\n      appearance: 'ghost',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Controller, {\n      name: 'company',\n      control: control,\n      defaultValue: getValues('company') || ((_data$getProject6 = data.getProject) !== null && _data$getProject6 !== void 0 && _data$getProject6.company ? {\n        value: data.getProject.company.id,\n        label: data.getProject.company.name\n      } : null),\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        options: !loading && companies ? companies.map(user => ({\n          value: user,\n          label: user.name\n        })) : [],\n        appearance: 'ghost',\n        defaultValue: value,\n        placeholder: 'Выберите компанию',\n        onChange: onChange,\n        isLoading: loading || loadingCompanies,\n        isSearchable: true\n      })\n    }), /*#__PURE__*/React.createElement(Controller, {\n      name: 'category',\n      control: control,\n      defaultValue: getValues('category') || ((_data$getProject7 = data.getProject) !== null && _data$getProject7 !== void 0 && _data$getProject7.category ? {\n        value: data.getProject.category.id,\n        label: getLabelCategory(data.getProject.category.name)\n      } : null),\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        appearance: 'ghost',\n        placeholder: 'Выберите раздел',\n        options: categories.filter(category => category.type === 'DIVISION').map(item => ({\n          value: item.id,\n          label: getLabelCategory(item.name)\n        })),\n        onChange: onChange,\n        defaultValue: value,\n        isLoading: loading || loadingCategories,\n        isClearable: true\n      })\n    }), errors && errors.description && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u0430\"), /*#__PURE__*/React.createElement(DescriptionArea, {\n      ref: register(),\n      name: 'description',\n      appearance: 'ghost',\n      defaultValue: getValues('description') || ((_data$getProject8 = data.getProject) === null || _data$getProject8 === void 0 ? void 0 : _data$getProject8.description),\n      placeholder: 'Описание',\n      disabled: loading\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Characteristics, {\n      project: data.getProject,\n      watch: watch,\n      control: control,\n      getValues: getValues\n    }), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u0421\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u043D\\u0438\\u0435\"), errors && errors.body && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u043D\\u0438\\u0435 \\u0441\\u0442\\u0430\\u0442\\u044C\\u0438\"), /*#__PURE__*/React.createElement(Controller, {\n      name: 'body',\n      control: control,\n      rules: {\n        required: true\n      },\n      defaultValue: getValues('body') || ((_data$getProject9 = data.getProject) === null || _data$getProject9 === void 0 ? void 0 : _data$getProject9.body) || null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(TextEditor, {\n        apiKey: config.get('tiny-key'),\n        appearance: 'ghost',\n        defaultValue: value,\n        onChange: onChange\n      })\n    }), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Column, {\n      style: {\n        flexGrow: 1\n      }\n    }, /*#__PURE__*/React.createElement(ActionRow, {\n      title: 'Участники проeкта',\n      onAdd: onMemberAdd || (() => {}),\n      action: true\n    }), (members === null || members === void 0 ? void 0 : members.length) > 0 ? /*#__PURE__*/React.createElement(Grid, {\n      percentage: 'minmax(320px, 1fr)'\n    }, members.map(member => {\n      var _member$value, _member$value2, _member$value2$avatar, _member$avatar, _member$value3, _member$value4;\n\n      return /*#__PURE__*/React.createElement(AlignmentRow, {\n        key: v4()\n      }, /*#__PURE__*/React.createElement(Difinition, {\n        key: ((_member$value = member.value) === null || _member$value === void 0 ? void 0 : _member$value.email) || (member === null || member === void 0 ? void 0 : member.email),\n        img: ((_member$value2 = member.value) === null || _member$value2 === void 0 ? void 0 : (_member$value2$avatar = _member$value2.avatar) === null || _member$value2$avatar === void 0 ? void 0 : _member$value2$avatar.path) || ((_member$avatar = member.avatar) === null || _member$avatar === void 0 ? void 0 : _member$avatar.path) || '/images/avatar-default.png',\n        label: getLabelRole((member === null || member === void 0 ? void 0 : (_member$value3 = member.value) === null || _member$value3 === void 0 ? void 0 : _member$value3.account) || (member === null || member === void 0 ? void 0 : member.account)),\n        text: ((_member$value4 = member.value) === null || _member$value4 === void 0 ? void 0 : _member$value4.name) || (member === null || member === void 0 ? void 0 : member.name)\n      }), /*#__PURE__*/React.createElement(RemoveTooltip, {\n        place: 'left',\n        text: 'Удалить'\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: 'button',\n        kind: 'icon',\n        size: 'xs',\n        onClick: () => {\n          var _member$value5;\n\n          return onMemberRemove((member === null || member === void 0 ? void 0 : (_member$value5 = member.value) === null || _member$value5 === void 0 ? void 0 : _member$value5.email) || (member === null || member === void 0 ? void 0 : member.email));\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        size: 'xs',\n        icon: 'delete',\n        stroke: 'white'\n      }))));\n    })) : /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        textAlign: 'center'\n      },\n      width: '100%'\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u044C\\u0442\\u0435 \\u0443\\u0447\\u0430\\u0441\\u0442\\u043D\\u0438\\u043A\\u043E\\u0432\")), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(ActionRow, {\n      title: 'Изображения',\n      info: 'Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB',\n      onAdd: !project && onScreenshotAdd || (() => {}),\n      action: true\n    }), (screenshots === null || screenshots === void 0 ? void 0 : screenshots.length) > 0 ? /*#__PURE__*/React.createElement(Grid, {\n      percentage: 'minmax(196px, 1fr)'\n    }, screenshots.map(screenshot => {\n      var _screenshot$file, _screenshot$file2, _screenshot$file3, _screenshot$file4;\n\n      return /*#__PURE__*/React.createElement(AlignmentRow, {\n        key: v4()\n      }, /*#__PURE__*/React.createElement(Difinition, {\n        key: screenshot.id,\n        img: screenshot.blob || ((_screenshot$file = screenshot.file) === null || _screenshot$file === void 0 ? void 0 : _screenshot$file.path) || screenshot.path,\n        label: (((_screenshot$file2 = screenshot.file) === null || _screenshot$file2 === void 0 ? void 0 : _screenshot$file2.name) || ((_screenshot$file3 = screenshot.file) === null || _screenshot$file3 === void 0 ? void 0 : _screenshot$file3.path) || (screenshot === null || screenshot === void 0 ? void 0 : screenshot.name) || (screenshot === null || screenshot === void 0 ? void 0 : screenshot.path)).split('/').slice(-1)[0],\n        text: getFileSize(screenshot.size || ((_screenshot$file4 = screenshot.file) === null || _screenshot$file4 === void 0 ? void 0 : _screenshot$file4.size))\n      }), !project && /*#__PURE__*/React.createElement(RemoveTooltip, {\n        place: 'left',\n        text: 'Удалить'\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: 'button',\n        kind: 'icon',\n        size: 'xs',\n        onClick: () => onScreenshotRemove(screenshot.id)\n      }, /*#__PURE__*/React.createElement(Icon, {\n        size: 'xs',\n        icon: 'delete',\n        stroke: 'white'\n      }))));\n    })) : /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        textAlign: 'center'\n      },\n      width: '100%'\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u044C\\u0442\\u0435 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F\"), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(ActionRow, {\n      title: 'Файлы',\n      info: 'Допустимые форматы: pdf, docx, .doc. Макс. размер: 15 MB',\n      onAdd: onFileAdd || (() => {}),\n      action: true\n    }), (files === null || files === void 0 ? void 0 : files.length) > 0 ? /*#__PURE__*/React.createElement(Grid, {\n      percentage: 'minmax(196px, 1fr)'\n    }, files.map(file => {\n      var _file$file, _file$file2, _file$file3;\n\n      return /*#__PURE__*/React.createElement(AlignmentRow, {\n        key: v4()\n      }, /*#__PURE__*/React.createElement(Difinition, {\n        key: file.id,\n        icon: 'document',\n        label: (((_file$file = file.file) === null || _file$file === void 0 ? void 0 : _file$file.name) || ((_file$file2 = file.file) === null || _file$file2 === void 0 ? void 0 : _file$file2.path) || (file === null || file === void 0 ? void 0 : file.name) || (file === null || file === void 0 ? void 0 : file.path)).split('/').slice(-1)[0],\n        text: getFileSize(file.size || ((_file$file3 = file.file) === null || _file$file3 === void 0 ? void 0 : _file$file3.size))\n      }), !project && /*#__PURE__*/React.createElement(RemoveTooltip, {\n        place: 'left',\n        text: 'Удалить'\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: 'button',\n        kind: 'icon',\n        size: 'xs',\n        onClick: () => onFileRemove(file.id)\n      }, /*#__PURE__*/React.createElement(Icon, {\n        size: 'xs',\n        icon: 'delete',\n        stroke: 'white'\n      }))));\n    })) : /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        textAlign: 'center'\n      },\n      width: '100%'\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u044C\\u0442\\u0435 \\u0444\\u0430\\u0439\\u043B\\u044B\"), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), errors && errors.presentation && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0441\\u0442\\u0430\\u0432\\u044C\\u0442\\u0435 \\u0441\\u0441\\u044B\\u043B\\u043A\\u0443 \\u043D\\u0430 \\u0432\\u0438\\u0434\\u0435\\u043E\"), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      ref: register(),\n      name: 'presentation',\n      defaultValue: getValues('presentation') || ((_data$getProject10 = data.getProject) === null || _data$getProject10 === void 0 ? void 0 : _data$getProject10.presentation),\n      placeholder: 'Вставьте ссылку на видео',\n      label: 'Видео-презентация',\n      appearance: 'ghost',\n      disabled: loading\n    }), canEditStatus && /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), canEditStatus && /*#__PURE__*/React.createElement(Controller, {\n      name: 'status',\n      control: control,\n      defaultValue: getValues('status') || ((_data$getProject11 = data.getProject) !== null && _data$getProject11 !== void 0 && _data$getProject11.status ? {\n        value: data.getProject.status,\n        label: getLabelStatus(data.getProject.status)\n      } : null),\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        appearance: 'ghost',\n        placeholder: 'Выберите статус',\n        options: statuses.map(item => ({\n          value: item,\n          label: getLabelStatus(item)\n        })),\n        onChange: onChange,\n        defaultValue: value,\n        menuPlacement: 'top',\n        isLoading: loading || loadingStatuses,\n        isClearable: true\n      })\n    }), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: loading\n    }, isPurpose ? 'Предложить' : project ? 'Сохранить' : 'Создать'))) : error ? /*#__PURE__*/React.createElement(Alert, {\n      appearance: 'error',\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      }\n    }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u0435\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  });\n};\nexport default Project;","map":null,"metadata":{},"sourceType":"module"}
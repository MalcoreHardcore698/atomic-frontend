{"ast":null,"code":"import React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Chip from '../../atomic-ui/components/Chip';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport Title from '../../atomic-ui/components/Title';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport { getLabelRole, getLabelPermission } from '../../atomic-ui/utils/functions';\nimport { useEntityQuery } from '../../hooks/useEntityQuery';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"RoleCard__Wrap\",\n  componentId: \"sc-1nltqyr-0\"\n})([\"grid-gap:var(--default-gap);height:100%;\", \" \", \" \", \"\"], ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Header = styled(Row).withConfig({\n  displayName: \"RoleCard__Header\",\n  componentId: \"sc-1nltqyr-1\"\n})([\"justify-content:space-between;align-items:center;\"]);\nexport const Name = styled(Title).withConfig({\n  displayName: \"RoleCard__Name\",\n  componentId: \"sc-1nltqyr-2\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\nexport const Actions = styled(Row).withConfig({\n  displayName: \"RoleCard__Actions\",\n  componentId: \"sc-1nltqyr-3\"\n})([\"grid-gap:5px;height:100%;\"]);\nexport const Permissions = styled(Row).withConfig({\n  displayName: \"RoleCard__Permissions\",\n  componentId: \"sc-1nltqyr-4\"\n})([\"flex-wrap:wrap;grid-gap:10px;\"]);\nexport const Card = ({\n  role,\n  style,\n  appearance,\n  className,\n  limitPermissions,\n  onLink,\n  onChecked,\n  onEdit,\n  onDelete\n}) => {\n  const {\n    setQuery\n  } = useEntityQuery();\n  const permissions = role.permissions.slice(0, limitPermissions);\n  const residue = role.permissions.length - limitPermissions;\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(Column, {\n    style: {\n      gridGap: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Meta, {\n    date: role.createdAt\n  }), onChecked && onEdit && onDelete && /*#__PURE__*/React.createElement(Actions, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить роль'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    appearance: 'red',\n    onClick: onDelete\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактировать роль'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    onClick: onEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отметить роль',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, null)))), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: () => setQuery(role.id, 'role', onLink)\n  }, getLabelRole(role.name))), /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), role && role.permissions.length > 0 ? /*#__PURE__*/React.createElement(Permissions, null, permissions.map(permission => /*#__PURE__*/React.createElement(Chip, {\n    key: permission,\n    color: 'ghost',\n    appearance: 'outlined'\n  }, getLabelPermission(permission))), residue > 0 && /*#__PURE__*/React.createElement(Chip, {\n    color: 'ghost',\n    appearance: 'outlined'\n  }, \"+\", residue)) : /*#__PURE__*/React.createElement(Alert, null, \"\\u041F\\u0440\\u0438\\u0432\\u0435\\u043B\\u0435\\u0433\\u0438\\u0438 \\u043E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442\"));\n};\nCard.defaultProps = {\n  appearance: 'default',\n  limitPermissions: 5\n};\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}
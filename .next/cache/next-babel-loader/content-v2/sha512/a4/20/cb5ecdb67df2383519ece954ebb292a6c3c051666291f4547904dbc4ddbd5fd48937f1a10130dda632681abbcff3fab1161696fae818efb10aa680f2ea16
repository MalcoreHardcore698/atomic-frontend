{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dan82\\\\Documents\\\\workspace\\\\FREELANCE\\\\atomic\\\\atomic-frontend\\\\atomic-ui\\\\components\\\\DateText\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled from 'styled-components';\nexport const Wrap = styled.time`\n  font-size: var(--font-size-s);\n`;\nexport const DateText = (_ref) => {\n  var _Date$toLocaleString;\n\n  let {\n    text,\n    locales,\n    options\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"text\", \"locales\", \"options\"]);\n\n  return __jsx(Wrap, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 3\n    }\n  }), (_Date$toLocaleString = new Date(parseInt(text) || text).toLocaleString(locales, options)) !== null && _Date$toLocaleString !== void 0 ? _Date$toLocaleString : 'Date Invalid');\n};\nDateText.defaultProps = {\n  text: new Date(),\n  locales: 'ru-RU',\n  options: {\n    hour: 'numeric',\n    minute: '2-digit'\n  }\n};\nexport default DateText;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/DateText/index.js"],"names":["React","styled","Wrap","time","DateText","text","locales","options","props","Date","parseInt","toLocaleString","defaultProps","hour","minute"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAO,MAAMC,IAAI,GAAGD,MAAM,CAACE,IAAK;AAChC;AACA,CAFO;AAIP,OAAO,MAAMC,QAAQ,GAAG;AAAA;;AAAA,MAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,GAAD;AAAA,MAA8BC,KAA9B;;AAAA,SACtB,MAAC,IAAD,eAAUA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACG,IAAIC,IAAJ,CAASC,QAAQ,CAACL,IAAD,CAAR,IAAkBA,IAA3B,EAAiCM,cAAjC,CAAgDL,OAAhD,EAAyDC,OAAzD,CADH,uEACwE,cADxE,CADsB;AAAA,CAAjB;AAMPH,QAAQ,CAACQ,YAAT,GAAwB;AACtBP,EAAAA,IAAI,EAAE,IAAII,IAAJ,EADgB;AAEtBH,EAAAA,OAAO,EAAE,OAFa;AAGtBC,EAAAA,OAAO,EAAE;AACPM,IAAAA,IAAI,EAAE,SADC;AAEPC,IAAAA,MAAM,EAAE;AAFD;AAHa,CAAxB;AASA,eAAeV,QAAf","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nexport const Wrap = styled.time`\n  font-size: var(--font-size-s);\n`\n\nexport const DateText = ({ text, locales, options, ...props }) => (\n  <Wrap {...props}>\n    {new Date(parseInt(text) || text).toLocaleString(locales, options) ?? 'Date Invalid'}\n  </Wrap>\n)\n\nDateText.defaultProps = {\n  text: new Date(),\n  locales: 'ru-RU',\n  options: {\n    hour: 'numeric',\n    minute: '2-digit'\n  }\n}\n\nexport default DateText\n"]},"metadata":{},"sourceType":"module"}
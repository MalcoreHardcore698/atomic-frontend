{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Column from '../../atomic-ui/components/Column';\nimport Grid from '../../atomic-ui/components/Grid';\nimport DashboardLayout from '../dashboard';\nimport List from '../../components/List';\nimport FilterBar from '../../components/FilterBar';\nimport HandleBar from '../../components/HandleBar';\nimport DeleteForm from '../../components/FormDelete';\nimport { setDisplayMethod, setVisibleFilters } from '../../store/actions/root';\nimport { setDrawer } from '../../store/actions/drawer';\nimport { setItem } from '../../store/actions/snacks';\n\nconst getIsAdmin = document => {\n  var _document$name;\n\n  return (document === null || document === void 0 ? void 0 : (_document$name = document.name) === null || _document$name === void 0 ? void 0 : _document$name.toUpperCase()) !== 'ADMIN';\n};\n\nconst Delete = ({\n  item,\n  query,\n  component,\n  entityMultiText,\n  entitySingleText,\n  onSubmit\n}) => {\n  const isArray = useMemo(() => Array.isArray(item), [item]);\n  const dispatch = useDispatch();\n  const Component = component;\n  return /*#__PURE__*/React.createElement(DeleteForm, {\n    mutation: query,\n    appearance: 'clear',\n    onCancel: () => dispatch(setDrawer(null)),\n    onSubmit: async (_, action) => {\n      try {\n        await action({\n          variables: {\n            id: isArray ? item.map(doc => doc.id) : [item.id]\n          }\n        });\n        dispatch(setItem({\n          type: 'success',\n          message: isArray ? `${entityMultiText} успешно удалены` : `${entitySingleText} успешно удален`\n        }));\n      } catch (err) {\n        if (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Что-то пошло не так'\n          }));\n        }\n      } finally {\n        dispatch(setDrawer(null));\n        if (onSubmit) onSubmit();\n      }\n    }\n  }, isArray ? /*#__PURE__*/React.createElement(Grid, {\n    length: 'auto-fit'\n  }, item.map(document => /*#__PURE__*/React.createElement(Component, {\n    key: document.id,\n    item: document\n  }))) : /*#__PURE__*/React.createElement(Component, {\n    item: item\n  }));\n};\n\nexport const Card = ({\n  item,\n  checked,\n  appearance,\n  component,\n  withoutActions,\n  withoutChecked,\n  onChecked,\n  onLink,\n  onEdit,\n  onDelete\n}) => React.cloneElement(component, {\n  checked,\n  appearance,\n  onChecked: !withoutChecked && (checked => onChecked({ ...item,\n    checked\n  })),\n  onLink: onLink && (() => onLink(item)),\n  onEdit: !withoutActions && onEdit && (() => onEdit(item)),\n  onDelete: !withoutActions && onDelete && (() => onDelete(item))\n});\n\nconst ContentLayout = ({\n  render,\n  title,\n  icon,\n  field,\n  filters,\n  options,\n  template,\n  limit = 6,\n  startOffset = 6,\n  buttonCreateText,\n  getType,\n  getQuery,\n  deleteQuery,\n  deleteEntityMultiText,\n  deleteEntitySingleText,\n  onLink,\n  onEdit,\n  onCreate,\n  emptyMessage,\n  withoutChecked\n}) => {\n  const {\n    displayMethod,\n    visibleFilters\n  } = useSelector(state => ({\n    displayMethod: state.root.displayMethod,\n    visibleFilters: state.root.visibleFilters\n  }));\n  const dispatch = useDispatch();\n  const [isAllChecked, setIsAllChecked] = useState(false);\n  const [checkedList, setCheckedList] = useState([]);\n  const [updated, setUpdated] = useState('list');\n  const getIsAnyChecked = useCallback(item => {\n    var _checkedList$find;\n\n    return (_checkedList$find = checkedList.find(document => document[field] === item[field])) === null || _checkedList$find === void 0 ? void 0 : _checkedList$find.checked;\n  }, [checkedList]);\n\n  const onChecked = document => {\n    setCheckedList(prev => {\n      const isExists = item => item[field] === document[field];\n\n      const candidate = prev.find(isExists);\n\n      if (candidate) {\n        return prev.map(item => isExists(item) ? { ...document,\n          checked: !item.checked\n        } : { ...item,\n          checked: isAllChecked || item.checked\n        });\n      } else {\n        return [...prev, { ...document,\n          checked: true\n        }];\n      }\n    });\n    setIsAllChecked(false);\n  };\n\n  const onAllChecked = () => {\n    const value = !isAllChecked;\n    setCheckedList(prev => prev.map(item => ({ ...item,\n      checked: getIsAdmin(item) ? value : false\n    })));\n    setIsAllChecked(value);\n  };\n\n  const onDelete = item => dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление',\n    content: /*#__PURE__*/React.createElement(Delete, {\n      item: item,\n      query: deleteQuery,\n      component: props => React.cloneElement(render(props.item), {\n        appearance: 'clear',\n        withoutActions: true\n      }),\n      entityMultiText: deleteEntityMultiText,\n      entitySingleText: deleteEntitySingleText,\n      onSubmit: () => setUpdated(v4())\n    })\n  }));\n\n  const onDeleteAll = () => onDelete(checkedList.filter(document => document.checked));\n\n  useEffect(() => {\n    const countChecked = checkedList.reduce((acc, curr) => acc + (curr.checked ? 1 : 0), 0);\n\n    if (checkedList.length > 0 && countChecked === checkedList.length) {\n      setIsAllChecked(true);\n    }\n  }, [checkedList]);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: title\n  }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: icon,\n    checked: isAllChecked,\n    defaultDisplayMethod: displayMethod,\n    defaultVisibleFilters: visibleFilters,\n    buttonDeleteDisabled: !checkedList.find(item => item.checked),\n    buttonCreateText: buttonCreateText,\n    onCreate: onCreate,\n    onChecked: () => displayMethod === 'grid' && onAllChecked && onAllChecked(),\n    onChangeVisibleFilter: () => dispatch(setVisibleFilters(!visibleFilters)),\n    onChangeDisplayMethod: item => dispatch(setDisplayMethod(item.value)),\n    onDeleteAll: onDeleteAll,\n    withoutFooter: displayMethod === 'list',\n    withFilters: filters && options\n  }), (filters || options) && /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilters,\n    filters: filters,\n    options: options\n  }), /*#__PURE__*/React.createElement(List, {\n    key: updated,\n    limit: limit,\n    type: getType,\n    query: getQuery,\n    template: template,\n    startOffset: startOffset,\n    setCheckedList: setCheckedList,\n    component: item => /*#__PURE__*/React.createElement(Card, {\n      item: item,\n      component: render(item),\n      checked: getIsAdmin(item) && (isAllChecked || getIsAnyChecked(item)),\n      onChecked: onChecked,\n      onLink: item => onLink(item),\n      onEdit: item => onEdit(item),\n      onDelete: onDelete,\n      withoutChecked: withoutChecked\n    }),\n    emptyMessage: emptyMessage,\n    onChecked: onChecked,\n    onClick: item => onLink(item),\n    onEdit: item => onEdit(item),\n    onDelete: onDelete\n  })));\n};\n\nContentLayout.defaultProps = {\n  field: 'id'\n};\nexport default ContentLayout;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/layouts/dashboard/content.js"],"names":["React","useState","useEffect","useCallback","useMemo","useDispatch","useSelector","v4","Column","Grid","DashboardLayout","List","FilterBar","HandleBar","DeleteForm","setDisplayMethod","setVisibleFilters","setDrawer","setItem","getIsAdmin","document","name","toUpperCase","Delete","item","query","component","entityMultiText","entitySingleText","onSubmit","isArray","Array","dispatch","Component","_","action","variables","id","map","doc","type","message","err","Card","checked","appearance","withoutActions","withoutChecked","onChecked","onLink","onEdit","onDelete","cloneElement","ContentLayout","render","title","icon","field","filters","options","template","limit","startOffset","buttonCreateText","getType","getQuery","deleteQuery","deleteEntityMultiText","deleteEntitySingleText","onCreate","emptyMessage","displayMethod","visibleFilters","state","root","isAllChecked","setIsAllChecked","checkedList","setCheckedList","updated","setUpdated","getIsAnyChecked","find","prev","isExists","candidate","onAllChecked","value","color","content","props","onDeleteAll","filter","countChecked","reduce","acc","curr","length","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { v4 } from 'uuid'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Grid from '../../atomic-ui/components/Grid'\n\nimport DashboardLayout from '../dashboard'\nimport List from '../../components/List'\nimport FilterBar from '../../components/FilterBar'\nimport HandleBar from '../../components/HandleBar'\nimport DeleteForm from '../../components/FormDelete'\nimport { setDisplayMethod, setVisibleFilters } from '../../store/actions/root'\nimport { setDrawer } from '../../store/actions/drawer'\nimport { setItem } from '../../store/actions/snacks'\n\nconst getIsAdmin = (document) => document?.name?.toUpperCase() !== 'ADMIN'\n\nconst Delete = ({ item, query, component, entityMultiText, entitySingleText, onSubmit }) => {\n  const isArray = useMemo(() => Array.isArray(item), [item])\n  const dispatch = useDispatch()\n  const Component = component\n\n  return (\n    <DeleteForm\n      mutation={query}\n      appearance={'clear'}\n      onCancel={() => dispatch(setDrawer(null))}\n      onSubmit={async (_, action) => {\n        try {\n          await action({\n            variables: {\n              id: isArray ? item.map((doc) => doc.id) : [item.id]\n            }\n          })\n          dispatch(\n            setItem({\n              type: 'success',\n              message: isArray\n                ? `${entityMultiText} успешно удалены`\n                : `${entitySingleText} успешно удален`\n            })\n          )\n        } catch (err) {\n          if (err) {\n            dispatch(\n              setItem({\n                type: 'error',\n                message: 'Что-то пошло не так'\n              })\n            )\n          }\n        } finally {\n          dispatch(setDrawer(null))\n          if (onSubmit) onSubmit()\n        }\n      }}>\n      {isArray ? (\n        <Grid length={'auto-fit'}>\n          {item.map((document) => (\n            <Component key={document.id} item={document} />\n          ))}\n        </Grid>\n      ) : (\n        <Component item={item} />\n      )}\n    </DeleteForm>\n  )\n}\n\nexport const Card = ({\n  item,\n  checked,\n  appearance,\n  component,\n  withoutActions,\n  withoutChecked,\n  onChecked,\n  onLink,\n  onEdit,\n  onDelete\n}) =>\n  React.cloneElement(component, {\n    checked,\n    appearance,\n    onChecked: !withoutChecked && ((checked) => onChecked({ ...item, checked })),\n    onLink: onLink && (() => onLink(item)),\n    onEdit: !withoutActions && onEdit && (() => onEdit(item)),\n    onDelete: !withoutActions && onDelete && (() => onDelete(item))\n  })\n\nconst ContentLayout = ({\n  render,\n  title,\n  icon,\n  field,\n  filters,\n  options,\n  template,\n  limit = 6,\n  startOffset = 6,\n  buttonCreateText,\n  getType,\n  getQuery,\n  deleteQuery,\n  deleteEntityMultiText,\n  deleteEntitySingleText,\n  onLink,\n  onEdit,\n  onCreate,\n  emptyMessage,\n  withoutChecked\n}) => {\n  const { displayMethod, visibleFilters } = useSelector((state) => ({\n    displayMethod: state.root.displayMethod,\n    visibleFilters: state.root.visibleFilters\n  }))\n  const dispatch = useDispatch()\n\n  const [isAllChecked, setIsAllChecked] = useState(false)\n  const [checkedList, setCheckedList] = useState([])\n  const [updated, setUpdated] = useState('list')\n\n  const getIsAnyChecked = useCallback(\n    (item) => checkedList.find((document) => document[field] === item[field])?.checked,\n    [checkedList]\n  )\n\n  const onChecked = (document) => {\n    setCheckedList((prev) => {\n      const isExists = (item) => item[field] === document[field]\n      const candidate = prev.find(isExists)\n      if (candidate) {\n        return prev.map((item) =>\n          isExists(item)\n            ? {\n                ...document,\n                checked: !item.checked\n              }\n            : {\n                ...item,\n                checked: isAllChecked || item.checked\n              }\n        )\n      } else {\n        return [...prev, { ...document, checked: true }]\n      }\n    })\n    setIsAllChecked(false)\n  }\n\n  const onAllChecked = () => {\n    const value = !isAllChecked\n    setCheckedList((prev) =>\n      prev.map((item) => ({\n        ...item,\n        checked: getIsAdmin(item) ? value : false\n      }))\n    )\n    setIsAllChecked(value)\n  }\n\n  const onDelete = (item) =>\n    dispatch(\n      setDrawer({\n        icon: 'delete',\n        color: 'red',\n        title: 'Удаление',\n        content: (\n          <Delete\n            item={item}\n            query={deleteQuery}\n            component={(props) =>\n              React.cloneElement(render(props.item), {\n                appearance: 'clear',\n                withoutActions: true\n              })\n            }\n            entityMultiText={deleteEntityMultiText}\n            entitySingleText={deleteEntitySingleText}\n            onSubmit={() => setUpdated(v4())}\n          />\n        )\n      })\n    )\n\n  const onDeleteAll = () => onDelete(checkedList.filter((document) => document.checked))\n\n  useEffect(() => {\n    const countChecked = checkedList.reduce((acc, curr) => acc + (curr.checked ? 1 : 0), 0)\n    if (checkedList.length > 0 && countChecked === checkedList.length) {\n      setIsAllChecked(true)\n    }\n  }, [checkedList])\n\n  return (\n    <DashboardLayout title={title}>\n      <Column>\n        <HandleBar\n          title={title}\n          icon={icon}\n          checked={isAllChecked}\n          defaultDisplayMethod={displayMethod}\n          defaultVisibleFilters={visibleFilters}\n          buttonDeleteDisabled={!checkedList.find((item) => item.checked)}\n          buttonCreateText={buttonCreateText}\n          onCreate={onCreate}\n          onChecked={() => displayMethod === 'grid' && onAllChecked && onAllChecked()}\n          onChangeVisibleFilter={() => dispatch(setVisibleFilters(!visibleFilters))}\n          onChangeDisplayMethod={(item) => dispatch(setDisplayMethod(item.value))}\n          onDeleteAll={onDeleteAll}\n          withoutFooter={displayMethod === 'list'}\n          withFilters={filters && options}\n        />\n\n        {(filters || options) && (\n          <FilterBar isOpen={visibleFilters} filters={filters} options={options} />\n        )}\n\n        <List\n          key={updated}\n          limit={limit}\n          type={getType}\n          query={getQuery}\n          template={template}\n          startOffset={startOffset}\n          setCheckedList={setCheckedList}\n          component={(item) => (\n            <Card\n              item={item}\n              component={render(item)}\n              checked={getIsAdmin(item) && (isAllChecked || getIsAnyChecked(item))}\n              onChecked={onChecked}\n              onLink={(item) => onLink(item)}\n              onEdit={(item) => onEdit(item)}\n              onDelete={onDelete}\n              withoutChecked={withoutChecked}\n            />\n          )}\n          emptyMessage={emptyMessage}\n          onChecked={onChecked}\n          onClick={(item) => onLink(item)}\n          onEdit={(item) => onEdit(item)}\n          onDelete={onDelete}\n        />\n      </Column>\n    </DashboardLayout>\n  )\n}\n\nContentLayout.defaultProps = {\n  field: 'id'\n}\n\nexport default ContentLayout\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport Row, { Wrap as WrapRow } from '../../atomic-ui/components/Row';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Image from '../../atomic-ui/components/Image';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Difinition, { MarkedText } from '../../atomic-ui/components/Difinition';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport { getLabelRole } from '../../atomic-ui/utils/functions';\nimport { useEntityQuery } from '../../hooks/useEntityQuery';\nimport { More } from '../Styled';\nimport { ResponsibleMark, hasResponsibleMember } from '../Members';\nimport { onUserDelete, onUserEdit } from '../../store/helpers/user';\nimport { useHelper } from '../../hooks/useHelper';\nimport queries from '../../graphql/queries';\nimport config from '../../config';\nconst HOST_URL = config.get('host-url');\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"UserCard__Wrap\",\n  componentId: \"bx733i-0\"\n})([\"grid-gap:var(--default-gap);\", \" \", \" \", \" \", \"\"], ({\n  layout\n}) => layout === 'column' && css([\"display:flex;flex-wrap:wrap;\"]), ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Content = styled(Row).withConfig({\n  displayName: \"UserCard__Content\",\n  componentId: \"bx733i-1\"\n})([\"display:grid;grid-template-columns:120px 1fr;grid-template-rows:175px;@media only screen and (max-width:480px){display:flex;flex-direction:column;grid-gap:var(--default-gap);}\"]);\nexport const Avatar = styled(Image).withConfig({\n  displayName: \"UserCard__Avatar\",\n  componentId: \"bx733i-2\"\n})([\"position:relative;width:100%;height:100%;border-radius:var(--surface-border-radius);border:1px solid var(--ghost-color-background);overflow:hidden;object-fit:cover;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"UserCard__Header\",\n  componentId: \"bx733i-3\"\n})([\"justify-content:space-between;align-items:center;\"]);\nexport const Actions = styled(Row).withConfig({\n  displayName: \"UserCard__Actions\",\n  componentId: \"bx733i-4\"\n})([\"grid-gap:5px;height:100%;\"]);\nexport const Name = styled(Title).withConfig({\n  displayName: \"UserCard__Name\",\n  componentId: \"bx733i-5\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\nexport const About = styled.div.withConfig({\n  displayName: \"UserCard__About\",\n  componentId: \"bx733i-6\"\n})([\"font-size:var(--font-size-m);\"]);\nexport const Indicator = styled(Difinition).withConfig({\n  displayName: \"UserCard__Indicator\",\n  componentId: \"bx733i-7\"\n})([\"align-items:flex-end;flex-grow:10;height:100%;\"]);\nexport const Footer = styled(Row).withConfig({\n  displayName: \"UserCard__Footer\",\n  componentId: \"bx733i-8\"\n})([\"justify-content:space-between;grid-column:1 / 3;@media only screen and (max-width:480px){display:flex;flex-direction:column;grid-gap:var(--default-gap);\", \"{flex-grow:1;\", \"{flex-grow:1;button{width:100%;}}}}\"], WrapRow, WrapTooltip);\nexport const Card = ({\n  user,\n  preview,\n  owned,\n  added,\n  style,\n  className,\n  appearance,\n  onAdd,\n  onLink,\n  onChat,\n  onMembers,\n  onAboutMore,\n  onCompanyLink,\n  onChecked,\n  onEdit,\n  onDelete,\n  withSocials\n}) => {\n  var _user$avatar, _user$about, _user$projects, _user$company, _user$company$avatar, _user$company2;\n\n  const recall = useHelper();\n  const {\n    setQuery\n  } = useEntityQuery();\n  const auth = useSelector(state => state.user);\n  const [isAdded, setAdded] = useState(added);\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n\n  const onClickAdd = () => {\n    if (onAdd) onAdd();\n    setAdded(!isAdded);\n  };\n\n  const handleEdit = () => {\n    recall(onUserEdit, {\n      user: user.email,\n      auth: auth === null || auth === void 0 ? void 0 : auth.email,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      }\n    })();\n    if (onEdit) onEdit();\n  };\n\n  const handleDelete = () => {\n    recall(onUserDelete, {\n      id: user.email,\n      user,\n      auth: auth === null || auth === void 0 ? void 0 : auth.email,\n      mutation: queries.DELETE_USER\n    })();\n    if (onDelete) onDelete();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Avatar, {\n    src: (user === null || user === void 0 ? void 0 : (_user$avatar = user.avatar) === null || _user$avatar === void 0 ? void 0 : _user$avatar.path) || '/images/avatar-default.png',\n    alt: user.name,\n    effect: 'opacity',\n    layout: 'fill'\n  }), /*#__PURE__*/React.createElement(Column, {\n    style: {\n      gridGap: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(MarkedText, null, /*#__PURE__*/React.createElement(Meta, {\n    shareTitle: withSocials && (user === null || user === void 0 ? void 0 : user.name),\n    shareUrl: false && withSocials ? location.href : HOST_URL,\n    category: getLabelRole(user.account)\n  }), hasResponsibleMember(user) && /*#__PURE__*/React.createElement(ResponsibleMark, null)), (onChecked || onEdit || onDelete) && /*#__PURE__*/React.createElement(Actions, null, onDelete && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить пользователя'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    appearance: 'red',\n    onClick: handleDelete\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), onEdit && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактировать пользователя'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    onClick: handleEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), onChecked && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отметить пользователя',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, null)))), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: () => setQuery(user.email, 'user', onLink)\n  }, user.name), /*#__PURE__*/React.createElement(About, null, (user === null || user === void 0 ? void 0 : (_user$about = user.about) === null || _user$about === void 0 ? void 0 : _user$about.length) > 135 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, null, user.about.slice(0, 100), \"...\"), /*#__PURE__*/React.createElement(More, {\n    onClick: onAboutMore\n  }, \"\\u041F\\u043E\\u0434\\u0440\\u043E\\u0431\\u043D\\u0435\\u0435\")) : /*#__PURE__*/React.createElement(Text, null, user.about || 'Информация о себе не заполнена')), user.projects && /*#__PURE__*/React.createElement(Indicator, {\n    icon: 'work',\n    label: 'Проекты',\n    text: (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.length\n  }))), !preview && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Footer, null, user.account === 'ENTITY' ? /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'user2',\n    label: 'Участники',\n    text: user.members,\n    onLink: user.members && onMembers\n  }) : /*#__PURE__*/React.createElement(Difinition, _extends({}, user.company ? {\n    img: (_user$company = user.company) === null || _user$company === void 0 ? void 0 : (_user$company$avatar = _user$company.avatar) === null || _user$company$avatar === void 0 ? void 0 : _user$company$avatar.path\n  } : {\n    icon: 'work'\n  }, {\n    label: 'Компания',\n    text: ((_user$company2 = user.company) === null || _user$company2 === void 0 ? void 0 : _user$company2.name) || '-',\n    onLink: user.company && onCompanyLink && (() => setQuery(user.company.email, 'user', onCompanyLink))\n  })), !owned && (onChat || onAdd) && /*#__PURE__*/React.createElement(Row, null, onChat && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Написать пользователю'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    appearance: 'green',\n    onClick: onChat,\n    revert: true\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'chat',\n    stroke: 'var(--default-color-green)'\n  }))), onAdd && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Подписаться на пользователя'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onClickAdd,\n    revert: !isAdded\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: isAdded ? 'check' : 'add',\n    stroke: isAdded ? 'white' : 'var(--default-color-accent)'\n  })))))));\n};\nCard.defaultProps = {\n  appearance: 'default'\n};\nexport default Card;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/UserCard/index.js"],"names":["React","useMemo","useState","useSelector","styled","css","Row","Wrap","WrapRow","Tooltip","WrapTooltip","Column","Title","Text","Icon","Meta","Image","Divider","Button","Difinition","MarkedText","Checkbox","getLabelRole","useEntityQuery","More","ResponsibleMark","hasResponsibleMember","onUserDelete","onUserEdit","useHelper","queries","config","HOST_URL","get","layout","appearance","Content","Avatar","Header","Actions","Name","onClick","About","div","Indicator","Footer","Card","user","preview","owned","added","style","className","onAdd","onLink","onChat","onMembers","onAboutMore","onCompanyLink","onChecked","onEdit","onDelete","withSocials","recall","setQuery","auth","state","isAdded","setAdded","canEditRole","role","name","onClickAdd","handleEdit","email","mutations","update","UPDATE_USER","del","DELETE_USER","changePassword","handleDelete","id","mutation","avatar","path","gridGap","location","href","account","about","length","slice","projects","members","company","img","icon","defaultProps"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled, { css } from 'styled-components'\n\nimport Row, { Wrap as WrapRow } from '../../atomic-ui/components/Row'\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Meta from '../../atomic-ui/components/Meta'\nimport Image from '../../atomic-ui/components/Image'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Button from '../../atomic-ui/components/Button'\nimport Difinition, { MarkedText } from '../../atomic-ui/components/Difinition'\nimport Checkbox from '../../atomic-ui/components/Checkbox'\nimport { getLabelRole } from '../../atomic-ui/utils/functions'\n\nimport { useEntityQuery } from '../../hooks/useEntityQuery'\nimport { More } from '../Styled'\n\nimport { ResponsibleMark, hasResponsibleMember } from '../Members'\nimport { onUserDelete, onUserEdit } from '../../store/helpers/user'\nimport { useHelper } from '../../hooks/useHelper'\nimport queries from '../../graphql/queries'\nimport config from '../../config'\n\nconst HOST_URL = config.get('host-url')\n\nexport const Wrap = styled(Column)`\n  grid-gap: var(--default-gap);\n\n  ${({ layout }) =>\n    layout === 'column' &&\n    css`\n      display: flex;\n      flex-wrap: wrap;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const Content = styled(Row)`\n  display: grid;\n  grid-template-columns: 120px 1fr;\n  grid-template-rows: 175px;\n\n  @media only screen and (max-width: 480px) {\n    display: flex;\n    flex-direction: column;\n    grid-gap: var(--default-gap);\n  }\n`\n\nexport const Avatar = styled(Image)`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border-radius: var(--surface-border-radius);\n  border: 1px solid var(--ghost-color-background);\n  overflow: hidden;\n  object-fit: cover;\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const Actions = styled(Row)`\n  grid-gap: 5px;\n  height: 100%;\n`\n\nexport const Name = styled(Title)`\n  transition: opacity 150ms ease;\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.45;\n      }\n    `}\n`\n\nexport const About = styled.div`\n  font-size: var(--font-size-m);\n`\n\nexport const Indicator = styled(Difinition)`\n  align-items: flex-end;\n  flex-grow: 10;\n  height: 100%;\n`\n\nexport const Footer = styled(Row)`\n  justify-content: space-between;\n  grid-column: 1 / 3;\n\n  @media only screen and (max-width: 480px) {\n    display: flex;\n    flex-direction: column;\n    grid-gap: var(--default-gap);\n\n    ${WrapRow} {\n      flex-grow: 1;\n\n      ${WrapTooltip} {\n        flex-grow: 1;\n\n        button {\n          width: 100%;\n        }\n      }\n    }\n  }\n`\n\nexport const Card = ({\n  user,\n  preview,\n  owned,\n  added,\n  style,\n  className,\n  appearance,\n  onAdd,\n  onLink,\n  onChat,\n  onMembers,\n  onAboutMore,\n  onCompanyLink,\n  onChecked,\n  onEdit,\n  onDelete,\n  withSocials\n}) => {\n  const recall = useHelper()\n  const { setQuery } = useEntityQuery()\n  const auth = useSelector((state) => state.user)\n  const [isAdded, setAdded] = useState(added)\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  const onClickAdd = () => {\n    if (onAdd) onAdd()\n    setAdded(!isAdded)\n  }\n\n  const handleEdit = () => {\n    recall(onUserEdit, {\n      user: user.email,\n      auth: auth?.email,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      }\n    })()\n    if (onEdit) onEdit()\n  }\n\n  const handleDelete = () => {\n    recall(onUserDelete, {\n      id: user.email,\n      user,\n      auth: auth?.email,\n      mutation: queries.DELETE_USER\n    })()\n    if (onDelete) onDelete()\n  }\n\n  return (\n    <Wrap className={className} style={style} appearance={appearance}>\n      <Content>\n        <Avatar\n          src={user?.avatar?.path || '/images/avatar-default.png'}\n          alt={user.name}\n          effect={'opacity'}\n          layout={'fill'}\n        />\n        <Column style={{ gridGap: 5 }}>\n          <Header>\n            <MarkedText>\n              <Meta\n                shareTitle={withSocials && user?.name}\n                shareUrl={typeof window !== 'undefined' && withSocials ? location.href : HOST_URL}\n                category={getLabelRole(user.account)}\n              />\n              {hasResponsibleMember(user) && <ResponsibleMark />}\n            </MarkedText>\n\n            {(onChecked || onEdit || onDelete) && (\n              <Actions>\n                {onDelete && (\n                  <Tooltip text={'Удалить пользователя'}>\n                    <Button kind={'icon'} size={'xs'} appearance={'red'} onClick={handleDelete}>\n                      <Icon icon={'delete'} size={'xs'} stroke={'white'} />\n                    </Button>\n                  </Tooltip>\n                )}\n                {onEdit && (\n                  <Tooltip text={'Редактировать пользователя'}>\n                    <Button kind={'icon'} size={'xs'} onClick={handleEdit}>\n                      <Icon icon={'edit'} size={'xs'} stroke={'white'} />\n                    </Button>\n                  </Tooltip>\n                )}\n                {onChecked && (\n                  <Tooltip text={'Отметить пользователя'} self>\n                    <Checkbox />\n                  </Tooltip>\n                )}\n              </Actions>\n            )}\n          </Header>\n\n          <Name tag={'h4'} onClick={() => setQuery(user.email, 'user', onLink)}>\n            {user.name}\n          </Name>\n\n          <About>\n            {user?.about?.length > 135 ? (\n              <React.Fragment>\n                <Text>{user.about.slice(0, 100)}...</Text>\n                <More onClick={onAboutMore}>Подробнее</More>\n              </React.Fragment>\n            ) : (\n              <Text>{user.about || 'Информация о себе не заполнена'}</Text>\n            )}\n          </About>\n          {user.projects && (\n            <Indicator icon={'work'} label={'Проекты'} text={user.projects?.length} />\n          )}\n        </Column>\n      </Content>\n\n      {!preview && (\n        <React.Fragment>\n          <Divider clear />\n\n          <Footer>\n            {user.account === 'ENTITY' ? (\n              <Difinition\n                icon={'user2'}\n                label={'Участники'}\n                text={user.members}\n                onLink={user.members && onMembers}\n              />\n            ) : (\n              <Difinition\n                {...(user.company\n                  ? {\n                      img: user.company?.avatar?.path\n                    }\n                  : {\n                      icon: 'work'\n                    })}\n                label={'Компания'}\n                text={user.company?.name || '-'}\n                onLink={\n                  user.company &&\n                  onCompanyLink &&\n                  (() => setQuery(user.company.email, 'user', onCompanyLink))\n                }\n              />\n            )}\n\n            {!owned && (onChat || onAdd) && (\n              <Row>\n                {onChat && (\n                  <Tooltip text={'Написать пользователю'}>\n                    <Button\n                      type={'button'}\n                      kind={'icon'}\n                      appearance={'green'}\n                      onClick={onChat}\n                      revert>\n                      <Icon icon={'chat'} stroke={'var(--default-color-green)'} />\n                    </Button>\n                  </Tooltip>\n                )}\n                {onAdd && (\n                  <Tooltip text={'Подписаться на пользователя'}>\n                    <Button type={'button'} kind={'icon'} onClick={onClickAdd} revert={!isAdded}>\n                      <Icon\n                        icon={isAdded ? 'check' : 'add'}\n                        stroke={isAdded ? 'white' : 'var(--default-color-accent)'}\n                      />\n                    </Button>\n                  </Tooltip>\n                )}\n              </Row>\n            )}\n          </Footer>\n        </React.Fragment>\n      )}\n    </Wrap>\n  )\n}\n\nCard.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Card\n"]},"metadata":{},"sourceType":"module"}
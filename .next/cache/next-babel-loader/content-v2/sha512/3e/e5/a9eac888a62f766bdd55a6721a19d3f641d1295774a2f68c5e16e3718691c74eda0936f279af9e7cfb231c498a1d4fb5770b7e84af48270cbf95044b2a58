{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport Title from '../atomic-ui/components/Title';\nimport ContentLayout from '../layouts/content';\nimport UserList from '../components/UserList';\nimport ArticleList from '../components/ArticleList';\nimport ProjectSuit from '../components/ProjectSuit';\nimport { useProject } from '../hooks/useProject';\nimport { initializeApollo } from '../apollo';\nimport { COMMON_START_OFFSET, INDEX_LOAD_LIMIT } from '../constants';\nimport queries from '../graphql/queries';\nconst TITLE = 'Атомик';\nconst ASIDE_PROPS = {\n  limit: 3,\n  startOffset: COMMON_START_OFFSET,\n  gridOptions: {\n    length: 'auto-fit',\n    percentage: '1fr'\n  }\n};\nconst Aside = styled.aside.withConfig({\n  displayName: \"pages__Aside\",\n  componentId: \"sc-1kp8388-0\"\n})([\"display:flex;flex-direction:column;grid-gap:var(--default-gap);width:394px;@media only screen and (max-width:1196px){width:auto;}\"]);\n\nconst Home = ({\n  store\n}) => {\n  const {\n    onLike,\n    ...methods\n  } = useProject();\n  const search = useSelector(state => state.root.search);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    store: store,\n    getType: 'getProjects',\n    limit: INDEX_LOAD_LIMIT,\n    emptyMessage: 'Проектов нет',\n    getQuery: queries.GET_PROJECTS,\n    startOffset: COMMON_START_OFFSET,\n    variables: {\n      status: 'PUBLISHED'\n    },\n    render: document => /*#__PURE__*/React.createElement(ProjectSuit, _extends({}, methods, {\n      project: document,\n      onLike: onLike\n    })),\n    aside: /*#__PURE__*/React.createElement(Aside, null, /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u044B\"), /*#__PURE__*/React.createElement(UserList, _extends({}, ASIDE_PROPS, {\n      withoutMore: !search\n    })), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0438\"), /*#__PURE__*/React.createElement(ArticleList, _extends({}, ASIDE_PROPS, {\n      withoutMore: !search,\n      layout: 'column'\n    })))\n  });\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let scaffold = null;\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_SCAFFOLD\n    });\n\n    if (response && response.data) {\n      var _response$data$getDas;\n\n      scaffold = (_response$data$getDas = response.data.getDashboardSettings) === null || _response$data$getDas === void 0 ? void 0 : _response$data$getDas.scaffold;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        scaffold\n      }\n    }\n  };\n}\nexport default Home;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/pages/index.js"],"names":["React","useSelector","styled","Title","ContentLayout","UserList","ArticleList","ProjectSuit","useProject","initializeApollo","COMMON_START_OFFSET","INDEX_LOAD_LIMIT","queries","TITLE","ASIDE_PROPS","limit","startOffset","gridOptions","length","percentage","Aside","aside","Home","store","onLike","methods","search","state","root","GET_PROJECTS","status","document","getServerSideProps","client","scaffold","response","query","GET_META_SCAFFOLD","data","getDashboardSettings","err","console","log","props"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport Title from '../atomic-ui/components/Title'\n\nimport ContentLayout from '../layouts/content'\nimport UserList from '../components/UserList'\nimport ArticleList from '../components/ArticleList'\nimport ProjectSuit from '../components/ProjectSuit'\nimport { useProject } from '../hooks/useProject'\nimport { initializeApollo } from '../apollo'\nimport { COMMON_START_OFFSET, INDEX_LOAD_LIMIT } from '../constants'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Атомик'\n\nconst ASIDE_PROPS = {\n  limit: 3,\n  startOffset: COMMON_START_OFFSET,\n  gridOptions: { length: 'auto-fit', percentage: '1fr' }\n}\n\nconst Aside = styled.aside`\n  display: flex;\n  flex-direction: column;\n  grid-gap: var(--default-gap);\n  width: 394px;\n\n  @media only screen and (max-width: 1196px) {\n    width: auto;\n  }\n`\n\nconst Home = ({ store }) => {\n  const { onLike, ...methods } = useProject()\n  const search = useSelector((state) => state.root.search)\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      store={store}\n      getType={'getProjects'}\n      limit={INDEX_LOAD_LIMIT}\n      emptyMessage={'Проектов нет'}\n      getQuery={queries.GET_PROJECTS}\n      startOffset={COMMON_START_OFFSET}\n      variables={{ status: 'PUBLISHED' }}\n      render={(document) => <ProjectSuit {...methods} project={document} onLike={onLike} />}\n      aside={\n        <Aside>\n          <Title tag={'h4'}>Авторы</Title>\n          <UserList {...ASIDE_PROPS} withoutMore={!search} />\n\n          <Title tag={'h4'}>Новости</Title>\n          <ArticleList {...ASIDE_PROPS} withoutMore={!search} layout={'column'} />\n        </Aside>\n      }\n    />\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let scaffold = null\n\n  try {\n    const response = await client.query({ query: queries.GET_META_SCAFFOLD })\n\n    if (response && response.data) {\n      scaffold = response.data.getDashboardSettings?.scaffold\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        scaffold\n      }\n    }\n  }\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}
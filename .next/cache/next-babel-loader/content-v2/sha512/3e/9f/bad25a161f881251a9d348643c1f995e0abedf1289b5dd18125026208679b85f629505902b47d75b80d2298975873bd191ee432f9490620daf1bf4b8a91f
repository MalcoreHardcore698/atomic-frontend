{"ast":null,"code":"import React, { useEffect, useMemo, useRef } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { v4 } from 'uuid';\nimport Column from '../../atomic-ui/components/Column';\nimport Row from '../../atomic-ui/components/Row';\nimport Switch from '../../atomic-ui/components/Switch';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Transition from '../../atomic-ui/components/Transition';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"FilterBar__Wrap\",\n  componentId: \"sc-1lvfs1u-0\"\n})([\"width:100%;&.fade-enter{opacity:0;}&.fade-enter-active{opacity:1;transition:opacity 100ms,blur 100ms;}&.fade-exit{opacity:1;}&.fade-exit-active{opacity:0;transition:opacity 100ms,blur 100ms;}\"]);\nexport const Form = styled.form.withConfig({\n  displayName: \"FilterBar__Form\",\n  componentId: \"sc-1lvfs1u-1\"\n})([\"display:flex;flex-direction:column;grid-gap:var(--degault-gap);width:100%;\"]);\nexport const List = styled(Row).withConfig({\n  displayName: \"FilterBar__List\",\n  componentId: \"sc-1lvfs1u-2\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(256px,1fr));@media only screen and (max-width:480px){grid-gap:var(--default-gap);}\"]);\nexport const Filter = ({\n  isOpen = true,\n  duration,\n  sort,\n  filter\n}) => {\n  const {\n    watch,\n    control,\n    handleSubmit\n  } = useForm();\n  const formRef = useRef(null);\n  const state = watch();\n  const form = useMemo(() => formRef === null || formRef === void 0 ? void 0 : formRef.current, [formRef]);\n\n  const onSubmit = form => {\n    console.log(form);\n  };\n\n  const filters = useMemo(() => (filter || []).map(filter => {\n    switch (filter.type) {\n      case 'DATEPICKER':\n        return /*#__PURE__*/React.createElement(Controller, {\n          key: v4(),\n          control: control,\n          name: filter.name,\n          render: ({\n            value,\n            onChange\n          }) => /*#__PURE__*/React.createElement(DatePicker, {\n            query: filter.query,\n            variables: filter.variables,\n            placeholder: filter.label,\n            defaultValue: value,\n            onChange: onChange,\n            withNavigate: true\n          })\n        });\n\n      case 'SELECT':\n        return /*#__PURE__*/React.createElement(Controller, {\n          key: v4(),\n          control: control,\n          name: filter.name,\n          render: ({\n            value,\n            onChange\n          }) => /*#__PURE__*/React.createElement(Select, {\n            query: filter.query,\n            variables: filter.variables,\n            placeholder: filter.label,\n            defaultValue: value,\n            onChange: onChange\n          })\n        });\n\n      default:\n        return null;\n    }\n  }), [filter]);\n  const options = useMemo(() => sort || [], [sort]);\n  useEffect(() => {\n    if (form) form.submit();\n  }, [state, form]);\n  return /*#__PURE__*/React.createElement(Transition, {\n    in: isOpen,\n    animation: 'fade',\n    timeout: duration\n  }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit(onSubmit)\n  }, /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), filters && filters.length > 0 && /*#__PURE__*/React.createElement(List, null, filters.map(filter => filter)), options && options.length > 0 && /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Controller, {\n    key: v4(),\n    name: 'sort',\n    control: control,\n    defaultValue: options[0],\n    render: ({\n      value,\n      onChange\n    }) => /*#__PURE__*/React.createElement(Switch, {\n      defaultValue: value,\n      onChange: onChange,\n      options: options,\n      stretch: true\n    })\n  })), /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }))));\n};\nFilter.defaultProps = {\n  duration: 150\n};\nexport default Filter;","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/components/FilterBar/index.js"],"names":["React","useEffect","useMemo","useRef","Controller","useForm","styled","v4","Column","Row","Switch","Divider","Transition","DatePicker","Select","Wrap","Form","form","List","Filter","isOpen","duration","sort","filter","watch","control","handleSubmit","formRef","state","current","onSubmit","console","log","filters","map","type","name","value","onChange","query","variables","label","options","submit","length","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,MAApC,QAAkD,OAAlD;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,iBAApC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,EAAT,QAAmB,MAAnB;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AAEA,OAAO,MAAMC,IAAI,GAAGT,MAAM,CAACE,MAAD,CAAT;AAAA;AAAA;AAAA,uMAAV;AAsBP,OAAO,MAAMQ,IAAI,GAAGV,MAAM,CAACW,IAAV;AAAA;AAAA;AAAA,kFAAV;AAOP,OAAO,MAAMC,IAAI,GAAGZ,MAAM,CAACG,GAAD,CAAT;AAAA;AAAA;AAAA,oJAAV;AASP,OAAO,MAAMU,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAM,GAAG,IAAX;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA,IAA3B;AAAiCC,EAAAA;AAAjC,CAAD,KAA+C;AACnE,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAAmCrB,OAAO,EAAhD;AACA,QAAMsB,OAAO,GAAGxB,MAAM,CAAC,IAAD,CAAtB;AAEA,QAAMyB,KAAK,GAAGJ,KAAK,EAAnB;AAEA,QAAMP,IAAI,GAAGf,OAAO,CAAC,MAAMyB,OAAN,aAAMA,OAAN,uBAAMA,OAAO,CAAEE,OAAhB,EAAyB,CAACF,OAAD,CAAzB,CAApB;;AAEA,QAAMG,QAAQ,GAAIb,IAAD,IAAU;AACzBc,IAAAA,OAAO,CAACC,GAAR,CAAYf,IAAZ;AACD,GAFD;;AAIA,QAAMgB,OAAO,GAAG/B,OAAO,CAAC,MAAM,CAACqB,MAAM,IAAI,EAAX,EAAeW,GAAf,CAAoBX,MAAD,IAAY;AAC3D,YAAQA,MAAM,CAACY,IAAf;AACE,WAAK,YAAL;AACE,4BACE,oBAAC,UAAD;AACE,UAAA,GAAG,EAAE5B,EAAE,EADT;AAEE,UAAA,OAAO,EAAEkB,OAFX;AAGE,UAAA,IAAI,EAAEF,MAAM,CAACa,IAHf;AAIE,UAAA,MAAM,EAAE,CAAC;AAAEC,YAAAA,KAAF;AAASC,YAAAA;AAAT,WAAD,kBACN,oBAAC,UAAD;AACE,YAAA,KAAK,EAAEf,MAAM,CAACgB,KADhB;AAEE,YAAA,SAAS,EAAEhB,MAAM,CAACiB,SAFpB;AAGE,YAAA,WAAW,EAAEjB,MAAM,CAACkB,KAHtB;AAIE,YAAA,YAAY,EAAEJ,KAJhB;AAKE,YAAA,QAAQ,EAAEC,QALZ;AAME,YAAA,YAAY;AANd;AALJ,UADF;;AAiBF,WAAK,QAAL;AACE,4BACE,oBAAC,UAAD;AACE,UAAA,GAAG,EAAE/B,EAAE,EADT;AAEE,UAAA,OAAO,EAAEkB,OAFX;AAGE,UAAA,IAAI,EAAEF,MAAM,CAACa,IAHf;AAIE,UAAA,MAAM,EAAE,CAAC;AAAEC,YAAAA,KAAF;AAASC,YAAAA;AAAT,WAAD,kBACN,oBAAC,MAAD;AACE,YAAA,KAAK,EAAEf,MAAM,CAACgB,KADhB;AAEE,YAAA,SAAS,EAAEhB,MAAM,CAACiB,SAFpB;AAGE,YAAA,WAAW,EAAEjB,MAAM,CAACkB,KAHtB;AAIE,YAAA,YAAY,EAAEJ,KAJhB;AAKE,YAAA,QAAQ,EAAEC;AALZ;AALJ,UADF;;AAgBF;AACE,eAAO,IAAP;AArCJ;AAuCD,GAxC6B,CAAP,EAwCnB,CAACf,MAAD,CAxCmB,CAAvB;AA0CA,QAAMmB,OAAO,GAAGxC,OAAO,CAAC,MAAMoB,IAAI,IAAI,EAAf,EAAmB,CAACA,IAAD,CAAnB,CAAvB;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,IAAJ,EAAUA,IAAI,CAAC0B,MAAL;AACX,GAFQ,EAEN,CAACf,KAAD,EAAQX,IAAR,CAFM,CAAT;AAIA,sBACE,oBAAC,UAAD;AAAY,IAAA,EAAE,EAAEG,MAAhB;AAAwB,IAAA,SAAS,EAAE,MAAnC;AAA2C,IAAA,OAAO,EAAEC;AAApD,kBACE,oBAAC,IAAD,qBACE,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEM,OAAX;AAAoB,IAAA,QAAQ,EAAED,YAAY,CAACI,QAAD;AAA1C,kBACE,oBAAC,OAAD;AAAS,IAAA,KAAK;AAAd,IADF,EAEGG,OAAO,IAAIA,OAAO,CAACW,MAAR,GAAiB,CAA5B,iBAAiC,oBAAC,IAAD,QAAOX,OAAO,CAACC,GAAR,CAAaX,MAAD,IAAYA,MAAxB,CAAP,CAFpC,EAGGmB,OAAO,IAAIA,OAAO,CAACE,MAAR,GAAiB,CAA5B,iBACC,oBAAC,GAAD,qBACE,oBAAC,UAAD;AACC,IAAA,GAAG,EAAErC,EAAE,EADR;AAEC,IAAA,IAAI,EAAE,MAFP;AAGC,IAAA,OAAO,EAAEkB,OAHV;AAIC,IAAA,YAAY,EAAEiB,OAAO,CAAC,CAAD,CAJtB;AAKC,IAAA,MAAM,EAAE,CAAC;AAAEL,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,kBACP,oBAAC,MAAD;AACE,MAAA,YAAY,EAAED,KADhB;AAEE,MAAA,QAAQ,EAAEC,QAFZ;AAGE,MAAA,OAAO,EAAEI,OAHX;AAIE,MAAA,OAAO;AAJT;AANF,IADF,CAJJ,eAqBE,oBAAC,OAAD;AAAS,IAAA,KAAK;AAAd,IArBF,CADF,CADF,CADF;AA6BD,CAzFM;AA2FPvB,MAAM,CAAC0B,YAAP,GAAsB;AACpBxB,EAAAA,QAAQ,EAAE;AADU,CAAtB;AAIA,eAAeF,MAAf","sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react'\nimport { Controller, useForm } from 'react-hook-form'\nimport styled from 'styled-components'\nimport { v4 } from 'uuid'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Row from '../../atomic-ui/components/Row'\nimport Switch from '../../atomic-ui/components/Switch'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Transition from '../../atomic-ui/components/Transition'\nimport DatePicker from '../../atomic-ui/components/DatePicker'\nimport Select from '../../atomic-ui/components/Select'\n\nexport const Wrap = styled(Column)`\n  width: 100%;\n\n  &.fade-enter {\n    opacity: 0;\n  }\n\n  &.fade-enter-active {\n    opacity: 1;\n    transition: opacity 100ms, blur 100ms;\n  }\n\n  &.fade-exit {\n    opacity: 1;\n  }\n\n  &.fade-exit-active {\n    opacity: 0;\n    transition: opacity 100ms, blur 100ms;\n  }\n`\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  grid-gap: var(--degault-gap);\n  width: 100%;\n`\n\nexport const List = styled(Row)`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(256px, 1fr));\n\n  @media only screen and (max-width: 480px) {\n    grid-gap: var(--default-gap);\n  }\n`\n\nexport const Filter = ({ isOpen = true, duration, sort, filter }) => {\n  const { watch, control, handleSubmit } = useForm()\n  const formRef = useRef(null)\n\n  const state = watch()\n\n  const form = useMemo(() => formRef?.current, [formRef])\n\n  const onSubmit = (form) => {\n    console.log(form)\n  }\n\n  const filters = useMemo(() => (filter || []).map((filter) => {\n    switch (filter.type) {\n      case 'DATEPICKER':\n        return (\n          <Controller\n            key={v4()}\n            control={control}\n            name={filter.name}\n            render={({ value, onChange }) => (\n              <DatePicker\n                query={filter.query}\n                variables={filter.variables}\n                placeholder={filter.label}\n                defaultValue={value}\n                onChange={onChange}\n                withNavigate\n              />\n            )}\n          />\n        )\n      case 'SELECT':\n        return (\n          <Controller\n            key={v4()}\n            control={control}\n            name={filter.name}\n            render={({ value, onChange }) => (\n              <Select\n                query={filter.query}\n                variables={filter.variables}\n                placeholder={filter.label}\n                defaultValue={value}\n                onChange={onChange}\n              />\n            )}\n          />\n        )\n      default:\n        return null\n    }\n  }), [filter])\n\n  const options = useMemo(() => sort || [], [sort])\n\n  useEffect(() => {\n    if (form) form.submit()\n  }, [state, form])\n\n  return (\n    <Transition in={isOpen} animation={'fade'} timeout={duration}>\n      <Wrap>\n        <Form ref={formRef} onSubmit={handleSubmit(onSubmit)}>\n          <Divider clear />\n          {filters && filters.length > 0 && <List>{filters.map((filter) => filter)}</List>}\n          {options && options.length > 0 && (\n            <Row>\n              <Controller\n               key={v4()}\n               name={'sort'}\n               control={control}\n               defaultValue={options[0]}\n               render={({ value, onChange }) => (\n                <Switch\n                  defaultValue={value}\n                  onChange={onChange}\n                  options={options}\n                  stretch\n                />\n               )}\n              />\n            </Row>\n          )}\n          <Divider clear />\n        </Form>\n      </Wrap>\n    </Transition>\n  )\n}\n\nFilter.defaultProps = {\n  duration: 150\n}\n\nexport default Filter\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch';\nimport { Card } from '../../layouts/dashboard/content';\nimport { setModal } from '../../store/actions/modal';\nimport { useUser } from '../../hooks/useUser';\nconst hooks = {\n  useUser\n};\n\nconst CardWrapper = ({\n  item\n}) => {\n  const props = hookName && hooks[hookName] ? hooks[hookName]() : {};\n  const dispatch = useDispatch();\n\n  const hideModal = () => dispatch(setModal(null));\n\n  return /*#__PURE__*/React.createElement(Card, {\n    key: item.id || item.email,\n    item: item,\n    appearance: 'clear',\n    component: elem.render(item, props),\n    onLink: hideModal,\n    onEdit: hideModal,\n    onDelete: hideModal,\n    withoutChecked: true\n  });\n};\n\nexport const Query = memo(({\n  data,\n  loading,\n  search,\n  entity,\n  entities,\n  onChange,\n  onSubmit\n}) => /*#__PURE__*/React.createElement(GlobalSearch, {\n  search: search,\n  loading: loading,\n  initialEntity: entity,\n  result: search && data && entity && data[entity === null || entity === void 0 ? void 0 : entity.value],\n  entities: (entities || []).map(elem => ({ ...elem,\n    render: item => /*#__PURE__*/React.createElement(CardWrapper, {\n      item: item\n    })\n  })),\n  onSubmit: onSubmit,\n  onChange: onChange\n}));\nexport const QuerySearch = memo(({\n  search,\n  entity,\n  entities,\n  setSearch,\n  onHide,\n  onChange\n}) => {\n  const initialResult = [null, {\n    data: null,\n    loading: false,\n    refetch: null\n  }];\n  const [load, {\n    data,\n    loading,\n    refetch\n  }] = entity ? useLazyQuery(entity.query) : initialResult;\n\n  const onSubmit = value => {\n    const variables = {\n      search: value\n    };\n    if (setSearch) setSearch(value);\n\n    if (value) {\n      if (refetch) {\n        refetch(variables);\n      }\n\n      if (load) {\n        load({\n          variables\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Query, {\n    data: data,\n    entity: entity,\n    search: search,\n    loading: loading,\n    entities: entities,\n    onHide: onHide,\n    onChange: onChange,\n    onSubmit: onSubmit\n  });\n});\nexport default QuerySearch;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/QuerySearch/index.js"],"names":["React","memo","useDispatch","useLazyQuery","GlobalSearch","Card","setModal","useUser","hooks","CardWrapper","item","props","hookName","dispatch","hideModal","id","email","elem","render","Query","data","loading","search","entity","entities","onChange","onSubmit","value","map","QuerySearch","setSearch","onHide","initialResult","refetch","load","query","variables"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch'\n\nimport { Card } from '../../layouts/dashboard/content'\nimport { setModal } from '../../store/actions/modal'\nimport { useUser } from '../../hooks/useUser'\n\nconst hooks = {\n  useUser\n}\n\nconst CardWrapper = ({ item }) => {\n  const props = hookName && hooks[hookName] ? hooks[hookName]() : {}\n  const dispatch = useDispatch()\n\n  const hideModal = () => dispatch(setModal(null))\n\n  return (\n    <Card\n      key={item.id || item.email}\n      item={item}\n      appearance={'clear'}\n      component={elem.render(item, props)}\n      onLink={hideModal}\n      onEdit={hideModal}\n      onDelete={hideModal}\n      withoutChecked\n    />\n  )\n}\n\nexport const Query = memo(({ data, loading, search, entity, entities, onChange, onSubmit }) => (\n  <GlobalSearch\n    search={search}\n    loading={loading}\n    initialEntity={entity}\n    result={search && data && entity && data[entity?.value]}\n    entities={(entities || []).map((elem) => ({\n      ...elem,\n      render: (item) => <CardWrapper item={item} />\n    }))}\n    onSubmit={onSubmit}\n    onChange={onChange}\n  />\n))\n\nexport const QuerySearch = memo(({ search, entity, entities, setSearch, onHide, onChange }) => {\n  const initialResult = [null, { data: null, loading: false, refetch: null }]\n  const [load, { data, loading, refetch }] = entity ? useLazyQuery(entity.query) : initialResult\n\n  const onSubmit = (value) => {\n    const variables = { search: value }\n\n    if (setSearch) setSearch(value)\n\n    if (value) {\n      if (refetch) {\n        refetch(variables)\n      }\n      if (load) {\n        load({ variables })\n      }\n    }\n  }\n\n  return (\n    <Query\n      data={data}\n      entity={entity}\n      search={search}\n      loading={loading}\n      entities={entities}\n      onHide={onHide}\n      onChange={onChange}\n      onSubmit={onSubmit}\n    />\n  )\n})\n\nexport default QuerySearch\n"]},"metadata":{},"sourceType":"module"}
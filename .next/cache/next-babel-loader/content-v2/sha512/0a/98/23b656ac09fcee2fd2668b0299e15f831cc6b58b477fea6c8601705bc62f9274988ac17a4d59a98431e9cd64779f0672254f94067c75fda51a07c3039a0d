{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport ProjectCard from '../ProjectCard';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport { updateUser } from '../../store/actions/user';\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user';\nimport { onProjectAdd, onProjectLink, onProjectScreenshot } from '../../store/helpers/project';\nimport queries from '../../graphql/queries';\nexport var Wrap = styled.div.withConfig({\n  displayName: \"ProjectList__Wrap\",\n  componentId: \"zcwfmw-0\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);grid-auto-rows:max-content;@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\nexport var ProjectList = function ProjectList(_ref) {\n  var variables = _ref.variables,\n      layout = _ref.layout,\n      initialList = _ref.initialList;\n  var recall = useHelper();\n  var mutate = useMutate();\n  var user = useSelector(function (state) {\n    return state.user;\n  });\n\n  var _useState = useState(initialList || []),\n      _useState2 = _slicedToArray(_useState, 2),\n      projects = _useState2[0],\n      setProjects = _useState2[1];\n\n  var dispatch = useDispatch();\n\n  var _ref2 = initialList ? {\n    data: null,\n    loading: false,\n    error: false\n  } : useQuery(queries.GET_PROJECTS, {\n    variables: variables\n  }),\n      data = _ref2.data,\n      loading = _ref2.loading,\n      error = _ref2.error;\n\n  useEffect(function () {\n    if (!loading && data) {\n      setProjects(data.getProjects);\n    }\n  }, [data, loading]);\n  useEffect(function () {\n    if ((initialList === null || initialList === void 0 ? void 0 : initialList.length) > 0) setProjects(initialList);\n  }, [initialList]);\n  return /*#__PURE__*/React.createElement(Wrap, null, !loading && data || projects.length > 0 ? projects.map(function (project) {\n    var _user$projects, _user$folders, _project$company;\n\n    var owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(function (candidate) {\n      return candidate.id === project.id;\n    });\n    return /*#__PURE__*/React.createElement(LazyLoad, {\n      key: project.id\n    }, /*#__PURE__*/React.createElement(ProjectCard, {\n      project: project,\n      layout: layout || 'column',\n      owned: owned,\n      added: !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(function (folder) {\n        return !!(folder !== null && folder !== void 0 && folder.projects.find(function (item) {\n          return item.id === project.id;\n        }));\n      })),\n      liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(function (item) {\n        return item.id === project.id;\n      }),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(function (item) {\n          return item.id === project.id;\n        }),\n        onLike: user.email && mutate(queries.LIKE_PROJECT, {\n          id: project.id\n        }, function (response) {\n          return dispatch(updateUser(response.data.likeProject));\n        }),\n        onAdd: user.email && recall(onProjectAdd, {\n          id: project.id,\n          folders: user === null || user === void 0 ? void 0 : user.folders,\n          mutations: {\n            addProject: queries.ADD_USER_PROJECT,\n            createFolder: queries.ADD_USER_FOLDER\n          }\n        }),\n        owned: owned\n      }),\n      onLike: user.email && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, function (response) {\n        return dispatch(updateUser(response.data.likeProject));\n      }),\n      onAdd: user.email && recall(onProjectAdd, {\n        id: project.id,\n        folders: user === null || user === void 0 ? void 0 : user.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      onScreenshotClick: function onScreenshotClick(_, key) {\n        return recall(onProjectScreenshot, {\n          screenshots: [project.preview].concat(_toConsumableArray(project.screenshots)),\n          key: key\n        })();\n      }\n    }));\n  }) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\") : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\"));\n};\nexport default ProjectList;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/ProjectList/index.js"],"names":["React","useState","useEffect","styled","useQuery","useDispatch","useSelector","Alert","Spinner","Loader","LazyLoad","ProjectCard","useHelper","useMutate","updateUser","onUserAboutMore","onUserLink","onProjectAdd","onProjectLink","onProjectScreenshot","queries","Wrap","div","ProjectList","variables","layout","initialList","recall","mutate","user","state","projects","setProjects","dispatch","data","loading","error","GET_PROJECTS","getProjects","length","map","project","owned","find","candidate","id","folders","folder","item","likedProjects","auth","email","liked","onLike","LIKE_PROJECT","response","likeProject","onAdd","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","company","recipient","author","query","GET_USER_CHATS","mutation","SEND_MESSAGE","_","key","screenshots","preview","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\nimport ProjectCard from '../ProjectCard'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\nimport { updateUser } from '../../store/actions/user'\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user'\nimport { onProjectAdd, onProjectLink, onProjectScreenshot } from '../../store/helpers/project'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n  grid-auto-rows: max-content;\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nexport const ProjectList = ({ variables, layout, initialList }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const user = useSelector((state) => state.user)\n  const [projects, setProjects] = useState(initialList || [])\n  const dispatch = useDispatch()\n\n  const { data, loading, error } = initialList\n    ? { data: null, loading: false, error: false }\n    : useQuery(queries.GET_PROJECTS, { variables })\n\n  useEffect(() => {\n    if (!loading && data) {\n      setProjects(data.getProjects)\n    }\n  }, [data, loading])\n\n  useEffect(() => {\n    if (initialList?.length > 0) setProjects(initialList)\n  }, [initialList])\n\n  return (\n    <Wrap>\n      {(!loading && data) || projects.length > 0 ? (\n        projects.map((project) => {\n          const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n\n          return (\n            <LazyLoad key={project.id}>\n              <ProjectCard\n                project={project}\n                layout={layout || 'column'}\n                owned={owned}\n                added={\n                  !!user?.folders?.find(\n                    (folder) => !!folder?.projects.find((item) => item.id === project.id)\n                  )\n                }\n                liked={!!(user?.likedProjects || []).find((item) => item.id === project.id)}\n                onLink={recall(onProjectLink, {\n                  id: project.id,\n                  auth: user?.email,\n                  liked: !!(user?.likedProjects || []).find((item) => item.id === project.id),\n                  onLike:\n                    user.email &&\n                    mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                      dispatch(updateUser(response.data.likeProject))\n                    ),\n                  onAdd:\n                    user.email &&\n                    recall(onProjectAdd, {\n                      id: project.id,\n                      folders: user?.folders,\n                      mutations: {\n                        addProject: queries.ADD_USER_PROJECT,\n                        createFolder: queries.ADD_USER_FOLDER\n                      }\n                    }),\n                  owned\n                })}\n                onLike={\n                  user.email &&\n                  mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                    dispatch(updateUser(response.data.likeProject))\n                  )\n                }\n                onAdd={\n                  user.email &&\n                  recall(onProjectAdd, {\n                    id: project.id,\n                    folders: user?.folders,\n                    mutations: {\n                      addProject: queries.ADD_USER_PROJECT,\n                      createFolder: queries.ADD_USER_FOLDER\n                    }\n                  })\n                }\n                onAboutMore={recall(onUserAboutMore, { user: project })}\n                onCompanyLink={recall(onUserLink, {\n                  id: project.company?.email,\n                  auth: user?.email,\n                  recipient: project.author,\n                  query: queries.GET_USER_CHATS,\n                  mutation: queries.SEND_MESSAGE\n                })}\n                onScreenshotClick={(_, key) =>\n                  recall(onProjectScreenshot, {\n                    screenshots: [project.preview, ...project.screenshots],\n                    key\n                  })()\n                }\n              />\n            </LazyLoad>\n          )\n        })\n      ) : error ? (\n        <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n          Не удалось загрузить данные\n        </Alert>\n      ) : loading ? (\n        <Loader>\n          <Spinner />\n        </Loader>\n      ) : (\n        <Alert style={{ width: '100%', textAlign: 'center' }}>Проектов нет</Alert>\n      )}\n    </Wrap>\n  )\n}\n\nexport default ProjectList\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Button from '../Button';\nexport const Wrap = styled(Row)`\n  display: inline-block\n  white-space: nowrap\n  overflow: hidden\n  text-overflow: ellipsis\n`;\nexport const BreadButton = styled(Button)`\n  ${({\n  disabled\n}) => disabled ? css`\n          background: none;\n          border: none;\n\n          &:hover {\n            background: none;\n            border: none;\n            color: var(--ghost-color-text);\n          }\n        ` : css`\n          color: var(--default-color-active);\n          border: none;\n          transition: opacity 150ms ease;\n\n          &:hover {\n            opacity: 0.75;\n            border: none;\n          }\n        `}\n`;\nexport const Delimiter = styled.span`\n  color: var(--input-placeholder-color);\n`;\nexport const BreadCrumb = ({\n  label,\n  callback,\n  active\n}) => __jsx(BreadButton, {\n  appearance: 'clear',\n  disabled: !active,\n  onClick: callback\n}, label);\nexport const BreadCrumbs = (_ref) => {\n  let {\n    links,\n    callback\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"links\", \"callback\"]);\n\n  return __jsx(Wrap, props, (links || []).map((link, index) => __jsx(React.Fragment, {\n    key: index\n  }, __jsx(BreadCrumb, {\n    label: link.label,\n    callback: () => callback(link.path),\n    active: !!link.path\n  }), index % 2 === 0 && index !== links.length - 1 && __jsx(Delimiter, null, \"/\"))));\n};\nexport default BreadCrumbs;","map":null,"metadata":{},"sourceType":"module"}
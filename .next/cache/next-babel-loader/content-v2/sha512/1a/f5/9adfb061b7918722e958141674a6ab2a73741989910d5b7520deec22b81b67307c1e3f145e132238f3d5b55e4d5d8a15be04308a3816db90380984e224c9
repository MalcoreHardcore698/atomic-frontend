{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../../apollo';\nimport { useHelper } from '../../hooks/useHelper';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport UserCard from '../../components/ArticleCard';\nimport { onUserCreate, onUserEdit, onUserDelete, onUserLink } from '../../store/helpers/user';\nimport { setDocuments } from '../../store/actions/documents';\nimport { onChat } from '../../store/helpers';\nimport queries from '../../graphql/queries';\nimport { categories } from '../../__mock__';\nconst TITLE = 'Пользователи';\n\nconst Users = ({\n  store\n}) => {\n  const recall = useHelper();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  const users = useMemo(() => documents || store.users, [documents, store]);\n  const roles = useMemo(() => store.roles, [store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'user2',\n    title: TITLE,\n    buttonCreateText: 'Создать пользователя',\n    onCreate: recall(onUserCreate, {\n      roles,\n      canEditRole,\n      mutation: queries.CREATE_USER\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: displayMethod === 'list' ? [] : templates.user.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), users.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: users,\n    template: templates.user,\n    onChecked: () => {},\n    onClick: author => {\n      const owned = author.name === user.name;\n      return recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })();\n    },\n    onDelete: author => recall(onUserDelete, {\n      id: author.email,\n      user: author,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      mutation: queries.DELETE_USER\n    })(),\n    onEdit: author => recall(onUserEdit, {\n      user: author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      roles,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      }\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, users.map(author => {\n    const owned = author.name === user.name;\n    return /*#__PURE__*/React.createElement(UserCard, {\n      key: author.email,\n      user: author,\n      onChecked: () => {},\n      onChat: user.email && recall(onChat, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onDelete: recall(onUserDelete, {\n        id: author.email,\n        user: author,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        mutation: queries.DELETE_USER\n      }),\n      onEdit: recall(onUserEdit, {\n        user: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        roles,\n        canEditRole,\n        mutations: {\n          update: queries.UPDATE_USER,\n          del: queries.DELETE_USER,\n          changePassword: queries.UPDATE_USER\n        }\n      }),\n      preview: true\n    });\n  })));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let users = [];\n  let roles = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_USERS\n    });\n\n    if (response && response.data) {\n      users = response.data.getUsers;\n      roles = response.data.getRoles;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        users,\n        roles\n      }\n    }\n  };\n}\nexport default Users;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/users.js"],"names":["React","useState","useEffect","useMemo","useDispatch","useSelector","Grid","Alert","DatePicker","Select","Table","templates","initializeApollo","useHelper","DashboardLayout","HandleBar","FilterBar","UserCard","onUserCreate","onUserEdit","onUserDelete","onUserLink","setDocuments","onChat","queries","categories","TITLE","Users","store","recall","user","documents","state","dispatch","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","displayMethod","onChangeDisplayMethod","canEditRole","role","name","users","roles","mutation","CREATE_USER","item","value","map","index","label","header","length","width","textAlign","author","owned","id","email","auth","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","DELETE_USER","update","UPDATE_USER","del","changePassword","overflowX","getServerSideProps","client","response","query","GET_META_DASHBOARD_USERS","data","getUsers","getRoles","err","console","log","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Grid from '../../atomic-ui/components/Grid'\nimport Alert from '../../atomic-ui/components/Alert'\nimport DatePicker from '../../atomic-ui/components/DatePicker'\nimport Select from '../../atomic-ui/components/Select'\nimport Table from '../../atomic-ui/components/Table'\nimport templates from '../../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport DashboardLayout from '../../layouts/dashboard'\nimport HandleBar from '../../components/HandleBar'\nimport FilterBar from '../../components/FilterBar'\nimport UserCard from '../../components/ArticleCard'\nimport { onUserCreate, onUserEdit, onUserDelete, onUserLink } from '../../store/helpers/user'\nimport { setDocuments } from '../../store/actions/documents'\nimport { onChat } from '../../store/helpers'\nimport queries from '../../graphql/queries'\nimport { categories } from '../../__mock__'\n\nconst TITLE = 'Пользователи'\n\nconst Users = ({ store }) => {\n  const recall = useHelper()\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    documents: state.documents\n  }))\n  const dispatch = useDispatch()\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  const users = useMemo(() => documents || store.users, [documents, store])\n  const roles = useMemo(() => store.roles, [store])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <HandleBar\n        icon={'user2'}\n        title={TITLE}\n        buttonCreateText={'Создать пользователя'}\n        onCreate={recall(onUserCreate, {\n          roles,\n          canEditRole,\n          mutation: queries.CREATE_USER\n        })}\n        onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n        onChangeDisplayMethod={(item) => onChangeDisplayMethod(item.value)}\n      />\n\n      <FilterBar\n        isOpen={visibleFilter}\n        filters={[\n          <DatePicker\n            key={0}\n            value={date}\n            placeholder={'Дата публикации'}\n            onChange={onChangeDate}\n            withNavigate\n          />,\n          <Select\n            key={1}\n            options={categories}\n            placeholder={'Раздел'}\n            selected={select}\n            onChange={(item) => onChangeSelect(item)}\n          />\n        ]}\n        options={\n          displayMethod === 'list'\n            ? []\n            : templates.user.map((item, index) => ({\n                label: item.header,\n                value: index\n              }))\n        }\n      />\n\n      {users.length === 0 && (\n        <Alert style={{ width: '100%', textAlign: 'center' }}>Пользователей нет</Alert>\n      )}\n\n      {displayMethod === 'list' && (\n        <Table\n          data={users}\n          template={templates.user}\n          onChecked={() => {}}\n          onClick={(author) => {\n            const owned = author.name === user.name\n\n            return recall(onUserLink, {\n              id: author.email,\n              auth: user?.email,\n              owned,\n              queries: {\n                userChats: queries.GET_USER_CHATS,\n                chat: queries.GET_CHAT\n              },\n              mutations: {\n                addUserChat: queries.ADD_USER_CHAT,\n                sendMessage: queries.SEND_MESSAGE\n              }\n            })()\n          }}\n          onDelete={(author) =>\n            recall(onUserDelete, {\n              id: author.email,\n              user: author,\n              auth: user?.email,\n              mutation: queries.DELETE_USER\n            })()\n          }\n          onEdit={(author) =>\n            recall(onUserEdit, {\n              user: author.email,\n              auth: user?.email,\n              roles,\n              canEditRole,\n              mutations: {\n                update: queries.UPDATE_USER,\n                del: queries.DELETE_USER,\n                changePassword: queries.UPDATE_USER\n              }\n            })()\n          }\n          style={{ overflowX: 'auto', width: 'calc(100vw - 290px)' }}\n        />\n      )}\n\n      {displayMethod === 'grid' && (\n        <Grid>\n          {users.map((author) => {\n            const owned = author.name === user.name\n\n            return (\n              <UserCard\n                key={author.email}\n                user={author}\n                onChecked={() => {}}\n                onChat={\n                  user.email &&\n                  recall(onChat, {\n                    id: author.email,\n                    auth: user?.email,\n                    queries: {\n                      userChats: queries.GET_USER_CHATS,\n                      chat: queries.GET_CHAT\n                    },\n                    mutations: {\n                      addUserChat: queries.ADD_USER_CHAT,\n                      sendMessage: queries.SEND_MESSAGE\n                    }\n                  })\n                }\n                onLink={recall(onUserLink, {\n                  id: author.email,\n                  auth: user?.email,\n                  owned,\n                  queries: {\n                    userChats: queries.GET_USER_CHATS,\n                    chat: queries.GET_CHAT\n                  },\n                  mutations: {\n                    addUserChat: queries.ADD_USER_CHAT,\n                    sendMessage: queries.SEND_MESSAGE\n                  }\n                })}\n                onDelete={recall(onUserDelete, {\n                  id: author.email,\n                  user: author,\n                  auth: user?.email,\n                  mutation: queries.DELETE_USER\n                })}\n                onEdit={recall(onUserEdit, {\n                  user: author.email,\n                  auth: user?.email,\n                  roles,\n                  canEditRole,\n                  mutations: {\n                    update: queries.UPDATE_USER,\n                    del: queries.DELETE_USER,\n                    changePassword: queries.UPDATE_USER\n                  }\n                })}\n                preview\n              />\n            )\n          })}\n        </Grid>\n      )}\n    </DashboardLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let users = []\n  let roles = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_USERS\n    })\n\n    if (response && response.data) {\n      users = response.data.getUsers\n      roles = response.data.getRoles\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { users, roles }\n    }\n  }\n}\n\nexport default Users\n"]},"metadata":{},"sourceType":"module"}
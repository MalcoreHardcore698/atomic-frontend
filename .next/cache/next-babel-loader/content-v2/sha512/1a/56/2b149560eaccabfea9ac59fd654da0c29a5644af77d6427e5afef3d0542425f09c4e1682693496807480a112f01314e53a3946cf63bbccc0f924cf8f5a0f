{"ast":null,"code":"import React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport { CardContent, Surface } from '../Styled';\nimport CardActions from '../CardActions';\nimport { onTicketDelete, onTicketEdit } from '../../store/helpers/ticket';\nimport { useEntityQuery } from '../../hooks/useEntityQuery';\nimport { useHelper } from '../../hooks/useHelper';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Surface).withConfig({\n  displayName: \"TicketCard__Wrap\",\n  componentId: \"sc-3sqqk7-0\"\n})([\"grid-gap:var(--default-gap);height:100%;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"TicketCard__Header\",\n  componentId: \"sc-3sqqk7-1\"\n})([\"justify-content:space-between;align-items:center;\"]);\nexport const Actions = styled(Row).withConfig({\n  displayName: \"TicketCard__Actions\",\n  componentId: \"sc-3sqqk7-2\"\n})([\"grid-gap:5px;height:100%;\"]);\nexport const Name = styled(Title).withConfig({\n  displayName: \"TicketCard__Name\",\n  componentId: \"sc-3sqqk7-3\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\nexport const Status = styled(Text).withConfig({\n  displayName: \"TicketCard__Status\",\n  componentId: \"sc-3sqqk7-4\"\n})([\"color:\", \";\"], ({\n  status\n}) => `var(--default-color-${status === 'OPENED' ? 'accent' : 'red'})`);\nexport const Footer = styled(Row).withConfig({\n  displayName: \"TicketCard__Footer\",\n  componentId: \"sc-3sqqk7-5\"\n})([\"justify-content:space-between;align-items:center;flex-grow:1;\"]);\nexport const Card = ({\n  ticket,\n  checked,\n  appearance,\n  className,\n  style,\n  onLink,\n  onAuthorLink,\n  onChecked,\n  onEdit,\n  onDelete\n}) => {\n  var _ticket$category, _ticket$author, _ticket$author$avatar, _ticket$author2, _ticket$messages;\n\n  const recall = useHelper();\n  const {\n    setQuery\n  } = useEntityQuery();\n\n  const handleEdit = () => {\n    recall(onTicketEdit, {\n      id: ticket.id,\n      mutation: queries.UPDATE_TICKET\n    })();\n    if (onEdit) onEdit();\n  };\n\n  const handleDelete = () => {\n    recall(onTicketDelete, {\n      ticket,\n      mutation: queries.DELETE_TICKET\n    })();\n    if (onDelete) onDelete();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    checked: checked,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    style: {\n      gridGap: 0\n    },\n    editable: onEdit || onDelete || onChecked\n  }, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Meta, {\n    date: ticket.createdAt,\n    category: (_ticket$category = ticket.category) === null || _ticket$category === void 0 ? void 0 : _ticket$category.name\n  }), /*#__PURE__*/React.createElement(CardActions, {\n    typeText: 'обращение',\n    checked: checked,\n    onEdit: onEdit && handleEdit,\n    onDelete: onDelete && handleDelete,\n    onChecked: onChecked\n  })), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: () => setQuery(ticket.id, 'ticket', onLink)\n  }, ticket.title), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      gridGap: 5\n    }\n  }, /*#__PURE__*/React.createElement(Status, {\n    status: ticket.status\n  }, ticket.status))), /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Footer, null, /*#__PURE__*/React.createElement(Difinition, {\n    label: 'Автор',\n    img: (_ticket$author = ticket.author) === null || _ticket$author === void 0 ? void 0 : (_ticket$author$avatar = _ticket$author.avatar) === null || _ticket$author$avatar === void 0 ? void 0 : _ticket$author$avatar.path,\n    text: (_ticket$author2 = ticket.author) === null || _ticket$author2 === void 0 ? void 0 : _ticket$author2.name,\n    onLink: onAuthorLink && (() => {\n      var _ticket$author3;\n\n      return onAuthorLink((_ticket$author3 = ticket.author) === null || _ticket$author3 === void 0 ? void 0 : _ticket$author3.email);\n    })\n  }), /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'chat',\n    label: 'Сообщений',\n    text: (_ticket$messages = ticket.messages) === null || _ticket$messages === void 0 ? void 0 : _ticket$messages.length\n  })));\n};\nCard.defaultProps = {\n  appearance: 'default'\n};\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}
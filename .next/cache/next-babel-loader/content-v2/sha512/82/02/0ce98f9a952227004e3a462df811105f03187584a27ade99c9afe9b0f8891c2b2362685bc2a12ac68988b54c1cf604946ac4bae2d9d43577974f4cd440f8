{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Member from '../../atomic-ui/components/Member';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Search from '../../atomic-ui/components/Search';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport { Wrap as WrapForm } from '../Form';\nimport MessengerChat from '../MessengerChat';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Messenger__Wrap\",\n  componentId: \"sc-1hnkbvn-0\"\n})([\"height:100%;flex-grow:1;\", \"{width:100%;padding:0;}@media only screen and (max-width:568px){flex-direction:column;}\", \" \", \" \", \"\"], WrapForm, ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const ChatsSearch = styled(Search).withConfig({\n  displayName: \"Messenger__ChatsSearch\",\n  componentId: \"sc-1hnkbvn-1\"\n})([\"margin-bottom:10px;\"]);\nexport const Chats = styled(Column).withConfig({\n  displayName: \"Messenger__Chats\",\n  componentId: \"sc-1hnkbvn-2\"\n})([\"grid-gap:0;width:320px;@media only screen and (max-width:568px){width:100%;}\"]);\nexport const Chat = styled(Member).withConfig({\n  displayName: \"Messenger__Chat\",\n  componentId: \"sc-1hnkbvn-3\"\n})([\"margin:0;padding:10px 0;border-radius:var(--surface-border-radius);transition:all 150ms ease;\", \"\"], ({\n  active\n}) => active && css([\"background:var(--input-background);padding:10px;\"]));\nexport const getUnreadedMessages = (messages, sender) => (messages || []).reduce((acc, item) => acc + (item.type === 'UNREADED' && item.user.email !== sender.email ? 1 : 0), 0);\nexport const getLastMessage = (messages, sender) => {\n  var _message$user;\n\n  const list = messages || [];\n  const message = list[list.length - 1];\n  return `${((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.email) === sender.email ? 'Вы: ' : ''}${message.text}`;\n};\nexport const Messenger = ({\n  appearance,\n  recipient,\n  sender,\n  onAttach,\n  onMemberLink,\n  ...props\n}) => {\n  const [currentChat, setCurrentChat] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [getChat, {\n    data: chat,\n    loading: loadingChat,\n    refetch: refetchChat\n  }] = useLazyQuery(queries.GET_CHAT);\n  const [getTicket, {\n    data: ticket,\n    loading: loadingTicket,\n    refetch: refetchTicket\n  }] = useLazyQuery(queries.GET_TICKET);\n  const {\n    data: userChats,\n    loading: loadingUserChats,\n    refetch: getUserChats\n  } = useQuery(queries.GET_USER_CHATS);\n  const {\n    data: userTickets,\n    loading: loadingUserTickets,\n    refetch: getUserTickets\n  } = useQuery(queries.GET_USER_TICKETS);\n  const [sendMessage] = useMutation(queries.SEND_MESSAGE);\n  const [sendTicketMessage] = useMutation(queries.SEND_TICKET_MESSAGE);\n  const [addUserChat] = useMutation(queries.ADD_USER_CHAT);\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: {\n          recipient: recipient.email\n        }\n      }).then(() => {\n        getUserChats().then();\n        getUserTickets().then();\n      });\n    }\n  }, [recipient, addUserChat]);\n  useEffect(() => {\n    if (recipient && !currentChat && !loadingUserChats && userChats && userChats.getUserChats) {\n      var _userChats$getUserCha;\n\n      getChat({\n        variables: {\n          id: (_userChats$getUserCha = userChats.getUserChats.find(userChat => userChat.chat.members.find(member => member.name === recipient.name))) === null || _userChats$getUserCha === void 0 ? void 0 : _userChats$getUserCha.chat.id\n        }\n      });\n    }\n  }, [recipient, userChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingChat && chat && chat.getChat) {\n      setCurrentChat(chat.getChat);\n    }\n  }, [chat, loadingChat]);\n  useEffect(() => {\n    if (!loadingTicket && ticket && ticket.getTicket) {\n      setCurrentChat(ticket.getTicket);\n    }\n  }, [ticket, loadingTicket]);\n  useEffect(() => {\n    if (!loadingUserChats && userChats.getUserChats) {\n      setChats(prev => [...prev, ...userChats.getUserChats]);\n    }\n  }, [userChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingUserTickets && userTickets.getUserTickets) {\n      setChats(prev => [...prev, ...userTickets.getUserTickets]);\n    }\n  }, [userTickets, loadingUserTickets]);\n  return /*#__PURE__*/React.createElement(Wrap, _extends({}, props, {\n    appearance: appearance\n  }), /*#__PURE__*/React.createElement(Chats, null, /*#__PURE__*/React.createElement(ChatsSearch, {\n    appearance: 'ghost'\n  }), loadingUserChats && !userChats && /*#__PURE__*/React.createElement(Spinner, null), chats.length > 0 ? chats.map(chat => {\n    var _chat$chat, _chat$chat2, _chat$counsellor, _chat$chat3, _chat$chat3$members$f, _chat$counsellor2, _chat$counsellor2$ava, _chat$chat4, _chat$chat5, _chat$chat6, _chat$chat7, _chat$chat10;\n\n    return /*#__PURE__*/React.createElement(Chat, {\n      key: ((_chat$chat = chat.chat) === null || _chat$chat === void 0 ? void 0 : _chat$chat.id) || chat.id,\n      name: ((_chat$chat2 = chat.chat) === null || _chat$chat2 === void 0 ? void 0 : _chat$chat2.members.filter(member => member.name !== sender.name)[0].name) || ((_chat$counsellor = chat.counsellor) === null || _chat$counsellor === void 0 ? void 0 : _chat$counsellor.name),\n      avatar: ((_chat$chat3 = chat.chat) === null || _chat$chat3 === void 0 ? void 0 : (_chat$chat3$members$f = _chat$chat3.members.filter(member => member.name !== sender.name)[0].avatar) === null || _chat$chat3$members$f === void 0 ? void 0 : _chat$chat3$members$f.path) || ((_chat$counsellor2 = chat.counsellor) === null || _chat$counsellor2 === void 0 ? void 0 : (_chat$counsellor2$ava = _chat$counsellor2.avatar) === null || _chat$counsellor2$ava === void 0 ? void 0 : _chat$counsellor2$ava.path) || '/images/avatar-default.png',\n      budge: ((_chat$chat4 = chat.chat) === null || _chat$chat4 === void 0 ? void 0 : _chat$chat4.messages) && getUnreadedMessages((_chat$chat5 = chat.chat) === null || _chat$chat5 === void 0 ? void 0 : _chat$chat5.messages, sender) || chat.messages && getUnreadedMessages(chat.messages, sender) || null,\n      position: ((_chat$chat6 = chat.chat) === null || _chat$chat6 === void 0 ? void 0 : _chat$chat6.messages) && getLastMessage((_chat$chat7 = chat.chat) === null || _chat$chat7 === void 0 ? void 0 : _chat$chat7.messages, sender) || chat.messages && getLastMessage(chat.messages, sender) || null,\n      onClick: async () => {\n        var _chat$chat8;\n\n        setLoading(true);\n\n        if ((_chat$chat8 = chat.chat) !== null && _chat$chat8 !== void 0 && _chat$chat8.id) {\n          var _chat$chat9;\n\n          const variables = {\n            id: (_chat$chat9 = chat.chat) === null || _chat$chat9 === void 0 ? void 0 : _chat$chat9.id\n          };\n          if (refetchChat) await refetchChat(variables);else await getChat({\n            variables\n          });\n          setCurrentChat(chat.chat);\n        } else {\n          const variables = {\n            id: chat.id\n          };\n          if (refetchTicket) await refetchTicket(variables);\n          await getTicket({\n            variables\n          });\n          setCurrentChat(chat);\n        }\n\n        setLoading(false);\n      },\n      active: currentChat && currentChat.id === (((_chat$chat10 = chat.chat) === null || _chat$chat10 === void 0 ? void 0 : _chat$chat10.id) || chat.id)\n    });\n  }) : loadingUserChats || loadingUserTickets ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      marginTop: 15\n    }\n  }, \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0435 \\u0447\\u0430\\u0442\\u044B \\u043E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u044E\\u0442\")), /*#__PURE__*/React.createElement(MessengerChat, {\n    chat: currentChat && { ...currentChat,\n      messages: currentChat.messages.map(message => ({ ...message,\n        side: sender.name === message.user.name ? 'owner' : 'observer'\n      }))\n    },\n    appearance: 'ghost',\n    loading: loading || loadingChat || loadingUserChats,\n    onLink: onMemberLink,\n    onAttach: onAttach,\n    onSubmit: value => {\n      if (currentChat.chat) {\n        var _currentChat$chat$rec;\n\n        sendMessage({\n          variables: {\n            recipient: (_currentChat$chat$rec = currentChat.chat.recipient) === null || _currentChat$chat$rec === void 0 ? void 0 : _currentChat$chat$rec.email,\n            text: value\n          }\n        });\n      } else {\n        var _currentChat$author;\n\n        sendTicketMessage({\n          variables: {\n            ticket: currentChat.id,\n            recipient: (_currentChat$author = currentChat.author) === null || _currentChat$author === void 0 ? void 0 : _currentChat$author.email,\n            text: value\n          }\n        });\n      }\n    }\n  }));\n};\nMessenger.defaultProps = {\n  appearance: 'default'\n};\nexport default Messenger;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/Messenger/index.js"],"names":["React","useEffect","useState","styled","css","useQuery","useLazyQuery","useMutation","Row","Column","Member","Alert","Search","Spinner","Loader","Wrap","WrapForm","MessengerChat","queries","appearance","ChatsSearch","Chats","Chat","active","getUnreadedMessages","messages","sender","reduce","acc","item","type","user","email","getLastMessage","list","message","length","text","Messenger","recipient","onAttach","onMemberLink","props","currentChat","setCurrentChat","loading","setLoading","chats","setChats","getChat","data","chat","loadingChat","refetch","refetchChat","GET_CHAT","getTicket","ticket","loadingTicket","refetchTicket","GET_TICKET","userChats","loadingUserChats","getUserChats","GET_USER_CHATS","userTickets","loadingUserTickets","getUserTickets","GET_USER_TICKETS","sendMessage","SEND_MESSAGE","sendTicketMessage","SEND_TICKET_MESSAGE","addUserChat","ADD_USER_CHAT","variables","then","id","find","userChat","members","member","name","prev","map","filter","counsellor","avatar","path","marginTop","side","value","author","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled, { css } from 'styled-components'\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Member from '../../atomic-ui/components/Member'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Search from '../../atomic-ui/components/Search'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport { Wrap as WrapForm } from '../Form'\nimport MessengerChat from '../MessengerChat'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled(Row)`\n  height: 100%;\n  flex-grow: 1;\n\n  ${WrapForm} {\n    width: 100%;\n    padding: 0;\n  }\n\n  @media only screen and (max-width: 568px) {\n    flex-direction: column;\n  }\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const ChatsSearch = styled(Search)`\n  margin-bottom: 10px;\n`\n\nexport const Chats = styled(Column)`\n  grid-gap: 0;\n  width: 320px;\n\n  @media only screen and (max-width: 568px) {\n    width: 100%;\n  }\n`\n\nexport const Chat = styled(Member)`\n  margin: 0;\n  padding: 10px 0;\n  border-radius: var(--surface-border-radius);\n  transition: all 150ms ease;\n\n  ${({ active }) =>\n    active &&\n    css`\n      background: var(--input-background);\n      padding: 10px;\n    `}\n`\n\nexport const getUnreadedMessages = (messages, sender) =>\n  (messages || []).reduce(\n    (acc, item) => acc + (item.type === 'UNREADED' && item.user.email !== sender.email ? 1 : 0),\n    0\n  )\n\nexport const getLastMessage = (messages, sender) => {\n  const list = messages || []\n  const message = list[list.length - 1]\n  return `${message.user?.email === sender.email ? 'Вы: ' : ''}${message.text}`\n}\n\nexport const Messenger = ({ appearance, recipient, sender, onAttach, onMemberLink, ...props }) => {\n  const [currentChat, setCurrentChat] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [chats, setChats] = useState([])\n\n  const [getChat, { data: chat, loading: loadingChat, refetch: refetchChat }] = useLazyQuery(\n    queries.GET_CHAT\n  )\n  const [\n    getTicket,\n    { data: ticket, loading: loadingTicket, refetch: refetchTicket }\n  ] = useLazyQuery(queries.GET_TICKET)\n\n  const { data: userChats, loading: loadingUserChats, refetch: getUserChats } = useQuery(\n    queries.GET_USER_CHATS\n  )\n\n  const { data: userTickets, loading: loadingUserTickets, refetch: getUserTickets } = useQuery(\n    queries.GET_USER_TICKETS\n  )\n\n  const [sendMessage] = useMutation(queries.SEND_MESSAGE)\n  const [sendTicketMessage] = useMutation(queries.SEND_TICKET_MESSAGE)\n  const [addUserChat] = useMutation(queries.ADD_USER_CHAT)\n\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: { recipient: recipient.email }\n      }).then(() => {\n        getUserChats().then()\n        getUserTickets().then()\n      })\n    }\n  }, [recipient, addUserChat])\n\n  useEffect(() => {\n    if (recipient && !currentChat && !loadingUserChats && userChats && userChats.getUserChats) {\n      getChat({\n        variables: {\n          id: userChats.getUserChats.find((userChat) =>\n            userChat.chat.members.find((member) => member.name === recipient.name)\n          )?.chat.id\n        }\n      })\n    }\n  }, [recipient, userChats, loadingUserChats])\n\n  useEffect(() => {\n    if (!loadingChat && chat && chat.getChat) {\n      setCurrentChat(chat.getChat)\n    }\n  }, [chat, loadingChat])\n\n  useEffect(() => {\n    if (!loadingTicket && ticket && ticket.getTicket) {\n      setCurrentChat(ticket.getTicket)\n    }\n  }, [ticket, loadingTicket])\n\n  useEffect(() => {\n    if (!loadingUserChats && userChats.getUserChats) {\n      setChats((prev) => [...prev, ...userChats.getUserChats])\n    }\n  }, [userChats, loadingUserChats])\n\n  useEffect(() => {\n    if (!loadingUserTickets && userTickets.getUserTickets) {\n      setChats((prev) => [...prev, ...userTickets.getUserTickets])\n    }\n  }, [userTickets, loadingUserTickets])\n\n  return (\n    <Wrap {...props} appearance={appearance}>\n      <Chats>\n        <ChatsSearch appearance={'ghost'} />\n        {loadingUserChats && !userChats && <Spinner />}\n        {chats.length > 0 ? (\n          chats.map((chat) => (\n            <Chat\n              key={chat.chat?.id || chat.id}\n              name={\n                chat.chat?.members.filter((member) => member.name !== sender.name)[0].name ||\n                chat.counsellor?.name\n              }\n              avatar={\n                chat.chat?.members.filter((member) => member.name !== sender.name)[0].avatar\n                  ?.path ||\n                chat.counsellor?.avatar?.path ||\n                '/images/avatar-default.png'\n              }\n              budge={\n                (chat.chat?.messages && getUnreadedMessages(chat.chat?.messages, sender)) ||\n                (chat.messages && getUnreadedMessages(chat.messages, sender)) ||\n                null\n              }\n              position={\n                (chat.chat?.messages && getLastMessage(chat.chat?.messages, sender)) ||\n                (chat.messages && getLastMessage(chat.messages, sender)) ||\n                null\n              }\n              onClick={async () => {\n                setLoading(true)\n                if (chat.chat?.id) {\n                  const variables = { id: chat.chat?.id }\n                  if (refetchChat) await refetchChat(variables)\n                  else await getChat({ variables })\n                  setCurrentChat(chat.chat)\n                } else {\n                  const variables = { id: chat.id }\n                  if (refetchTicket) await refetchTicket(variables)\n                  await getTicket({ variables })\n                  setCurrentChat(chat)\n                }\n                setLoading(false)\n              }}\n              active={currentChat && currentChat.id === (chat.chat?.id || chat.id)}\n            />\n          ))\n        ) : loadingUserChats || loadingUserTickets ? (\n          <Loader>\n            <Spinner />\n          </Loader>\n        ) : (\n          <Alert style={{ marginTop: 15 }}>Активные чаты отсутствуют</Alert>\n        )}\n      </Chats>\n      <MessengerChat\n        chat={\n          currentChat && {\n            ...currentChat,\n            messages: currentChat.messages.map((message) => ({\n              ...message,\n              side: sender.name === message.user.name ? 'owner' : 'observer'\n            }))\n          }\n        }\n        appearance={'ghost'}\n        loading={loading || loadingChat || loadingUserChats}\n        onLink={onMemberLink}\n        onAttach={onAttach}\n        onSubmit={(value) => {\n          if (currentChat.chat) {\n            sendMessage({\n              variables: {\n                recipient: currentChat.chat.recipient?.email,\n                text: value\n              }\n            })\n          } else {\n            sendTicketMessage({\n              variables: {\n                ticket: currentChat.id,\n                recipient: currentChat.author?.email,\n                text: value\n              }\n            })\n          }\n        }}\n      />\n    </Wrap>\n  )\n}\n\nMessenger.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Messenger\n"]},"metadata":{},"sourceType":"module"}
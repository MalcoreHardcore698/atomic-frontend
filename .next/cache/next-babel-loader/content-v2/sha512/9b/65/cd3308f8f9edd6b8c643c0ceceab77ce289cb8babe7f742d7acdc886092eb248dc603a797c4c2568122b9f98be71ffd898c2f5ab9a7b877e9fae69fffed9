{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Text from '../Text';\nimport Title from '../Title';\nimport Tooltip from '../Tooltip';\nimport Button from '../Button';\nimport Popper, { Wrap as WrapPopper } from '../Popper';\nimport Icon from '../Icon';\nimport Chip from '../Chip';\nimport Actions from './Actions';\nexport const ActionTooltip = styled(Tooltip)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: var(--input-height-s);\n  height: 100%;\n  opacity: 0;\n  visibility: hidden;\n  transition: all 150ms ease;\n\n  svg {\n    path {\n      stroke: var(--ghost-color-text);\n    }\n  }\n\n  .more_square_svg__circle {\n    fill: var(--ghost-color-text);\n    stroke: none;\n  }\n\n  &:hover {\n    svg {\n      path {\n        stroke: black;\n      }\n    }\n\n    .more_square_svg__circle {\n      fill: black;\n      stroke: none;\n    }\n  }\n`;\nexport const Wrap = styled(Row)`\n  position: relative;\n  padding-right: var(--input-height-s);\n  transition: opacity 150ms ease;\n\n  ${WrapPopper} {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: var(--z-10);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n  }\n\n  &:hover {\n    ${ActionTooltip} {\n      opacity: 1;\n      visibility: visible;\n    }\n  }\n`;\nexport const Content = styled(Column)`\n  justify-content: center;\n  grid-gap: 0;\n\n  ${({\n  clickable\n}) => clickable && css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`;\nexport const Image = styled.img`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  border-radius: var(--surface-border-radius);\n  object-fit: cover;\n`;\nexport const RoundedIcon = styled(Icon)`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  background: var(--default-color-${({\n  color\n}) => color || 'accent'}-dim);\n  border-radius: var(--surface-border-radius);\n\n  ${({\n  disabled\n}) => disabled && css`\n      background: var(--ghost-color-background);\n\n      svg path {\n        stroke: var(--ghost-color-text);\n      }\n    `}\n\n  @media only screen and (max-width: 480px) {\n    width: var(--input-height-s);\n    height: var(--input-height-s);\n    min-width: var(--input-height-s);\n    min-height: var(--input-height-s);\n\n    svg {\n      transform: scale(0.85);\n    }\n  }\n`;\nexport const Label = styled(Text)`\n  color: var(--ghost-color-text);\n  font-size: var(--font-size-s);\n  white-space: nowrap;\n  min-width: 128px;\n  max-width: 435px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${({\n  disabled\n}) => disabled && css`\n      color: var(--ghost-color-text);\n    `}\n\n  ${({\n  stretch\n}) => stretch && css`\n      width: auto;\n    `}\n`;\nexport const Value = styled(Title)`\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`;\nexport const MarkedText = styled(Row)`\n  align-items: center;\n  color: var(--ghost-color-text);\n  grid-gap: 5px;\n\n  .red {\n    color: var(--default-color-red);\n  }\n\n  svg {\n    margin-top: -3px;\n    margin-left: -4px;\n  }\n`;\nexport const getValue = (label, text, disabled) => {\n  const disabledStyle = disabled ? {\n    color: 'var(--ghost-color-text)'\n  } : {};\n\n  if (Array.isArray(text)) {\n    const slicedFactor = 3;\n    return __jsx(React.Fragment, null, text.slice(0, slicedFactor).map(item => __jsx(Chip, {\n      key: v4(),\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs'\n    }, item)), text.length > 5 && __jsx(Chip, {\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs'\n    }, \"+\", text.slice(slicedFactor).length));\n  } // eslint-disable-next-line valid-typeof\n\n\n  if (typeof Text === 'funciton') {\n    const Text = text;\n    return __jsx(Text, {\n      style: disabledStyle\n    });\n  }\n\n  return __jsx(Value, {\n    style: disabledStyle,\n    tag: !label ? 'h2' : 'h4'\n  }, text);\n};\nexport const Difinition = ({\n  img,\n  color,\n  icon,\n  label,\n  text,\n  tooltip,\n  className,\n  style,\n  stretch,\n  disabled,\n  revert,\n  actions,\n  onLink\n}) => {\n  const renderLabel = () => label && __jsx(Label, {\n    stretch: stretch,\n    disabled: disabled\n  }, label);\n\n  const renderText = () => tooltip ? __jsx(Tooltip, {\n    place: 'top',\n    text: tooltip\n  }, __jsx(Row, null, getValue(label, text, disabled))) : __jsx(Row, null, getValue(label, text, disabled));\n\n  return __jsx(Wrap, {\n    className: className,\n    style: style\n  }, img && !icon && __jsx(Image, {\n    src: img,\n    alt: 'Avatar'\n  }), !img && icon && __jsx(RoundedIcon, {\n    icon: icon,\n    color: color,\n    disabled: disabled,\n    stroke: `var(--default-color-${color || 'accent'})`\n  }), __jsx(Content, {\n    clickable: !disabled && !!onLink,\n    onClick: () => !disabled && onLink && onLink()\n  }, !revert && renderLabel(), !revert && renderText(), revert && renderText(), revert && renderLabel()), (actions === null || actions === void 0 ? void 0 : actions.length) > 0 && __jsx(Popper, {\n    place: 'bottom',\n    offset: {\n      right: 68\n    },\n    body: __jsx(Actions, {\n      key: 'menu',\n      actions: actions\n    }),\n    appearance: 'clear'\n  }, __jsx(ActionTooltip, {\n    text: 'Действия'\n  }, __jsx(Button, {\n    type: 'button',\n    appearance: 'clear',\n    kind: 'icon',\n    size: 's'\n  }, __jsx(Icon, {\n    icon: 'moreSquare',\n    size: 's'\n  })))));\n};\nexport default Difinition;","map":null,"metadata":{},"sourceType":"module"}
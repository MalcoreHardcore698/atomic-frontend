{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { onError } from 'apollo-link-error';\nimport config from '../../config';\nvar SSR = true;\nvar NODE_ENV = true;\nvar SERVER_URL = NODE_ENV ? config.get('server-local-url') : config.get('server-host-url');\nvar SECRET = config.get('secret');\n\nvar request = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(operation) {\n    var token;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = !SSR;\n\n            if (!_context.t0) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return localStorage.getItem(SECRET);\n\n          case 4:\n            _context.t0 = _context.sent;\n\n          case 5:\n            token = _context.t0;\n            operation.setContext({\n              headers: {\n                authorization: token ? \"Bearer \".concat(token) : ''\n              }\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function request(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'ignore'\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  }\n};\nexport var errorLink = onError(function (_ref2) {\n  var graphQLErrors = _ref2.graphQLErrors,\n      networkError = _ref2.networkError;\n\n  if (graphQLErrors) {\n    console.log('[graphQLErrors]', graphQLErrors);\n  }\n\n  if (networkError) {\n    console.log('[networkError]', networkError);\n  }\n});\nexport var requestLink = new ApolloLink(function (operation, forward) {\n  return new Observable(function (observer) {\n    var handle;\n    Promise.resolve(operation).then(function (result) {\n      return request(result);\n    }).then(function () {\n      handle = forward(operation).subscribe({\n        next: observer.next.bind(observer),\n        error: observer.error.bind(observer),\n        complete: observer.complete.bind(observer)\n      });\n    }).catch(observer.error.bind(observer));\n    return function () {\n      if (handle) handle.unsubscribe();\n    };\n  });\n});\nvar uploadLink = createUploadLink({\n  uri: \"\".concat(SERVER_URL, \"/graphql\"),\n  credentials: 'same-origin'\n});\nexport default function createApolloClient() {\n  return new ApolloClient({\n    ssrMode: SSR,\n    link: ApolloLink.from([errorLink, requestLink, uploadLink]),\n    cache: new InMemoryCache(),\n    defaultOptions: defaultOptions\n  });\n}","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/apollo/client/index.js"],"names":["ApolloClient","InMemoryCache","createUploadLink","ApolloLink","Observable","onError","config","SSR","NODE_ENV","SERVER_URL","get","SECRET","request","operation","localStorage","getItem","token","setContext","headers","authorization","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","errorLink","graphQLErrors","networkError","console","log","requestLink","forward","observer","handle","Promise","resolve","then","result","subscribe","next","bind","error","complete","catch","unsubscribe","uploadLink","uri","credentials","createApolloClient","ssrMode","link","from","cache"],"mappings":"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","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { createUploadLink } from 'apollo-upload-client'\nimport { ApolloLink, Observable } from 'apollo-link'\nimport { onError } from 'apollo-link-error'\n\nimport config from '../../config'\n\nconst SSR = typeof window === 'undefined'\nconst NODE_ENV = process.env.NODE_ENV !== 'production'\nconst SERVER_URL = NODE_ENV ? config.get('server-local-url') : config.get('server-host-url')\nconst SECRET = config.get('secret')\n\nconst request = async (operation) => {\n  const token = !SSR && (await localStorage.getItem(SECRET))\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  })\n}\n\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'ignore'\n  },\n  query: {\n    fetchPolicy: 'no-cache',\n    errorPolicy: 'all'\n  }\n}\n\nexport const errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    console.log('[graphQLErrors]', graphQLErrors)\n  }\n  if (networkError) {\n    console.log('[networkError]', networkError)\n  }\n})\n\nexport const requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle\n\n      Promise.resolve(operation)\n        .then((result) => request(result))\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          })\n        })\n        .catch(observer.error.bind(observer))\n\n      return () => {\n        if (handle) handle.unsubscribe()\n      }\n    })\n)\n\nconst uploadLink = createUploadLink({\n  uri: `${SERVER_URL}/graphql`,\n  credentials: 'same-origin'\n})\n\nexport default function createApolloClient() {\n  return new ApolloClient({\n    ssrMode: SSR,\n    link: ApolloLink.from([errorLink, requestLink, uploadLink]),\n    cache: new InMemoryCache(),\n    defaultOptions\n  })\n}\n"]},"metadata":{},"sourceType":"module"}
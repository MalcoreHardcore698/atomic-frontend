{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Member from '../../atomic-ui/components/Member';\nimport Search from '../../atomic-ui/components/Search';\nimport TicketChat from '../TicketChat';\nimport Processed from '../Processed';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"TicketView__Wrap\",\n  componentId: \"sc-1wxiq0b-0\"\n})([\"height:100%;flex-grow:1;@media only screen and (max-width:568px){flex-direction:column;}\", \" \", \" \", \"\"], ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Tickets = styled(Column).withConfig({\n  displayName: \"TicketView__Tickets\",\n  componentId: \"sc-1wxiq0b-1\"\n})([\"grid-gap:0;width:320px;@media only screen and (max-width:568px){width:100%;}\"]);\nexport const Ticket = styled(Member).withConfig({\n  displayName: \"TicketView__Ticket\",\n  componentId: \"sc-1wxiq0b-2\"\n})([\"margin:10px 0 0 0;padding:10px;border-radius:var(--surface-border-radius);\", \"\"], ({\n  active\n}) => active && css([\"background:var(--input-background);\"]));\nexport const LIMIT_TICKETS = 36;\nexport const View = ({\n  auth,\n  ticket,\n  appearance,\n  onMemberLink,\n  onReport,\n  onAttach,\n  ...props\n}) => {\n  const [currentTicket, setCurrentTicket] = useState(null); // TODO: Fetch more tickets by scrolling\n  // eslint-disable-next-line no-unused-vars\n\n  const [offsetTickets, setOffsetTickets] = useState(0);\n  const [loadingTicket, setLoadingTicket] = useState(false);\n  const [tickets, setTickets] = useState([]);\n  const documents = useSelector(state => state.documents);\n  const dispatch = useDispatch();\n  const variablesTickets = useMemo(() => ({\n    offset: offsetTickets,\n    limit: LIMIT_TICKETS\n  }), [offsetTickets]);\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(queries.GET_TICKET, {\n    variables: {\n      id: ticket\n    }\n  });\n  const [closeTicket, {\n    data: dataCloseTicket,\n    loading: loadingCloseTicket,\n    error: errorCloseTicket\n  }] = useMutation(queries.CLOSE_TICKET);\n  const [sendTicketMessage, {\n    data: dataSendMessage,\n    loading: loadingSendMessage\n  }] = useMutation(queries.SEND_TICKET_MESSAGE);\n  const {\n    data: dataTickets,\n    loading: loadingTickets,\n    error: errorTickets // fetchMore: updateTickets\n\n  } = useQuery(queries.GET_TICKETS, {\n    variables: variablesTickets\n  });\n  useEffect(() => {\n    if (!loading && data !== null && data !== void 0 && data.getTicket) {\n      setCurrentTicket(data.getTicket);\n    }\n\n    if (!loadingCloseTicket && dataCloseTicket !== null && dataCloseTicket !== void 0 && dataCloseTicket.closeTicket) {\n      const candidate = dataCloseTicket.closeTicket;\n      setCurrentTicket(candidate);\n      dispatch(setDocuments((documents || []).map(document => document.id === candidate.id ? candidate : document)));\n    }\n  }, [data, dataCloseTicket, loading, loadingCloseTicket]);\n  useEffect(() => {\n    if (!loadingTickets && dataTickets) {\n      setTickets(dataTickets.getTickets);\n    }\n  }, [dataTickets, loadingTickets]);\n  useEffect(() => {\n    if (!loadingSendMessage && dataSendMessage) {\n      setCurrentTicket(prev => ({ ...prev,\n        messages: dataSendMessage.sendTicketMessage\n      }));\n    }\n  }, [dataSendMessage, loadingSendMessage]);\n  return /*#__PURE__*/React.createElement(Wrap, _extends({}, props, {\n    appearance: appearance\n  }), /*#__PURE__*/React.createElement(Processed, {\n    data: data === null || data === void 0 ? void 0 : data.getTicket,\n    loading: loading,\n    error: error,\n    errorMessage: 'Упс! Не удалось загрузить информацию о обращении',\n    emptyMessage: 'Кажется такого обращения не существует'\n  }, /*#__PURE__*/React.createElement(Tickets, null, /*#__PURE__*/React.createElement(Search, {\n    appearance: 'ghost',\n    onSubmit: () => {}\n  }), /*#__PURE__*/React.createElement(Processed, {\n    data: dataTickets === null || dataTickets === void 0 ? void 0 : dataTickets.getTickets,\n    loading: loadingTickets,\n    error: errorTickets,\n    errorMessage: 'Упс! Не удалось загрузить список обращений',\n    emptyMessage: 'Список обращений пуст'\n  }, tickets.map(item => {\n    var _item$author;\n\n    return /*#__PURE__*/React.createElement(Ticket, {\n      key: item.id,\n      name: item.title,\n      position: (_item$author = item.author) === null || _item$author === void 0 ? void 0 : _item$author.name,\n      active: currentTicket && currentTicket.id === item.id,\n      onClick: async () => {\n        setLoadingTicket(true);\n        await refetch({\n          id: item.id\n        });\n        setCurrentTicket(item);\n        setLoadingTicket(false);\n      }\n    });\n  }))), /*#__PURE__*/React.createElement(TicketChat, {\n    auth: auth,\n    ticket: currentTicket,\n    loading: loading || loadingSendMessage || loadingTicket || loadingTickets || errorCloseTicket,\n    onLink: onMemberLink,\n    onFinish: () => closeTicket({\n      variables: {\n        id: ticket\n      }\n    }),\n    onReport: onReport,\n    onAttach: onAttach,\n    onSubmit: value => {\n      var _currentTicket$author;\n\n      return sendTicketMessage({\n        variables: {\n          ticket: currentTicket.id,\n          recipient: (_currentTicket$author = currentTicket.author) === null || _currentTicket$author === void 0 ? void 0 : _currentTicket$author.email,\n          text: value\n        }\n      });\n    }\n  })));\n};\nView.defaultProps = {\n  appearance: 'default'\n};\nexport default View;","map":null,"metadata":{},"sourceType":"module"}
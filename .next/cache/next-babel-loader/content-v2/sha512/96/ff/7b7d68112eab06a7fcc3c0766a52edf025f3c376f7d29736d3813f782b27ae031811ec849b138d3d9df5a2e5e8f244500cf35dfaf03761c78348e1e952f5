{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport const useInfiniteScroll = fetchCallback => {\n  const [isFetching, setIsFetching] = useState(false);\n\n  const onScroll = () => {\n    const offsetHeight = Number(document.documentElement.scrollHeight);\n    const innerHeight = window.innerHeight;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n    if (isFetching || innerHeight + scrollTop + 600 !== offsetHeight) return;\n    setIsFetching(true);\n  };\n\n  useEffect(() => {\n    if (!isFetching) return;\n    fetchCallback();\n  }, [isFetching]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => window.removeEventListener('scroll', onScroll);\n  }, []);\n  return [isFetching, setIsFetching];\n};\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","fetchCallback","isFetching","setIsFetching","onScroll","offsetHeight","Number","document","documentElement","scrollHeight","innerHeight","window","scrollTop","pageYOffset","body","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,aAAD,IAAmB;AAClD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMM,QAAQ,GAAG,MAAM;AACrB,UAAMC,YAAY,GAAGC,MAAM,CAACC,QAAQ,CAACC,eAAT,CAAyBC,YAA1B,CAA3B;AACA,UAAMC,WAAW,GAAGC,MAAM,CAACD,WAA3B;AACA,UAAME,SAAS,GACbD,MAAM,CAACE,WAAP,IAAsBN,QAAQ,CAACC,eAAT,CAAyBI,SAA/C,IAA4DL,QAAQ,CAACO,IAAT,CAAcF,SAA1E,IAAuF,CADzF;AAGA,QAAIV,UAAU,IAAIQ,WAAW,GAAGE,SAAd,GAA0B,GAA1B,KAAkCP,YAApD,EAAkE;AAElEF,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GATD;;AAWAJ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACG,UAAL,EAAiB;AACjBD,IAAAA,aAAa;AACd,GAHQ,EAGN,CAACC,UAAD,CAHM,CAAT;AAKAH,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCX,QAAlC;AACA,WAAO,MAAMO,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCZ,QAArC,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO,CAACF,UAAD,EAAaC,aAAb,CAAP;AACD,CAzBM;AA2BP,eAAeH,iBAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nexport const useInfiniteScroll = (fetchCallback) => {\n  const [isFetching, setIsFetching] = useState(false)\n\n  const onScroll = () => {\n    const offsetHeight = Number(document.documentElement.scrollHeight)\n    const innerHeight = window.innerHeight\n    const scrollTop =\n      window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0\n\n    if (isFetching || innerHeight + scrollTop + 600 !== offsetHeight) return\n\n    setIsFetching(true)\n  }\n\n  useEffect(() => {\n    if (!isFetching) return\n    fetchCallback()\n  }, [isFetching])\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll)\n    return () => window.removeEventListener('scroll', onScroll)\n  }, [])\n\n  return [isFetching, setIsFetching]\n}\n\nexport default useInfiniteScroll\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport { getLabelCategory } from '../atomic-ui/utils/functions';\nimport ContentLayout from '../layouts/content';\nimport { GridAside as Container } from '../components/Styled';\nimport ArticleList from '../components/ArticleList';\nimport queries from '../graphql/queries';\nconst TITLE = 'Статьи';\n\nconst Articles = ({\n  store\n}) => /*#__PURE__*/React.createElement(ContentLayout, {\n  title: TITLE,\n  filters: [{\n    type: 'DATEPICKER',\n    placeholder: 'Дата публикации'\n  }, {\n    type: 'SELECT',\n    options: store === null || store === void 0 ? void 0 : store.categories.map(category => ({\n      value: category.id,\n      label: getLabelCategory(category.name)\n    }))\n  }],\n  options: [{\n    label: 'Категория',\n    value: 'category'\n  }, {\n    label: 'Дата публикации',\n    value: 'createdAt'\n  }],\n  query: queries.GET_ARTICLES,\n  variables: {\n    status: 'PUBLISHED'\n  },\n  store: {\n    documents: store === null || store === void 0 ? void 0 : store.articles\n  }\n}, ({\n  documents\n}) => /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(ArticleList, {\n  initialList: documents\n})));\n\n_c = Articles;\nexport var __N_SSP = true;\nexport default Articles;\n\nvar _c;\n\n$RefreshReg$(_c, \"Articles\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/articles.js"],"names":["React","getLabelCategory","ContentLayout","GridAside","Container","ArticleList","queries","TITLE","Articles","store","type","placeholder","options","categories","map","category","value","id","label","name","GET_ARTICLES","status","documents","articles"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,8BAAjC;AAGA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,SAAS,IAAIC,SAAtB,QAAuC,sBAAvC;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,KAAK,GAAG,QAAd;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACf,oBAAC,aAAD;AACE,EAAA,KAAK,EAAEF,KADT;AAEE,EAAA,OAAO,EAAE,CACP;AAAEG,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,WAAW,EAAE;AAAnC,GADO,EAEP;AACED,IAAAA,IAAI,EAAE,QADR;AAEEE,IAAAA,OAAO,EAAEH,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEI,UAAP,CAAkBC,GAAlB,CAAuBC,QAAD,KAAe;AAC5CC,MAAAA,KAAK,EAAED,QAAQ,CAACE,EAD4B;AAE5CC,MAAAA,KAAK,EAAEjB,gBAAgB,CAACc,QAAQ,CAACI,IAAV;AAFqB,KAAf,CAAtB;AAFX,GAFO,CAFX;AAYE,EAAA,OAAO,EAAE,CACP;AAAED,IAAAA,KAAK,EAAE,WAAT;AAAsBF,IAAAA,KAAK,EAAE;AAA7B,GADO,EAEP;AAAEE,IAAAA,KAAK,EAAE,iBAAT;AAA4BF,IAAAA,KAAK,EAAE;AAAnC,GAFO,CAZX;AAgBE,EAAA,KAAK,EAAEV,OAAO,CAACc,YAhBjB;AAiBE,EAAA,SAAS,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAjBb;AAkBE,EAAA,KAAK,EAAE;AAAEC,IAAAA,SAAS,EAAEb,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEc;AAApB;AAlBT,GAmBG,CAAC;AAAED,EAAAA;AAAF,CAAD,kBACC,oBAAC,SAAD,qBACE,oBAAC,WAAD;AAAa,EAAA,WAAW,EAAEA;AAA1B,EADF,CApBJ,CADF;;KAAMd,Q;;AA8DN,eAAeA,QAAf","sourcesContent":["import React from 'react'\n\nimport { getLabelCategory } from '../atomic-ui/utils/functions'\n\nimport { initializeApollo } from '../apollo'\nimport ContentLayout from '../layouts/content'\nimport { GridAside as Container } from '../components/Styled'\nimport ArticleList from '../components/ArticleList'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Статьи'\nconst START_OFFSET = 6\n\nconst Articles = ({ store }) => (\n  <ContentLayout\n    title={TITLE}\n    filters={[\n      { type: 'DATEPICKER', placeholder: 'Дата публикации' },\n      {\n        type: 'SELECT',\n        options: store?.categories.map((category) => ({\n          value: category.id,\n          label: getLabelCategory(category.name)\n        }))\n      }\n    ]}\n    options={[\n      { label: 'Категория', value: 'category' },\n      { label: 'Дата публикации', value: 'createdAt' }\n    ]}\n    query={queries.GET_ARTICLES}\n    variables={{ status: 'PUBLISHED' }}\n    store={{ documents: store?.articles }}>\n    {({ documents }) => (\n      <Container>\n        <ArticleList initialList={documents} />\n      </Container>\n    )}\n  </ContentLayout>\n)\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let articles = []\n  let categories = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_ARTICLES,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET,\n        status: 'PUBLISHED'\n      }\n    })\n\n    if (response && response.data) {\n      articles = response.data.getArticles\n      categories = response.data.getCategories\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        articles,\n        categories\n      }\n    }\n  }\n}\n\nexport default Articles\n"]},"metadata":{},"sourceType":"module"}
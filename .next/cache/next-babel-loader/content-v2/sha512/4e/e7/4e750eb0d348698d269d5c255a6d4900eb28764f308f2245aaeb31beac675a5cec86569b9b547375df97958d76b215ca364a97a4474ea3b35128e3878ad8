{"ast":null,"code":"import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Column from '../Column';\nimport Select from '../Select';\nimport Search from '../Search';\nimport Spinner from '../Spinner';\nimport Alert from '../Alert';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"GlobalSearch__Wrap\",\n  componentId: \"sc-1i2qzsl-0\"\n})([\"padding:var(--default-gap);\"]);\nexport const Loader = styled.div.withConfig({\n  displayName: \"GlobalSearch__Loader\",\n  componentId: \"sc-1i2qzsl-1\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;flex-grow:1;\"]);\n/*\n * const entities: entity[]\n * type entity = {\n *  label: string;\n *  value: ObjectID | string;\n *  render: ReactNode | Element | string;\n * }\n */\n\nexport const GlobalSearch = ({\n  result,\n  search,\n  loading,\n  entities,\n  initialEntity,\n  appearance,\n  style,\n  className,\n  onChange,\n  onSubmit\n}) => {\n  const [entity, setEntity] = useState(initialEntity);\n  const searchRef = useRef(null);\n\n  const handleChange = value => {\n    setEntity(value);\n\n    if (searchRef !== null && searchRef !== void 0 && searchRef.current) {\n      searchRef.current.value = '';\n      if (onSubmit) onSubmit('');\n    }\n  };\n\n  const renderContent = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Search, {\n    ref: searchRef,\n    appearance: 'ghost',\n    placeholder: 'Поиск',\n    defaultValue: search,\n    onSubmit: onSubmit\n  }), (result === null || result === void 0 ? void 0 : result.length) > 0 ? result.map(item => entity.render && /*#__PURE__*/React.createElement(React.Fragment, {\n    key: item.id || item.email\n  }, entity.render(item))) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center',\n      flexGrow: 1\n    }\n  }, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"));\n\n  useEffect(() => {\n    if (onChange) onChange(entity);\n  }, [entity, onChange]);\n  return /*#__PURE__*/React.createElement(Wrap, {\n    style: style,\n    className: className,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(Select, {\n    appearance: 'ghost',\n    defaultValue: entity,\n    placeholder: 'Где будем искать?',\n    label: 'Зона поиска',\n    options: entities,\n    onChange: handleChange,\n    isLoading: loading,\n    isSearchable: true,\n    isClearable: true\n  }), !loading && entity && renderContent(), loading && /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)));\n};\nGlobalSearch.defaultProps = {\n  appearance: 'clear'\n};\nexport default GlobalSearch;","map":null,"metadata":{},"sourceType":"module"}
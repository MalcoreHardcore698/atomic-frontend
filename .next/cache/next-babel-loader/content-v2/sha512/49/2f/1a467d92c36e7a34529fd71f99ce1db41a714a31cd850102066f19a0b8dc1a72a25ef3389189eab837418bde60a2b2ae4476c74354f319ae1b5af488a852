{"ast":null,"code":"import React from 'react';\nimport styled from 'styled-components';\nimport { Controller } from 'react-hook-form';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Button from '../../atomic-ui/components/Button';\nimport Tabs, { Tab } from '../../atomic-ui/components/Tabs';\nimport Dropzone from '../../atomic-ui/components/Dropzone';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Input from '../../atomic-ui/components/Input';\nimport Form from '../Form';\nimport Select from '../../atomic-ui/components/Select';\nconst logotypeSize = {\n  width: 128,\n  height: 30\n};\nconst backgroundSize = {\n  width: 1440,\n  height: 990\n};\nexport const Logotype = styled(Dropzone).withConfig({\n  displayName: \"FormSettings__Logotype\",\n  componentId: \"sc-13smq0j-0\"\n})([\"width:320px;height:128px;min-height:128px;\"]);\nexport const Background = styled(Dropzone).withConfig({\n  displayName: \"FormSettings__Background\",\n  componentId: \"sc-13smq0j-1\"\n})([\"width:100%;height:100%;max-width:\", \"px;max-height:\", \"px;\"], backgroundSize.width, backgroundSize.height);\n_c = Background;\nexport const Settings = ({\n  settings,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: onSubmit\n  }, ({\n    register,\n    loading,\n    control,\n    getValues\n  }) => {\n    var _settings$general, _settings$scaffold, _settings$scaffold2, _settings$meta, _settings$meta2;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tabs, null, /*#__PURE__*/React.createElement(Tab, {\n      label: 'Основное'\n    }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041B\\u043E\\u0433\\u043E\\u0442\\u0438\\u043F\"), /*#__PURE__*/React.createElement(Controller, {\n      name: 'logotype',\n      control: control,\n      rules: {\n        required: true\n      },\n      defaultValue: getValues('preview') || (settings === null || settings === void 0 ? void 0 : (_settings$general = settings.general) === null || _settings$general === void 0 ? void 0 : _settings$general.logotype) || null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Dropzone, {\n        accept: 'image/*',\n        defaultValue: value,\n        onChange: onChange,\n        placeholder: `Перетащите сюда изображение размером ${logotypeSize.width}x${logotypeSize.height}px`,\n        tooltip: `Разрешение: ${logotypeSize.width}x${logotypeSize.height}px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 1 MB`\n      })\n    }))), /*#__PURE__*/React.createElement(Tab, {\n      label: 'Scaffold'\n    }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'scaffold-title',\n      ref: register(),\n      defaultValue: getValues('title') || (settings === null || settings === void 0 ? void 0 : (_settings$scaffold = settings.scaffold) === null || _settings$scaffold === void 0 ? void 0 : _settings$scaffold.title) || 'Создавай школу будущего с нами',\n      placeholder: 'Заголовок',\n      appearance: 'ghost',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\"), /*#__PURE__*/React.createElement(Select, {\n      name: 'scaffold-primary-project',\n      appearance: 'ghost',\n      placeholder: 'Выберите первый проект',\n      options: [],\n      isClearable: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: 'scaffold-residue-first-project',\n      appearance: 'ghost',\n      placeholder: 'Выберите второй проект',\n      options: [],\n      isClearable: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      name: 'scaffold-residue-second-project',\n      appearance: 'ghost',\n      placeholder: 'Выберите третий проект',\n      options: [],\n      isClearable: true\n    }), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u0424\\u043E\\u043D\"), /*#__PURE__*/React.createElement(Background, {\n      name: 'background',\n      accept: 'image/*',\n      defaultValue: getValues('preview') || (settings === null || settings === void 0 ? void 0 : (_settings$scaffold2 = settings.scaffold) === null || _settings$scaffold2 === void 0 ? void 0 : _settings$scaffold2.background) || null,\n      placeholder: `Перетащите сюда изображение размером ${backgroundSize.width}x${backgroundSize.height}px`,\n      tooltip: `Разрешение: ${backgroundSize.width}x${backgroundSize.height}px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB`\n    }))), /*#__PURE__*/React.createElement(Tab, {\n      label: 'Мета'\n    }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041C\\u0435\\u0442\\u0430 \\u0442\\u0435\\u0433\\u0438\"), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'meta-title',\n      ref: register(),\n      defaultValue: getValues('title') || (settings === null || settings === void 0 ? void 0 : (_settings$meta = settings.meta) === null || _settings$meta === void 0 ? void 0 : _settings$meta.title) || 'Atomic',\n      placeholder: 'Мета-название',\n      appearance: 'ghost',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'meta-description',\n      ref: register(),\n      defaultValue: getValues('title') || (settings === null || settings === void 0 ? void 0 : (_settings$meta2 = settings.meta) === null || _settings$meta2 === void 0 ? void 0 : _settings$meta2.description),\n      placeholder: 'Мета-описание',\n      appearance: 'ghost',\n      disabled: loading\n    })))), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: loading\n    }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\")));\n  });\n};\n_c2 = Settings;\nexport default Settings;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Background\");\n$RefreshReg$(_c2, \"Settings\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormSettings/index.js"],"names":["React","styled","Controller","Row","Column","Title","Button","Tabs","Tab","Dropzone","Divider","Input","Form","Select","logotypeSize","width","height","backgroundSize","Logotype","Background","Settings","settings","mutation","appearance","className","onSubmit","register","loading","control","getValues","required","general","logotype","value","onChange","scaffold","title","background","meta","description","flexGrow"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Controller } from 'react-hook-form'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Button from '../../atomic-ui/components/Button'\nimport Tabs, { Tab } from '../../atomic-ui/components/Tabs'\nimport Dropzone from '../../atomic-ui/components/Dropzone'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Input from '../../atomic-ui/components/Input'\n\nimport Form from '../Form'\nimport Select from '../../atomic-ui/components/Select'\n\nconst logotypeSize = {\n  width: 128,\n  height: 30\n}\n\nconst backgroundSize = {\n  width: 1440,\n  height: 990\n}\n\nexport const Logotype = styled(Dropzone)`\n  width: 320px;\n  height: 128px;\n  min-height: 128px;\n`\n\nexport const Background = styled(Dropzone)`\n  width: 100%;\n  height: 100%;\n  max-width: ${backgroundSize.width}px;\n  max-height: ${backgroundSize.height}px;\n`\n\nexport const Settings = ({ settings, mutation, appearance, className, onSubmit }) => {\n  return (\n    <Form className={className} appearance={appearance} mutation={mutation} onSubmit={onSubmit}>\n      {({ register, loading, control, getValues }) => (\n        <React.Fragment>\n          <Tabs>\n            <Tab label={'Основное'}>\n              <Column>\n                <Title tag={'h4'}>Логотип</Title>\n                <Controller\n                  name={'logotype'}\n                  control={control}\n                  rules={{ required: true }}\n                  defaultValue={getValues('preview') || settings?.general?.logotype || null}\n                  render={({ value, onChange }) => (\n                    <Dropzone\n                      accept={'image/*'}\n                      defaultValue={value}\n                      onChange={onChange}\n                      placeholder={`Перетащите сюда изображение размером ${logotypeSize.width}x${logotypeSize.height}px`}\n                      tooltip={`Разрешение: ${logotypeSize.width}x${logotypeSize.height}px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 1 MB`}\n                    />\n                  )}\n                />\n              </Column>\n            </Tab>\n            <Tab label={'Scaffold'}>\n              <Column>\n                <Title tag={'h4'}>Основное</Title>\n                <Input\n                  type={'text'}\n                  name={'scaffold-title'}\n                  ref={register()}\n                  defaultValue={\n                    getValues('title') ||\n                    settings?.scaffold?.title ||\n                    'Создавай школу будущего с нами'\n                  }\n                  placeholder={'Заголовок'}\n                  appearance={'ghost'}\n                  disabled={loading}\n                />\n\n                <Title tag={'h4'}>Проекты</Title>\n                <Select\n                  name={'scaffold-primary-project'}\n                  appearance={'ghost'}\n                  placeholder={'Выберите первый проект'}\n                  options={[]}\n                  isClearable\n                />\n                <Select\n                  name={'scaffold-residue-first-project'}\n                  appearance={'ghost'}\n                  placeholder={'Выберите второй проект'}\n                  options={[]}\n                  isClearable\n                />\n                <Select\n                  name={'scaffold-residue-second-project'}\n                  appearance={'ghost'}\n                  placeholder={'Выберите третий проект'}\n                  options={[]}\n                  isClearable\n                />\n\n                <Title tag={'h4'}>Фон</Title>\n                <Background\n                  name={'background'}\n                  accept={'image/*'}\n                  defaultValue={getValues('preview') || settings?.scaffold?.background || null}\n                  placeholder={`Перетащите сюда изображение размером ${backgroundSize.width}x${backgroundSize.height}px`}\n                  tooltip={`Разрешение: ${backgroundSize.width}x${backgroundSize.height}px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB`}\n                />\n              </Column>\n            </Tab>\n            <Tab label={'Мета'}>\n              <Column>\n                <Title tag={'h4'}>Мета теги</Title>\n\n                <Input\n                  type={'text'}\n                  name={'meta-title'}\n                  ref={register()}\n                  defaultValue={getValues('title') || settings?.meta?.title || 'Atomic'}\n                  placeholder={'Мета-название'}\n                  appearance={'ghost'}\n                  disabled={loading}\n                />\n\n                <Input\n                  type={'text'}\n                  name={'meta-description'}\n                  ref={register()}\n                  defaultValue={getValues('title') || settings?.meta?.description}\n                  placeholder={'Мета-описание'}\n                  appearance={'ghost'}\n                  disabled={loading}\n                />\n              </Column>\n            </Tab>\n          </Tabs>\n\n          <Divider clear />\n\n          <Row>\n            <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n              Сохранить\n            </Button>\n          </Row>\n        </React.Fragment>\n      )}\n    </Form>\n  )\n}\n\nexport default Settings\n"]},"metadata":{},"sourceType":"module"}
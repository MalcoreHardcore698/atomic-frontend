{"ast":null,"code":"import React from 'react';\nimport CategoryForm from '../../components/FormCategory';\nimport DeleteForm from '../../components/FormDelete';\nimport CategoryView from '../../components/CategoryView';\nimport CategoryCard from '../../components/CategoryCard';\nimport { setDocuments } from '../actions/documents';\nimport { setDrawer } from '../actions/drawer';\nimport { setItem } from '../actions/snacks';\nexport function onCategoryLink(dispatch, props) {\n  const {\n    id\n  } = props;\n  dispatch(setDrawer({\n    icon: 'folder',\n    title: 'Категория',\n    content: /*#__PURE__*/React.createElement(CategoryView, {\n      category: id,\n      appearance: 'clear'\n    })\n  }));\n}\nexport function onCategoryCreate(dispatch, props) {\n  const {\n    types,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'folder',\n    title: 'Создание категории',\n    content: /*#__PURE__*/React.createElement(CategoryForm, {\n      mutation: mutation,\n      categoryTypes: types,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          const categories = await action({\n            variables: {\n              input: {\n                name: form.name,\n                type: form.type.value,\n                description: form.description\n              }\n            }\n          });\n          dispatch(setDocuments(categories.data.createCategory));\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Категория успешно создана'\n          }));\n        } catch (_unused) {\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось создать категорию'\n          }));\n        }\n      }\n    })\n  }));\n}\nexport function onCategoryEdit(dispatch, props) {\n  const {\n    category,\n    types,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'folder',\n    title: 'Редактирование категории',\n    content: /*#__PURE__*/React.createElement(CategoryForm, {\n      category: category,\n      mutation: mutation,\n      categoryTypes: types,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          const categories = await action({\n            variables: {\n              id: category.id,\n              input: {\n                name: form.name,\n                type: form.type.value,\n                description: form.description\n              }\n            }\n          });\n          dispatch(setDocuments(categories.data.updateCategory));\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Категория успешно отредактирована'\n          }));\n        } catch (_unused2) {\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отредактировать категорию'\n          }));\n        }\n      }\n    })\n  }));\n}\nexport function onCategoryDelete(dispatch, props) {\n  const {\n    id,\n    category,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление категории',\n    content: /*#__PURE__*/React.createElement(DeleteForm, {\n      mutation: mutation,\n      appearance: 'clear',\n      onCancel: () => dispatch(setDrawer(null)),\n      onSubmit: async (_, action) => {\n        try {\n          const categories = await action({\n            variables: {\n              id\n            }\n          });\n          dispatch(setDocuments(categories.data.deleteCategory));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Категория успешно удалена'\n          }));\n        } catch (_unused3) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось удалить категорию'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n        }\n      }\n    }, /*#__PURE__*/React.createElement(CategoryCard, {\n      category: category,\n      appearance: 'clear'\n    }))\n  }));\n}","map":{"version":3,"sources":["/Users/alicefromwonderland/Desktop/branches/atomic/atomic-frontend/store/helpers/category.js"],"names":["React","CategoryForm","DeleteForm","CategoryView","CategoryCard","setDocuments","setDrawer","setItem","onCategoryLink","dispatch","props","id","icon","title","content","onCategoryCreate","types","mutation","form","action","categories","variables","input","name","type","value","description","data","createCategory","message","onCategoryEdit","category","updateCategory","onCategoryDelete","color","_","deleteCategory"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport CategoryForm from '../../components/FormCategory'\nimport DeleteForm from '../../components/FormDelete'\nimport CategoryView from '../../components/CategoryView'\nimport CategoryCard from '../../components/CategoryCard'\nimport { setDocuments } from '../actions/documents'\nimport { setDrawer } from '../actions/drawer'\nimport { setItem } from '../actions/snacks'\n\nexport function onCategoryLink(dispatch, props) {\n  const { id } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'folder',\n      title: 'Категория',\n      content: <CategoryView category={id} appearance={'clear'} />\n    })\n  )\n}\n\nexport function onCategoryCreate(dispatch, props) {\n  const { types, mutation } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'folder',\n      title: 'Создание категории',\n      content: (\n        <CategoryForm\n          mutation={mutation}\n          categoryTypes={types}\n          appearance={'clear'}\n          onSubmit={async (form, action) => {\n            try {\n              const categories = await action({\n                variables: {\n                  input: {\n                    name: form.name,\n                    type: form.type.value,\n                    description: form.description\n                  }\n                }\n              })\n              dispatch(setDocuments(categories.data.createCategory))\n              dispatch(setDrawer(null))\n              dispatch(\n                setItem({\n                  type: 'success',\n                  message: 'Категория успешно создана'\n                })\n              )\n            } catch {\n              dispatch(setDrawer(null))\n              dispatch(\n                setItem({\n                  type: 'error',\n                  message: 'Не удалось создать категорию'\n                })\n              )\n            }\n          }}\n        />\n      )\n    })\n  )\n}\n\nexport function onCategoryEdit(dispatch, props) {\n  const { category, types, mutation } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'folder',\n      title: 'Редактирование категории',\n      content: (\n        <CategoryForm\n          category={category}\n          mutation={mutation}\n          categoryTypes={types}\n          appearance={'clear'}\n          onSubmit={async (form, action) => {\n            try {\n              const categories = await action({\n                variables: {\n                  id: category.id,\n                  input: {\n                    name: form.name,\n                    type: form.type.value,\n                    description: form.description\n                  }\n                }\n              })\n              dispatch(setDocuments(categories.data.updateCategory))\n              dispatch(setDrawer(null))\n              dispatch(\n                setItem({\n                  type: 'success',\n                  message: 'Категория успешно отредактирована'\n                })\n              )\n            } catch {\n              dispatch(setDrawer(null))\n              dispatch(\n                setItem({\n                  type: 'error',\n                  message: 'Не удалось отредактировать категорию'\n                })\n              )\n            }\n          }}\n        />\n      )\n    })\n  )\n}\n\nexport function onCategoryDelete(dispatch, props) {\n  const { id, category, mutation } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'delete',\n      color: 'red',\n      title: 'Удаление категории',\n      content: (\n        <DeleteForm\n          mutation={mutation}\n          appearance={'clear'}\n          onCancel={() => dispatch(setDrawer(null))}\n          onSubmit={async (_, action) => {\n            try {\n              const categories = await action({\n                variables: { id }\n              })\n              dispatch(setDocuments(categories.data.deleteCategory))\n              dispatch(\n                setItem({\n                  type: 'success',\n                  message: 'Категория успешно удалена'\n                })\n              )\n            } catch {\n              dispatch(\n                setItem({\n                  type: 'error',\n                  message: 'Не удалось удалить категорию'\n                })\n              )\n            } finally {\n              dispatch(setDrawer(null))\n            }\n          }}>\n          <CategoryCard category={category} appearance={'clear'} />\n        </DeleteForm>\n      )\n    })\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
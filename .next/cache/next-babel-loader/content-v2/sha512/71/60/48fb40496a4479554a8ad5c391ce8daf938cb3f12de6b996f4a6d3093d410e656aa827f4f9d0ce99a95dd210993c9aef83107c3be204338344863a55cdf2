{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { v4 } from 'uuid';\nimport Column from '../../atomic-ui/components/Column';\nimport Row from '../../atomic-ui/components/Row';\nimport Switch from '../../atomic-ui/components/Switch';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Transition from '../../atomic-ui/components/Transition';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"FilterBar__Wrap\",\n  componentId: \"sc-1lvfs1u-0\"\n})([\"display:flex;width:100%;&.fade-enter{opacity:0;}&.fade-enter-active{opacity:1;transition:opacity 100ms,blur 100ms;}&.fade-exit{opacity:1;}&.fade-exit-active{opacity:0;transition:opacity 100ms,blur 100ms;}\"]);\n_c = Wrap;\nexport const List = styled(Row).withConfig({\n  displayName: \"FilterBar__List\",\n  componentId: \"sc-1lvfs1u-1\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(256px,1fr));@media only screen and (max-width:480px){grid-gap:var(--default-gap);}\"]);\n_c2 = List;\nexport const Filter = ({\n  isOpen = true,\n  duration,\n  sort,\n  filter\n}) => {\n  _s();\n\n  const {\n    handleSubmit\n  } = useForm();\n  const filters = useMemo(() => (filter || []).map(filter => {\n    switch (filter.type) {\n      case 'DATEPICKER':\n        return /*#__PURE__*/React.createElement(DatePicker, {\n          key: v4(),\n          placeholder: filter.placeholder || 'Дата публикации',\n          withNavigate: true\n        });\n\n      case 'SELECT':\n        return /*#__PURE__*/React.createElement(Controller, {\n          key: v4(),\n          name: filter.name,\n          render: ({\n            onChange\n          }) => /*#__PURE__*/React.createElement(Select, {\n            query: filter.query,\n            variables: filter.variables,\n            placeholder: filter.label,\n            defaultValue: value,\n            onChange: onChange\n          })\n        });\n\n      default:\n        return null;\n    }\n  }), [filter]);\n  const options = useMemo(() => sort || [], [sort]);\n\n  const onSubmit = form => {};\n\n  return /*#__PURE__*/React.createElement(Transition, {\n    in: isOpen,\n    animation: 'fade',\n    timeout: duration\n  }, /*#__PURE__*/React.createElement(Wrap, {\n    onSubmit: handleSubmit(onSubmit)\n  }, /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), filters && filters.length > 0 && /*#__PURE__*/React.createElement(List, null, filters.map(filter => filter)), options && options.length > 0 && /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Switch, {\n    defaultValue: options[0],\n    options: options,\n    stretch: true\n  })), /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  })));\n};\n\n_s(Filter, \"PKZk9Dc6IBMjWvLjMPEOsiX/dFg=\", false, function () {\n  return [useForm];\n});\n\n_c3 = Filter;\nFilter.defaultProps = {\n  duration: 150\n};\nexport default Filter;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"List\");\n$RefreshReg$(_c3, \"Filter\");","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/components/FilterBar/index.js"],"names":["React","useMemo","Controller","useForm","styled","v4","Column","Row","Switch","Divider","Transition","DatePicker","Select","Wrap","List","Filter","isOpen","duration","sort","filter","handleSubmit","filters","map","type","placeholder","name","onChange","query","variables","label","value","options","onSubmit","form","length","defaultProps"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport { Controller, useForm } from 'react-hook-form'\nimport styled from 'styled-components'\nimport { v4 } from 'uuid'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Row from '../../atomic-ui/components/Row'\nimport Switch from '../../atomic-ui/components/Switch'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Transition from '../../atomic-ui/components/Transition'\nimport DatePicker from '../../atomic-ui/components/DatePicker'\nimport Select from '../../atomic-ui/components/Select'\n\nexport const Wrap = styled(Column)`\n  display: flex;\n  width: 100%;\n\n  &.fade-enter {\n    opacity: 0;\n  }\n\n  &.fade-enter-active {\n    opacity: 1;\n    transition: opacity 100ms, blur 100ms;\n  }\n\n  &.fade-exit {\n    opacity: 1;\n  }\n\n  &.fade-exit-active {\n    opacity: 0;\n    transition: opacity 100ms, blur 100ms;\n  }\n`\n\nexport const List = styled(Row)`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(256px, 1fr));\n\n  @media only screen and (max-width: 480px) {\n    grid-gap: var(--default-gap);\n  }\n`\n\nexport const Filter = ({ isOpen = true, duration, sort, filter }) => {\n  const { handleSubmit } = useForm()\n\n  const filters = useMemo(() => (filter || []).map((filter) => {\n    switch (filter.type) {\n      case 'DATEPICKER':\n        return (\n          <DatePicker\n            key={v4()}\n            placeholder={filter.placeholder || 'Дата публикации'}\n            withNavigate\n          />\n        )\n      case 'SELECT':\n        return (\n          <Controller\n            key={v4()}\n            name={filter.name}\n            render={({ onChange }) => (\n              <Select\n                query={filter.query}\n                variables={filter.variables}\n                placeholder={filter.label}\n                defaultValue={value}\n                onChange={onChange}\n              />\n            )}\n          />\n        )\n      default:\n        return null\n    }\n  }), [filter])\n\n  const options = useMemo(() => sort || [], [sort])\n\n  const onSubmit = (form) => {\n\n  }\n\n  return (\n    <Transition in={isOpen} animation={'fade'} timeout={duration}>\n      <Wrap onSubmit={handleSubmit(onSubmit)}>\n        <Divider clear />\n        {filters && filters.length > 0 && <List>{filters.map((filter) => filter)}</List>}\n        {options && options.length > 0 && (\n          <Row>\n            <Switch defaultValue={options[0]} options={options} stretch />\n          </Row>\n        )}\n        <Divider clear />\n      </Wrap>\n    </Transition>\n  )\n}\n\nFilter.defaultProps = {\n  duration: 150\n}\n\nexport default Filter\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useMemo, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Avatar from '../Avatar';\nimport Text from '../Text';\nimport DateText from '../DateText';\nimport Button from '../Button';\nimport Icon from '../Icon';\nimport Tooltip from '../Tooltip';\nimport Checkbox from '../Checkbox';\nimport TextArea from '../TextArea';\nexport const Wrap = styled(Row)`\n  position: relative;\n  margin: 0;\n  padding: 0;\n\n  ${({\n  checked\n}) => checked && css`\n      opacity: 0.45;\n    `}\n`;\nexport const MiniAvatar = styled(Avatar)`\n  width: var(--input-height-xs);\n  height: var(--input-height-xs);\n  min-width: var(--input-height-xs);\n  min-height: var(--input-height-xs);\n  border-radius: var(--surface-border-radius);\n`;\nexport const Name = styled(Text)`\n  font-weight: var(--font-weight-medium);\n  color: var(--default-color-accent);\n  transition: opacity 150ms ease;\n\n  ${({\n  compact\n}) => compact && css`\n      display: flex;\n      align-items: center;\n      grid-gap: 10px;\n      margin-bottom: 5px;\n    `}\n\n  ${({\n  onClick\n}) => onClick && css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`;\nexport const MessageTextArea = styled(TextArea)`\n  height: 128px;\n`;\nexport const MessageText = styled(Text)`\n  color: black;\n`;\nexport const Content = styled(Column)`\n  grid-gap: 0;\n  width: 100%;\n`;\nexport const Meta = styled(Row)`\n  grid-gap: 5px;\n`;\nexport const Line = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n`;\nexport const Actions = styled(Row)`\n  position: absolute;\n  top: 0;\n  right: 0;\n  grid-gap: 10px;\n`;\nexport const DispatchUpdatedDate = styled(DateText)`\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`;\nexport const DispatchTime = styled(DateText)`\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`;\nexport const ReplyButton = styled(Button)`\n  color: var(--default-color-accent);\n  font-size: var(--font-size-s);\n  font-weight: var(--font-weight-regular);\n`;\nexport const Likes = styled(Row)`\n  align-items: center;\n  grid-gap: 0;\n`;\nexport const LikesButton = styled(Button)`\n  span {\n    color: var(--default-color-text);\n    transition: color 150ms ease;\n  }\n\n  &:hover {\n    span {\n      color: var(--default-color-accent);\n    }\n  }\n`;\nexport const LikeButton = styled(Button)`\n  &:hover {\n    svg {\n      path,\n      circle {\n        stroke: var(--default-color-accent);\n      }\n    }\n  }\n`;\nexport const Comment = ({\n  user,\n  message,\n  likes,\n  time,\n  className,\n  style,\n  compact,\n  isLiked: initialLiked,\n  isUpdated,\n  isChecked,\n  onLink,\n  onReply,\n  onChecked,\n  onShowLikes,\n  onDelete,\n  onEdit,\n  onLike\n}) => {\n  var _user$avatar$path, _user$avatar, _user$avatar$path2, _user$avatar2;\n\n  const {\n    0: updatedAt,\n    1: setUpdatedAt\n  } = useState(isUpdated ? time : null);\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(isChecked);\n  const {\n    0: count,\n    1: setCount\n  } = useState(likes);\n  const {\n    0: isEdit,\n    1: setEdit\n  } = useState(false);\n  const {\n    0: isLiked,\n    1: setLiked\n  } = useState(initialLiked);\n  const color = useMemo(() => isLiked ? 'var(--default-color-accent)' : 'var(--default-color-text)', [isLiked]);\n  const textLikes = useMemo(() => count === 1 ? 'человеку' : 'людям', [count]);\n  const {\n    0: comment,\n    1: setComment\n  } = useState(message);\n  const commentRef = useRef(null);\n\n  const onClick = () => {\n    const value = !isLiked;\n    if (onLike) onLike(value);\n    setCount(prev => prev + (value ? 1 : -1));\n    setLiked(value);\n  };\n\n  const handleToggleEdit = () => setEdit(prev => !prev);\n\n  const handleChecked = e => {\n    const value = e.target.checked;\n    if (onChecked) onChecked(value);\n    setChecked(value);\n  };\n\n  const handleApplyChanges = () => {\n    var _commentRef$current;\n\n    const value = commentRef === null || commentRef === void 0 ? void 0 : (_commentRef$current = commentRef.current) === null || _commentRef$current === void 0 ? void 0 : _commentRef$current.value;\n\n    if (value) {\n      if (onEdit) onEdit(value);\n      setUpdatedAt(new Date());\n      setComment(value);\n    }\n\n    handleToggleEdit();\n  };\n\n  return __jsx(Wrap, {\n    checked: checked,\n    style: style,\n    className: className\n  }, !compact && __jsx(Avatar, {\n    src: (_user$avatar$path = user === null || user === void 0 ? void 0 : (_user$avatar = user.avatar) === null || _user$avatar === void 0 ? void 0 : _user$avatar.path) !== null && _user$avatar$path !== void 0 ? _user$avatar$path : ''\n  }), __jsx(Content, null, __jsx(Name, {\n    compact: compact,\n    onClick: onLink\n  }, compact && __jsx(MiniAvatar, {\n    src: (_user$avatar$path2 = user === null || user === void 0 ? void 0 : (_user$avatar2 = user.avatar) === null || _user$avatar2 === void 0 ? void 0 : _user$avatar2.path) !== null && _user$avatar$path2 !== void 0 ? _user$avatar$path2 : ''\n  }), user.name), isEdit ? __jsx(MessageTextArea, {\n    ref: commentRef,\n    defaultValue: comment,\n    appearance: 'ghost'\n  }) : __jsx(MessageText, null, comment), compact && onEdit && onDelete && __jsx(Actions, null, !isEdit ? __jsx(React.Fragment, null, __jsx(Tooltip, {\n    text: 'Удалить комментарий'\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: onDelete\n  }, __jsx(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), __jsx(Tooltip, {\n    text: 'Редактировать комментарий'\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    onClick: handleToggleEdit\n  }, __jsx(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), __jsx(Tooltip, {\n    text: 'Отметить комментарий',\n    self: true\n  }, __jsx(Checkbox, {\n    checked: checked,\n    onChange: handleChecked\n  }))) : __jsx(React.Fragment, null, __jsx(Tooltip, {\n    text: 'Применить изменения',\n    self: true\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'green',\n    onClick: handleApplyChanges\n  }, __jsx(Icon, {\n    icon: 'check',\n    size: 'xs',\n    stroke: 'white'\n  }))), __jsx(Tooltip, {\n    text: 'Отменить изменения',\n    self: true\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: handleToggleEdit\n  }, __jsx(Icon, {\n    icon: 'closeSquare',\n    size: 'xs',\n    stroke: 'white'\n  }))))), __jsx(Line, null, __jsx(Meta, null, updatedAt ? __jsx(DispatchUpdatedDate, null, \"\\u041E\\u0442\\u0440\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u043E\", ' ', new Date(updatedAt).toLocaleString('ru-RU', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  })) : __jsx(DispatchTime, {\n    text: time\n  }), onReply && __jsx(ReplyButton, {\n    appearance: 'clear',\n    onClick: onReply\n  }, \"\\u041E\\u0442\\u0432\\u0435\\u0442\\u0438\\u0442\\u044C\")), __jsx(Likes, null, count > 0 && __jsx(Tooltip, {\n    text: `${count} ${textLikes} это нравится`\n  }, __jsx(LikesButton, {\n    type: 'button',\n    onClick: onShowLikes,\n    appearance: 'clear',\n    size: 'xs'\n  }, __jsx(\"span\", {\n    style: {\n      color\n    }\n  }, count))), __jsx(Tooltip, {\n    text: 'Мне нравится'\n  }, __jsx(LikeButton, {\n    type: 'button',\n    onClick: onClick,\n    appearance: 'clear',\n    size: 'xs'\n  }, __jsx(Icon, {\n    icon: 'heart',\n    size: 'xs',\n    stroke: color,\n    fill: isLiked ? 'var(--default-color-accent)' : 'none'\n  })))))));\n};\nexport default Comment;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getLabelCategory } from '../atomic-ui/utils/functions';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport { useMutate } from '../hooks/useMutate';\nimport ProjectCard from '../components/ProjectCard';\nimport { updateUser } from '../store/actions/user';\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nimport ContentLayout from '../layouts/content';\nconst TITLE = 'Проекты';\nconst START_OFFSET = 6;\nconst LIMIT = 6;\nconst Container = styled.aside.withConfig({\n  displayName: \"projects__Container\",\n  componentId: \"sc-3yxn9c-0\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\n\nconst Projects = ({\n  store\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const router = useRouter();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    filters: [{\n      type: 'DATEPICKER'\n    }, {\n      type: 'SELECT',\n      options: store === null || store === void 0 ? void 0 : store.categories.map(category => ({\n        value: category.id,\n        label: getLabelCategory(category.name)\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    query: queries.GET_PROJECTS,\n    startOffset: START_OFFSET,\n    store: {\n      documents: store === null || store === void 0 ? void 0 : store.projects\n    }\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, documents.map(project => {\n    var _user$projects, _project$company;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    if (project.category.id !== router.query.category) return null;\n    return /*#__PURE__*/React.createElement(ProjectCard, {\n      key: project.id,\n      project: project,\n      owned: owned,\n      liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user,\n        owned\n      }),\n      onLike: (user === null || user === void 0 ? void 0 : user.email) && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onAdd: (user === null || user === void 0 ? void 0 : user.email) && recall(onProjectAdd, {\n        id: project.id\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    });\n  })));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let projects = [];\n  let categories = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_PROJECTS,\n      variables: {\n        status: 'PUBLISHED'\n      }\n    });\n\n    if (response && response.data) {\n      projects = response.data.getProjects;\n      categories = response.data.getCategories;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        projects,\n        categories\n      }\n    }\n  };\n}\nexport default Projects;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/projects.js"],"names":["React","useRouter","styled","useSelector","useDispatch","getLabelCategory","initializeApollo","useHelper","useMutate","ProjectCard","updateUser","onProjectLink","onProjectAdd","onProjectScreenshot","onUserAboutMore","onUserLink","queries","ContentLayout","TITLE","START_OFFSET","LIMIT","Container","aside","Projects","store","recall","mutate","router","user","state","dispatch","type","options","categories","map","category","value","id","label","name","GET_PROJECTS","documents","projects","project","owned","find","candidate","query","likedProjects","item","auth","email","LIKE_PROJECT","response","data","likeProject","company","recipient","author","GET_USER_CHATS","mutation","SEND_MESSAGE","_","key","screenshots","preview","getServerSideProps","client","GET_META_PROJECTS","variables","status","getProjects","getCategories","err","console","log","props"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { getLabelCategory } from '../atomic-ui/utils/functions'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport { useMutate } from '../hooks/useMutate'\nimport ProjectCard from '../components/ProjectCard'\nimport { updateUser } from '../store/actions/user'\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project'\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user'\nimport queries from '../graphql/queries'\nimport ContentLayout from '../layouts/content'\n\nconst TITLE = 'Проекты'\nconst START_OFFSET = 6\nconst LIMIT = 6\n\nconst Container = styled.aside`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nconst Projects = ({ store }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const router = useRouter()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      limit={LIMIT}\n      filters={[\n        { type: 'DATEPICKER' },\n        {\n          type: 'SELECT',\n          options: store?.categories.map((category) => ({\n            value: category.id,\n            label: getLabelCategory(category.name)\n          }))\n        }\n      ]}\n      options={[\n        { label: 'Компания', value: 'company' },\n        { label: 'Участники', value: 'members' },\n        { label: 'Дата публикации', value: 'createdAt' }\n      ]}\n      query={queries.GET_PROJECTS}\n      startOffset={START_OFFSET}\n      store={{ documents: store?.projects }}>\n      {({ documents }) => (\n        <Container>\n          {documents.map((project) => {\n            const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n\n            if (project.category.id !== router.query.category) return null\n\n            return (\n              <ProjectCard\n                key={project.id}\n                project={project}\n                owned={owned}\n                liked={!!(user?.likedProjects || []).find((item) => item.id === project.id)}\n                onLink={recall(onProjectLink, { id: project.id, auth: user, owned })}\n                onLike={\n                  user?.email &&\n                  mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                    dispatch(updateUser(response.data.likeProject))\n                  )\n                }\n                onAdd={user?.email && recall(onProjectAdd, { id: project.id })}\n                onAboutMore={recall(onUserAboutMore, { user: project })}\n                onCompanyLink={recall(onUserLink, {\n                  id: project.company?.email,\n                  auth: user?.email,\n                  recipient: project.author,\n                  query: queries.GET_USER_CHATS,\n                  mutation: queries.SEND_MESSAGE\n                })}\n                onScreenshotClick={(_, key) =>\n                  recall(onProjectScreenshot, {\n                    screenshots: [project.preview, ...project.screenshots],\n                    key\n                  })()\n                }\n              />\n            )\n          })}\n        </Container>\n      )}\n    </ContentLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let projects = []\n  let categories = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_PROJECTS,\n      variables: {\n        status: 'PUBLISHED'\n      }\n    })\n\n    if (response && response.data) {\n      projects = response.data.getProjects\n      categories = response.data.getCategories\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        projects,\n        categories\n      }\n    }\n  }\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
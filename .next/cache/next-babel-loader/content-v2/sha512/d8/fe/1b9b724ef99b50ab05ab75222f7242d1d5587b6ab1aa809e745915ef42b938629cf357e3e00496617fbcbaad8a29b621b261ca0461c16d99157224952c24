{"ast":null,"code":"import React, { useState, useRef } from 'react';\nimport { useRouter } from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport Row from '../../atomic-ui/components/Row';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport DrawerBase from '../../atomic-ui/components/Drawer';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Column from '../../atomic-ui/components/Column';\nimport { setDrawer } from '../../store/actions/drawer';\nconst Wrap = styled(DrawerBase).withConfig({\n  displayName: \"Drawer__Wrap\",\n  componentId: \"sc-15dabmr-0\"\n})([\"\"]);\nconst BrandLogo = styled.img.withConfig({\n  displayName: \"Drawer__BrandLogo\",\n  componentId: \"sc-15dabmr-1\"\n})([\"object-fit:contain;width:100%;height:100%;\"]);\nconst Container = styled(Column).withConfig({\n  displayName: \"Drawer__Container\",\n  componentId: \"sc-15dabmr-2\"\n})([\"height:100%;flex-grow:1;&.fade-enter{opacity:0;}&.fade-enter-active{opacity:1;transition:opacity 100ms,blur 100ms;}&.fade-exit{opacity:1;}&.fade-exit-active{opacity:0;transition:opacity 100ms,blur 100ms;}\"]);\nconst Header = styled(Row).withConfig({\n  displayName: \"Drawer__Header\",\n  componentId: \"sc-15dabmr-3\"\n})([\"display:flex;justify-content:space-between;grid-gap:var(--default-gap);\"]);\nconst Content = styled.div.withConfig({\n  displayName: \"Drawer__Content\",\n  componentId: \"sc-15dabmr-4\"\n})([\"display:flex;flex-direction:column;flex-grow:1;\"]);\nconst BackButton = styled(Button).withConfig({\n  displayName: \"Drawer__BackButton\",\n  componentId: \"sc-15dabmr-5\"\n})([\"display:none;@media only screen and (max-width:480px){display:flex;justify-content:center;align-items:center;}\"]);\nexport const Drawer = () => {\n  var _root$settings$genera;\n\n  const router = useRouter();\n  const {\n    root,\n    drawer\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const [loadingExportToPDF, setLoadingExportToPDF] = useState(false);\n  const containerForExportToPDF = useRef(null);\n\n  const onDrawerBack = async () => {\n    await router.push({\n      pathname: router.pathname,\n      query: {}\n    }, undefined, {\n      shallow: true\n    });\n    dispatch(setDrawer(null));\n  };\n\n  const onExportToPDF = () => {\n    setLoadingExportToPDF(true);\n    html2canvas(containerForExportToPDF.current).then(canvas => {\n      const [margin, position] = [6, 6];\n      const imgData = canvas.toDataURL('image/png', 1.0);\n      const pdf = new jsPDF('p', 'px', 'a4');\n      const width = pdf.internal.pageSize.getWidth();\n      const height = pdf.internal.pageSize.getHeight();\n      const widthRatio = width / canvas.width;\n      const heightRatio = height / canvas.height;\n      const ratio = widthRatio > heightRatio ? heightRatio : widthRatio;\n      pdf.addImage(imgData, 'PNG', margin, position, canvas.width * ratio - margin * 2, canvas.height * ratio - margin * 2);\n      pdf.save(`${drawer.pdfName}.pdf`);\n      setLoadingExportToPDF(false);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    key: drawer.history.length,\n    side: drawer.side,\n    half: drawer.half,\n    isOpen: drawer.open,\n    onBack: onDrawerBack\n  }, /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Row, null, drawer.side === 'left' && drawer.half ? /*#__PURE__*/React.createElement(Button, {\n    appearance: 'clear',\n    onClick: () => router.push('/')\n  }, /*#__PURE__*/React.createElement(BrandLogo, {\n    src: (_root$settings$genera = root.settings.general.logotype) === null || _root$settings$genera === void 0 ? void 0 : _root$settings$genera.path,\n    alt: 'Logotype'\n  })) : /*#__PURE__*/React.createElement(BackButton, {\n    size: 's',\n    kind: 'icon',\n    onClick: onDrawerBack,\n    revert: true\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'arrowLeft',\n    size: 's',\n    stroke: 'var(--default-color-accent)'\n  })), drawer.title && /*#__PURE__*/React.createElement(Difinition, {\n    color: drawer.color,\n    icon: drawer.icon,\n    text: drawer.title\n  })), drawer.pdfName && /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Экспорт проекта в PDF'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 's',\n    kind: 'icon',\n    appearance: 'clear',\n    disabled: loadingExportToPDF,\n    onClick: onExportToPDF\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'scan',\n    size: 's',\n    stroke: 'var(--ghost-color-text)'\n  }))))), drawer.title && /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Content, {\n    ref: containerForExportToPDF\n  }, drawer.content)));\n};\nexport default Drawer;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport Link from 'next/link';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Row from '../../atomic-ui/components/Row';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Notice from '../../atomic-ui/components/Notice';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Indicator from '../../atomic-ui/components/Indicator';\nimport Chart from '../../atomic-ui/components/Chart';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useEntityQuery } from '../../hooks/useEntityQuery';\nimport DashboardLayout from '../../layouts/dashboard';\nimport Processed from '../../components/Processed';\nimport FadeLoad from '../../components/FadeLoad';\nimport LazyLoad from '../../components/LazyLoad';\nimport ProjectCard from '../../components/ProjectCard';\nimport ArticleCard from '../../components/ArticleCard';\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user';\nimport { onProjectLink } from '../../store/helpers/project';\nimport { onArticleLink } from '../../store/helpers/article';\nimport { onCategoryLink } from '../../store/helpers/category';\nimport { onTicketLink } from '../../store/helpers/ticket';\nimport { onRoleLink } from '../../store/helpers/role';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Панель администратора';\nconst GREETING_TEXT = 'Добро пожаловать!';\nconst statuses = ['PUBLISHED', 'MODERATION'];\nconst Container = styled(Column).withConfig({\n  displayName: \"dashboard__Container\",\n  componentId: \"yu92ty-0\"\n})([\"grid-gap:10px;\"]);\nconst Statistics = styled(Row).withConfig({\n  displayName: \"dashboard__Statistics\",\n  componentId: \"yu92ty-1\"\n})([\"grid-gap:var(--default-gap);flex-wrap:wrap;\"]);\nconst Graph = styled(Chart).withConfig({\n  displayName: \"dashboard__Graph\",\n  componentId: \"yu92ty-2\"\n})([\"height:475px;flex-grow:1;\"]);\nconst Header = styled(Row).withConfig({\n  displayName: \"dashboard__Header\",\n  componentId: \"yu92ty-3\"\n})([\"flex-wrap:wrap;justify-content:space-between;align-items:center;a{color:var(--default-color-accent);}\"]);\n\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1);\n\nconst getEntityLink = (id, type, user, recall) => {\n  const owned = id === user.email;\n\n  switch (type) {\n    case 'USER':\n      return recall(onUserLink, {\n        id,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      });\n\n    case 'CATEGORY':\n      return recall(onCategoryLink, {\n        id\n      });\n\n    case 'PROJECT':\n      return recall(onProjectLink, {\n        id,\n        user\n      });\n\n    case 'ARTICLE':\n      return recall(onArticleLink, {\n        id\n      });\n\n    case 'ROLE':\n      return recall(onRoleLink, {\n        id\n      });\n\n    case 'TICKET':\n      return recall(onTicketLink, {\n        id,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      });\n  }\n};\n\nconst Dashboard = () => {\n  var _dataStatistics$getDa;\n\n  const recall = useHelper();\n  const {\n    setQuery\n  } = useEntityQuery();\n  const user = useSelector(state => state.user);\n  const {\n    data: dataStatistics,\n    loading: loadingStatistics,\n    error: errorStatistics\n  } = useQuery(queries.GET_META_DASHBOARD_STATISTICS);\n  const {\n    data: dataActivities,\n    loading: loadingActivities,\n    error: errorActivities\n  } = useQuery(queries.GET_META_DASHBOARD_ACTIVITIES);\n  const {\n    data: dataProjects,\n    loading: loadingProjects,\n    error: errorProjects\n  } = useQuery(queries.GET_META_DASHBOARD_PREVIEW_PROJECTS, {\n    variables: {\n      status: statuses,\n      offset: 0,\n      limit: 4\n    }\n  });\n  const {\n    data: dataArticles,\n    loading: loadingArticles,\n    error: errorArticles\n  } = useQuery(queries.GET_META_DASHBOARD_PREVIEW_ARTICLES, {\n    variables: {\n      status: statuses,\n      offset: 0,\n      limit: 4\n    }\n  });\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'activity',\n    text: GREETING_TEXT\n  }), /*#__PURE__*/React.createElement(Grid, {\n    length: 'auto-fit'\n  }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Statistics, {\n    length: 'auto-fit'\n  }, /*#__PURE__*/React.createElement(Processed, {\n    data: dataStatistics,\n    loading: loadingStatistics,\n    error: errorStatistics\n  }, dataStatistics === null || dataStatistics === void 0 ? void 0 : (_dataStatistics$getDa = dataStatistics.getDashboardStatistics) === null || _dataStatistics$getDa === void 0 ? void 0 : _dataStatistics$getDa.map(statistic => /*#__PURE__*/React.createElement(Indicator, {\n    key: statistic.title,\n    label: statistic.title,\n    value: statistic.total,\n    movement: 0\n  })))), /*#__PURE__*/React.createElement(Processed, {\n    data: dataStatistics,\n    loading: loadingStatistics,\n    error: errorStatistics\n  }, /*#__PURE__*/React.createElement(Graph, {\n    data: dataStatistics === null || dataStatistics === void 0 ? void 0 : dataStatistics.getDashboardStatistics.map((statistic, index) => ({\n      id: statistic.title,\n      color: `hsl(315, 70%, ${5 + index}0%)`,\n      data: statistic.graph.map(item => ({\n        x: capitalize(new Date(Number(item.createdAt)).toLocaleString('ru-RU', {\n          month: 'short'\n        })),\n        y: item.count\n      }))\n    }))\n  }))), /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h3'\n  }, \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u043E\\u0441\\u0442\\u044C \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439\")), /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Processed, {\n    data: dataActivities,\n    loading: loadingActivities,\n    error: errorActivities\n  }, ((dataActivities === null || dataActivities === void 0 ? void 0 : dataActivities.getDashboardActivities) || []).map(activity => {\n    var _activity$user, _activity$user$avatar;\n\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: activity.id\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(Notice, {\n      key: activity.id,\n      img: (_activity$user = activity.user) === null || _activity$user === void 0 ? void 0 : (_activity$user$avatar = _activity$user.avatar) === null || _activity$user$avatar === void 0 ? void 0 : _activity$user$avatar.path,\n      title: activity.user.name,\n      message: activity.message,\n      date: activity.createdAt,\n      onClick: () => setQuery(activity.identityString, activity.entityType.toLowerCase(), getEntityLink(activity.identityString, activity.entityType, user, recall)),\n      appearance: 'clear'\n    })));\n  }))))), /*#__PURE__*/React.createElement(Grid, {\n    length: 'auto-fit'\n  }, /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h3'\n  }, \"\\u041F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043D\\u0438\\u0435 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\"), /*#__PURE__*/React.createElement(Link, {\n    href: '/dashboard/projects'\n  }, /*#__PURE__*/React.createElement(\"a\", null, \"\\u0411\\u043E\\u043B\\u044C\\u0448\\u0435 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432\"))), /*#__PURE__*/React.createElement(Grid, {\n    length: 'auto-fit',\n    percentage: 'minmax(395px, 1fr)'\n  }, /*#__PURE__*/React.createElement(Processed, {\n    data: dataProjects,\n    loading: loadingProjects,\n    error: errorProjects\n  }, ((dataProjects === null || dataProjects === void 0 ? void 0 : dataProjects.getProjects) || []).map(project => {\n    var _project$company;\n\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: project.id\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(ProjectCard, {\n      project: project,\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        user\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      withStatus: true\n    })));\n  })))), /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h3'\n  }, \"\\u041F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043D\\u0438\\u0435 \\u0441\\u0442\\u0430\\u0442\\u044C\\u0438\"), /*#__PURE__*/React.createElement(Link, {\n    href: '/dashboard/articles'\n  }, /*#__PURE__*/React.createElement(\"a\", null, \"\\u0411\\u043E\\u043B\\u044C\\u0448\\u0435 \\u0441\\u0442\\u0430\\u0442\\u0435\\u0439\"))), /*#__PURE__*/React.createElement(Grid, {\n    length: 'auto-fit',\n    percentage: 'minmax(395px, 1fr)'\n  }, /*#__PURE__*/React.createElement(Processed, {\n    data: dataArticles,\n    loading: loadingArticles,\n    error: errorArticles\n  }, ((dataArticles === null || dataArticles === void 0 ? void 0 : dataArticles.getArticles) || []).map(article => /*#__PURE__*/React.createElement(FadeLoad, {\n    key: article.id\n  }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(ArticleCard, {\n    article: article,\n    onLink: recall(onArticleLink, {\n      id: article.id\n    }),\n    withStatus: true\n  })))))))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/pages/dashboard/index.js"],"names":["React","Link","styled","useQuery","useSelector","Row","Grid","Column","Title","Notice","Difinition","Indicator","Chart","useHelper","useEntityQuery","DashboardLayout","Processed","FadeLoad","LazyLoad","ProjectCard","ArticleCard","onUserAboutMore","onUserLink","onProjectLink","onArticleLink","onCategoryLink","onTicketLink","onRoleLink","queries","TITLE","GREETING_TEXT","statuses","Container","Statistics","Graph","Header","capitalize","string","charAt","toUpperCase","slice","getEntityLink","id","type","user","recall","owned","email","auth","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","Dashboard","setQuery","state","data","dataStatistics","loading","loadingStatistics","error","errorStatistics","GET_META_DASHBOARD_STATISTICS","dataActivities","loadingActivities","errorActivities","GET_META_DASHBOARD_ACTIVITIES","dataProjects","loadingProjects","errorProjects","GET_META_DASHBOARD_PREVIEW_PROJECTS","variables","status","offset","limit","dataArticles","loadingArticles","errorArticles","GET_META_DASHBOARD_PREVIEW_ARTICLES","getDashboardStatistics","map","statistic","title","total","index","color","graph","item","x","Date","Number","createdAt","toLocaleString","month","y","count","getDashboardActivities","activity","avatar","path","name","message","identityString","entityType","toLowerCase","getProjects","project","company","recipient","author","query","mutation","getArticles","article"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Link from 'next/link'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Grid from '../../atomic-ui/components/Grid'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Notice from '../../atomic-ui/components/Notice'\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport Indicator from '../../atomic-ui/components/Indicator'\nimport Chart from '../../atomic-ui/components/Chart'\n\nimport { useHelper } from '../../hooks/useHelper'\nimport { useEntityQuery } from '../../hooks/useEntityQuery'\nimport DashboardLayout from '../../layouts/dashboard'\nimport Processed from '../../components/Processed'\nimport FadeLoad from '../../components/FadeLoad'\nimport LazyLoad from '../../components/LazyLoad'\nimport ProjectCard from '../../components/ProjectCard'\nimport ArticleCard from '../../components/ArticleCard'\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user'\nimport { onProjectLink } from '../../store/helpers/project'\nimport { onArticleLink } from '../../store/helpers/article'\nimport { onCategoryLink } from '../../store/helpers/category'\nimport { onTicketLink } from '../../store/helpers/ticket'\nimport { onRoleLink } from '../../store/helpers/role'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Панель администратора'\nconst GREETING_TEXT = 'Добро пожаловать!'\n\nconst statuses = ['PUBLISHED', 'MODERATION']\n\nconst Container = styled(Column)`\n  grid-gap: 10px;\n`\n\nconst Statistics = styled(Row)`\n  grid-gap: var(--default-gap);\n  flex-wrap: wrap;\n`\n\nconst Graph = styled(Chart)`\n  height: 475px;\n  flex-grow: 1;\n`\n\nconst Header = styled(Row)`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  align-items: center;\n\n  a {\n    color: var(--default-color-accent);\n  }\n`\n\nconst capitalize = (string) => string.charAt(0).toUpperCase() + string.slice(1)\n\nconst getEntityLink = (id, type, user, recall) => {\n  const owned = id === user.email\n\n  switch (type) {\n    case 'USER':\n      return recall(onUserLink, {\n        id,\n        auth: user?.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })\n    case 'CATEGORY':\n      return recall(onCategoryLink, { id })\n    case 'PROJECT':\n      return recall(onProjectLink, { id, user })\n    case 'ARTICLE':\n      return recall(onArticleLink, { id })\n    case 'ROLE':\n      return recall(onRoleLink, { id })\n    case 'TICKET':\n      return recall(onTicketLink, { id, auth: user?.email })\n  }\n}\n\nconst Dashboard = () => {\n  const recall = useHelper()\n  const { setQuery } = useEntityQuery()\n  const user = useSelector((state) => state.user)\n\n  const { data: dataStatistics, loading: loadingStatistics, error: errorStatistics } = useQuery(\n    queries.GET_META_DASHBOARD_STATISTICS\n  )\n\n  const { data: dataActivities, loading: loadingActivities, error: errorActivities } = useQuery(\n    queries.GET_META_DASHBOARD_ACTIVITIES\n  )\n\n  const { data: dataProjects, loading: loadingProjects, error: errorProjects } = useQuery(\n    queries.GET_META_DASHBOARD_PREVIEW_PROJECTS,\n    {\n      variables: {\n        status: statuses,\n        offset: 0,\n        limit: 4\n      }\n    }\n  )\n\n  const { data: dataArticles, loading: loadingArticles, error: errorArticles } = useQuery(\n    queries.GET_META_DASHBOARD_PREVIEW_ARTICLES,\n    {\n      variables: {\n        status: statuses,\n        offset: 0,\n        limit: 4\n      }\n    }\n  )\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <Difinition icon={'activity'} text={GREETING_TEXT} />\n\n      <Grid length={'auto-fit'}>\n        <Column>\n          <Statistics length={'auto-fit'}>\n            <Processed data={dataStatistics} loading={loadingStatistics} error={errorStatistics}>\n              {dataStatistics?.getDashboardStatistics?.map((statistic) => (\n                <Indicator\n                  key={statistic.title}\n                  label={statistic.title}\n                  value={statistic.total}\n                  movement={0}\n                />\n              ))}\n            </Processed>\n          </Statistics>\n\n          <Processed data={dataStatistics} loading={loadingStatistics} error={errorStatistics}>\n            <Graph\n              data={dataStatistics?.getDashboardStatistics.map((statistic, index) => ({\n                id: statistic.title,\n                color: `hsl(315, 70%, ${5 + index}0%)`,\n                data: statistic.graph.map((item) => ({\n                  x: capitalize(\n                    new Date(Number(item.createdAt)).toLocaleString('ru-RU', {\n                      month: 'short'\n                    })\n                  ),\n                  y: item.count\n                }))\n              }))}\n            />\n          </Processed>\n        </Column>\n\n        <Container>\n          <Header>\n            <Title tag={'h3'}>Активность пользователей</Title>\n          </Header>\n\n          <Column>\n            <Processed data={dataActivities} loading={loadingActivities} error={errorActivities}>\n              {(dataActivities?.getDashboardActivities || []).map((activity) => (\n                <FadeLoad key={activity.id}>\n                  <LazyLoad>\n                    <Notice\n                      key={activity.id}\n                      img={activity.user?.avatar?.path}\n                      title={activity.user.name}\n                      message={activity.message}\n                      date={activity.createdAt}\n                      onClick={() =>\n                        setQuery(\n                          activity.identityString,\n                          activity.entityType.toLowerCase(),\n                          getEntityLink(activity.identityString, activity.entityType, user, recall)\n                        )\n                      }\n                      appearance={'clear'}\n                    />\n                  </LazyLoad>\n                </FadeLoad>\n              ))}\n            </Processed>\n          </Column>\n        </Container>\n      </Grid>\n\n      <Grid length={'auto-fit'}>\n        <Container>\n          <Header>\n            <Title tag={'h3'}>Последние проекты</Title>\n            <Link href={'/dashboard/projects'}>\n              <a>Больше проектов</a>\n            </Link>\n          </Header>\n\n          <Grid length={'auto-fit'} percentage={'minmax(395px, 1fr)'}>\n            <Processed data={dataProjects} loading={loadingProjects} error={errorProjects}>\n              {(dataProjects?.getProjects || []).map((project) => (\n                <FadeLoad key={project.id}>\n                  <LazyLoad>\n                    <ProjectCard\n                      project={project}\n                      onLink={recall(onProjectLink, { id: project.id, user })}\n                      onAboutMore={recall(onUserAboutMore, { user: project })}\n                      onCompanyLink={recall(onUserLink, {\n                        id: project.company?.email,\n                        auth: user?.email,\n                        recipient: project.author,\n                        query: queries.GET_USER_CHATS,\n                        mutation: queries.SEND_MESSAGE\n                      })}\n                      withStatus\n                    />\n                  </LazyLoad>\n                </FadeLoad>\n              ))}\n            </Processed>\n          </Grid>\n        </Container>\n\n        <Container>\n          <Header>\n            <Title tag={'h3'}>Последние статьи</Title>\n            <Link href={'/dashboard/articles'}>\n              <a>Больше статей</a>\n            </Link>\n          </Header>\n\n          <Grid length={'auto-fit'} percentage={'minmax(395px, 1fr)'}>\n            <Processed data={dataArticles} loading={loadingArticles} error={errorArticles}>\n              {(dataArticles?.getArticles || []).map((article) => (\n                <FadeLoad key={article.id}>\n                  <LazyLoad>\n                    <ArticleCard\n                      article={article}\n                      onLink={recall(onArticleLink, { id: article.id })}\n                      withStatus\n                    />\n                  </LazyLoad>\n                </FadeLoad>\n              ))}\n            </Processed>\n          </Grid>\n        </Container>\n      </Grid>\n    </DashboardLayout>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}
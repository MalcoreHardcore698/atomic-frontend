{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/user';\nimport UserSuit from '../../components/UserSuit';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { setDocuments } from '../../store/actions/documents';\nimport { users as filterConfig } from '../../components/FilterBar/config';\nimport { COMMON_START_OFFSET, DASHBOARD_LOAD_LIMIT } from '../../constants';\nimport { useUser } from '../../hooks/useUser';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Пользователи';\n\nconst Users = () => {\n  const {\n    onCreate,\n    onEdit,\n    ...methods\n  } = useUser({\n    isManage: true\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    icon: 'user2',\n    field: 'email',\n    template: template,\n    entityType: 'user',\n    getType: 'getUsers',\n    filterConfig: filterConfig,\n    limit: DASHBOARD_LOAD_LIMIT,\n    getQuery: queries.GET_USERS,\n    startOffset: COMMON_START_OFFSET,\n    deleteQuery: queries.DELETE_USER,\n    emptyMessage: 'Пользователей нет',\n    deleteEntityMultiText: 'пользователи',\n    deleteEntitySingleText: 'пользователь',\n    buttonCreateText: 'Создать пользователя',\n    render: document => /*#__PURE__*/React.createElement(UserSuit, _extends({}, methods, {\n      user: document,\n      withSocials: false,\n      preview: true\n    })),\n    onCreate: onCreate,\n    onEdit: onEdit\n  });\n};\n\nexport default Users;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/pages/dashboard/users.js"],"names":["React","useEffect","useDispatch","template","UserSuit","ContentLayout","setDocuments","users","filterConfig","COMMON_START_OFFSET","DASHBOARD_LOAD_LIMIT","useUser","queries","TITLE","Users","onCreate","onEdit","methods","isManage","dispatch","GET_USERS","DELETE_USER","document"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,QAAP,MAAqB,iDAArB;AAEA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,SAASC,KAAK,IAAIC,YAAlB,QAAsC,mCAAtC;AACA,SAASC,mBAAT,EAA8BC,oBAA9B,QAA0D,iBAA1D;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,MAAMC,KAAK,GAAG,cAAd;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoB,OAAGC;AAAvB,MAAmCN,OAAO,CAAC;AAAEO,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAAhD;AACA,QAAMC,QAAQ,GAAGjB,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,QAAQ,CAACb,YAAY,CAAC,IAAD,CAAb,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEO,KADT;AAEE,IAAA,IAAI,EAAE,OAFR;AAGE,IAAA,KAAK,EAAE,OAHT;AAIE,IAAA,QAAQ,EAAEV,QAJZ;AAKE,IAAA,UAAU,EAAE,MALd;AAME,IAAA,OAAO,EAAE,UANX;AAOE,IAAA,YAAY,EAAEK,YAPhB;AAQE,IAAA,KAAK,EAAEE,oBART;AASE,IAAA,QAAQ,EAAEE,OAAO,CAACQ,SATpB;AAUE,IAAA,WAAW,EAAEX,mBAVf;AAWE,IAAA,WAAW,EAAEG,OAAO,CAACS,WAXvB;AAYE,IAAA,YAAY,EAAE,mBAZhB;AAaE,IAAA,qBAAqB,EAAE,cAbzB;AAcE,IAAA,sBAAsB,EAAE,cAd1B;AAeE,IAAA,gBAAgB,EAAE,sBAfpB;AAgBE,IAAA,MAAM,EAAGC,QAAD,iBAAc,oBAAC,QAAD,eAAcL,OAAd;AAAuB,MAAA,IAAI,EAAEK,QAA7B;AAAuC,MAAA,WAAW,EAAE,KAApD;AAA2D,MAAA,OAAO;AAAlE,OAhBxB;AAiBE,IAAA,QAAQ,EAAEP,QAjBZ;AAkBE,IAAA,MAAM,EAAEC;AAlBV,IADF;AAsBD,CA9BD;;AAgCA,eAAeF,KAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport template from '../../atomic-ui/components/Table/templates/user'\n\nimport UserSuit from '../../components/UserSuit'\nimport ContentLayout from '../../layouts/dashboard/content'\nimport { setDocuments } from '../../store/actions/documents'\nimport { users as filterConfig } from '../../components/FilterBar/config'\nimport { COMMON_START_OFFSET, DASHBOARD_LOAD_LIMIT } from '../../constants'\nimport { useUser } from '../../hooks/useUser'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Пользователи'\n\nconst Users = () => {\n  const { onCreate, onEdit, ...methods } = useUser({ isManage: true })\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      icon={'user2'}\n      field={'email'}\n      template={template}\n      entityType={'user'}\n      getType={'getUsers'}\n      filterConfig={filterConfig}\n      limit={DASHBOARD_LOAD_LIMIT}\n      getQuery={queries.GET_USERS}\n      startOffset={COMMON_START_OFFSET}\n      deleteQuery={queries.DELETE_USER}\n      emptyMessage={'Пользователей нет'}\n      deleteEntityMultiText={'пользователи'}\n      deleteEntitySingleText={'пользователь'}\n      buttonCreateText={'Создать пользователя'}\n      render={(document) => <UserSuit {...methods} user={document} withSocials={false} preview />}\n      onCreate={onCreate}\n      onEdit={onEdit}\n    />\n  )\n}\n\nexport default Users\n"]},"metadata":{},"sourceType":"module"}
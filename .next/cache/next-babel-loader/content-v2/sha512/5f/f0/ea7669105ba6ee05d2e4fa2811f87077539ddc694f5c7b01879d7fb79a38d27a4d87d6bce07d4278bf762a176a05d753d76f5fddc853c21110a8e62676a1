{"ast":null,"code":"import React from 'react';\nimport Head from 'next/head';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport NextNprogress from 'nextjs-progressbar';\nimport 'react-lazy-load-image-component/src/effects/opacity.css';\nimport '../atomic-ui/theme/default.css';\nimport '../atomic-ui/assets/styles/styles.css';\nimport theme from '../atomic-ui/theme';\nimport { useApollo, initializeApollo } from '../apollo';\nimport { useStore, initializeStore } from '../store';\nconst GlobalStyle = createGlobalStyle`\n  #nprogress {\n    position: fixed;\n    top: 0;\n    left: 0;\n    z-index: var(--z-override);\n    width: 100vw;\n    height: 100vh;\n    background: rgba(255, 255, 255, 0.45);\n    cursor: default;\n\n    .spinner, .spinner-icon {\n      display: none;\n    }\n  }\n`;\n\nconst App = ({\n  Component,\n  pageProps\n}) => {\n  const client = useApollo(pageProps.initialApolloState);\n  const store = useStore(pageProps.initialReduxState);\n  return /*#__PURE__*/React.createElement(Provider, {\n    store: store\n  }, /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client\n  }, /*#__PURE__*/React.createElement(Head, null, /*#__PURE__*/React.createElement(\"meta\", {\n    charSet: 'utf-8'\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: 'viewport',\n    content: 'minimum-scale=1, initial-scale=1, width=device-width'\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: 'theme-color',\n    content: '#000000'\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: 'yandex-verification',\n    content: 'bfd04b96d30382f5'\n  })), /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(GlobalStyle, null), /*#__PURE__*/React.createElement(Component, pageProps), /*#__PURE__*/React.createElement(NextNprogress, {\n    color: 'var(--default-color-accent)',\n    startPosition: 0.3,\n    stopDelayMs: 200,\n    height: 3\n  }))));\n};\n\nexport const getServerSideProps = async () => {\n  const store = initializeStore();\n  const client = initializeApollo();\n  return {\n    props: {\n      initialReduxState: store.getState(),\n      initialApolloState: client.cache.extract()\n    },\n    revalidate: 1\n  };\n};\nexport default App;","map":null,"metadata":{},"sourceType":"module"}
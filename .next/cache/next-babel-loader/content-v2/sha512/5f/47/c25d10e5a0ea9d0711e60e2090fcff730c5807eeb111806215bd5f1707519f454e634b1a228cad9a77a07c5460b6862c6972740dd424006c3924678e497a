{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Controller } from 'react-hook-form';\nimport { useQuery } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Container from '../../atomic-ui/components/Container';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Title from '../../atomic-ui/components/Title';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Select from '../../atomic-ui/components/Select';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport TextArea from '../../atomic-ui/components/TextArea';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport Message from '../../atomic-ui/components/Message';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nimport { Loader } from '../Styled';\nimport queries from '../../graphql/queries';\nexport const LIMIT_USERS = 15;\nexport const Messages = styled(Column).withConfig({\n  displayName: \"FormTicket__Messages\",\n  componentId: \"n5aw2g-0\"\n})([\"grid-gap:5px;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"FormTicket__Header\",\n  componentId: \"n5aw2g-1\"\n})([\"justify-content:space-between;@media only screen and (max-width:480px){flex-direction:column;align-items:end;grid-gap:var(--default-gap);}\"]);\nexport const Ticket = ({\n  title,\n  ticket,\n  appearance,\n  mutation,\n  className,\n  withContainer,\n  isClient,\n  onSubmit\n}) => {\n  const [checkedAll, setCheckedAll] = useState(false); // const [offsetUsers, setOffsetUsers] = useState(0)\n  // const [usersSelectInput, setUsersSelectInput] = useState('')\n\n  const [messages, setMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const {\n    data,\n    loading: loadingTicket,\n    error: errorTicket\n  } = ticket ? useQuery(queries.GET_TICKET, {\n    variables: {\n      id: ticket\n    },\n    fetchPolicy: 'no-cache'\n  }) : {\n    data: {\n      getTicket: {}\n    },\n    loading: false,\n    error: false\n  };\n  const {\n    data: dataUsers,\n    loading: loadingUsers // refetch: searchUsers,\n    // fetchMore: updateUsers\n\n  } = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      // offset: offsetUsers,\n      account: ['INDIVIDUAL', 'OFICIAL']\n    }\n  });\n  const {\n    data: dataCounsellors,\n    loading: loadingCounsellors\n  } = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      account: ['INDIVIDUAL', 'ADMIN']\n    }\n  });\n  const {\n    data: dataCategories,\n    loading: loadingCategories\n  } = useQuery(queries.GET_CATEGORIES, {\n    variables: {\n      type: 'TICKET'\n    }\n  });\n\n  const handleCheckedMessages = e => {\n    setCheckedAll(e.target.checked);\n  };\n\n  const handleCheckedMessage = (message, value) => {\n    setMessages(prev => prev.map(item => item.id === message.id ? { ...item,\n      checked: value\n    } : item));\n  };\n\n  const handleDeleteChecked = () => {\n    setMessages(prev => prev.filter(message => !message.checked));\n  };\n\n  const handleMessageEdit = (message, text) => {\n    setMessages(prev => prev.map(item => item.id === message.id ? { ...item,\n      updatedAt: new Date(),\n      text\n    } : item));\n  };\n\n  const handleMessageDelete = message => {\n    setMessages(prev => prev.filter(item => item.id !== message.id));\n  };\n\n  useEffect(() => {\n    if (ticket && !loadingTicket && data) {\n      setMessages(data.getTicket.messages.map(message => ({ ...message,\n        checked: false\n      })));\n    }\n  }, [ticket, data, loadingTicket]);\n  useEffect(() => {\n    if (!loadingUsers && dataUsers) {\n      setUsers(prev => [...prev, ...dataUsers.getUsers]);\n    }\n  }, [dataUsers, loadingUsers]);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => onSubmit({ ...form,\n      messages\n    }, action)\n  }, ({\n    register,\n    loading,\n    errors,\n    control,\n    getValues\n  }) => {\n    var _data$getTicket, _data$getTicket2, _data$getTicket2$mess, _data$getTicket3, _data$getTicket4, _data$getTicket5;\n\n    return !loadingTicket && data ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, title && !withContainer && /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, title), title && withContainer && /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Title, {\n      style: {\n        textAlign: 'center'\n      },\n      tag: 'h4'\n    }, title)), errors && errors.title && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'title',\n      ref: register({\n        required: true\n      }),\n      defaultValue: getValues('title') || ((_data$getTicket = data.getTicket) === null || _data$getTicket === void 0 ? void 0 : _data$getTicket.title),\n      placeholder: 'Краткое описание вашего вопроса',\n      appearance: 'ghost',\n      disabled: loading\n    }), (!ticket || ((_data$getTicket2 = data.getTicket) === null || _data$getTicket2 === void 0 ? void 0 : (_data$getTicket2$mess = _data$getTicket2.messages) === null || _data$getTicket2$mess === void 0 ? void 0 : _data$getTicket2$mess.length) === 0) && /*#__PURE__*/React.createElement(TextArea, {\n      type: 'text',\n      name: 'message',\n      ref: register(),\n      defaultValue: getValues('message') || '',\n      placeholder: 'Расскройте все подробности вашего вопроса',\n      disabled: loading,\n      appearance: 'ghost'\n    }), !isClient && /*#__PURE__*/React.createElement(Controller, {\n      name: 'author',\n      control: control,\n      defaultValue: (_data$getTicket3 = data.getTicket) !== null && _data$getTicket3 !== void 0 && _data$getTicket3.author ? {\n        value: data.getTicket.author.id,\n        label: data.getTicket.author.name\n      } : null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        options: users.map(user => ({\n          value: user,\n          label: user.name\n        })),\n        appearance: 'ghost',\n        defaultValue: value // inputValue={usersSelectInput}\n        ,\n        placeholder: 'Выберите автора обращения',\n        onChange: onChange // onInputChange={(input) => setUsersSelectInput(input)}\n        // onKeyDown={(e) => {\n        //   // Pressed ENTER\n        //   if (e.keyCode === 13) {\n        //     searchUsers({\n        //       search: usersSelectInput\n        //     })\n        //   }\n        // }}\n        // onMenuScrollToBottom={async () => {\n        //   await updateUsers({\n        //     variables: {\n        //       offset: offsetUsers,\n        //       limit: LIMIT_USERS\n        //     },\n        //     updateQuery: (...props) => props\n        //   })\n        //   setOffsetUsers((prev) => prev + LIMIT_USERS)\n        // }}\n        ,\n        isLoading: loadingUsers,\n        isSearchable: true\n      })\n    }), !isClient && /*#__PURE__*/React.createElement(Controller, {\n      name: 'counsellor',\n      control: control,\n      defaultValue: (_data$getTicket4 = data.getTicket) !== null && _data$getTicket4 !== void 0 && _data$getTicket4.counsellor ? {\n        value: data.getTicket.counsellor.id,\n        label: data.getTicket.counsellor.name\n      } : null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        options: !loadingCounsellors && dataCounsellors ? dataCounsellors.getUsers.map(user => ({\n          value: user,\n          label: user.name\n        })) : [],\n        appearance: 'ghost',\n        defaultValue: value,\n        placeholder: 'Выберите советника',\n        onChange: onChange,\n        isLoading: loadingCounsellors,\n        isSearchable: true\n      })\n    }), /*#__PURE__*/React.createElement(Controller, {\n      name: 'category',\n      control: control,\n      defaultValue: (_data$getTicket5 = data.getTicket) !== null && _data$getTicket5 !== void 0 && _data$getTicket5.category ? {\n        value: data.getTicket.category.id,\n        label: getLabelCategory(data.getTicket.category.name)\n      } : null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        appearance: 'ghost',\n        placeholder: 'Выберите раздел',\n        options: !loadingCategories && dataCategories ? dataCategories.getCategories.filter(item => item.type === 'TICKET').map(item => ({\n          value: item.id,\n          label: getLabelCategory(item.name)\n        })) : [],\n        onChange: onChange,\n        defaultValue: value,\n        isLoading: loadingCategories,\n        isClearable: true\n      })\n    })), !isClient && ticket && messages.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u0418\\u0441\\u0442\\u043E\\u0440\\u0438\\u044F \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0439\"), /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Checkbox, {\n      label: 'Выделить все',\n      checked: checkedAll,\n      onChange: handleCheckedMessages\n    }), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        color: 'var(--default-color-red)'\n      },\n      appearance: 'clear',\n      onClick: handleDeleteChecked\n    }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0432\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u043E\\u0435\")), /*#__PURE__*/React.createElement(Messages, null, messages.map(message => {\n      var _message$user, _message$user$avatar, _message$user2;\n\n      return /*#__PURE__*/React.createElement(Message, {\n        key: message.id,\n        avatar: (_message$user = message.user) === null || _message$user === void 0 ? void 0 : (_message$user$avatar = _message$user.avatar) === null || _message$user$avatar === void 0 ? void 0 : _message$user$avatar.path,\n        name: (_message$user2 = message.user) === null || _message$user2 === void 0 ? void 0 : _message$user2.name,\n        text: message.text,\n        time: message.createdAt !== message.updatedAt ? message.updatedAt : message.createdAt,\n        isChecked: message.checked,\n        isUpdated: message.createdAt !== message.updatedAt,\n        onChecked: value => handleCheckedMessage(message, value),\n        onEdit: text => handleMessageEdit(message, text),\n        onDelete: () => handleMessageDelete(message),\n        compact: true\n      });\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: loading\n    }, ticket ? 'Сохранить' : 'Создать'))) : errorTicket ? /*#__PURE__*/React.createElement(Alert, {\n      appearance: 'error',\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      }\n    }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E\\u0431 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0438\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  });\n};\nTicket.defaultProps = {\n  title: 'Основное'\n};\nexport default Ticket;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/FormTicket/index.js"],"names":["React","useState","useEffect","styled","Controller","useQuery","Row","Column","Container","Input","Button","Title","Alert","Select","Divider","Spinner","TextArea","Checkbox","Message","getLabelCategory","Form","Loader","queries","LIMIT_USERS","Messages","Header","Ticket","title","ticket","appearance","mutation","className","withContainer","isClient","onSubmit","checkedAll","setCheckedAll","messages","setMessages","users","setUsers","data","loading","loadingTicket","error","errorTicket","GET_TICKET","variables","id","fetchPolicy","getTicket","dataUsers","loadingUsers","GET_USERS_FOR_TICKET","account","dataCounsellors","loadingCounsellors","dataCategories","loadingCategories","GET_CATEGORIES","type","handleCheckedMessages","e","target","checked","handleCheckedMessage","message","value","prev","map","item","handleDeleteChecked","filter","handleMessageEdit","text","updatedAt","Date","handleMessageDelete","getUsers","form","action","register","errors","control","getValues","textAlign","width","required","length","author","label","name","onChange","user","counsellor","category","getCategories","color","avatar","path","createdAt","flexGrow","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Controller } from 'react-hook-form'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Container from '../../atomic-ui/components/Container'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Title from '../../atomic-ui/components/Title'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Select from '../../atomic-ui/components/Select'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport TextArea from '../../atomic-ui/components/TextArea'\nimport Checkbox from '../../atomic-ui/components/Checkbox'\nimport Message from '../../atomic-ui/components/Message'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\n\nimport Form from '../Form'\nimport { Loader } from '../Styled'\nimport queries from '../../graphql/queries'\n\nexport const LIMIT_USERS = 15\n\nexport const Messages = styled(Column)`\n  grid-gap: 5px;\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n\n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n    align-items: end;\n    grid-gap: var(--default-gap);\n  }\n`\n\nexport const Ticket = ({\n  title,\n  ticket,\n  appearance,\n  mutation,\n  className,\n  withContainer,\n  isClient,\n  onSubmit\n}) => {\n  const [checkedAll, setCheckedAll] = useState(false)\n  // const [offsetUsers, setOffsetUsers] = useState(0)\n  // const [usersSelectInput, setUsersSelectInput] = useState('')\n  const [messages, setMessages] = useState([])\n  const [users, setUsers] = useState([])\n\n  const { data, loading: loadingTicket, error: errorTicket } = ticket\n    ? useQuery(queries.GET_TICKET, {\n        variables: {\n          id: ticket\n        },\n        fetchPolicy: 'no-cache'\n      })\n    : { data: { getTicket: {} }, loading: false, error: false }\n\n  const {\n    data: dataUsers,\n    loading: loadingUsers\n    // refetch: searchUsers,\n    // fetchMore: updateUsers\n  } = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      // offset: offsetUsers,\n      account: ['INDIVIDUAL', 'OFICIAL']\n    }\n  })\n\n  const { data: dataCounsellors, loading: loadingCounsellors } = useQuery(\n    queries.GET_USERS_FOR_TICKET,\n    {\n      variables: {\n        account: ['INDIVIDUAL', 'ADMIN']\n      }\n    }\n  )\n\n  const { data: dataCategories, loading: loadingCategories } = useQuery(queries.GET_CATEGORIES, {\n    variables: {\n      type: 'TICKET'\n    }\n  })\n\n  const handleCheckedMessages = (e) => {\n    setCheckedAll(e.target.checked)\n  }\n\n  const handleCheckedMessage = (message, value) => {\n    setMessages((prev) =>\n      prev.map((item) =>\n        item.id === message.id\n          ? {\n              ...item,\n              checked: value\n            }\n          : item\n      )\n    )\n  }\n\n  const handleDeleteChecked = () => {\n    setMessages((prev) => prev.filter((message) => !message.checked))\n  }\n\n  const handleMessageEdit = (message, text) => {\n    setMessages((prev) =>\n      prev.map((item) =>\n        item.id === message.id\n          ? {\n              ...item,\n              updatedAt: new Date(),\n              text\n            }\n          : item\n      )\n    )\n  }\n\n  const handleMessageDelete = (message) => {\n    setMessages((prev) => prev.filter((item) => item.id !== message.id))\n  }\n\n  useEffect(() => {\n    if (ticket && !loadingTicket && data) {\n      setMessages(\n        data.getTicket.messages.map((message) => ({\n          ...message,\n          checked: false\n        }))\n      )\n    }\n  }, [ticket, data, loadingTicket])\n\n  useEffect(() => {\n    if (!loadingUsers && dataUsers) {\n      setUsers((prev) => [...prev, ...dataUsers.getUsers])\n    }\n  }, [dataUsers, loadingUsers])\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) => onSubmit({ ...form, messages }, action)}>\n      {({ register, loading, errors, control, getValues }) =>\n        !loadingTicket && data ? (\n          <React.Fragment>\n            <Column>\n              {title && !withContainer && <Title tag={'h4'}>{title}</Title>}\n              {title && withContainer && (\n                <Container>\n                  <Title style={{ textAlign: 'center' }} tag={'h4'}>\n                    {title}\n                  </Title>\n                </Container>\n              )}\n\n              {errors && errors.title && (\n                <Alert style={{ width: '100%' }} appearance={'error'}>\n                  Введите название обращение\n                </Alert>\n              )}\n              <Input\n                type={'text'}\n                name={'title'}\n                ref={register({ required: true })}\n                defaultValue={getValues('title') || data.getTicket?.title}\n                placeholder={'Краткое описание вашего вопроса'}\n                appearance={'ghost'}\n                disabled={loading}\n              />\n              {(!ticket || data.getTicket?.messages?.length === 0) && (\n                <TextArea\n                  type={'text'}\n                  name={'message'}\n                  ref={register()}\n                  defaultValue={getValues('message') || ''}\n                  placeholder={'Расскройте все подробности вашего вопроса'}\n                  disabled={loading}\n                  appearance={'ghost'}\n                />\n              )}\n\n              {!isClient && (\n                <Controller\n                  name={'author'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.author\n                      ? {\n                          value: data.getTicket.author.id,\n                          label: data.getTicket.author.name\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      options={users.map((user) => ({\n                        value: user,\n                        label: user.name\n                      }))}\n                      appearance={'ghost'}\n                      defaultValue={value}\n                      // inputValue={usersSelectInput}\n                      placeholder={'Выберите автора обращения'}\n                      onChange={onChange}\n                      // onInputChange={(input) => setUsersSelectInput(input)}\n                      // onKeyDown={(e) => {\n                      //   // Pressed ENTER\n                      //   if (e.keyCode === 13) {\n                      //     searchUsers({\n                      //       search: usersSelectInput\n                      //     })\n                      //   }\n                      // }}\n                      // onMenuScrollToBottom={async () => {\n                      //   await updateUsers({\n                      //     variables: {\n                      //       offset: offsetUsers,\n                      //       limit: LIMIT_USERS\n                      //     },\n                      //     updateQuery: (...props) => props\n                      //   })\n                      //   setOffsetUsers((prev) => prev + LIMIT_USERS)\n                      // }}\n                      isLoading={loadingUsers}\n                      isSearchable\n                    />\n                  )}\n                />\n              )}\n\n              {!isClient && (\n                <Controller\n                  name={'counsellor'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.counsellor\n                      ? {\n                          value: data.getTicket.counsellor.id,\n                          label: data.getTicket.counsellor.name\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      options={\n                        !loadingCounsellors && dataCounsellors\n                          ? dataCounsellors.getUsers.map((user) => ({\n                              value: user,\n                              label: user.name\n                            }))\n                          : []\n                      }\n                      appearance={'ghost'}\n                      defaultValue={value}\n                      placeholder={'Выберите советника'}\n                      onChange={onChange}\n                      isLoading={loadingCounsellors}\n                      isSearchable\n                    />\n                  )}\n                />\n              )}\n\n              <Controller\n                name={'category'}\n                control={control}\n                defaultValue={\n                  data.getTicket?.category\n                    ? {\n                        value: data.getTicket.category.id,\n                        label: getLabelCategory(data.getTicket.category.name)\n                      }\n                    : null\n                }\n                render={({ value, onChange }) => (\n                  <Select\n                    appearance={'ghost'}\n                    placeholder={'Выберите раздел'}\n                    options={\n                      !loadingCategories && dataCategories\n                        ? dataCategories.getCategories\n                            .filter((item) => item.type === 'TICKET')\n                            .map((item) => ({\n                              value: item.id,\n                              label: getLabelCategory(item.name)\n                            }))\n                        : []\n                    }\n                    onChange={onChange}\n                    defaultValue={value}\n                    isLoading={loadingCategories}\n                    isClearable\n                  />\n                )}\n              />\n            </Column>\n\n            {!isClient && ticket && messages.length > 0 && (\n              <React.Fragment>\n                <Divider clear />\n\n                <Title tag={'h4'}>История сообщений</Title>\n\n                <Header>\n                  <Checkbox\n                    label={'Выделить все'}\n                    checked={checkedAll}\n                    onChange={handleCheckedMessages}\n                  />\n                  <Button\n                    style={{ color: 'var(--default-color-red)' }}\n                    appearance={'clear'}\n                    onClick={handleDeleteChecked}>\n                    Удалить выделенное\n                  </Button>\n                </Header>\n\n                <Messages>\n                  {messages.map((message) => (\n                    <Message\n                      key={message.id}\n                      avatar={message.user?.avatar?.path}\n                      name={message.user?.name}\n                      text={message.text}\n                      time={\n                        message.createdAt !== message.updatedAt\n                          ? message.updatedAt\n                          : message.createdAt\n                      }\n                      isChecked={message.checked}\n                      isUpdated={message.createdAt !== message.updatedAt}\n                      onChecked={(value) => handleCheckedMessage(message, value)}\n                      onEdit={(text) => handleMessageEdit(message, text)}\n                      onDelete={() => handleMessageDelete(message)}\n                      compact\n                    />\n                  ))}\n                </Messages>\n              </React.Fragment>\n            )}\n\n            <Divider clear />\n\n            <Row>\n              <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n                {ticket ? 'Сохранить' : 'Создать'}\n              </Button>\n            </Row>\n          </React.Fragment>\n        ) : errorTicket ? (\n          <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n            Упс! Не удалось загрузить информацию об обращении\n          </Alert>\n        ) : (\n          <Loader>\n            <Spinner />\n          </Loader>\n        )\n      }\n    </Form>\n  )\n}\n\nTicket.defaultProps = {\n  title: 'Основное'\n}\n\nexport default Ticket\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Controller } from 'react-hook-form';\nimport { useQuery } from '@apollo/react-hooks';\nimport { v4 } from 'uuid';\nimport Row from '../../atomic-ui/components/Row';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Button from '../../atomic-ui/components/Button';\nimport Dropzone from '../../atomic-ui/components/Dropzone';\nimport CheckBox from '../../atomic-ui/components/Checkbox';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Select from '../../atomic-ui/components/Select';\nimport Column from '../../atomic-ui/components/Column';\nimport Input from '../../atomic-ui/components/Input';\nimport Form from '../Form';\nimport queries from '../../graphql/queries';\nconst logotypeSize = {\n  width: 128,\n  height: 30\n};\nconst backgroundSize = {\n  width: 1440,\n  height: 990\n};\nexport const Logotype = styled(Dropzone).withConfig({\n  displayName: \"FormSettings__Logotype\",\n  componentId: \"sc-13smq0j-0\"\n})([\"width:320px;height:128px;min-height:128px;img{object-fit:contain;}\"]);\n_c = Logotype;\nexport const Background = styled(Dropzone).withConfig({\n  displayName: \"FormSettings__Background\",\n  componentId: \"sc-13smq0j-1\"\n})([\"width:100%;height:100%;max-width:\", \"px;max-height:\", \"px;\"], backgroundSize.width, backgroundSize.height);\n_c2 = Background;\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"FormSettings__Wrap\",\n  componentId: \"sc-13smq0j-2\"\n})([\"\"]);\nexport const TabLabelList = styled(Row).withConfig({\n  displayName: \"FormSettings__TabLabelList\",\n  componentId: \"sc-13smq0j-3\"\n})([\"position:relative;display:flex;flex-flow:row nowrap;background:linear-gradient(to top,rgba(0,0,0,15%) 1px,transparent 1px) 0 100% no-repeat;\"]);\n_c3 = TabLabelList;\nexport const TabContentList = styled(Row).withConfig({\n  displayName: \"FormSettings__TabContentList\",\n  componentId: \"sc-13smq0j-4\"\n})([\"display:flex;flex-flow:row nowrap;\"]);\n_c4 = TabContentList;\nexport const TabLabel = styled(Text).withConfig({\n  displayName: \"FormSettings__TabLabel\",\n  componentId: \"sc-13smq0j-5\"\n})([\"position:relative;display:inline-flex;margin-right:40px;padding-bottom:12px;font-family:var(--default-font-family);font-weight:500;font-size:0.875rem;line-height:1;color:rgba(0,0,0,75%);border-bottom:2px solid transparent;cursor:pointer;transition:color 0.2s;&:last-child{margin-right:0;}&:hover{color:black;}\", \"\"], ({\n  active\n}) => active && css([\"color:var(--default-color-accent);border-color:var(--default-color-accent);&:hover{color:var(--default-color-accent);}\"]));\n_c5 = TabLabel;\nexport const TabContent = styled(Column).withConfig({\n  displayName: \"FormSettings__TabContent\",\n  componentId: \"sc-13smq0j-6\"\n})([\"display:none;flex-grow:1;\", \"\"], ({\n  active\n}) => active && css([\"display:flex;\"]));\n_c6 = TabContent;\n\nconst renderProjectSelect = (name, placeholder, defaultValue, data, loading, control, getValues, disabled) => /*#__PURE__*/React.createElement(Controller, {\n  name: name,\n  control: control,\n  defaultValue: getValues(name) || (defaultValue ? {\n    value: defaultValue.id,\n    label: defaultValue.title\n  } : null),\n  render: ({\n    value,\n    onChange\n  }) => /*#__PURE__*/React.createElement(Select, {\n    appearance: 'ghost',\n    defaultValue: value,\n    placeholder: placeholder,\n    options: ((data === null || data === void 0 ? void 0 : data.getProjects) || []).map(project => ({\n      value: project.id,\n      label: project.title\n    })),\n    onChange: onChange,\n    isLoading: loading,\n    isDisabled: disabled,\n    isSearchable: true,\n    cacheOptions: true\n  })\n});\n\nconst renderGeneralTab = (settings, register, control, getValues) => {\n  var _settings$general;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041B\\u043E\\u0433\\u043E\\u0442\\u0438\\u043F\"), /*#__PURE__*/React.createElement(Controller, {\n    name: '[general][logotype]',\n    control: control,\n    defaultValue: getValues('[general][logotype]') || (settings === null || settings === void 0 ? void 0 : (_settings$general = settings.general) === null || _settings$general === void 0 ? void 0 : _settings$general.logotype) || null,\n    render: ({\n      value,\n      onChange\n    }) => /*#__PURE__*/React.createElement(Logotype, {\n      accept: 'image/*',\n      defaultValue: value,\n      onChange: onChange,\n      placeholder: `Перетащите сюда изображение размером ${logotypeSize.width}x${logotypeSize.height}px`,\n      tooltip: `Разрешение: ${logotypeSize.width}x${logotypeSize.height}px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 1 MB`\n    })\n  }));\n};\n\nconst renderScaffoldTab = (settings, register, projects, loading, control, getValues, random, setRandom) => {\n  var _settings$scaffold, _settings$scaffold2, _settings$scaffold3, _settings$scaffold4, _settings$scaffold5;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u0417\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: '[scaffold][title]',\n    ref: register(),\n    defaultValue: getValues('title') || (settings === null || settings === void 0 ? void 0 : (_settings$scaffold = settings.scaffold) === null || _settings$scaffold === void 0 ? void 0 : _settings$scaffold.title) || 'Создавай школу будущего с нами',\n    placeholder: 'Заголовок',\n    appearance: 'ghost',\n    disabled: loading\n  }), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\"), /*#__PURE__*/React.createElement(CheckBox, {\n    label: 'Выводить случайные проекты',\n    checked: random,\n    onChecked: setRandom\n  }), renderProjectSelect('[scaffold][primary]', 'Выберите первый проект', settings === null || settings === void 0 ? void 0 : (_settings$scaffold2 = settings.scaffold) === null || _settings$scaffold2 === void 0 ? void 0 : _settings$scaffold2.primary, projects, loading, control, getValues, random), renderProjectSelect('[scaffold][residues][0]', 'Выберите второй проект', settings === null || settings === void 0 ? void 0 : (_settings$scaffold3 = settings.scaffold) === null || _settings$scaffold3 === void 0 ? void 0 : _settings$scaffold3.residues[0], projects, loading, control, getValues, random), renderProjectSelect('[scaffold][residues][1]', 'Выберите третий проект', settings === null || settings === void 0 ? void 0 : (_settings$scaffold4 = settings.scaffold) === null || _settings$scaffold4 === void 0 ? void 0 : _settings$scaffold4.residues[1], projects, loading, control, getValues, random), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u0424\\u043E\\u043D\"), /*#__PURE__*/React.createElement(Controller, {\n    name: '[scaffold][background]',\n    control: control,\n    defaultValue: getValues('[scaffold][background]') || (settings === null || settings === void 0 ? void 0 : (_settings$scaffold5 = settings.scaffold) === null || _settings$scaffold5 === void 0 ? void 0 : _settings$scaffold5.background) || null,\n    render: ({\n      value,\n      onChange\n    }) => /*#__PURE__*/React.createElement(Background, {\n      accept: 'image/*',\n      defaultValue: value,\n      onChange: onChange,\n      placeholder: `Перетащите сюда изображение размером ${backgroundSize.width}x${backgroundSize.height}px`,\n      tooltip: `Разрешение: ${backgroundSize.width}x${backgroundSize.height}px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB`\n    })\n  }));\n};\n\nconst renderMetaTab = (settings, register, loading, control, getValues) => {\n  var _settings$meta, _settings$meta2;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041C\\u0435\\u0442\\u0430 \\u0442\\u0435\\u0433\\u0438\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: '[meta][title]',\n    ref: register(),\n    defaultValue: getValues('[meta][title]') || (settings === null || settings === void 0 ? void 0 : (_settings$meta = settings.meta) === null || _settings$meta === void 0 ? void 0 : _settings$meta.title) || 'Atomic',\n    placeholder: 'Мета-название',\n    appearance: 'ghost',\n    disabled: loading\n  }), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: '[meta][description]',\n    ref: register(),\n    defaultValue: getValues('[meta][description]') || (settings === null || settings === void 0 ? void 0 : (_settings$meta2 = settings.meta) === null || _settings$meta2 === void 0 ? void 0 : _settings$meta2.description),\n    placeholder: 'Мета-описание',\n    appearance: 'ghost',\n    disabled: loading\n  }));\n};\n\nexport const Settings = ({\n  settings,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [active, setActive] = useState(0);\n  const tabsLabel = ['Основное', 'Scaffold', 'Мета'];\n  const {\n    data: dataProjects,\n    loading: loadingProjects\n  } = useQuery(queries.GET_META_SETTINGS_PROJECTS);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: onSubmit\n  }, _s(({\n    register,\n    loading,\n    control,\n    getValues\n  }) => {\n    var _settings$scaffold6;\n\n    _s();\n\n    const [random, setRandom] = useState(settings === null || settings === void 0 ? void 0 : (_settings$scaffold6 = settings.scaffold) === null || _settings$scaffold6 === void 0 ? void 0 : _settings$scaffold6.random);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TabLabelList, null, tabsLabel.map((tab, index) => /*#__PURE__*/React.createElement(TabLabel, {\n      key: v4(),\n      active: active === index,\n      onClick: () => setActive(index)\n    }, tab))), /*#__PURE__*/React.createElement(TabContentList, null, /*#__PURE__*/React.createElement(TabContent, {\n      active: active === 0\n    }, renderGeneralTab(settings, register, control, getValues)), /*#__PURE__*/React.createElement(TabContent, {\n      active: active === 1\n    }, renderScaffoldTab(settings, register, dataProjects, loading || loadingProjects, control, getValues, random, setRandom)), /*#__PURE__*/React.createElement(TabContent, {\n      active: active === 2\n    }, renderMetaTab(settings, register, loading, control, getValues))), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: loading\n    }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\")));\n  }, \"oNgS+cKROYpBExEp1Pwzu3TuIsA=\"));\n};\n\n_s2(Settings, \"5E/mL0YOjoTYKf03BT3wP5fdUgY=\", false, function () {\n  return [useQuery];\n});\n\n_c7 = Settings;\nexport default Settings;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Logotype\");\n$RefreshReg$(_c2, \"Background\");\n$RefreshReg$(_c3, \"TabLabelList\");\n$RefreshReg$(_c4, \"TabContentList\");\n$RefreshReg$(_c5, \"TabLabel\");\n$RefreshReg$(_c6, \"TabContent\");\n$RefreshReg$(_c7, \"Settings\");","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/FormSettings/index.js"],"names":["React","useState","styled","css","Controller","useQuery","v4","Row","Title","Text","Button","Dropzone","CheckBox","Divider","Select","Column","Input","Form","queries","logotypeSize","width","height","backgroundSize","Logotype","Background","Wrap","TabLabelList","TabContentList","TabLabel","active","TabContent","renderProjectSelect","name","placeholder","defaultValue","data","loading","control","getValues","disabled","value","id","label","title","onChange","getProjects","map","project","renderGeneralTab","settings","register","general","logotype","renderScaffoldTab","projects","random","setRandom","scaffold","primary","residues","background","renderMetaTab","meta","description","Settings","mutation","appearance","className","onSubmit","setActive","tabsLabel","dataProjects","loadingProjects","GET_META_SETTINGS_PROJECTS","tab","index","flexGrow"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,EAAT,QAAmB,MAAnB;AAEA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AAEA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,GADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB;AAKA,MAAMC,cAAc,GAAG;AACrBF,EAAAA,KAAK,EAAE,IADc;AAErBC,EAAAA,MAAM,EAAE;AAFa,CAAvB;AAKA,OAAO,MAAME,QAAQ,GAAGrB,MAAM,CAACS,QAAD,CAAT;AAAA;AAAA;AAAA,0EAAd;KAAMY,Q;AAUb,OAAO,MAAMC,UAAU,GAAGtB,MAAM,CAACS,QAAD,CAAT;AAAA;AAAA;AAAA,mEAGRW,cAAc,CAACF,KAHP,EAIPE,cAAc,CAACD,MAJR,CAAhB;MAAMG,U;AAOb,OAAO,MAAMC,IAAI,GAAGvB,MAAM,CAACa,MAAD,CAAT;AAAA;AAAA;AAAA,QAAV;AAEP,OAAO,MAAMW,YAAY,GAAGxB,MAAM,CAACK,GAAD,CAAT;AAAA;AAAA;AAAA,oJAAlB;MAAMmB,Y;AAOb,OAAO,MAAMC,cAAc,GAAGzB,MAAM,CAACK,GAAD,CAAT;AAAA;AAAA;AAAA,0CAApB;MAAMoB,c;AAKb,OAAO,MAAMC,QAAQ,GAAG1B,MAAM,CAACO,IAAD,CAAT;AAAA;AAAA;AAAA,kUAsBjB,CAAC;AAAEoB,EAAAA;AAAF,CAAD,KACAA,MAAM,IACN1B,GADM,4HAvBW,CAAd;MAAMyB,Q;AAkCb,OAAO,MAAME,UAAU,GAAG5B,MAAM,CAACa,MAAD,CAAT;AAAA;AAAA;AAAA,sCAInB,CAAC;AAAEc,EAAAA;AAAF,CAAD,KACAA,MAAM,IACN1B,GADM,mBALa,CAAhB;MAAM2B,U;;AAWb,MAAMC,mBAAmB,GAAG,CAC1BC,IAD0B,EAE1BC,WAF0B,EAG1BC,YAH0B,EAI1BC,IAJ0B,EAK1BC,OAL0B,EAM1BC,OAN0B,EAO1BC,SAP0B,EAQ1BC,QAR0B,kBAU1B,oBAAC,UAAD;AACE,EAAA,IAAI,EAAEP,IADR;AAEE,EAAA,OAAO,EAAEK,OAFX;AAGE,EAAA,YAAY,EACVC,SAAS,CAACN,IAAD,CAAT,KACCE,YAAY,GACT;AACEM,IAAAA,KAAK,EAAEN,YAAY,CAACO,EADtB;AAEEC,IAAAA,KAAK,EAAER,YAAY,CAACS;AAFtB,GADS,GAKT,IANJ,CAJJ;AAYE,EAAA,MAAM,EAAE,CAAC;AAAEH,IAAAA,KAAF;AAASI,IAAAA;AAAT,GAAD,kBACN,oBAAC,MAAD;AACE,IAAA,UAAU,EAAE,OADd;AAEE,IAAA,YAAY,EAAEJ,KAFhB;AAGE,IAAA,WAAW,EAAEP,WAHf;AAIE,IAAA,OAAO,EAAE,CAAC,CAAAE,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEU,WAAN,KAAqB,EAAtB,EAA0BC,GAA1B,CAA+BC,OAAD,KAAc;AACnDP,MAAAA,KAAK,EAAEO,OAAO,CAACN,EADoC;AAEnDC,MAAAA,KAAK,EAAEK,OAAO,CAACJ;AAFoC,KAAd,CAA9B,CAJX;AAQE,IAAA,QAAQ,EAAEC,QARZ;AASE,IAAA,SAAS,EAAER,OATb;AAUE,IAAA,UAAU,EAAEG,QAVd;AAWE,IAAA,YAAY,MAXd;AAYE,IAAA,YAAY;AAZd;AAbJ,EAVF;;AAyCA,MAAMS,gBAAgB,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBb,OAArB,EAA8BC,SAA9B;AAAA;;AAAA,sBACvB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE;AAAZ,kDADF,eAEE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAE,qBADR;AAEE,IAAA,OAAO,EAAED,OAFX;AAGE,IAAA,YAAY,EAAEC,SAAS,CAAC,qBAAD,CAAT,KAAoCW,QAApC,aAAoCA,QAApC,4CAAoCA,QAAQ,CAAEE,OAA9C,sDAAoC,kBAAmBC,QAAvD,KAAmE,IAHnF;AAIE,IAAA,MAAM,EAAE,CAAC;AAAEZ,MAAAA,KAAF;AAASI,MAAAA;AAAT,KAAD,kBACN,oBAAC,QAAD;AACE,MAAA,MAAM,EAAE,SADV;AAEE,MAAA,YAAY,EAAEJ,KAFhB;AAGE,MAAA,QAAQ,EAAEI,QAHZ;AAIE,MAAA,WAAW,EAAG,wCAAuCzB,YAAY,CAACC,KAAM,IAAGD,YAAY,CAACE,MAAO,IAJjG;AAKE,MAAA,OAAO,EAAG,eAAcF,YAAY,CAACC,KAAM,IAAGD,YAAY,CAACE,MAAO;AALpE;AALJ,IAFF,CADuB;AAAA,CAAzB;;AAoBA,MAAMgC,iBAAiB,GAAG,CACxBJ,QADwB,EAExBC,QAFwB,EAGxBI,QAHwB,EAIxBlB,OAJwB,EAKxBC,OALwB,EAMxBC,SANwB,EAOxBiB,MAPwB,EAQxBC,SARwB;AAAA;;AAAA,sBAUxB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE;AAAZ,8DADF,eAEE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAE,MADR;AAEE,IAAA,IAAI,EAAE,mBAFR;AAGE,IAAA,GAAG,EAAEN,QAAQ,EAHf;AAIE,IAAA,YAAY,EACVZ,SAAS,CAAC,OAAD,CAAT,KAAsBW,QAAtB,aAAsBA,QAAtB,6CAAsBA,QAAQ,CAAEQ,QAAhC,uDAAsB,mBAAoBd,KAA1C,KAAmD,gCALvD;AAOE,IAAA,WAAW,EAAE,WAPf;AAQE,IAAA,UAAU,EAAE,OARd;AASE,IAAA,QAAQ,EAAEP;AATZ,IAFF,eAcE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE;AAAZ,kDAdF,eAeE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,4BAAjB;AAA+C,IAAA,OAAO,EAAEmB,MAAxD;AAAgE,IAAA,SAAS,EAAEC;AAA3E,IAfF,EAgBGzB,mBAAmB,CAClB,qBADkB,EAElB,wBAFkB,EAGlBkB,QAHkB,aAGlBA,QAHkB,8CAGlBA,QAAQ,CAAEQ,QAHQ,wDAGlB,oBAAoBC,OAHF,EAIlBJ,QAJkB,EAKlBlB,OALkB,EAMlBC,OANkB,EAOlBC,SAPkB,EAQlBiB,MARkB,CAhBtB,EA0BGxB,mBAAmB,CAClB,yBADkB,EAElB,wBAFkB,EAGlBkB,QAHkB,aAGlBA,QAHkB,8CAGlBA,QAAQ,CAAEQ,QAHQ,wDAGlB,oBAAoBE,QAApB,CAA6B,CAA7B,CAHkB,EAIlBL,QAJkB,EAKlBlB,OALkB,EAMlBC,OANkB,EAOlBC,SAPkB,EAQlBiB,MARkB,CA1BtB,EAoCGxB,mBAAmB,CAClB,yBADkB,EAElB,wBAFkB,EAGlBkB,QAHkB,aAGlBA,QAHkB,8CAGlBA,QAAQ,CAAEQ,QAHQ,wDAGlB,oBAAoBE,QAApB,CAA6B,CAA7B,CAHkB,EAIlBL,QAJkB,EAKlBlB,OALkB,EAMlBC,OANkB,EAOlBC,SAPkB,EAQlBiB,MARkB,CApCtB,eA+CE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE;AAAZ,0BA/CF,eAgDE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAE,wBADR;AAEE,IAAA,OAAO,EAAElB,OAFX;AAGE,IAAA,YAAY,EAAEC,SAAS,CAAC,wBAAD,CAAT,KAAuCW,QAAvC,aAAuCA,QAAvC,8CAAuCA,QAAQ,CAAEQ,QAAjD,wDAAuC,oBAAoBG,UAA3D,KAAyE,IAHzF;AAIE,IAAA,MAAM,EAAE,CAAC;AAAEpB,MAAAA,KAAF;AAASI,MAAAA;AAAT,KAAD,kBACN,oBAAC,UAAD;AACE,MAAA,MAAM,EAAE,SADV;AAEE,MAAA,YAAY,EAAEJ,KAFhB;AAGE,MAAA,QAAQ,EAAEI,QAHZ;AAIE,MAAA,WAAW,EAAG,wCAAuCtB,cAAc,CAACF,KAAM,IAAGE,cAAc,CAACD,MAAO,IAJrG;AAKE,MAAA,OAAO,EAAG,eAAcC,cAAc,CAACF,KAAM,IAAGE,cAAc,CAACD,MAAO;AALxE;AALJ,IAhDF,CAVwB;AAAA,CAA1B;;AA2EA,MAAMwC,aAAa,GAAG,CAACZ,QAAD,EAAWC,QAAX,EAAqBd,OAArB,EAA8BC,OAA9B,EAAuCC,SAAvC;AAAA;;AAAA,sBACpB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE;AAAZ,yDADF,eAGE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAE,MADR;AAEE,IAAA,IAAI,EAAE,eAFR;AAGE,IAAA,GAAG,EAAEY,QAAQ,EAHf;AAIE,IAAA,YAAY,EAAEZ,SAAS,CAAC,eAAD,CAAT,KAA8BW,QAA9B,aAA8BA,QAA9B,yCAA8BA,QAAQ,CAAEa,IAAxC,mDAA8B,eAAgBnB,KAA9C,KAAuD,QAJvE;AAKE,IAAA,WAAW,EAAE,eALf;AAME,IAAA,UAAU,EAAE,OANd;AAOE,IAAA,QAAQ,EAAEP;AAPZ,IAHF,eAaE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAE,MADR;AAEE,IAAA,IAAI,EAAE,qBAFR;AAGE,IAAA,GAAG,EAAEc,QAAQ,EAHf;AAIE,IAAA,YAAY,EAAEZ,SAAS,CAAC,qBAAD,CAAT,KAAoCW,QAApC,aAAoCA,QAApC,0CAAoCA,QAAQ,CAAEa,IAA9C,oDAAoC,gBAAgBC,WAApD,CAJhB;AAKE,IAAA,WAAW,EAAE,eALf;AAME,IAAA,UAAU,EAAE,OANd;AAOE,IAAA,QAAQ,EAAE3B;AAPZ,IAbF,CADoB;AAAA,CAAtB;;AA0BA,OAAO,MAAM4B,QAAQ,GAAG,CAAC;AAAEf,EAAAA,QAAF;AAAYgB,EAAAA,QAAZ;AAAsBC,EAAAA,UAAtB;AAAkCC,EAAAA,SAAlC;AAA6CC,EAAAA;AAA7C,CAAD,KAA6D;AAAA;;AAAA;;AACnF,QAAM,CAACvC,MAAD,EAASwC,SAAT,IAAsBpE,QAAQ,CAAC,CAAD,CAApC;AACA,QAAMqE,SAAS,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,MAAzB,CAAlB;AAEA,QAAM;AAAEnC,IAAAA,IAAI,EAAEoC,YAAR;AAAsBnC,IAAAA,OAAO,EAAEoC;AAA/B,MAAmDnE,QAAQ,CAC/Da,OAAO,CAACuD,0BADuD,CAAjE;AAIA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEN,SAAjB;AAA4B,IAAA,UAAU,EAAED,UAAxC;AAAoD,IAAA,QAAQ,EAAED,QAA9D;AAAwE,IAAA,QAAQ,EAAEG;AAAlF,QACG,CAAC;AAAElB,IAAAA,QAAF;AAAYd,IAAAA,OAAZ;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA;AAA9B,GAAD,KAA+C;AAAA;;AAAA;;AAC9C,UAAM,CAACiB,MAAD,EAASC,SAAT,IAAsBvD,QAAQ,CAACgD,QAAD,aAACA,QAAD,8CAACA,QAAQ,CAAEQ,QAAX,wDAAC,oBAAoBF,MAArB,CAApC;AAEA,wBACE,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,YAAD,QACGe,SAAS,CAACxB,GAAV,CAAc,CAAC4B,GAAD,EAAMC,KAAN,kBACb,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAErE,EAAE,EAAjB;AAAqB,MAAA,MAAM,EAAEuB,MAAM,KAAK8C,KAAxC;AAA+C,MAAA,OAAO,EAAE,MAAMN,SAAS,CAACM,KAAD;AAAvE,OACGD,GADH,CADD,CADH,CADF,eASE,oBAAC,cAAD,qBACE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE7C,MAAM,KAAK;AAA/B,OACGmB,gBAAgB,CAACC,QAAD,EAAWC,QAAX,EAAqBb,OAArB,EAA8BC,SAA9B,CADnB,CADF,eAIE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAET,MAAM,KAAK;AAA/B,OACGwB,iBAAiB,CAChBJ,QADgB,EAEhBC,QAFgB,EAGhBqB,YAHgB,EAIhBnC,OAAO,IAAIoC,eAJK,EAKhBnC,OALgB,EAMhBC,SANgB,EAOhBiB,MAPgB,EAQhBC,SARgB,CADpB,CAJF,eAgBE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE3B,MAAM,KAAK;AAA/B,OACGgC,aAAa,CAACZ,QAAD,EAAWC,QAAX,EAAqBd,OAArB,EAA8BC,OAA9B,EAAuCC,SAAvC,CADhB,CAhBF,CATF,eA8BE,oBAAC,OAAD;AAAS,MAAA,KAAK;AAAd,MA9BF,eAgCE,oBAAC,GAAD,qBACE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAEsC,QAAAA,QAAQ,EAAE;AAAZ,OAAf;AAAgC,MAAA,IAAI,EAAE,QAAtC;AAAgD,MAAA,QAAQ,EAAExC;AAA1D,gEADF,CAhCF,CADF;AAwCD,GA5CH,kCADF;AAgDD,CAxDM;;IAAM4B,Q;UAI8C3D,Q;;;MAJ9C2D,Q;AA0Db,eAAeA,QAAf","sourcesContent":["import React, { useState } from 'react'\nimport styled, { css } from 'styled-components'\nimport { Controller } from 'react-hook-form'\nimport { useQuery } from '@apollo/react-hooks'\nimport { v4 } from 'uuid'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Button from '../../atomic-ui/components/Button'\nimport Dropzone from '../../atomic-ui/components/Dropzone'\nimport CheckBox from '../../atomic-ui/components/Checkbox'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Select from '../../atomic-ui/components/Select'\nimport Column from '../../atomic-ui/components/Column'\nimport Input from '../../atomic-ui/components/Input'\n\nimport Form from '../Form'\nimport queries from '../../graphql/queries'\n\nconst logotypeSize = {\n  width: 128,\n  height: 30\n}\n\nconst backgroundSize = {\n  width: 1440,\n  height: 990\n}\n\nexport const Logotype = styled(Dropzone)`\n  width: 320px;\n  height: 128px;\n  min-height: 128px;\n\n  img {\n    object-fit: contain;\n  }\n`\n\nexport const Background = styled(Dropzone)`\n  width: 100%;\n  height: 100%;\n  max-width: ${backgroundSize.width}px;\n  max-height: ${backgroundSize.height}px;\n`\n\nexport const Wrap = styled(Column)``\n\nexport const TabLabelList = styled(Row)`\n  position: relative;\n  display: flex;\n  flex-flow: row nowrap;\n  background: linear-gradient(to top, rgba(0, 0, 0, 15%) 1px, transparent 1px) 0 100% no-repeat;\n`\n\nexport const TabContentList = styled(Row)`\n  display: flex;\n  flex-flow: row nowrap;\n`\n\nexport const TabLabel = styled(Text)`\n  position: relative;\n  display: inline-flex;\n  margin-right: 40px;\n  padding-bottom: 12px;\n  font-family: var(--default-font-family);\n  font-weight: 500;\n  font-size: 0.875rem;\n  line-height: 1;\n  color: rgba(0, 0, 0, 75%);\n  border-bottom: 2px solid transparent;\n  cursor: pointer;\n  transition: color 0.2s;\n\n  &:last-child {\n    margin-right: 0;\n  }\n\n  &:hover {\n    color: black;\n  }\n\n  ${({ active }) =>\n    active &&\n    css`\n      color: var(--default-color-accent);\n      border-color: var(--default-color-accent);\n\n      &:hover {\n        color: var(--default-color-accent);\n      }\n    `}\n`\n\nexport const TabContent = styled(Column)`\n  display: none;\n  flex-grow: 1;\n\n  ${({ active }) =>\n    active &&\n    css`\n      display: flex;\n    `}\n`\n\nconst renderProjectSelect = (\n  name,\n  placeholder,\n  defaultValue,\n  data,\n  loading,\n  control,\n  getValues,\n  disabled\n) => (\n  <Controller\n    name={name}\n    control={control}\n    defaultValue={\n      getValues(name) ||\n      (defaultValue\n        ? {\n            value: defaultValue.id,\n            label: defaultValue.title\n          }\n        : null)\n    }\n    render={({ value, onChange }) => (\n      <Select\n        appearance={'ghost'}\n        defaultValue={value}\n        placeholder={placeholder}\n        options={(data?.getProjects || []).map((project) => ({\n          value: project.id,\n          label: project.title\n        }))}\n        onChange={onChange}\n        isLoading={loading}\n        isDisabled={disabled}\n        isSearchable\n        cacheOptions\n      />\n    )}\n  />\n)\n\nconst renderGeneralTab = (settings, register, control, getValues) => (\n  <React.Fragment>\n    <Title tag={'h4'}>Логотип</Title>\n    <Controller\n      name={'[general][logotype]'}\n      control={control}\n      defaultValue={getValues('[general][logotype]') || settings?.general?.logotype || null}\n      render={({ value, onChange }) => (\n        <Logotype\n          accept={'image/*'}\n          defaultValue={value}\n          onChange={onChange}\n          placeholder={`Перетащите сюда изображение размером ${logotypeSize.width}x${logotypeSize.height}px`}\n          tooltip={`Разрешение: ${logotypeSize.width}x${logotypeSize.height}px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 1 MB`}\n        />\n      )}\n    />\n  </React.Fragment>\n)\n\nconst renderScaffoldTab = (\n  settings,\n  register,\n  projects,\n  loading,\n  control,\n  getValues,\n  random,\n  setRandom\n) => (\n  <React.Fragment>\n    <Title tag={'h4'}>Заголовок</Title>\n    <Input\n      type={'text'}\n      name={'[scaffold][title]'}\n      ref={register()}\n      defaultValue={\n        getValues('title') || settings?.scaffold?.title || 'Создавай школу будущего с нами'\n      }\n      placeholder={'Заголовок'}\n      appearance={'ghost'}\n      disabled={loading}\n    />\n\n    <Title tag={'h4'}>Проекты</Title>\n    <CheckBox label={'Выводить случайные проекты'} checked={random} onChecked={setRandom} />\n    {renderProjectSelect(\n      '[scaffold][primary]',\n      'Выберите первый проект',\n      settings?.scaffold?.primary,\n      projects,\n      loading,\n      control,\n      getValues,\n      random\n    )}\n    {renderProjectSelect(\n      '[scaffold][residues][0]',\n      'Выберите второй проект',\n      settings?.scaffold?.residues[0],\n      projects,\n      loading,\n      control,\n      getValues,\n      random\n    )}\n    {renderProjectSelect(\n      '[scaffold][residues][1]',\n      'Выберите третий проект',\n      settings?.scaffold?.residues[1],\n      projects,\n      loading,\n      control,\n      getValues,\n      random\n    )}\n\n    <Title tag={'h4'}>Фон</Title>\n    <Controller\n      name={'[scaffold][background]'}\n      control={control}\n      defaultValue={getValues('[scaffold][background]') || settings?.scaffold?.background || null}\n      render={({ value, onChange }) => (\n        <Background\n          accept={'image/*'}\n          defaultValue={value}\n          onChange={onChange}\n          placeholder={`Перетащите сюда изображение размером ${backgroundSize.width}x${backgroundSize.height}px`}\n          tooltip={`Разрешение: ${backgroundSize.width}x${backgroundSize.height}px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB`}\n        />\n      )}\n    />\n  </React.Fragment>\n)\n\nconst renderMetaTab = (settings, register, loading, control, getValues) => (\n  <React.Fragment>\n    <Title tag={'h4'}>Мета теги</Title>\n\n    <Input\n      type={'text'}\n      name={'[meta][title]'}\n      ref={register()}\n      defaultValue={getValues('[meta][title]') || settings?.meta?.title || 'Atomic'}\n      placeholder={'Мета-название'}\n      appearance={'ghost'}\n      disabled={loading}\n    />\n\n    <Input\n      type={'text'}\n      name={'[meta][description]'}\n      ref={register()}\n      defaultValue={getValues('[meta][description]') || settings?.meta?.description}\n      placeholder={'Мета-описание'}\n      appearance={'ghost'}\n      disabled={loading}\n    />\n  </React.Fragment>\n)\n\nexport const Settings = ({ settings, mutation, appearance, className, onSubmit }) => {\n  const [active, setActive] = useState(0)\n  const tabsLabel = ['Основное', 'Scaffold', 'Мета']\n\n  const { data: dataProjects, loading: loadingProjects } = useQuery(\n    queries.GET_META_SETTINGS_PROJECTS\n  )\n\n  return (\n    <Form className={className} appearance={appearance} mutation={mutation} onSubmit={onSubmit}>\n      {({ register, loading, control, getValues }) => {\n        const [random, setRandom] = useState(settings?.scaffold?.random)\n\n        return (\n          <React.Fragment>\n            <TabLabelList>\n              {tabsLabel.map((tab, index) => (\n                <TabLabel key={v4()} active={active === index} onClick={() => setActive(index)}>\n                  {tab}\n                </TabLabel>\n              ))}\n            </TabLabelList>\n\n            <TabContentList>\n              <TabContent active={active === 0}>\n                {renderGeneralTab(settings, register, control, getValues)}\n              </TabContent>\n              <TabContent active={active === 1}>\n                {renderScaffoldTab(\n                  settings,\n                  register,\n                  dataProjects,\n                  loading || loadingProjects,\n                  control,\n                  getValues,\n                  random,\n                  setRandom\n                )}\n              </TabContent>\n              <TabContent active={active === 2}>\n                {renderMetaTab(settings, register, loading, control, getValues)}\n              </TabContent>\n            </TabContentList>\n\n            <Divider clear />\n\n            <Row>\n              <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n                Сохранить\n              </Button>\n            </Row>\n          </React.Fragment>\n        )\n      }}\n    </Form>\n  )\n}\n\nexport default Settings\n"]},"metadata":{},"sourceType":"module"}
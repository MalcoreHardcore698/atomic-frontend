{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/project';\nimport ProjectSuit from '../../components/ProjectSuit';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { setDocuments } from '../../store/actions/documents';\nimport { useProject } from '../../hooks/useProject';\nimport { COMMON_START_OFFSET, DASHBOARD_PROJECTS_LOAD_LIMIT } from '../../constants';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\n\nconst Projects = () => {\n  _s();\n\n  const {\n    onCreate,\n    onEdit,\n    ...methods\n  } = useProject({\n    isManage: true\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    icon: 'work',\n    template: template,\n    getType: 'getProjects',\n    emptyMessage: 'Проектов нет',\n    getQuery: queries.GET_PROJECTS,\n    buttonCreateText: 'Создать проект',\n    deleteEntityMultiText: 'проекты',\n    deleteEntitySingleText: 'проект',\n    startOffset: COMMON_START_OFFSET,\n    deleteQuery: queries.DELETE_PROJECT,\n    limit: DASHBOARD_PROJECTS_LOAD_LIMIT,\n    render: document => /*#__PURE__*/React.createElement(ProjectSuit, _extends({}, methods, {\n      project: document,\n      withSocials: true,\n      preview: true\n    })),\n    onCreate: onCreate,\n    onEdit: onEdit\n  });\n};\n\n_s(Projects, \"LBBgpNjq0knaxQbTpYEgsElYyX4=\", false, function () {\n  return [useProject, useDispatch];\n});\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/projects.js"],"names":["React","useEffect","useDispatch","template","ProjectSuit","ContentLayout","setDocuments","useProject","COMMON_START_OFFSET","DASHBOARD_PROJECTS_LOAD_LIMIT","queries","TITLE","Projects","onCreate","onEdit","methods","isManage","dispatch","GET_PROJECTS","DELETE_PROJECT","document"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,QAAP,MAAqB,oDAArB;AAEA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,mBAAT,EAA8BC,6BAA9B,QAAmE,iBAAnE;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,MAAMC,KAAK,GAAG,SAAd;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,MAAZ;AAAoB,OAAGC;AAAvB,MAAmCR,UAAU,CAAC;AAAES,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAAnD;AACA,QAAMC,QAAQ,GAAGf,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,QAAQ,CAACX,YAAY,CAAC,IAAD,CAAb,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEK,KADT;AAEE,IAAA,IAAI,EAAE,MAFR;AAGE,IAAA,QAAQ,EAAER,QAHZ;AAIE,IAAA,OAAO,EAAE,aAJX;AAKE,IAAA,YAAY,EAAE,cALhB;AAME,IAAA,QAAQ,EAAEO,OAAO,CAACQ,YANpB;AAOE,IAAA,gBAAgB,EAAE,gBAPpB;AAQE,IAAA,qBAAqB,EAAE,SARzB;AASE,IAAA,sBAAsB,EAAE,QAT1B;AAUE,IAAA,WAAW,EAAEV,mBAVf;AAWE,IAAA,WAAW,EAAEE,OAAO,CAACS,cAXvB;AAYE,IAAA,KAAK,EAAEV,6BAZT;AAaE,IAAA,MAAM,EAAGW,QAAD,iBAAc,oBAAC,WAAD,eAAiBL,OAAjB;AAA0B,MAAA,OAAO,EAAEK,QAAnC;AAA6C,MAAA,WAAW,MAAxD;AAAyD,MAAA,OAAO;AAAhE,OAbxB;AAcE,IAAA,QAAQ,EAAEP,QAdZ;AAeE,IAAA,MAAM,EAAEC;AAfV,IADF;AAmBD,CA3BD;;GAAMF,Q;UACqCL,U,EACxBL,W;;;KAFbU,Q;AA6BN,eAAeA,QAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport template from '../../atomic-ui/components/Table/templates/project'\n\nimport ProjectSuit from '../../components/ProjectSuit'\nimport ContentLayout from '../../layouts/dashboard/content'\nimport { setDocuments } from '../../store/actions/documents'\nimport { useProject } from '../../hooks/useProject'\nimport { COMMON_START_OFFSET, DASHBOARD_PROJECTS_LOAD_LIMIT } from '../../constants'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Проекты'\n\nconst Projects = () => {\n  const { onCreate, onEdit, ...methods } = useProject({ isManage: true })\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      icon={'work'}\n      template={template}\n      getType={'getProjects'}\n      emptyMessage={'Проектов нет'}\n      getQuery={queries.GET_PROJECTS}\n      buttonCreateText={'Создать проект'}\n      deleteEntityMultiText={'проекты'}\n      deleteEntitySingleText={'проект'}\n      startOffset={COMMON_START_OFFSET}\n      deleteQuery={queries.DELETE_PROJECT}\n      limit={DASHBOARD_PROJECTS_LOAD_LIMIT}\n      render={(document) => <ProjectSuit {...methods} project={document} withSocials preview />}\n      onCreate={onCreate}\n      onEdit={onEdit}\n    />\n  )\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
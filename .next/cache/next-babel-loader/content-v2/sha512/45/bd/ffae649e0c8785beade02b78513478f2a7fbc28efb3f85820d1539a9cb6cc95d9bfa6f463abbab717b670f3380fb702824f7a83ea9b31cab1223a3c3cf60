{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport { getLabelCategory } from '../atomic-ui/utils/functions';\nimport ContentLayout from '../layouts/content';\nimport ProjectList from '../components/ProjectList';\nimport { FixedLoader, GridAside as Container } from '../components/Styled';\nimport queries from '../graphql/queries';\nconst TITLE = 'Проекты';\nconst START_OFFSET = 6;\n\nconst Projects = () => {\n  _s();\n\n  var _router$query3;\n\n  const router = useRouter();\n  const [load, {\n    data,\n    loading\n  }] = useLazyQuery(queries.GET_META_PROJECTS);\n  useEffect(() => {\n    var _router$query, _router$query2;\n\n    const page = (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page;\n    const category = (_router$query2 = router.query) === null || _router$query2 === void 0 ? void 0 : _router$query2.c;\n\n    if (category) {\n      load({\n        variables: {\n          offset: page ? page * START_OFFSET : 0,\n          limit: START_OFFSET,\n          status: 'PUBLISHED',\n          category\n        }\n      });\n    }\n  }, [router]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(FixedLoader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER'\n    }, {\n      type: 'SELECT',\n      options: data === null || data === void 0 ? void 0 : data.getCategories.map(category => ({\n        value: category.id,\n        label: getLabelCategory(category.name)\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    query: queries.GET_PROJECTS,\n    variables: {\n      category: (_router$query3 = router.query) === null || _router$query3 === void 0 ? void 0 : _router$query3.c,\n      status: 'PUBLISHED'\n    },\n    store: {\n      documents: data === null || data === void 0 ? void 0 : data.getProjects\n    }\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(ProjectList, {\n    initialList: documents,\n    layout: true\n  })));\n};\n\n_s(Projects, \"2jbSL+kSbW0ZQ+PUUoqRvVPFPYQ=\", false, function () {\n  return [useRouter, useLazyQuery];\n});\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/projects.js"],"names":["React","useEffect","useRouter","useLazyQuery","Spinner","getLabelCategory","ContentLayout","ProjectList","FixedLoader","GridAside","Container","queries","TITLE","START_OFFSET","Projects","router","load","data","loading","GET_META_PROJECTS","page","query","category","c","variables","offset","limit","status","type","options","getCategories","map","value","id","label","name","GET_PROJECTS","documents","getProjects"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AAEA,OAAOC,OAAP,MAAoB,iCAApB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,WAAT,EAAsBC,SAAS,IAAIC,SAAnC,QAAoD,sBAApD;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,KAAK,GAAG,SAAd;AACA,MAAMC,YAAY,GAAG,CAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAAA;;AACrB,QAAMC,MAAM,GAAGb,SAAS,EAAxB;AAEA,QAAM,CAACc,IAAD,EAAO;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAP,IAA4Bf,YAAY,CAACQ,OAAO,CAACQ,iBAAT,CAA9C;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACd,UAAMmB,IAAI,oBAAGL,MAAM,CAACM,KAAV,kDAAG,cAAcD,IAA3B;AACA,UAAME,QAAQ,qBAAGP,MAAM,CAACM,KAAV,mDAAG,eAAcE,CAA/B;;AACA,QAAID,QAAJ,EAAc;AACZN,MAAAA,IAAI,CAAC;AACHQ,QAAAA,SAAS,EAAE;AACTC,UAAAA,MAAM,EAAEL,IAAI,GAAGA,IAAI,GAAGP,YAAV,GAAyB,CAD5B;AAETa,UAAAA,KAAK,EAAEb,YAFE;AAGTc,UAAAA,MAAM,EAAE,WAHC;AAITL,UAAAA;AAJS;AADR,OAAD,CAAJ;AAQD;AACF,GAbQ,EAaN,CAACP,MAAD,CAbM,CAAT;;AAeA,MAAIG,OAAJ,EAAa;AACX,wBACE,oBAAC,WAAD,qBACE,oBAAC,OAAD,OADF,CADF;AAKD;;AAED,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEN,KADT;AAEE,IAAA,OAAO,EAAE,CACP;AAAEgB,MAAAA,IAAI,EAAE;AAAR,KADO,EAEP;AACEA,MAAAA,IAAI,EAAE,QADR;AAEEC,MAAAA,OAAO,EAAEZ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEa,aAAN,CAAoBC,GAApB,CAAyBT,QAAD,KAAe;AAC9CU,QAAAA,KAAK,EAAEV,QAAQ,CAACW,EAD8B;AAE9CC,QAAAA,KAAK,EAAE7B,gBAAgB,CAACiB,QAAQ,CAACa,IAAV;AAFuB,OAAf,CAAxB;AAFX,KAFO,CAFX;AAYE,IAAA,OAAO,EAAE,CACP;AAAED,MAAAA,KAAK,EAAE,UAAT;AAAqBF,MAAAA,KAAK,EAAE;AAA5B,KADO,EAEP;AAAEE,MAAAA,KAAK,EAAE,WAAT;AAAsBF,MAAAA,KAAK,EAAE;AAA7B,KAFO,EAGP;AAAEE,MAAAA,KAAK,EAAE,iBAAT;AAA4BF,MAAAA,KAAK,EAAE;AAAnC,KAHO,CAZX;AAiBE,IAAA,KAAK,EAAErB,OAAO,CAACyB,YAjBjB;AAkBE,IAAA,SAAS,EAAE;AAAEd,MAAAA,QAAQ,oBAAEP,MAAM,CAACM,KAAT,mDAAE,eAAcE,CAA1B;AAA6BI,MAAAA,MAAM,EAAE;AAArC,KAlBb;AAmBE,IAAA,KAAK,EAAE;AAAEU,MAAAA,SAAS,EAAEpB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEqB;AAAnB;AAnBT,KAoBG,CAAC;AAAED,IAAAA;AAAF,GAAD,kBACC,oBAAC,SAAD,qBACE,oBAAC,WAAD;AAAa,IAAA,WAAW,EAAEA,SAA1B;AAAqC,IAAA,MAAM;AAA3C,IADF,CArBJ,CADF;AA4BD,CAxDD;;GAAMvB,Q;UACWZ,S,EAEmBC,Y;;;KAH9BW,Q;AA0DN,eAAeA,QAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport Spinner from '../atomic-ui/components/Spinner'\nimport { getLabelCategory } from '../atomic-ui/utils/functions'\n\nimport ContentLayout from '../layouts/content'\nimport ProjectList from '../components/ProjectList'\nimport { FixedLoader, GridAside as Container } from '../components/Styled'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Проекты'\nconst START_OFFSET = 6\n\nconst Projects = () => {\n  const router = useRouter()\n\n  const [load, { data, loading }] = useLazyQuery(queries.GET_META_PROJECTS)\n\n  useEffect(() => {\n    const page = router.query?.page\n    const category = router.query?.c\n    if (category) {\n      load({\n        variables: {\n          offset: page ? page * START_OFFSET : 0,\n          limit: START_OFFSET,\n          status: 'PUBLISHED',\n          category\n        }\n      })\n    }\n  }, [router])\n\n  if (loading) {\n    return (\n      <FixedLoader>\n        <Spinner />\n      </FixedLoader>\n    )\n  }\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      filters={[\n        { type: 'DATEPICKER' },\n        {\n          type: 'SELECT',\n          options: data?.getCategories.map((category) => ({\n            value: category.id,\n            label: getLabelCategory(category.name)\n          }))\n        }\n      ]}\n      options={[\n        { label: 'Компания', value: 'company' },\n        { label: 'Участники', value: 'members' },\n        { label: 'Дата публикации', value: 'createdAt' }\n      ]}\n      query={queries.GET_PROJECTS}\n      variables={{ category: router.query?.c, status: 'PUBLISHED' }}\n      store={{ documents: data?.getProjects }}>\n      {({ documents }) => (\n        <Container>\n          <ProjectList initialList={documents} layout />\n        </Container>\n      )}\n    </ContentLayout>\n  )\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
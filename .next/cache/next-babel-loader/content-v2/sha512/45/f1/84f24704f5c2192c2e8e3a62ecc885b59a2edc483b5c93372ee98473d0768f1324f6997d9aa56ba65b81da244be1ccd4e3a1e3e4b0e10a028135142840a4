{"ast":null,"code":"import { useCallback, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport { omit } from '../atomic-ui/utils/functions';\nimport { setSearch, setParams, setIgnoreFetch } from '../store/actions/root';\nexport const parseParams = params => omit(params, ['search']);\nexport const useSearch = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const root = useSelector(state => state.root);\n  const onSearch = useCallback((search, params) => {\n    dispatch(setIgnoreFetch(false));\n    if (search) dispatch(setSearch(search));\n    if (params) dispatch(setParams(parseParams(params)));\n    router.push({\n      pathname: router.pathname,\n      query: { ...(search ? {\n          search\n        } : {}),\n        ...(params || root.params || {})\n      }\n    }, undefined, {\n      shallow: true\n    });\n  }, [root, router, dispatch]);\n  useEffect(() => {\n    const query = router.query;\n\n    if (query) {\n      dispatch(setParams(parseParams(query)));\n    }\n  }, [router, dispatch]);\n  return [onSearch];\n};","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/hooks/useSearch.js"],"names":["useCallback","useEffect","useSelector","useDispatch","useRouter","omit","setSearch","setParams","setIgnoreFetch","parseParams","params","useSearch","router","dispatch","root","state","onSearch","search","push","pathname","query","undefined","shallow"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,IAAT,QAAqB,8BAArB;AAEA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,cAA/B,QAAqD,uBAArD;AAEA,OAAO,MAAMC,WAAW,GAAIC,MAAD,IAAYL,IAAI,CAACK,MAAD,EAAS,CAAC,QAAD,CAAT,CAApC;AAEP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAMS,QAAQ,GAAGV,WAAW,EAA5B;AAEA,QAAMW,IAAI,GAAGZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AAEA,QAAME,QAAQ,GAAGhB,WAAW,CAC1B,CAACiB,MAAD,EAASP,MAAT,KAAoB;AAClBG,IAAAA,QAAQ,CAACL,cAAc,CAAC,KAAD,CAAf,CAAR;AAEA,QAAIS,MAAJ,EAAYJ,QAAQ,CAACP,SAAS,CAACW,MAAD,CAAV,CAAR;AACZ,QAAIP,MAAJ,EAAYG,QAAQ,CAACN,SAAS,CAACE,WAAW,CAACC,MAAD,CAAZ,CAAV,CAAR;AAEZE,IAAAA,MAAM,CAACM,IAAP,CACE;AACEC,MAAAA,QAAQ,EAAEP,MAAM,CAACO,QADnB;AAEEC,MAAAA,KAAK,EAAE,EACL,IAAIH,MAAM,GAAG;AAAEA,UAAAA;AAAF,SAAH,GAAgB,EAA1B,CADK;AAEL,YAAIP,MAAM,IAAII,IAAI,CAACJ,MAAf,IAAyB,EAA7B;AAFK;AAFT,KADF,EAQEW,SARF,EASE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KATF;AAWD,GAlByB,EAmB1B,CAACR,IAAD,EAAOF,MAAP,EAAeC,QAAf,CAnB0B,CAA5B;AAsBAZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,KAAK,GAAGR,MAAM,CAACQ,KAArB;;AACA,QAAIA,KAAJ,EAAW;AACTP,MAAAA,QAAQ,CAACN,SAAS,CAACE,WAAW,CAACW,KAAD,CAAZ,CAAV,CAAR;AACD;AACF,GALQ,EAKN,CAACR,MAAD,EAASC,QAAT,CALM,CAAT;AAOA,SAAO,CAACG,QAAD,CAAP;AACD,CApCM","sourcesContent":["import { useCallback, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useRouter } from 'next/router'\n\nimport { omit } from '../atomic-ui/utils/functions'\n\nimport { setSearch, setParams, setIgnoreFetch } from '../store/actions/root'\n\nexport const parseParams = (params) => omit(params, ['search'])\n\nexport const useSearch = () => {\n  const router = useRouter()\n  const dispatch = useDispatch()\n\n  const root = useSelector((state) => state.root)\n\n  const onSearch = useCallback(\n    (search, params) => {\n      dispatch(setIgnoreFetch(false))\n\n      if (search) dispatch(setSearch(search))\n      if (params) dispatch(setParams(parseParams(params)))\n\n      router.push(\n        {\n          pathname: router.pathname,\n          query: {\n            ...(search ? { search } : {}),\n            ...(params || root.params || {})\n          }\n        },\n        undefined,\n        { shallow: true }\n      )\n    },\n    [root, router, dispatch]\n  )\n\n  useEffect(() => {\n    const query = router.query\n    if (query) {\n      dispatch(setParams(parseParams(query)))\n    }\n  }, [router, dispatch])\n\n  return [onSearch]\n}\n"]},"metadata":{},"sourceType":"module"}
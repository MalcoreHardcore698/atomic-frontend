{"ast":null,"code":"import React, { useState } from 'react';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport TextArea from '../../atomic-ui/components/TextArea';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nexport const Category = ({\n  category,\n  categoryTypes,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  const [typeError, setTypeError] = useState(false);\n  const [type, setType] = useState(category && category.type && {\n    value: category.type,\n    label: getLabelCategory(category.type)\n  } || null);\n  const [disabled, setDisabled] = useState(true);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => {\n      if (type) {\n        onSubmit({ ...form,\n          type\n        }, action);\n      } else {\n        setTypeError(true);\n      }\n    }\n  }, ({\n    register,\n    loading,\n    errors,\n    getValues\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.name && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: 'name',\n    ref: register({\n      required: true\n    }),\n    onChange: e => {\n      if (e.target.value === (category === null || category === void 0 ? void 0 : category.name)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    defaultValue: (category === null || category === void 0 ? void 0 : category.name) || getValues('name'),\n    placeholder: 'Название',\n    appearance: 'ghost',\n    disabled: loading\n  }), typeError && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0438\\u043F \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Select, {\n    name: 'type',\n    appearance: 'ghost',\n    defaultValue: type,\n    onChange: value => {\n      setType(value);\n      setTypeError(false);\n\n      if (value.value === (category === null || category === void 0 ? void 0 : category.type)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    placeholder: 'Выберите тип',\n    options: categoryTypes.map(type => ({\n      value: type,\n      label: getLabelCategory(type)\n    })),\n    isLoading: loading,\n    isClearable: true\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    name: 'description',\n    ref: register(),\n    onChange: e => {\n      if (e.target.value === (category === null || category === void 0 ? void 0 : category.description)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    defaultValue: (category === null || category === void 0 ? void 0 : category.description) || getValues('description'),\n    placeholder: 'Описание',\n    appearance: 'ghost',\n    disabled: loading\n  })), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      flexGrow: 1\n    },\n    type: 'submit',\n    disabled: disabled || loading\n  }, category ? 'Сохранить' : 'Создать'))));\n};\nCategory.defaultProps = {\n  create: true\n};\nexport default Category;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Button from '../Button';\nimport Tooltip from '../Tooltip';\nimport Divider from '../Divider';\nimport { Label } from '../Difinition';\nimport Input from '../Input';\nimport Alert from '../Alert';\nimport Text from '../Text';\nimport Icon from '../Icon';\nimport Title from '../Title';\nconst MAX_LIMIT_VALUE = 256;\nconst MIN_LIMIT_VALUE = 0;\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"CharacteristicEditor__Wrap\",\n  componentId: \"sc-1b0mq4d-0\"\n})([\"grid-gap:0;\"]);\n_c = Wrap;\nexport const Container = styled(Column).withConfig({\n  displayName: \"CharacteristicEditor__Container\",\n  componentId: \"sc-1b0mq4d-1\"\n})([\"display:flex;flex-direction:column;width:100%;max-width:100%;flex-grow:1;grid-gap:5px;margin-bottom:var(--default-gap);\"]);\n_c2 = Container;\nexport const List = styled(Column).withConfig({\n  displayName: \"CharacteristicEditor__List\",\n  componentId: \"sc-1b0mq4d-2\"\n})([\"grid-gap:5px 0;\", \"\"], ({\n  readOnly\n}) => readOnly && css([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(420px,1fr));padding:2px;grid-gap:15px;\"]));\n_c3 = List;\nexport const InputLabel = styled(Text).withConfig({\n  displayName: \"CharacteristicEditor__InputLabel\",\n  componentId: \"sc-1b0mq4d-3\"\n})([\"font-size:var(--font-size-s);\"]);\n_c4 = InputLabel;\nexport const Item = styled(Row).withConfig({\n  displayName: \"CharacteristicEditor__Item\",\n  componentId: \"sc-1b0mq4d-4\"\n})([\"justify-content:space-between;align-items:center;flex-grow:1;grid-gap:5px;\"]);\n_c5 = Item;\nexport const Header = styled(Row).withConfig({\n  displayName: \"CharacteristicEditor__Header\",\n  componentId: \"sc-1b0mq4d-5\"\n})([\"flex-grow:1;grid-gap:10px;label:first-child{flex-grow:1;}label:last-child{flex-grow:4;}\", \"\"], ({\n  readOnly\n}) => readOnly && css([\"flex-direction:column;\"]));\n_c6 = Header;\nexport const Actions = styled(Row).withConfig({\n  displayName: \"CharacteristicEditor__Actions\",\n  componentId: \"sc-1b0mq4d-6\"\n})([\"align-items:center;grid-gap:5px;button{width:100%;flex-grow:1;& > i{height:100%;width:100%;& > svg{transform:scale(0.35);}}}\"]);\n_c7 = Actions;\nexport const AddButton = styled(Button).withConfig({\n  displayName: \"CharacteristicEditor__AddButton\",\n  componentId: \"sc-1b0mq4d-7\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}@media only screen and (max-width:996px){width:100%;}\"]);\n_c8 = AddButton;\nexport const Trunks = styled.div.withConfig({\n  displayName: \"CharacteristicEditor__Trunks\",\n  componentId: \"sc-1b0mq4d-8\"\n})([\"display:flex;align-items:center;flex-wrap:wrap;grid-gap:5px;span{background:var(--default-color-accent);border-radius:var(--surface-border-radius);width:4px;min-height:16px;\", \"}\"], ({\n  value\n}) => value < 9 && css([\"width:12px;border-radius:4px;\"]));\n_c9 = Trunks;\nexport const Value = styled(Title).withConfig({\n  displayName: \"CharacteristicEditor__Value\",\n  componentId: \"sc-1b0mq4d-9\"\n})([\"font-weight:var(--font-weight-bold);line-height:1;@media only screen and (max-width:480px){font-size:var(--font-size-l);}\"]);\n_c10 = Value;\n\nconst getValue = val => {\n  const number = Number(val);\n  if (number > MAX_LIMIT_VALUE) return MAX_LIMIT_VALUE;\n  if (number < MIN_LIMIT_VALUE) return MIN_LIMIT_VALUE;\n  return val;\n};\n\nexport const ListItem = ({\n  item,\n  readOnly,\n  divided,\n  onEdit,\n  onDelete\n}) => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Item, {\n    readOnly: readOnly\n  }, /*#__PURE__*/React.createElement(Header, {\n    readOnly: readOnly\n  }, readOnly && item.isVisualize && !isNaN(item.value) ? /*#__PURE__*/React.createElement(Trunks, {\n    value: item.value\n  }, new Array(Number(item.value)).fill(null).map((_, i) => /*#__PURE__*/React.createElement(\"span\", {\n    key: i\n  }))) : null, readOnly && !item.isVisualize ? /*#__PURE__*/React.createElement(Label, null, item.name) : null, readOnly ? /*#__PURE__*/React.createElement(Value, {\n    tag: 'h4'\n  }, item.isVisualize ? `${item.value} ${item.name}` : item.value) : null, !readOnly && /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    defaultValue: item.value,\n    appearance: 'ghost',\n    placeholder: 'Значение',\n    onChange: e => onEdit && onEdit({ ...item,\n      value: getValue(e.target.value),\n      isVisualize: !isNaN(item.value)\n    })\n  }), !readOnly && /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    defaultValue: item.name,\n    appearance: 'ghost',\n    placeholder: 'Введите название',\n    onChange: e => onEdit && onEdit({ ...item,\n      name: e.target.value\n    })\n  })), !readOnly && /*#__PURE__*/React.createElement(Actions, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Визуализировать (только цифры)'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 'xs',\n    kind: 'icon',\n    type: 'button',\n    revert: !item.isVisualize,\n    onClick: () => onEdit && onEdit({ ...item,\n      value: !isNaN(item.value) ? item.value : MIN_LIMIT_VALUE,\n      isVisualize: !item.isVisualize\n    })\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: 'xs',\n    icon: 'graph',\n    stroke: item.isVisualize ? 'white' : 'var(--default-color-accent)',\n    fill: 'var(--default-color-accent)'\n  }))), onDelete && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 'xs',\n    kind: 'icon',\n    type: 'button',\n    appearance: 'ghost',\n    stroke: 'none',\n    onClick: () => onDelete(item)\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    stroke: 'none',\n    fill: 'var(--default-color-red)',\n    size: 'xs'\n  }))))), !readOnly && divided && /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }));\n};\n_c11 = ListItem;\nexport const InteractiveList = ({\n  list,\n  readOnly,\n  onChange\n}) => {\n  const onEdit = edited => {\n    const mapped = prev => prev.map(item => (item === null || item === void 0 ? void 0 : item.id) === (edited === null || edited === void 0 ? void 0 : edited.id) ? edited : item);\n\n    if (onChange) onChange(mapped);\n  };\n\n  const onDelete = deleted => {\n    const filtered = prev => prev.filter(item => (item === null || item === void 0 ? void 0 : item.id) !== (deleted === null || deleted === void 0 ? void 0 : deleted.id));\n\n    if (onChange) onChange(filtered);\n  };\n\n  return /*#__PURE__*/React.createElement(List, {\n    readOnly: readOnly\n  }, (list || []).length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center',\n      flexGrow: 1\n    }\n  }, \"\\u041F\\u0443\\u0441\\u0442\\u043E\"), (list || []).map((item, index) => /*#__PURE__*/React.createElement(ListItem, {\n    key: item === null || item === void 0 ? void 0 : item.id,\n    item: item,\n    readOnly: readOnly,\n    divided: (list || []).length - 1 !== index,\n    onDelete: onDelete,\n    onEdit: onEdit\n  })));\n};\n_c12 = InteractiveList;\nexport const CharacteristicEditor = ({\n  label,\n  readOnly,\n  defaultValue,\n  withoutAddButton,\n  onChange\n}) => {\n  _s();\n\n  const [characteristics, setCharacteristics] = useState(defaultValue || []);\n\n  const onAdd = () => {\n    const name = 'Новое учебное помещение';\n    const item = {\n      id: v4(),\n      name,\n      value: null,\n      isVisualize: null\n    };\n    setCharacteristics(prev => [...prev, item]);\n  };\n\n  useEffect(() => {\n    if (onChange) onChange(characteristics);\n  }, [characteristics, onChange]);\n  useEffect(() => {\n    setCharacteristics(defaultValue);\n  }, [defaultValue]);\n\n  if (readOnly && characteristics.length === 0) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(Container, null, label && /*#__PURE__*/React.createElement(InputLabel, null, label), /*#__PURE__*/React.createElement(InteractiveList, {\n    list: characteristics,\n    onChange: setCharacteristics,\n    readOnly: readOnly\n  }), !withoutAddButton && !readOnly && /*#__PURE__*/React.createElement(AddButton, {\n    type: 'button',\n    onClick: onAdd\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"), /*#__PURE__*/React.createElement(Icon, {\n    type: 'button',\n    icon: 'add',\n    stroke: 'white'\n  }))));\n};\n\n_s(CharacteristicEditor, \"mz/RToiZlFBdIUifLKYR5jZDfBk=\");\n\n_c13 = CharacteristicEditor;\nexport default CharacteristicEditor;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"List\");\n$RefreshReg$(_c4, \"InputLabel\");\n$RefreshReg$(_c5, \"Item\");\n$RefreshReg$(_c6, \"Header\");\n$RefreshReg$(_c7, \"Actions\");\n$RefreshReg$(_c8, \"AddButton\");\n$RefreshReg$(_c9, \"Trunks\");\n$RefreshReg$(_c10, \"Value\");\n$RefreshReg$(_c11, \"ListItem\");\n$RefreshReg$(_c12, \"InteractiveList\");\n$RefreshReg$(_c13, \"CharacteristicEditor\");","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/atomic-ui/components/CharacteristicEditor/index.js"],"names":["React","useState","useEffect","styled","css","v4","Row","Column","Button","Tooltip","Divider","Label","Input","Alert","Text","Icon","Title","MAX_LIMIT_VALUE","MIN_LIMIT_VALUE","Wrap","Container","List","readOnly","InputLabel","Item","Header","Actions","AddButton","Trunks","div","value","Value","getValue","val","number","Number","ListItem","item","divided","onEdit","onDelete","isVisualize","isNaN","Array","fill","map","_","i","name","e","target","InteractiveList","list","onChange","edited","mapped","prev","id","deleted","filtered","filter","length","width","textAlign","flexGrow","index","CharacteristicEditor","label","defaultValue","withoutAddButton","characteristics","setCharacteristics","onAdd"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { v4 } from 'uuid'\n\nimport Row from '../Row'\nimport Column from '../Column'\nimport Button from '../Button'\nimport Tooltip from '../Tooltip'\nimport Divider from '../Divider'\nimport { Label } from '../Difinition'\nimport Input from '../Input'\nimport Alert from '../Alert'\nimport Text from '../Text'\nimport Icon from '../Icon'\nimport Title from '../Title'\n\nconst MAX_LIMIT_VALUE = 256\nconst MIN_LIMIT_VALUE = 0\n\nexport const Wrap = styled(Column)`\n  grid-gap: 0;\n`\n\nexport const Container = styled(Column)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 100%;\n  flex-grow: 1;\n  grid-gap: 5px;\n  margin-bottom: var(--default-gap);\n`\n\nexport const List = styled(Column)`\n  grid-gap: 5px 0;\n\n  ${({ readOnly }) =>\n    readOnly &&\n    css`\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(420px, 1fr));\n      padding: 2px;\n      grid-gap: 15px;\n    `}\n`\n\nexport const InputLabel = styled(Text)`\n  font-size: var(--font-size-s);\n`\n\nexport const Item = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n  flex-grow: 1;\n  grid-gap: 5px;\n`\n\nexport const Header = styled(Row)`\n  flex-grow: 1;\n  grid-gap: 10px;\n\n  label:first-child {\n    flex-grow: 1;\n  }\n\n  label:last-child {\n    flex-grow: 4;\n  }\n\n  ${({ readOnly }) =>\n    readOnly &&\n    css`\n      flex-direction: column;\n    `}\n`\n\nexport const Actions = styled(Row)`\n  align-items: center;\n  grid-gap: 5px;\n\n  button {\n    width: 100%;\n    flex-grow: 1;\n\n    & > i {\n      height: 100%;\n      width: 100%;\n\n      & > svg {\n        transform: scale(0.35);\n      }\n    }\n  }\n`\n\nexport const AddButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  grid-gap: 10px;\n\n  span {\n    white-space: nowrap;\n  }\n\n  @media only screen and (max-width: 996px) {\n    width: 100%;\n  }\n`\n\nexport const Trunks = styled.div`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  grid-gap: 5px;\n\n  span {\n    background: var(--default-color-accent);\n    border-radius: var(--surface-border-radius);\n    width: 4px;\n    min-height: 16px;\n\n    ${({ value }) =>\n      value < 9 &&\n      css`\n        width: 12px;\n        border-radius: 4px;\n      `}\n  }\n`\n\nexport const Value = styled(Title)`\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`\n\nconst getValue = (val) => {\n  const number = Number(val)\n  if (number > MAX_LIMIT_VALUE) return MAX_LIMIT_VALUE\n  if (number < MIN_LIMIT_VALUE) return MIN_LIMIT_VALUE\n  return val\n}\n\nexport const ListItem = ({ item, readOnly, divided, onEdit, onDelete }) => {\n  return (\n    <React.Fragment>\n      <Item readOnly={readOnly}>\n        <Header readOnly={readOnly}>\n          {readOnly && item.isVisualize && !isNaN(item.value) ? (\n            <Trunks value={item.value}>\n              {new Array(Number(item.value)).fill(null).map((_, i) => (\n                <span key={i} />\n              ))}\n            </Trunks>\n          ) : null}\n\n          {readOnly && !item.isVisualize ? <Label>{item.name}</Label> : null}\n\n          {readOnly ? (\n            <Value tag={'h4'}>{item.isVisualize ? `${item.value} ${item.name}` : item.value}</Value>\n          ) : null}\n\n          {!readOnly && (\n            <Input\n              type={'text'}\n              defaultValue={item.value}\n              appearance={'ghost'}\n              placeholder={'Значение'}\n              onChange={(e) =>\n                onEdit &&\n                onEdit({\n                  ...item,\n                  value: getValue(e.target.value),\n                  isVisualize: !isNaN(item.value)\n                })\n              }\n            />\n          )}\n          {!readOnly && (\n            <Input\n              type={'text'}\n              defaultValue={item.name}\n              appearance={'ghost'}\n              placeholder={'Введите название'}\n              onChange={(e) => onEdit && onEdit({ ...item, name: e.target.value })}\n            />\n          )}\n        </Header>\n\n        {!readOnly && (\n          <Actions>\n            <Tooltip text={'Визуализировать (только цифры)'}>\n              <Button\n                size={'xs'}\n                kind={'icon'}\n                type={'button'}\n                revert={!item.isVisualize}\n                onClick={() =>\n                  onEdit &&\n                  onEdit({\n                    ...item,\n                    value: !isNaN(item.value) ? item.value : MIN_LIMIT_VALUE,\n                    isVisualize: !item.isVisualize\n                  })\n                }>\n                <Icon\n                  size={'xs'}\n                  icon={'graph'}\n                  stroke={item.isVisualize ? 'white' : 'var(--default-color-accent)'}\n                  fill={'var(--default-color-accent)'}\n                />\n              </Button>\n            </Tooltip>\n            {onDelete && (\n              <Tooltip text={'Удалить'}>\n                <Button\n                  size={'xs'}\n                  kind={'icon'}\n                  type={'button'}\n                  appearance={'ghost'}\n                  stroke={'none'}\n                  onClick={() => onDelete(item)}>\n                  <Icon\n                    icon={'delete'}\n                    stroke={'none'}\n                    fill={'var(--default-color-red)'}\n                    size={'xs'}\n                  />\n                </Button>\n              </Tooltip>\n            )}\n          </Actions>\n        )}\n      </Item>\n      {!readOnly && divided && <Divider clear />}\n    </React.Fragment>\n  )\n}\n\nexport const InteractiveList = ({ list, readOnly, onChange }) => {\n  const onEdit = (edited) => {\n    const mapped = (prev) => prev.map((item) => (item?.id === edited?.id ? edited : item))\n    if (onChange) onChange(mapped)\n  }\n\n  const onDelete = (deleted) => {\n    const filtered = (prev) => prev.filter((item) => item?.id !== deleted?.id)\n    if (onChange) onChange(filtered)\n  }\n\n  return (\n    <List readOnly={readOnly}>\n      {(list || []).length === 0 && (\n        <Alert style={{ width: '100%', textAlign: 'center', flexGrow: 1 }}>Пусто</Alert>\n      )}\n      {(list || []).map((item, index) => (\n        <ListItem\n          key={item?.id}\n          item={item}\n          readOnly={readOnly}\n          divided={(list || []).length - 1 !== index}\n          onDelete={onDelete}\n          onEdit={onEdit}\n        />\n      ))}\n    </List>\n  )\n}\n\nexport const CharacteristicEditor = ({\n  label,\n  readOnly,\n  defaultValue,\n  withoutAddButton,\n  onChange\n}) => {\n  const [characteristics, setCharacteristics] = useState(defaultValue || [])\n\n  const onAdd = () => {\n    const name = 'Новое учебное помещение'\n    const item = { id: v4(), name, value: null, isVisualize: null }\n    setCharacteristics((prev) => [...prev, item])\n  }\n\n  useEffect(() => {\n    if (onChange) onChange(characteristics)\n  }, [characteristics, onChange])\n\n  useEffect(() => {\n    setCharacteristics(defaultValue)\n  }, [defaultValue])\n\n  if (readOnly && characteristics.length === 0) {\n    return null\n  }\n\n  return (\n    <Wrap>\n      <Container>\n        {label && <InputLabel>{label}</InputLabel>}\n\n        <InteractiveList list={characteristics} onChange={setCharacteristics} readOnly={readOnly} />\n\n        {!withoutAddButton && !readOnly && (\n          <AddButton type={'button'} onClick={onAdd}>\n            <span>Добавить</span>\n            <Icon type={'button'} icon={'add'} stroke={'white'} />\n          </AddButton>\n        )}\n      </Container>\n    </Wrap>\n  )\n}\n\nexport default CharacteristicEditor\n"]},"metadata":{},"sourceType":"module"}
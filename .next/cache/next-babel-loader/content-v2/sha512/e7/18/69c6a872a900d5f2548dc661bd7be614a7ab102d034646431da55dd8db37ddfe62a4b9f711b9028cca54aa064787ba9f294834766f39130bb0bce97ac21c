{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/category';\nimport { initializeApollo } from '../../apollo';\nimport { useHelper } from '../../hooks/useHelper';\nimport { onCategoryCreate, onCategoryEdit, onCategoryLink } from '../../store/helpers/category';\nimport CategoryCard from '../../components/CategoryCard';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Категории';\nconst START_OFFSET = 6;\n\nconst Categories = ({\n  types\n}) => {\n  const recall = useHelper();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    icon: 'folder',\n    template: template,\n    emptyMessage: 'Категорий нет',\n    buttonCreateText: 'Создать категорию',\n    getType: 'getCategories',\n    getQuery: queries.GET_CATEGORIES,\n    deleteQuery: queries.DELETE_CATEGORY,\n    deleteEntityMultiText: 'категории',\n    deleteEntitySingleText: 'категорию',\n    onLink: category => recall(onCategoryLink, {\n      id: category.id,\n      category\n    }),\n    onEdit: category => recall(onCategoryEdit, {\n      id: category.id,\n      category,\n      types,\n      mutation: queries.UPDATE_CATEGORY\n    })(),\n    onCreate: recall(onCategoryCreate, {\n      types,\n      mutation: queries.CREATE_CATEGORY\n    }),\n    render: document => /*#__PURE__*/React.createElement(CategoryCard, {\n      category: document\n    })\n  });\n};\n\nexport async function getServerSideProps({\n  query\n}) {\n  const client = initializeApollo();\n  let categories = [];\n  let types = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_CATEGORIES,\n      variables: {\n        offset: query.page ? query.page * START_OFFSET : 0,\n        limit: START_OFFSET\n      }\n    });\n\n    if (response && response.data) {\n      categories = response.data.getCategories;\n      types = response.data.getCategoryTypes;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        categories\n      },\n      types\n    }\n  };\n}\nexport default Categories;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/categories.js"],"names":["React","useEffect","useDispatch","template","initializeApollo","useHelper","onCategoryCreate","onCategoryEdit","onCategoryLink","CategoryCard","ContentLayout","setDocuments","queries","TITLE","START_OFFSET","Categories","types","recall","dispatch","GET_CATEGORIES","DELETE_CATEGORY","category","id","mutation","UPDATE_CATEGORY","CREATE_CATEGORY","document","getServerSideProps","query","client","categories","response","GET_META_DASHBOARD_CATEGORIES","variables","offset","page","limit","data","getCategories","getCategoryTypes","err","console","log","props","store"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,QAAP,MAAqB,qDAArB;AAEA,SAASC,gBAAT,QAAiC,cAAjC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,cAA3C,QAAiE,8BAAjE;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,MAAMC,KAAK,GAAG,WAAd;AACA,MAAMC,YAAY,GAAG,CAArB;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAChC,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAMa,QAAQ,GAAGhB,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,QAAQ,CAACP,YAAY,CAAC,IAAD,CAAb,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEE,KADT;AAEE,IAAA,IAAI,EAAE,QAFR;AAGE,IAAA,QAAQ,EAAEV,QAHZ;AAIE,IAAA,YAAY,EAAE,eAJhB;AAKE,IAAA,gBAAgB,EAAE,mBALpB;AAME,IAAA,OAAO,EAAE,eANX;AAOE,IAAA,QAAQ,EAAES,OAAO,CAACO,cAPpB;AAQE,IAAA,WAAW,EAAEP,OAAO,CAACQ,eARvB;AASE,IAAA,qBAAqB,EAAE,WATzB;AAUE,IAAA,sBAAsB,EAAE,WAV1B;AAWE,IAAA,MAAM,EAAGC,QAAD,IAAcJ,MAAM,CAACT,cAAD,EAAiB;AAAEc,MAAAA,EAAE,EAAED,QAAQ,CAACC,EAAf;AAAmBD,MAAAA;AAAnB,KAAjB,CAX9B;AAYE,IAAA,MAAM,EAAGA,QAAD,IACNJ,MAAM,CAACV,cAAD,EAAiB;AACrBe,MAAAA,EAAE,EAAED,QAAQ,CAACC,EADQ;AAErBD,MAAAA,QAFqB;AAGrBL,MAAAA,KAHqB;AAIrBO,MAAAA,QAAQ,EAAEX,OAAO,CAACY;AAJG,KAAjB,CAAN,EAbJ;AAoBE,IAAA,QAAQ,EAAEP,MAAM,CAACX,gBAAD,EAAmB;AAAEU,MAAAA,KAAF;AAASO,MAAAA,QAAQ,EAAEX,OAAO,CAACa;AAA3B,KAAnB,CApBlB;AAqBE,IAAA,MAAM,EAAGC,QAAD,iBAAc,oBAAC,YAAD;AAAc,MAAA,QAAQ,EAAEA;AAAxB;AArBxB,IADF;AAyBD,CAjCD;;AAmCA,OAAO,eAAeC,kBAAf,CAAkC;AAAEC,EAAAA;AAAF,CAAlC,EAA6C;AAClD,QAAMC,MAAM,GAAGzB,gBAAgB,EAA/B;AAEA,MAAI0B,UAAU,GAAG,EAAjB;AACA,MAAId,KAAK,GAAG,EAAZ;;AAEA,MAAI;AACF,UAAMe,QAAQ,GAAG,MAAMF,MAAM,CAACD,KAAP,CAAa;AAClCA,MAAAA,KAAK,EAAEhB,OAAO,CAACoB,6BADmB;AAElCC,MAAAA,SAAS,EAAE;AACTC,QAAAA,MAAM,EAAEN,KAAK,CAACO,IAAN,GAAaP,KAAK,CAACO,IAAN,GAAarB,YAA1B,GAAyC,CADxC;AAETsB,QAAAA,KAAK,EAAEtB;AAFE;AAFuB,KAAb,CAAvB;;AAQA,QAAIiB,QAAQ,IAAIA,QAAQ,CAACM,IAAzB,EAA+B;AAC7BP,MAAAA,UAAU,GAAGC,QAAQ,CAACM,IAAT,CAAcC,aAA3B;AACAtB,MAAAA,KAAK,GAAGe,QAAQ,CAACM,IAAT,CAAcE,gBAAtB;AACD;AACF,GAbD,CAaE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAED,SAAO;AACLG,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AAAEd,QAAAA;AAAF,OADF;AAELd,MAAAA;AAFK;AADF,GAAP;AAMD;AAED,eAAeD,UAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport template from '../../atomic-ui/components/Table/templates/category'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport { onCategoryCreate, onCategoryEdit, onCategoryLink } from '../../store/helpers/category'\nimport CategoryCard from '../../components/CategoryCard'\nimport ContentLayout from '../../layouts/dashboard/content'\nimport { setDocuments } from '../../store/actions/documents'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Категории'\nconst START_OFFSET = 6\n\nconst Categories = ({ types }) => {\n  const recall = useHelper()\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      icon={'folder'}\n      template={template}\n      emptyMessage={'Категорий нет'}\n      buttonCreateText={'Создать категорию'}\n      getType={'getCategories'}\n      getQuery={queries.GET_CATEGORIES}\n      deleteQuery={queries.DELETE_CATEGORY}\n      deleteEntityMultiText={'категории'}\n      deleteEntitySingleText={'категорию'}\n      onLink={(category) => recall(onCategoryLink, { id: category.id, category })}\n      onEdit={(category) =>\n        recall(onCategoryEdit, {\n          id: category.id,\n          category,\n          types,\n          mutation: queries.UPDATE_CATEGORY\n        })()\n      }\n      onCreate={recall(onCategoryCreate, { types, mutation: queries.CREATE_CATEGORY })}\n      render={(document) => <CategoryCard category={document} />}\n    />\n  )\n}\n\nexport async function getServerSideProps({ query }) {\n  const client = initializeApollo()\n\n  let categories = []\n  let types = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_CATEGORIES,\n      variables: {\n        offset: query.page ? query.page * START_OFFSET : 0,\n        limit: START_OFFSET\n      }\n    })\n\n    if (response && response.data) {\n      categories = response.data.getCategories\n      types = response.data.getCategoryTypes\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { categories },\n      types\n    }\n  }\n}\n\nexport default Categories\n"]},"metadata":{},"sourceType":"module"}
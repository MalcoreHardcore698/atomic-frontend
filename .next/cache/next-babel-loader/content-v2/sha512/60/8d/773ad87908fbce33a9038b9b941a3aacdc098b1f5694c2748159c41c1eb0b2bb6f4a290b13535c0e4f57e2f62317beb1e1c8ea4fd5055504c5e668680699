{"ast":null,"code":"import React from 'react';\nimport styled from 'styled-components';\nimport YouTube from 'react-youtube';\nimport Column from '../../atomic-ui/components/Column';\nimport Dash from '../../atomic-ui/components/Menu/Dash';\nimport TicketForm from '../../components/FormTicket';\nimport Notifications from '../../components/Notifications';\nimport Messenger from '../../components/Messenger';\nimport { setDrawer } from '../actions/drawer';\nimport { setModal } from '../actions/modal';\nimport { setItem } from '../actions/snacks';\nimport { onUserLink } from './user';\nexport const Presentation = styled(YouTube).withConfig({\n  displayName: \"helpers__Presentation\",\n  componentId: \"t5pxc3-0\"\n})([\"display:flex;flex-grow:1;width:100%;height:80vh;border-radius:var(--surface-border-radius);overflow:hidden;iframe{width:100%;height:100%;}\"]);\nexport function onMenu(dispatch, props) {\n  const {\n    links\n  } = props;\n  dispatch(setDrawer({\n    side: 'left',\n    half: true,\n    content: /*#__PURE__*/React.createElement(Dash, {\n      links: links\n    })\n  }));\n}\nexport function onHelp(dispatch, props) {\n  const {\n    mutation\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'Поддержка',\n    component: () => /*#__PURE__*/React.createElement(Column, {\n      style: {\n        padding: '15px'\n      }\n    }, /*#__PURE__*/React.createElement(TicketForm, {\n      title: false,\n      mutation: mutation,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          var _form$category;\n\n          await action({\n            variables: {\n              input: {\n                title: form.title,\n                message: form.message,\n                category: (_form$category = form.category) === null || _form$category === void 0 ? void 0 : _form$category.value\n              }\n            }\n          });\n          dispatch(setItem({\n            type: 'success',\n            message: 'Вопрос успешно отправлен'\n          }));\n        } catch (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отправить вопрос'\n          }));\n        } finally {\n          dispatch(setModal(null));\n        }\n      },\n      isClient: true\n    }))\n  }]));\n}\nexport function onNotification(dispatch, props) {\n  const {\n    user\n  } = props;\n  dispatch(setDrawer({\n    icon: 'notification',\n    title: 'Уведомления',\n    content: /*#__PURE__*/React.createElement(Notifications, {\n      user: user,\n      appearance: 'clear'\n    })\n  }));\n}\nexport function onChat(dispatch, props) {\n  const {\n    sender,\n    recipient\n  } = props;\n  dispatch(setDrawer({\n    icon: 'chat',\n    title: 'Мессенджер',\n    content: /*#__PURE__*/React.createElement(Messenger, {\n      sender: sender,\n      recipient: recipient,\n      appearance: 'clear',\n      onMemberLink: () => onUserLink(dispatch, props),\n      onSubmit: async (form, action, recipient) => {\n        try {\n          const response = await action({\n            variables: {\n              recipient: recipient.email,\n              text: form.text\n            }\n          });\n          return response.data.sendMessage;\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    })\n  }));\n}\nexport function onIndexVideoLink(dispatch, props) {\n  const {\n    video\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: '',\n    component: () => /*#__PURE__*/React.createElement(Presentation, {\n      videoId: video\n    })\n  }], 'l'));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Column from '../../atomic-ui/components/Column';\nimport Table from '../../atomic-ui/components/Table';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { GridAside as Container, Loader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"\"]);\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\n_c = CenterAlert;\nexport const List = ({\n  type,\n  query,\n  template,\n  variables,\n  component,\n  errorMessage,\n  emptyMessage,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  _s();\n\n  const displayMethod = useSelector(state => state.root.displayMethod);\n  const [items, setItems] = useState([]);\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(query, {\n    variables\n  });\n  const renderContent = useCallback(() => {\n    if (displayMethod === 'grid') {\n      return /*#__PURE__*/React.createElement(Container, null, (items || []).map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n        key: item.id || item.email\n      }, component(item))));\n    }\n\n    return /*#__PURE__*/React.createElement(Table, {\n      data: items,\n      template: template,\n      onChecked: onChecked,\n      onClick: onClick,\n      onEdit: onEdit,\n      onDelete: onDelete\n    });\n  }, [items, displayMethod, onChecked, onClick, onEdit, onDelete]);\n  useEffect(() => {\n    if (!loading && data) {\n      setItems(data[type]);\n    }\n  }, [data, loading]);\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) {\n      setCheckedList(items);\n    }\n  }, [items, setCheckedList]);\n  return !loading && data && (items === null || items === void 0 ? void 0 : items.length) > 0 ? renderContent() : error ? /*#__PURE__*/React.createElement(CenterAlert, {\n    appearance: 'error'\n  }, errorMessage) : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(CenterAlert, null, emptyMessage);\n};\n\n_s(List, \"6u2u5ZuxgBLoR5GVW+1Qwj1X1u0=\", false, function () {\n  return [useSelector, useQuery];\n});\n\n_c2 = List;\nList.defaultProps = {\n  errorMessage: 'Не удалось загрузить данные',\n  emptyMessage: 'Документов нет'\n};\nexport default List;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CenterAlert\");\n$RefreshReg$(_c2, \"List\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/List/index.js"],"names":["React","useState","useEffect","useCallback","styled","useQuery","useSelector","Column","Table","Alert","Spinner","GridAside","Container","Loader","LazyLoad","Wrap","CenterAlert","List","type","query","template","variables","component","errorMessage","emptyMessage","setCheckedList","onChecked","onClick","onEdit","onDelete","displayMethod","state","root","items","setItems","data","loading","error","renderContent","map","item","id","email","length","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Table from '../../atomic-ui/components/Table'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { GridAside as Container, Loader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\n\nexport const Wrap = styled(Column)``\n\nexport const CenterAlert = styled(Alert)`\n  width: 100%;\n  text-align: center;\n`\n\nexport const List = ({\n  type,\n  query,\n  template,\n  variables,\n  component,\n  errorMessage,\n  emptyMessage,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const displayMethod = useSelector((state) => state.root.displayMethod)\n  const [items, setItems] = useState([])\n\n  const { data, loading, error } = useQuery(query, { variables })\n\n  const renderContent = useCallback(() => {\n    if (displayMethod === 'grid') {\n      return (\n        <Container>\n          {(items || []).map((item) => (\n            <LazyLoad key={item.id || item.email}>{component(item)}</LazyLoad>\n          ))}\n        </Container>\n      )\n    }\n    return (\n      <Table\n        data={items}\n        template={template}\n        onChecked={onChecked}\n        onClick={onClick}\n        onEdit={onEdit}\n        onDelete={onDelete}\n      />\n    )\n  }, [items, displayMethod, onChecked, onClick, onEdit, onDelete])\n\n  useEffect(() => {\n    if (!loading && data) {\n      setItems(data[type])\n    }\n  }, [data, loading])\n\n  useEffect(() => {\n    if (items?.length > 0 && setCheckedList) {\n      setCheckedList(items)\n    }\n  }, [items, setCheckedList])\n\n  return !loading && data && items?.length > 0 ? (\n    renderContent()\n  ) : error ? (\n    <CenterAlert appearance={'error'}>{errorMessage}</CenterAlert>\n  ) : loading ? (\n    <Loader>\n      <Spinner />\n    </Loader>\n  ) : (\n    <CenterAlert>{emptyMessage}</CenterAlert>\n  )\n}\n\nList.defaultProps = {\n  errorMessage: 'Не удалось загрузить данные',\n  emptyMessage: 'Документов нет'\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}
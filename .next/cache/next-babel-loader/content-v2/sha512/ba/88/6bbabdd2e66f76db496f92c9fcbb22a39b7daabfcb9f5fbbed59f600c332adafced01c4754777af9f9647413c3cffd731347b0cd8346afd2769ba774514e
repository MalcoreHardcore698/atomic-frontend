{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Button from '../Button';\nimport Tooltip from '../Tooltip';\nimport Divider from '../Divider';\nimport { Label } from '../Difinition';\nimport Input from '../Input';\nimport Alert from '../Alert';\nimport Text from '../Text';\nimport Icon from '../Icon';\nimport Title from '../Title';\nconst MAX_LIMIT_VALUE = 256;\nconst MIN_LIMIT_VALUE = 0;\nexport const Wrap = styled(Column)`\n  grid-gap: 0;\n`;\nexport const Container = styled(Column)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 100%;\n  flex-grow: 1;\n  grid-gap: 5px;\n  margin-bottom: var(--default-gap);\n`;\nexport const List = styled(Column)`\n  grid-gap: 5px 0;\n\n  ${({\n  readOnly\n}) => readOnly && css`\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(420px, 1fr));\n      padding: 2px;\n      grid-gap: 15px;\n    `}\n`;\nexport const InputLabel = styled(Text)`\n  font-size: var(--font-size-s);\n`;\nexport const Item = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n  flex-grow: 1;\n  grid-gap: 5px;\n`;\nexport const Header = styled(Row)`\n  flex-grow: 1;\n  grid-gap: 10px;\n\n  label:first-child {\n    flex-grow: 1;\n  }\n\n  label:last-child {\n    flex-grow: 4;\n  }\n\n  ${({\n  readOnly\n}) => readOnly && css`\n      flex-direction: column;\n    `}\n`;\nexport const Actions = styled(Row)`\n  align-items: center;\n  grid-gap: 5px;\n\n  button {\n    width: 100%;\n    flex-grow: 1;\n\n    & > i {\n      height: 100%;\n      width: 100%;\n\n      & > svg {\n        transform: scale(0.35);\n      }\n    }\n  }\n`;\nexport const AddButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  grid-gap: 10px;\n\n  span {\n    white-space: nowrap;\n  }\n\n  @media only screen and (max-width: 996px) {\n    width: 100%;\n  }\n`;\nexport const Trunks = styled.div`\n  display: flex;\n  align-items: center;\n  flex-wrap: wrap;\n  grid-gap: 5px;\n\n  span {\n    background: var(--default-color-accent);\n    border-radius: var(--surface-border-radius);\n    width: 4px;\n    min-height: 16px;\n\n    ${({\n  value\n}) => value < 9 && css`\n        width: 12px;\n        border-radius: 4px;\n      `}\n  }\n`;\nexport const Value = styled(Title)`\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`;\n\nconst getValue = val => {\n  const number = Number(val);\n  if (number > MAX_LIMIT_VALUE) return MAX_LIMIT_VALUE;\n  if (number < MIN_LIMIT_VALUE) return MIN_LIMIT_VALUE;\n  return val;\n};\n\nexport const ListItem = ({\n  item,\n  readOnly,\n  divided,\n  onEdit,\n  onDelete\n}) => {\n  return __jsx(React.Fragment, null, __jsx(Item, {\n    readOnly: readOnly\n  }, __jsx(Header, {\n    readOnly: readOnly\n  }, readOnly && item.isVisualize && !isNaN(item.value) ? __jsx(Trunks, {\n    value: item.value\n  }, new Array(Number(item.value)).fill(null).map((_, i) => __jsx(\"span\", {\n    key: i\n  }))) : null, readOnly && !item.isVisualize ? __jsx(Label, null, item.name) : null, readOnly ? __jsx(Value, {\n    tag: 'h4'\n  }, item.isVisualize ? `${item.value} ${item.name}` : item.value) : null, !readOnly && __jsx(Input, {\n    type: 'text',\n    defaultValue: item.value,\n    appearance: 'ghost',\n    placeholder: 'Значение',\n    onChange: e => onEdit && onEdit(_objectSpread(_objectSpread({}, item), {}, {\n      value: getValue(e.target.value),\n      isVisualize: !isNaN(item.value)\n    }))\n  }), !readOnly && __jsx(Input, {\n    type: 'text',\n    defaultValue: item.name,\n    appearance: 'ghost',\n    placeholder: 'Введите название',\n    onChange: e => onEdit && onEdit(_objectSpread(_objectSpread({}, item), {}, {\n      name: e.target.value\n    }))\n  })), !readOnly && __jsx(Actions, null, __jsx(Tooltip, {\n    text: 'Визуализировать (только цифры)'\n  }, __jsx(Button, {\n    size: 'xs',\n    kind: 'icon',\n    type: 'button',\n    revert: !item.isVisualize,\n    onClick: () => onEdit && onEdit(_objectSpread(_objectSpread({}, item), {}, {\n      value: !isNaN(item.value) ? item.value : MIN_LIMIT_VALUE,\n      isVisualize: !item.isVisualize\n    }))\n  }, __jsx(Icon, {\n    size: 'xs',\n    icon: 'graph',\n    stroke: item.isVisualize ? 'white' : 'var(--default-color-accent)',\n    fill: 'var(--default-color-accent)'\n  }))), onDelete && __jsx(Tooltip, {\n    text: 'Удалить'\n  }, __jsx(Button, {\n    size: 'xs',\n    kind: 'icon',\n    type: 'button',\n    appearance: 'ghost',\n    stroke: 'none',\n    onClick: () => onDelete(item)\n  }, __jsx(Icon, {\n    icon: 'delete',\n    stroke: 'none',\n    fill: 'var(--default-color-red)',\n    size: 'xs'\n  }))))), !readOnly && divided && __jsx(Divider, {\n    clear: true\n  }));\n};\nexport const InteractiveList = ({\n  list,\n  readOnly,\n  onChange\n}) => {\n  const onEdit = edited => {\n    const mapped = prev => prev.map(item => (item === null || item === void 0 ? void 0 : item.id) === (edited === null || edited === void 0 ? void 0 : edited.id) ? edited : item);\n\n    if (onChange) onChange(mapped);\n  };\n\n  const onDelete = deleted => {\n    const filtered = prev => prev.filter(item => (item === null || item === void 0 ? void 0 : item.id) !== (deleted === null || deleted === void 0 ? void 0 : deleted.id));\n\n    if (onChange) onChange(filtered);\n  };\n\n  return __jsx(List, {\n    readOnly: readOnly\n  }, (list || []).length === 0 && __jsx(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center',\n      flexGrow: 1\n    }\n  }, \"\\u041F\\u0443\\u0441\\u0442\\u043E\"), (list || []).map((item, index) => __jsx(ListItem, {\n    key: item === null || item === void 0 ? void 0 : item.id,\n    item: item,\n    readOnly: readOnly,\n    divided: (list || []).length - 1 !== index,\n    onDelete: onDelete,\n    onEdit: onEdit\n  })));\n};\nexport const CharacteristicEditor = ({\n  label,\n  defaultValue,\n  readOnly,\n  onChange\n}) => {\n  const {\n    0: characteristics,\n    1: setCharacteristics\n  } = useState(defaultValue || []);\n\n  const onAdd = () => {\n    const name = 'Новое учебное помещение';\n    const item = {\n      id: v4(),\n      name,\n      value: null,\n      isVisualize: null\n    };\n    setCharacteristics(prev => [...prev, item]);\n  };\n\n  useEffect(() => {\n    if (onChange) onChange(characteristics);\n  }, [characteristics, onChange]);\n  useEffect(() => {\n    setCharacteristics(defaultValue);\n  }, [defaultValue]);\n\n  if (readOnly && characteristics.length === 0) {\n    return null;\n  }\n\n  return __jsx(Wrap, null, __jsx(Container, null, label && __jsx(InputLabel, null, label), __jsx(InteractiveList, {\n    list: characteristics,\n    onChange: setCharacteristics,\n    readOnly: readOnly\n  }), !readOnly && __jsx(AddButton, {\n    type: 'button',\n    onClick: onAdd\n  }, __jsx(\"span\", null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"), __jsx(Icon, {\n    type: 'button',\n    icon: 'add',\n    stroke: 'white'\n  }))));\n};\nexport default CharacteristicEditor;","map":null,"metadata":{},"sourceType":"module"}
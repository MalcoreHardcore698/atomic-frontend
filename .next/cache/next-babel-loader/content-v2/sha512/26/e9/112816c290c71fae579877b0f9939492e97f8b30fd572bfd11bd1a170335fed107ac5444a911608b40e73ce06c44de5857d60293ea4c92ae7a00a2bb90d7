{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport Title from '../atomic-ui/components/Title';\nimport ProjectList from '../components/ProjectList';\nimport ArticleList from '../components/ArticleList';\nimport UserList from '../components/UserList';\nimport { useHelper } from '../hooks/useHelper';\nimport { useMutate } from '../hooks/useMutate';\nimport ContentLayout from '../layouts/content';\nimport { updateUser } from '../store/actions/user';\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nconst TITLE = 'Атомик';\nconst START_OFFSET = 13;\nconst LIMIT = 5;\nconst Container = styled.div.withConfig({\n  displayName: \"pages__Container\",\n  componentId: \"sc-1kp8388-0\"\n})([\"display:grid;grid-template-columns:1fr min-content;grid-gap:var(--default-gap);margin-bottom:80px;@media only screen and (max-width:1196px){grid-template-columns:1fr;}\"]);\n_c = Container;\nconst Aside = styled.aside.withConfig({\n  displayName: \"pages__Aside\",\n  componentId: \"sc-1kp8388-1\"\n})([\"display:flex;flex-direction:column;grid-gap:var(--default-gap);width:394px;@media only screen and (max-width:1196px){width:auto;}\"]);\n_c2 = Aside;\n\nconst Home = () => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const [search, setSearch] = useState(null);\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    data: dataScaffold,\n    loading: loadingScaffold\n  } = useQuery(queries.GET_META_SCAFFOLD);\n  const scaffold = useMemo(() => !loadingScaffold && (dataScaffold === null || dataScaffold === void 0 ? void 0 : dataScaffold.getDashboardSettings) && {\n    title: dataScaffold.getDashboardSettings.scaffold.title,\n    background: dataScaffold.getDashboardSettings.scaffold.background.path,\n    primary: dataScaffold.getDashboardSettings.scaffold.primary,\n    residues: dataScaffold.getDashboardSettings.scaffold.residues,\n    onLink: (project, owned) => recall(onProjectLink, {\n      id: project.id,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      project,\n      liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n      onLike: user.email && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onAdd: user.email && recall(onProjectAdd, {\n        id: project.id,\n        project,\n        folders: user === null || user === void 0 ? void 0 : user.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        }\n      }),\n      owned\n    })(),\n    onLike: user.email && (project => mutate(queries.LIKE_PROJECT, {\n      id: project.id\n    }, response => dispatch(updateUser(response.data.likeProject)))()),\n    onAdd: user.email && (project => recall(onProjectAdd, {\n      id: project.id,\n      project,\n      folders: user === null || user === void 0 ? void 0 : user.folders,\n      mutations: {\n        addProject: queries.ADD_USER_PROJECT,\n        createFolder: queries.ADD_USER_FOLDER\n      }\n    })()),\n    onSearch: value => setSearch(value),\n    onAboutMore: project => recall(onUserAboutMore, {\n      user: project\n    }),\n    onCompanyLink: project => {\n      var _project$company;\n\n      return recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user\n      })();\n    },\n    onScreenshotClick: (project, key) => recall(onProjectScreenshot, {\n      screenshots: [project.preview, ...project.screenshots],\n      key\n    })()\n  }, [dataScaffold, loadingScaffold]);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    research: search,\n    scaffold: scaffold,\n    startOffset: START_OFFSET,\n    query: queries.GET_PROJECTS,\n    variables: {\n      status: 'PUBLISHED'\n    },\n    initialize: true\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(ProjectList, {\n    initialList: documents,\n    layout: true\n  }), /*#__PURE__*/React.createElement(Aside, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u044B\"), /*#__PURE__*/React.createElement(UserList, {\n    variables: {\n      offset: 0,\n      limit: 3\n    }\n  }), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0438\"), /*#__PURE__*/React.createElement(ArticleList, {\n    variables: {\n      offset: 0,\n      limit: 2\n    }\n  }))));\n};\n\n_s(Home, \"ZikNeRDaqBN06o6NgnvZHPopot8=\", false, function () {\n  return [useHelper, useMutate, useSelector, useDispatch, useQuery];\n});\n\n_c3 = Home;\nexport default Home;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Aside\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/index.js"],"names":["React","useMemo","useState","styled","useSelector","useDispatch","useQuery","Title","ProjectList","ArticleList","UserList","useHelper","useMutate","ContentLayout","updateUser","onProjectLink","onProjectAdd","onProjectScreenshot","onUserAboutMore","onUserLink","queries","TITLE","START_OFFSET","LIMIT","Container","div","Aside","aside","Home","recall","mutate","search","setSearch","user","state","dispatch","data","dataScaffold","loading","loadingScaffold","GET_META_SCAFFOLD","scaffold","getDashboardSettings","title","background","path","primary","residues","onLink","project","owned","id","auth","email","liked","likedProjects","find","item","onLike","LIKE_PROJECT","response","likeProject","onAdd","folders","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","onSearch","value","onAboutMore","onCompanyLink","company","onScreenshotClick","key","screenshots","preview","GET_PROJECTS","status","documents","offset","limit"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Title from '../atomic-ui/components/Title'\n\nimport ProjectList from '../components/ProjectList'\nimport ArticleList from '../components/ArticleList'\nimport UserList from '../components/UserList'\nimport { useHelper } from '../hooks/useHelper'\nimport { useMutate } from '../hooks/useMutate'\nimport ContentLayout from '../layouts/content'\nimport { updateUser } from '../store/actions/user'\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project'\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Атомик'\nconst START_OFFSET = 13\nconst LIMIT = 5\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  grid-gap: var(--default-gap);\n  margin-bottom: 80px;\n\n  @media only screen and (max-width: 1196px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst Aside = styled.aside`\n  display: flex;\n  flex-direction: column;\n  grid-gap: var(--default-gap);\n  width: 394px;\n\n  @media only screen and (max-width: 1196px) {\n    width: auto;\n  }\n`\n\nconst Home = () => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const [search, setSearch] = useState(null)\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  const { data: dataScaffold, loading: loadingScaffold } = useQuery(queries.GET_META_SCAFFOLD)\n\n  const scaffold = useMemo(\n    () =>\n      !loadingScaffold &&\n      dataScaffold?.getDashboardSettings && {\n        title: dataScaffold.getDashboardSettings.scaffold.title,\n        background: dataScaffold.getDashboardSettings.scaffold.background.path,\n        primary: dataScaffold.getDashboardSettings.scaffold.primary,\n        residues: dataScaffold.getDashboardSettings.scaffold.residues,\n        onLink: (project, owned) =>\n          recall(onProjectLink, {\n            id: project.id,\n            auth: user?.email,\n            project,\n            liked: !!(user?.likedProjects || []).find((item) => item.id === project.id),\n            onLike:\n              user.email &&\n              mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                dispatch(updateUser(response.data.likeProject))\n              ),\n            onAdd:\n              user.email &&\n              recall(onProjectAdd, {\n                id: project.id,\n                project,\n                folders: user?.folders,\n                mutations: {\n                  addProject: queries.ADD_USER_PROJECT,\n                  createFolder: queries.ADD_USER_FOLDER\n                }\n              }),\n            owned\n          })(),\n        onLike:\n          user.email &&\n          ((project) =>\n            mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n              dispatch(updateUser(response.data.likeProject))\n            )()),\n        onAdd:\n          user.email &&\n          ((project) =>\n            recall(onProjectAdd, {\n              id: project.id,\n              project,\n              folders: user?.folders,\n              mutations: {\n                addProject: queries.ADD_USER_PROJECT,\n                createFolder: queries.ADD_USER_FOLDER\n              }\n            })()),\n        onSearch: (value) => setSearch(value),\n        onAboutMore: (project) => recall(onUserAboutMore, { user: project }),\n        onCompanyLink: (project) =>\n          recall(onUserLink, { id: project.company?.email, auth: user })(),\n        onScreenshotClick: (project, key) =>\n          recall(onProjectScreenshot, {\n            screenshots: [project.preview, ...project.screenshots],\n            key\n          })()\n      },\n    [dataScaffold, loadingScaffold]\n  )\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      limit={LIMIT}\n      research={search}\n      scaffold={scaffold}\n      startOffset={START_OFFSET}\n      query={queries.GET_PROJECTS}\n      variables={{ status: 'PUBLISHED' }}\n      initialize>\n      {({ documents }) => (\n        <Container>\n          <ProjectList initialList={documents} layout />\n\n          <Aside>\n            <Title tag={'h4'}>Авторы</Title>\n            <UserList variables={{ offset: 0, limit: 3 }} />\n\n            <Title tag={'h4'}>Новости</Title>\n            <ArticleList variables={{ offset: 0, limit: 2 }} />\n          </Aside>\n        </Container>\n      )}\n    </ContentLayout>\n  )\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Alert from '../atomic-ui/components/Alert';\nimport Title from '../atomic-ui/components/Title';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport { useMutate } from '../hooks/useMutate';\nimport ContentLayout from '../layouts/content';\nimport ProjectCard from '../components/ProjectCard';\nimport ArticleCard from '../components/ArticleCard';\nimport UserCard from '../components/UserCard';\nimport { updateUser } from '../store/actions/user';\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../store/helpers/user';\nimport { onArticleLink } from '../store/helpers/article';\nimport { onChat } from '../store/helpers';\nimport queries from '../graphql/queries';\nimport { getLabelCategory } from '../atomic-ui/utils/functions';\nconst TITLE = 'Атомик';\nconst START_OFFSET = 13;\nconst LIMIT = 5;\nconst Container = styled.div.withConfig({\n  displayName: \"pages__Container\",\n  componentId: \"sc-1kp8388-0\"\n})([\"display:grid;grid-template-columns:1fr min-content;grid-gap:var(--default-gap);margin-bottom:80px;@media only screen and (max-width:1196px){grid-template-columns:1fr;}\"]);\nconst Projects = styled.aside.withConfig({\n  displayName: \"pages__Projects\",\n  componentId: \"sc-1kp8388-1\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);grid-auto-rows:max-content;@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\nconst Aside = styled.aside.withConfig({\n  displayName: \"pages__Aside\",\n  componentId: \"sc-1kp8388-2\"\n})([\"display:flex;flex-direction:column;grid-gap:var(--default-gap);width:394px;@media only screen and (max-width:1196px){width:auto;}\"]);\n\nconst Home = ({\n  store\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    articles,\n    users\n  } = store;\n  const scaffold = useCallback(() => createScaffold(store), [store]);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER'\n    }, {\n      type: 'SELECT',\n      options: store === null || store === void 0 ? void 0 : store.categories.map(category => ({\n        value: category.id,\n        label: getLabelCategory(category.name)\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    limit: LIMIT,\n    scaffold: scaffold,\n    startOffset: START_OFFSET,\n    query: queries.GET_PROJECTS,\n    variables: {\n      status: 'PUBLISHED'\n    },\n    store: {\n      documents: store === null || store === void 0 ? void 0 : store.projects\n    }\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Projects, null, documents.map(project => {\n    var _user$projects, _user$folders, _project$company;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    return /*#__PURE__*/React.createElement(ProjectCard, {\n      key: v4(),\n      project: project,\n      owned: owned,\n      added: !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item.id === project.id)))),\n      liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n        onLike: user.email && mutate(queries.LIKE_PROJECT, {\n          id: project.id\n        }, response => dispatch(updateUser(response.data.likeProject))),\n        onAdd: user.email && recall(onProjectAdd, {\n          id: project.id,\n          project,\n          folders: user === null || user === void 0 ? void 0 : user.folders,\n          mutations: {\n            addProject: queries.ADD_USER_PROJECT,\n            createFolder: queries.ADD_USER_FOLDER\n          }\n        }),\n        owned\n      }),\n      onLike: user.email && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onAdd: user.email && recall(onProjectAdd, {\n        id: project.id,\n        project,\n        folders: user === null || user === void 0 ? void 0 : user.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    });\n  })), /*#__PURE__*/React.createElement(Aside, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u044B\"), users.length > 0 ? users.slice(0, 3).map(author => {\n    var _author$company;\n\n    const owned = author.name === (user === null || user === void 0 ? void 0 : user.name);\n    return /*#__PURE__*/React.createElement(UserCard, {\n      key: v4(),\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        email: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: author\n      }),\n      onMembers: recall(onUserMembers, {\n        id: author === null || author === void 0 ? void 0 : author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })\n    });\n  }) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432 \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0438\"), articles.length > 0 ? articles.slice(0, 2).map(article => {\n    var _user$articles;\n\n    return /*#__PURE__*/React.createElement(ArticleCard, {\n      key: v4(),\n      layout: 'column',\n      article: article,\n      owned: user === null || user === void 0 ? void 0 : (_user$articles = user.articles) === null || _user$articles === void 0 ? void 0 : _user$articles.find(candidate => candidate.id === article.id),\n      onLink: recall(onArticleLink, {\n        id: article.id,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      })\n    });\n  }) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0435\\u0439 \\u043D\\u0435\\u0442\"))));\n};\n\nexport const getServerSideProps = async () => {\n  const client = initializeApollo();\n  let articles = [];\n  let projects = [];\n  let users = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_INDEX,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET,\n        status: 'PUBLISHED'\n      }\n    });\n\n    if (response && response.data) {\n      articles = response.data.getArticles;\n      projects = response.data.getProjects;\n      users = response.data.getUsers;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        articles,\n        projects,\n        users\n      }\n    }\n  };\n};\nexport default Home;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/index.js"],"names":["React","useMemo","styled","useSelector","useDispatch","v4","Alert","Title","initializeApollo","useHelper","useMutate","ContentLayout","ProjectCard","ArticleCard","UserCard","updateUser","onProjectLink","onProjectAdd","onProjectScreenshot","onUserAboutMore","onUserLink","onUserMembers","onArticleLink","onChat","queries","getLabelCategory","TITLE","START_OFFSET","LIMIT","Container","div","Projects","aside","Aside","Home","store","recall","mutate","user","state","dispatch","articles","users","scaffold","useCallback","createScaffold","type","options","categories","map","category","value","id","label","name","GET_PROJECTS","status","documents","projects","project","owned","find","candidate","folders","folder","item","likedProjects","auth","email","liked","onLike","LIKE_PROJECT","response","data","likeProject","onAdd","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","company","recipient","author","query","GET_USER_CHATS","mutation","SEND_MESSAGE","_","key","screenshots","preview","length","slice","userChats","chat","GET_CHAT","addUserChat","ADD_USER_CHAT","sendMessage","width","textAlign","article","getServerSideProps","client","GET_META_INDEX","variables","offset","limit","getArticles","getProjects","getUsers","err","console","log","props"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { v4 } from 'uuid'\n\nimport Alert from '../atomic-ui/components/Alert'\nimport Title from '../atomic-ui/components/Title'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport { useMutate } from '../hooks/useMutate'\nimport ContentLayout from '../layouts/content'\nimport ProjectCard from '../components/ProjectCard'\nimport ArticleCard from '../components/ArticleCard'\nimport UserCard from '../components/UserCard'\nimport { updateUser } from '../store/actions/user'\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project'\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../store/helpers/user'\nimport { onArticleLink } from '../store/helpers/article'\nimport { onChat } from '../store/helpers'\nimport queries from '../graphql/queries'\nimport { getLabelCategory } from '../atomic-ui/utils/functions'\n\nconst TITLE = 'Атомик'\nconst START_OFFSET = 13\nconst LIMIT = 5\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  grid-gap: var(--default-gap);\n  margin-bottom: 80px;\n\n  @media only screen and (max-width: 1196px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst Projects = styled.aside`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n  grid-auto-rows: max-content;\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nconst Aside = styled.aside`\n  display: flex;\n  flex-direction: column;\n  grid-gap: var(--default-gap);\n  width: 394px;\n\n  @media only screen and (max-width: 1196px) {\n    width: auto;\n  }\n`\n\nconst Home = ({ store }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n  const { articles, users } = store\n\n  const scaffold = useCallback(() => createScaffold(store), [store])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      filters={[\n        { type: 'DATEPICKER' },\n        {\n          type: 'SELECT',\n          options: store?.categories.map((category) => ({\n            value: category.id,\n            label: getLabelCategory(category.name)\n          }))\n        }\n      ]}\n      options={[\n        { label: 'Компания', value: 'company' },\n        { label: 'Участники', value: 'members' },\n        { label: 'Дата публикации', value: 'createdAt' }\n      ]}\n      limit={LIMIT}\n      scaffold={scaffold}\n      startOffset={START_OFFSET}\n      query={queries.GET_PROJECTS}\n      variables={{ status: 'PUBLISHED' }}\n      store={{ documents: store?.projects }}>\n      {({ documents }) => (\n        <Container>\n          <Projects>\n            {documents.map((project) => {\n              const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n\n              return (\n                <ProjectCard\n                  key={v4()}\n                  project={project}\n                  owned={owned}\n                  added={\n                    !!user?.folders?.find(\n                      (folder) => !!folder?.projects.find((item) => item.id === project.id)\n                    )\n                  }\n                  liked={!!(user?.likedProjects || []).find((item) => item.id === project.id)}\n                  onLink={recall(onProjectLink, {\n                    id: project.id,\n                    auth: user?.email,\n                    liked: !!(user?.likedProjects || []).find((item) => item.id === project.id),\n                    onLike:\n                      user.email &&\n                      mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                        dispatch(updateUser(response.data.likeProject))\n                      ),\n                    onAdd:\n                      user.email &&\n                      recall(onProjectAdd, {\n                        id: project.id,\n                        project,\n                        folders: user?.folders,\n                        mutations: {\n                          addProject: queries.ADD_USER_PROJECT,\n                          createFolder: queries.ADD_USER_FOLDER\n                        }\n                      }),\n                    owned\n                  })}\n                  onLike={\n                    user.email &&\n                    mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                      dispatch(updateUser(response.data.likeProject))\n                    )\n                  }\n                  onAdd={\n                    user.email &&\n                    recall(onProjectAdd, {\n                      id: project.id,\n                      project,\n                      folders: user?.folders,\n                      mutations: {\n                        addProject: queries.ADD_USER_PROJECT,\n                        createFolder: queries.ADD_USER_FOLDER\n                      }\n                    })\n                  }\n                  onAboutMore={recall(onUserAboutMore, { user: project })}\n                  onCompanyLink={recall(onUserLink, {\n                    id: project.company?.email,\n                    auth: user?.email,\n                    recipient: project.author,\n                    query: queries.GET_USER_CHATS,\n                    mutation: queries.SEND_MESSAGE\n                  })}\n                  onScreenshotClick={(_, key) =>\n                    recall(onProjectScreenshot, {\n                      screenshots: [project.preview, ...project.screenshots],\n                      key\n                    })()\n                  }\n                />\n              )\n            })}\n          </Projects>\n\n          <Aside>\n            <Title tag={'h4'}>Авторы</Title>\n            {users.length > 0 ? (\n              users.slice(0, 3).map((author) => {\n                const owned = author.name === user?.name\n\n                return (\n                  <UserCard\n                    key={v4()}\n                    user={author}\n                    owned={owned}\n                    onChat={\n                      user.email &&\n                      recall(onChat, {\n                        email: author.email,\n                        auth: user?.email,\n                        queries: {\n                          userChats: queries.GET_USER_CHATS,\n                          chat: queries.GET_CHAT\n                        },\n                        mutations: {\n                          addUserChat: queries.ADD_USER_CHAT,\n                          sendMessage: queries.SEND_MESSAGE\n                        }\n                      })\n                    }\n                    onLink={recall(onUserLink, {\n                      id: author.email,\n                      auth: user?.email,\n                      owned,\n                      queries: {\n                        userChats: queries.GET_USER_CHATS,\n                        chat: queries.GET_CHAT\n                      },\n                      mutations: {\n                        addUserChat: queries.ADD_USER_CHAT,\n                        sendMessage: queries.SEND_MESSAGE\n                      }\n                    })}\n                    onAboutMore={recall(onUserAboutMore, { user: author })}\n                    onMembers={recall(onUserMembers, { id: author?.email, auth: user?.email })}\n                    onCompanyLink={recall(onUserLink, {\n                      id: author.company?.email,\n                      auth: user?.email,\n                      queries: {\n                        userChats: queries.GET_USER_CHATS,\n                        chat: queries.GET_CHAT\n                      },\n                      mutations: {\n                        addUserChat: queries.ADD_USER_CHAT,\n                        sendMessage: queries.SEND_MESSAGE\n                      }\n                    })}\n                  />\n                )\n              })\n            ) : (\n              <Alert style={{ width: '100%', textAlign: 'center' }}>Авторов нет</Alert>\n            )}\n\n            <Title tag={'h4'}>Новости</Title>\n            {articles.length > 0 ? (\n              articles\n                .slice(0, 2)\n                .map((article) => (\n                  <ArticleCard\n                    key={v4()}\n                    layout={'column'}\n                    article={article}\n                    owned={user?.articles?.find((candidate) => candidate.id === article.id)}\n                    onLink={recall(onArticleLink, { id: article.id, auth: user?.email })}\n                  />\n                ))\n            ) : (\n              <Alert style={{ width: '100%', textAlign: 'center' }}>Новостей нет</Alert>\n            )}\n          </Aside>\n        </Container>\n      )}\n    </ContentLayout>\n  )\n}\n\nexport const getServerSideProps = async () => {\n  const client = initializeApollo()\n\n  let articles = []\n  let projects = []\n  let users = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_INDEX,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET,\n        status: 'PUBLISHED'\n      }\n    })\n\n    if (response && response.data) {\n      articles = response.data.getArticles\n      projects = response.data.getProjects\n      users = response.data.getUsers\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        articles,\n        projects,\n        users\n      }\n    }\n  }\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}
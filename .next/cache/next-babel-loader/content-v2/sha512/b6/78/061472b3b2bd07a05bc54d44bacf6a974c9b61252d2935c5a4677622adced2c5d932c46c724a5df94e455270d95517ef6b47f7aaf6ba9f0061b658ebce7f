{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Button from '../Button';\nimport Tooltip from '../Tooltip';\nimport Divider from '../Divider';\nimport { Label } from '../Difinition';\nimport Input from '../Input';\nimport Alert from '../Alert';\nimport Text from '../Text';\nimport Icon from '../Icon';\nimport Title from '../Title';\nconst MAX_LIMIT_VALUE = 256;\nconst MIN_LIMIT_VALUE = 0;\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"CharacteristicEditor__Wrap\",\n  componentId: \"sc-1b0mq4d-0\"\n})([\"grid-gap:0;\"]);\nexport const Container = styled(Column).withConfig({\n  displayName: \"CharacteristicEditor__Container\",\n  componentId: \"sc-1b0mq4d-1\"\n})([\"display:flex;flex-direction:column;width:100%;max-width:100%;flex-grow:1;grid-gap:5px;margin-bottom:var(--default-gap);\"]);\nexport const List = styled(Column).withConfig({\n  displayName: \"CharacteristicEditor__List\",\n  componentId: \"sc-1b0mq4d-2\"\n})([\"grid-gap:5px 0;\", \"\"], ({\n  readOnly\n}) => readOnly && css([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(420px,1fr));padding:2px;grid-gap:15px;\"]));\nexport const InputLabel = styled(Text).withConfig({\n  displayName: \"CharacteristicEditor__InputLabel\",\n  componentId: \"sc-1b0mq4d-3\"\n})([\"font-size:var(--font-size-s);\"]);\nexport const Item = styled(Row).withConfig({\n  displayName: \"CharacteristicEditor__Item\",\n  componentId: \"sc-1b0mq4d-4\"\n})([\"justify-content:space-between;align-items:center;flex-grow:1;grid-gap:5px;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"CharacteristicEditor__Header\",\n  componentId: \"sc-1b0mq4d-5\"\n})([\"flex-grow:1;grid-gap:10px;label:first-child{flex-grow:1;}label:last-child{flex-grow:4;}\", \"\"], ({\n  readOnly\n}) => readOnly && css([\"flex-direction:column;\"]));\nexport const Actions = styled(Row).withConfig({\n  displayName: \"CharacteristicEditor__Actions\",\n  componentId: \"sc-1b0mq4d-6\"\n})([\"align-items:center;grid-gap:5px;button{width:100%;flex-grow:1;& > i{height:100%;width:100%;& > svg{transform:scale(0.35);}}}\"]);\nexport const AddButton = styled(Button).withConfig({\n  displayName: \"CharacteristicEditor__AddButton\",\n  componentId: \"sc-1b0mq4d-7\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}@media only screen and (max-width:996px){width:100%;}\"]);\nexport const Trunks = styled.div.withConfig({\n  displayName: \"CharacteristicEditor__Trunks\",\n  componentId: \"sc-1b0mq4d-8\"\n})([\"display:flex;align-items:center;flex-wrap:wrap;grid-gap:5px;span{background:var(--default-color-accent);border-radius:var(--surface-border-radius);width:4px;min-height:16px;\", \"}\"], ({\n  value\n}) => value < 9 && css([\"width:12px;border-radius:4px;\"]));\nexport const Value = styled(Title).withConfig({\n  displayName: \"CharacteristicEditor__Value\",\n  componentId: \"sc-1b0mq4d-9\"\n})([\"font-weight:var(--font-weight-bold);line-height:1;@media only screen and (max-width:480px){font-size:var(--font-size-l);}\"]);\n\nconst getValue = val => {\n  const number = Number(val);\n  if (number > MAX_LIMIT_VALUE) return MAX_LIMIT_VALUE;\n  if (number < MIN_LIMIT_VALUE) return MIN_LIMIT_VALUE;\n  return val;\n};\n\nexport const ListItem = ({\n  item,\n  readOnly,\n  divided,\n  onEdit,\n  onDelete\n}) => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Item, {\n    readOnly: readOnly\n  }, /*#__PURE__*/React.createElement(Header, {\n    readOnly: readOnly\n  }, readOnly && item.isVisualize && !isNaN(item.value) ? /*#__PURE__*/React.createElement(Trunks, {\n    value: item.value\n  }, new Array(Number(item.value)).fill(null).map((_, i) => /*#__PURE__*/React.createElement(\"span\", {\n    key: i\n  }))) : null, readOnly && !item.isVisualize ? /*#__PURE__*/React.createElement(Label, null, item.name) : null, readOnly ? /*#__PURE__*/React.createElement(Value, {\n    tag: 'h4'\n  }, item.isVisualize ? `${item.value} ${item.name}` : item.value) : null, !readOnly && /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    defaultValue: item.value,\n    appearance: 'ghost',\n    placeholder: 'Значение',\n    onChange: e => onEdit && onEdit({ ...item,\n      value: getValue(e.target.value),\n      isVisualize: !isNaN(item.value)\n    })\n  }), !readOnly && /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    defaultValue: item.name,\n    appearance: 'ghost',\n    placeholder: 'Введите название',\n    onChange: e => onEdit && onEdit({ ...item,\n      name: e.target.value\n    })\n  })), !readOnly && /*#__PURE__*/React.createElement(Actions, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Визуализировать (только цифры)'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 'xs',\n    kind: 'icon',\n    type: 'button',\n    revert: !item.isVisualize,\n    onClick: () => onEdit && onEdit({ ...item,\n      value: !isNaN(item.value) ? item.value : MIN_LIMIT_VALUE,\n      isVisualize: !item.isVisualize\n    })\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: 'xs',\n    icon: 'graph',\n    stroke: item.isVisualize ? 'white' : 'var(--default-color-accent)',\n    fill: 'var(--default-color-accent)'\n  }))), onDelete && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 'xs',\n    kind: 'icon',\n    type: 'button',\n    appearance: 'ghost',\n    stroke: 'none',\n    onClick: () => onDelete(item)\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    stroke: 'none',\n    fill: 'var(--default-color-red)',\n    size: 'xs'\n  }))))), !readOnly && divided && /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }));\n};\nexport const InteractiveList = ({\n  list,\n  readOnly,\n  onChange\n}) => {\n  const onEdit = edited => {\n    const mapped = prev => prev.map(item => (item === null || item === void 0 ? void 0 : item.id) === (edited === null || edited === void 0 ? void 0 : edited.id) ? edited : item);\n\n    if (onChange) onChange(mapped);\n  };\n\n  const onDelete = deleted => {\n    const filtered = prev => prev.filter(item => (item === null || item === void 0 ? void 0 : item.id) !== (deleted === null || deleted === void 0 ? void 0 : deleted.id));\n\n    if (onChange) onChange(filtered);\n  };\n\n  return /*#__PURE__*/React.createElement(List, {\n    readOnly: readOnly\n  }, (list || []).length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center',\n      flexGrow: 1\n    }\n  }, \"\\u041F\\u0443\\u0441\\u0442\\u043E\"), (list || []).map((item, index) => /*#__PURE__*/React.createElement(ListItem, {\n    key: item === null || item === void 0 ? void 0 : item.id,\n    item: item,\n    readOnly: readOnly,\n    divided: (list || []).length - 1 !== index,\n    onDelete: onDelete,\n    onEdit: onEdit\n  })));\n};\nexport const CharacteristicEditor = ({\n  label,\n  readOnly,\n  defaultValue,\n  withoutAddButton,\n  onChange\n}) => {\n  const [characteristics, setCharacteristics] = useState(defaultValue || []);\n\n  const onAdd = () => {\n    const name = 'Новое учебное помещение';\n    const item = {\n      id: v4(),\n      name,\n      value: null,\n      isVisualize: null\n    };\n    setCharacteristics(prev => [...prev, item]);\n  };\n\n  useEffect(() => {\n    if (onChange) onChange(characteristics);\n  }, [characteristics, onChange]);\n  useEffect(() => {\n    setCharacteristics(defaultValue);\n  }, [defaultValue]);\n\n  if (readOnly && characteristics.length === 0) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(Container, null, label && /*#__PURE__*/React.createElement(InputLabel, null, label), /*#__PURE__*/React.createElement(InteractiveList, {\n    list: characteristics,\n    onChange: setCharacteristics,\n    readOnly: readOnly\n  }), !withoutAddButton && !readOnly && /*#__PURE__*/React.createElement(AddButton, {\n    type: 'button',\n    onClick: onAdd\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"), /*#__PURE__*/React.createElement(Icon, {\n    type: 'button',\n    icon: 'add',\n    stroke: 'white'\n  }))));\n};\nexport default CharacteristicEditor;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport Row from '../../atomic-ui/components/Row';\nimport Switch from '../../atomic-ui/components/Switch';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Transition from '../../atomic-ui/components/Transition';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport { useSearch } from '../../hooks/useSearch';\nimport AsyncSelect from '../AsyncSelect';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"FilterBar__Wrap\",\n  componentId: \"sc-1lvfs1u-0\"\n})([\"width:100%;&.fade-enter{opacity:0;}&.fade-enter-active{opacity:1;transition:opacity 100ms,blur 100ms;}&.fade-exit{opacity:1;}&.fade-exit-active{opacity:0;transition:opacity 100ms,blur 100ms;}\"]);\nexport const Form = styled.form.withConfig({\n  displayName: \"FilterBar__Form\",\n  componentId: \"sc-1lvfs1u-1\"\n})([\"display:flex;flex-direction:column;grid-gap:var(--default-gap);width:100%;\"]);\nexport const List = styled(Row).withConfig({\n  displayName: \"FilterBar__List\",\n  componentId: \"sc-1lvfs1u-2\"\n})([\"display:flex;flex-wrap:wrap;grid-gap:var(--default-gap);& > div{min-width:256px;flex-grow:1;}\"]);\nexport const parseToParams = params => {\n  const getValue = value => {\n    if (value instanceof Date) {\n      return value.getTime().toString();\n    }\n\n    if (Array.isArray(value)) {\n      return value.map(selectValue => selectValue.value);\n    }\n\n    return (value === null || value === void 0 ? void 0 : value.value) || value;\n  };\n\n  return Object.entries(params).filter(([_, value]) => value).reduce((acc, [key, value]) => ({ ...acc,\n    [key]: getValue(value)\n  }), {});\n};\nexport const Filter = ({\n  isOpen = true,\n  duration,\n  sort,\n  filter,\n  withoutDivider\n}) => {\n  const {\n    search,\n    params\n  } = useSelector(state => ({\n    search: state.root.search,\n    params: state.root.params\n  }));\n  const {\n    control,\n    getValues\n  } = useForm();\n  const [onSearch] = useSearch();\n  const decorate = useCallback(callback => value => {\n    if (callback) callback(value);\n    onSearch(search, parseToParams(getValues()));\n  }, [search, getValues, onSearch]);\n  const filters = useMemo(() => (filter || []).map(item => {\n    switch (item.type) {\n      case 'DATEPICKER':\n        return /*#__PURE__*/React.createElement(Controller, {\n          key: item.name,\n          control: control,\n          name: item.name,\n          defaultValue: getValues(item.name) || params && params[(item === null || item === void 0 ? void 0 : item.name) || ''] || null,\n          render: ({\n            value,\n            onChange\n          }) => /*#__PURE__*/React.createElement(DatePicker, {\n            defaultValue: value,\n            placeholder: item.label,\n            onChange: decorate(onChange),\n            withNavigate: true\n          })\n        });\n\n      case 'SELECT':\n        return /*#__PURE__*/React.createElement(Controller, {\n          key: item.name,\n          control: control,\n          name: item.name,\n          defaultValue: getValues(item.name) || null,\n          render: ({\n            value,\n            onChange\n          }) => /*#__PURE__*/React.createElement(AsyncSelect, {\n            name: item.name,\n            query: item.query,\n            defaultValue: value,\n            type: item.queryType,\n            placeholder: item.label,\n            variables: item.variables,\n            selectValueField: item.selectValueField,\n            selectLabelField: item.selectLabelField,\n            selectRestrictions: item.selectRestrictions,\n            selectLabelDecorator: item.selectLabelDecorator,\n            onChange: decorate(onChange)\n          })\n        });\n\n      case 'MULTISELECT':\n        return /*#__PURE__*/React.createElement(Controller, {\n          key: item.name,\n          control: control,\n          name: item.name,\n          defaultValue: getValues(item.name) || null,\n          render: ({\n            value,\n            onChange\n          }) => /*#__PURE__*/React.createElement(AsyncSelect, {\n            name: item.name,\n            query: item.query,\n            defaultValue: value,\n            type: item.queryType,\n            placeholder: item.label,\n            variables: item.variables,\n            selectValueField: item.selectValueField,\n            selectLabelField: item.selectLabelField,\n            selectRestrictions: item.selectRestrictions,\n            selectLabelDecorator: item.selectLabelDecorator,\n            onChange: decorate(onChange),\n            isMulti: true\n          })\n        });\n\n      default:\n        return null;\n    }\n  }), [params, control, filter, decorate, getValues]);\n  const options = useMemo(() => sort || [], [sort]);\n  return /*#__PURE__*/React.createElement(Transition, {\n    in: isOpen,\n    animation: 'fade',\n    timeout: duration\n  }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(Form, null, !withoutDivider && /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), filters && filters.length > 0 && /*#__PURE__*/React.createElement(List, null, filters.map(filter => filter)), options && options.length > 0 && /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Controller, {\n    name: 'sort',\n    control: control,\n    defaultValue: getValues('sort') || (params === null || params === void 0 ? void 0 : params.sort) && options.find(option => (option === null || option === void 0 ? void 0 : option.value) === params.sort) || options[0] || null,\n    render: ({\n      value,\n      onChange\n    }) => /*#__PURE__*/React.createElement(Switch, {\n      defaultValue: value,\n      onChange: decorate(onChange),\n      options: options,\n      stretch: true\n    })\n  })), /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }))));\n};\nFilter.defaultProps = {\n  duration: 150\n};\nexport default Filter;","map":null,"metadata":{},"sourceType":"module"}
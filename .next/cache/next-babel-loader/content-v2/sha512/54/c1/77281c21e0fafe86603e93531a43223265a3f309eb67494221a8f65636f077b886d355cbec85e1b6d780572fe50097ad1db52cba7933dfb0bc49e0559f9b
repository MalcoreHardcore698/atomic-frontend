{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Column from '../atomic-ui/components/Column';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Select from '../atomic-ui/components/Select';\nimport { useHelper } from '../hooks/useHelper';\nimport DefaultLayout from '../layouts/default';\nimport UserCard from '../components/UserCard';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport { onUserLink } from '../store/helpers/user';\nimport { onChat } from '../store/helpers';\nimport queries from '../graphql/queries';\nimport { categories, filters } from '../__mock__';\nconst TITLE = 'Авторы';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"creators__Wrap\",\n  componentId: \"sc-1n5fua5-0\"\n})([\"margin-top:120px;margin-bottom:80px;@media only screen and (max-width:480px){margin-top:0;}\"]);\n_c = Wrap;\nconst Container = styled.aside.withConfig({\n  displayName: \"creators__Container\",\n  componentId: \"sc-1n5fua5-1\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\n_c2 = Container;\nconst Loading = styled.div.withConfig({\n  displayName: \"creators__Loading\",\n  componentId: \"sc-1n5fua5-2\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;flex-grow:1;\"]);\n_c3 = Loading;\nconst chatQueries = {\n  userChats: queries.GET_USER_CHATS,\n  chat: queries.GET_CHAT\n};\nconst chatMutations = {\n  addUserChat: queries.ADD_USER_CHAT,\n  sendMessage: queries.SEND_MESSAGE\n};\n\nconst Creators = ({\n  store\n}) => {\n  _s();\n\n  var _dataLoadUsers$getUse;\n\n  const recall = useHelper();\n  const [loadUsersBySearch, {\n    data: dataLoadUsers,\n    loading: loadingLoadUsers,\n    error: errorLoadUsers\n  }] = useLazyQuery(queries.GET_USERS);\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [search, setSearch] = useState(null);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const users = useMemo(() => documents || store.users, [documents, store]);\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter),\n    onSubmit: search => {\n      setSearch(search);\n      loadUsersBySearch({\n        variables: {\n          search\n        }\n      });\n    }\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: filters\n  }), /*#__PURE__*/React.createElement(Container, null, !loadingLoadUsers && dataLoadUsers && dataLoadUsers.getUsers || (!search && !loadingLoadUsers && (users === null || users === void 0 ? void 0 : users.length)) > 0 ? ((dataLoadUsers === null || dataLoadUsers === void 0 ? void 0 : dataLoadUsers.getUsers) || users).map(author => {\n    var _author$company;\n\n    const owned = author.name === user.name;\n    return /*#__PURE__*/React.createElement(UserCard, {\n      key: v4(),\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        sender: user,\n        recipient: author,\n        queries: chatQueries,\n        mutations: chatMutations\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: chatQueries,\n        mutations: chatMutations\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: chatQueries,\n        mutations: chatMutations\n      })\n    });\n  }) : search && dataLoadUsers && ((_dataLoadUsers$getUse = dataLoadUsers.getUsers) === null || _dataLoadUsers$getUse === void 0 ? void 0 : _dataLoadUsers$getUse.length) === 0 ? /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u043E \\u0432\\u0430\\u0448\\u0435\\u043C\\u0443 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u0443 \\u043D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\") : search && errorLoadUsers ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0430\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432\") : search && loadingLoadUsers && !dataLoadUsers ? /*#__PURE__*/React.createElement(Loading, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432 \\u043D\\u0435\\u0442\"))));\n};\n\n_s(Creators, \"KlG/VQ7TEqi/bXOZV7astIxSTe0=\", false, function () {\n  return [useHelper, useLazyQuery, useSelector];\n});\n\n_c4 = Creators;\nexport var __N_SSP = true;\nexport default Creators;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Loading\");\n$RefreshReg$(_c4, \"Creators\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/creators.js"],"names":["React","useState","useMemo","styled","useLazyQuery","useSelector","v4","Column","Alert","DatePicker","Spinner","Select","useHelper","DefaultLayout","UserCard","FilterBar","SearchBar","onUserLink","onChat","queries","categories","filters","TITLE","Wrap","Container","aside","Loading","div","chatQueries","userChats","GET_USER_CHATS","chat","GET_CHAT","chatMutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","Creators","store","recall","loadUsersBySearch","data","dataLoadUsers","loading","loadingLoadUsers","error","errorLoadUsers","GET_USERS","user","documents","state","date","onChangeDate","select","onChangeSelect","search","setSearch","visibleFilter","setVisibleFilter","users","variables","item","getUsers","length","map","author","owned","name","email","sender","recipient","mutations","id","auth","company","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useLazyQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\nimport { v4 } from 'uuid'\n\nimport Column from '../atomic-ui/components/Column'\nimport Alert from '../atomic-ui/components/Alert'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Spinner from '../atomic-ui/components/Spinner'\nimport Select from '../atomic-ui/components/Select'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport DefaultLayout from '../layouts/default'\nimport UserCard from '../components/UserCard'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport { onUserLink } from '../store/helpers/user'\nimport { onChat } from '../store/helpers'\nimport queries from '../graphql/queries'\nimport { categories, filters } from '../__mock__'\n\nconst TITLE = 'Авторы'\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst Container = styled.aside`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nconst Loading = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  flex-grow: 1;\n`\n\nconst chatQueries = {\n  userChats: queries.GET_USER_CHATS,\n  chat: queries.GET_CHAT\n}\n\nconst chatMutations = {\n  addUserChat: queries.ADD_USER_CHAT,\n  sendMessage: queries.SEND_MESSAGE\n}\n\nconst Creators = ({ store }) => {\n  const recall = useHelper()\n  const [\n    loadUsersBySearch,\n    { data: dataLoadUsers, loading: loadingLoadUsers, error: errorLoadUsers }\n  ] = useLazyQuery(queries.GET_USERS)\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    documents: state.documents\n  }))\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [search, setSearch] = useState(null)\n  const [visibleFilter, setVisibleFilter] = useState(false)\n\n  const users = useMemo(() => documents || store.users, [documents, store])\n\n  return (\n    <DefaultLayout title={TITLE}>\n      <Wrap>\n        <SearchBar\n          onChangeFilter={() => setVisibleFilter(!visibleFilter)}\n          onSubmit={(search) => {\n            setSearch(search)\n            loadUsersBySearch({ variables: { search } })\n          }}\n        />\n\n        <FilterBar\n          isOpen={visibleFilter}\n          filters={[\n            <DatePicker\n              key={0}\n              value={date}\n              placeholder={'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />,\n            <Select\n              key={1}\n              options={categories}\n              placeholder={'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          ]}\n          options={filters}\n        />\n\n        <Container>\n          {(!loadingLoadUsers && dataLoadUsers && dataLoadUsers.getUsers) ||\n          (!search && !loadingLoadUsers && users?.length) > 0 ? (\n            (dataLoadUsers?.getUsers || users).map((author) => {\n              const owned = author.name === user.name\n\n              return (\n                <UserCard\n                  key={v4()}\n                  user={author}\n                  owned={owned}\n                  onChat={\n                    user.email &&\n                    recall(onChat, {\n                      sender: user,\n                      recipient: author,\n                      queries: chatQueries,\n                      mutations: chatMutations\n                    })\n                  }\n                  onLink={recall(onUserLink, {\n                    id: author.email,\n                    auth: user?.email,\n                    owned,\n                    queries: chatQueries,\n                    mutations: chatMutations\n                  })}\n                  onCompanyLink={recall(onUserLink, {\n                    id: author.company?.email,\n                    auth: user?.email,\n                    queries: chatQueries,\n                    mutations: chatMutations\n                  })}\n                />\n              )\n            })\n          ) : search && dataLoadUsers && dataLoadUsers.getUsers?.length === 0 ? (\n            <Alert style={{ width: '100%', textAlign: 'center' }}>\n              По вашему запросу ничего не найдено\n            </Alert>\n          ) : search && errorLoadUsers ? (\n            <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n              Не удалось загрузить авторов\n            </Alert>\n          ) : search && loadingLoadUsers && !dataLoadUsers ? (\n            <Loading>\n              <Spinner />\n            </Loading>\n          ) : (\n            <Alert style={{ width: '100%', textAlign: 'center' }}>Авторов нет</Alert>\n          )}\n        </Container>\n      </Wrap>\n    </DefaultLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let users = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS\n    })\n\n    if (response && response.data) {\n      users = response.data.getUsers\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { users }\n    }\n  }\n}\n\nexport default Creators\n"]},"metadata":{},"sourceType":"module"}
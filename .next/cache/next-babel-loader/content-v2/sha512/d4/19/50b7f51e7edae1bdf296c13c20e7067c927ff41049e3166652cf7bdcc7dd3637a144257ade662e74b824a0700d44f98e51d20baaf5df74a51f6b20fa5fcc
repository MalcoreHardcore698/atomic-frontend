{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { useHelper } from '../../hooks/useHelper';\nimport ContentLayout from '../../layouts/content';\nimport UserCard from '../../components/UserCard';\nimport { onUserCreate, onUserEdit, onUserDelete, onUserLink, onUserAboutMore } from '../../store/helpers/user';\nimport { setDocuments } from '../../store/actions/documents';\nimport { onChat } from '../../store/helpers';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Пользователи';\nconst START_OFFSET = 12;\nconst LIMIT = 12;\n\nconst Users = ({\n  store\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  const roles = useMemo(() => store.roles, [store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER',\n      placeholder: 'Дата регистарции'\n    }, {\n      type: 'SELECT',\n      placeholder: 'Компания',\n      options: store === null || store === void 0 ? void 0 : store.companies.map(company => ({\n        value: company.email,\n        label: company.name\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата регистарции',\n      value: 'createdAt'\n    }],\n    handle: {\n      icon: 'user2',\n      buttonCreateText: 'Создать пользователя',\n      onCreate: recall(onUserCreate, {\n        companies: store.companies,\n        categories: store.categories,\n        statuses: store.statuses,\n        canEditRole,\n        mutation: queries.CREATE_USER,\n        query: queries.GET_USERS\n      }),\n      onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n    },\n    limit: LIMIT,\n    startOffset: START_OFFSET,\n    bottomScrollOffset: 0,\n    query: queries.GET_USERS,\n    store: {\n      documents: documents || store.users\n    },\n    dashboard: true\n  }, ({\n    documents\n  }) => displayMethod === 'list' ? /*#__PURE__*/React.createElement(Table, {\n    data: documents,\n    template: templates.user,\n    onChecked: () => {},\n    onClick: author => {\n      const owned = author.name === user.name;\n      return recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })();\n    },\n    onDelete: author => recall(onUserDelete, {\n      id: author.email,\n      user: author,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      mutation: queries.DELETE_USER\n    })(),\n    onEdit: author => recall(onUserEdit, {\n      user: author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      roles,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      }\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }) : /*#__PURE__*/React.createElement(Grid, null, documents.map(author => {\n    const owned = author.name === user.name;\n    return /*#__PURE__*/React.createElement(UserCard, {\n      key: author.email,\n      user: author,\n      onChecked: () => {},\n      onChat: user.email && recall(onChat, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: author\n      }),\n      onDelete: recall(onUserDelete, {\n        id: author.email,\n        user: author,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        mutation: queries.DELETE_USER\n      }),\n      onEdit: recall(onUserEdit, {\n        user: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        roles,\n        canEditRole,\n        mutations: {\n          update: queries.UPDATE_USER,\n          del: queries.DELETE_USER,\n          changePassword: queries.UPDATE_USER\n        }\n      }),\n      preview: true\n    });\n  })));\n};\n\n_s(Users, \"D3wT0hiwVYQ3wN/jR3D2MxhZLgA=\", false, function () {\n  return [useHelper, useSelector, useDispatch];\n});\n\n_c = Users;\nexport var __N_SSP = true;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/users.js"],"names":["React","useState","useEffect","useMemo","useDispatch","useSelector","Grid","Table","templates","useHelper","ContentLayout","UserCard","onUserCreate","onUserEdit","onUserDelete","onUserLink","onUserAboutMore","setDocuments","onChat","queries","TITLE","START_OFFSET","LIMIT","Users","store","recall","user","documents","state","dispatch","displayMethod","onChangeDisplayMethod","canEditRole","role","name","roles","type","placeholder","options","companies","map","company","value","email","label","icon","buttonCreateText","onCreate","categories","statuses","mutation","CREATE_USER","query","GET_USERS","item","users","author","owned","id","auth","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","DELETE_USER","update","UPDATE_USER","del","changePassword","overflowX","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Grid from '../../atomic-ui/components/Grid'\nimport Table from '../../atomic-ui/components/Table'\nimport templates from '../../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport ContentLayout from '../../layouts/content'\nimport UserCard from '../../components/UserCard'\nimport {\n  onUserCreate,\n  onUserEdit,\n  onUserDelete,\n  onUserLink,\n  onUserAboutMore\n} from '../../store/helpers/user'\nimport { setDocuments } from '../../store/actions/documents'\nimport { onChat } from '../../store/helpers'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Пользователи'\nconst START_OFFSET = 12\nconst LIMIT = 12\n\nconst Users = ({ store }) => {\n  const recall = useHelper()\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    documents: state.documents\n  }))\n  const dispatch = useDispatch()\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user])\n  const roles = useMemo(() => store.roles, [store])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      filters={[\n        { type: 'DATEPICKER', placeholder: 'Дата регистарции' },\n        {\n          type: 'SELECT',\n          placeholder: 'Компания',\n          options: store?.companies.map((company) => ({\n            value: company.email,\n            label: company.name\n          }))\n        }\n      ]}\n      options={[\n        { label: 'Компания', value: 'company' },\n        { label: 'Участники', value: 'members' },\n        { label: 'Дата регистарции', value: 'createdAt' }\n      ]}\n      handle={{\n        icon: 'user2',\n        buttonCreateText: 'Создать пользователя',\n        onCreate: recall(onUserCreate, {\n          companies: store.companies,\n          categories: store.categories,\n          statuses: store.statuses,\n          canEditRole,\n          mutation: queries.CREATE_USER,\n          query: queries.GET_USERS\n        }),\n        onChangeDisplayMethod: (item) => onChangeDisplayMethod(item.value)\n      }}\n      limit={LIMIT}\n      startOffset={START_OFFSET}\n      bottomScrollOffset={0}\n      query={queries.GET_USERS}\n      store={{ documents: documents || store.users }}\n      dashboard>\n      {({ documents }) =>\n        displayMethod === 'list' ? (\n          <Table\n            data={documents}\n            template={templates.user}\n            onChecked={() => {}}\n            onClick={(author) => {\n              const owned = author.name === user.name\n\n              return recall(onUserLink, {\n                id: author.email,\n                auth: user?.email,\n                owned,\n                queries: {\n                  userChats: queries.GET_USER_CHATS,\n                  chat: queries.GET_CHAT\n                },\n                mutations: {\n                  addUserChat: queries.ADD_USER_CHAT,\n                  sendMessage: queries.SEND_MESSAGE\n                }\n              })()\n            }}\n            onDelete={(author) =>\n              recall(onUserDelete, {\n                id: author.email,\n                user: author,\n                auth: user?.email,\n                mutation: queries.DELETE_USER\n              })()\n            }\n            onEdit={(author) =>\n              recall(onUserEdit, {\n                user: author.email,\n                auth: user?.email,\n                roles,\n                canEditRole,\n                mutations: {\n                  update: queries.UPDATE_USER,\n                  del: queries.DELETE_USER,\n                  changePassword: queries.UPDATE_USER\n                }\n              })()\n            }\n            style={{ overflowX: 'auto', width: 'calc(100vw - 290px)' }}\n          />\n        ) : (\n          <Grid>\n            {documents.map((author) => {\n              const owned = author.name === user.name\n\n              return (\n                <UserCard\n                  key={author.email}\n                  user={author}\n                  onChecked={() => {}}\n                  onChat={\n                    user.email &&\n                    recall(onChat, {\n                      id: author.email,\n                      auth: user?.email,\n                      queries: {\n                        userChats: queries.GET_USER_CHATS,\n                        chat: queries.GET_CHAT\n                      },\n                      mutations: {\n                        addUserChat: queries.ADD_USER_CHAT,\n                        sendMessage: queries.SEND_MESSAGE\n                      }\n                    })\n                  }\n                  onLink={recall(onUserLink, {\n                    id: author.email,\n                    auth: user?.email,\n                    owned,\n                    queries: {\n                      userChats: queries.GET_USER_CHATS,\n                      chat: queries.GET_CHAT\n                    },\n                    mutations: {\n                      addUserChat: queries.ADD_USER_CHAT,\n                      sendMessage: queries.SEND_MESSAGE\n                    }\n                  })}\n                  onAboutMore={recall(onUserAboutMore, { user: author })}\n                  onDelete={recall(onUserDelete, {\n                    id: author.email,\n                    user: author,\n                    auth: user?.email,\n                    mutation: queries.DELETE_USER\n                  })}\n                  onEdit={recall(onUserEdit, {\n                    user: author.email,\n                    auth: user?.email,\n                    roles,\n                    canEditRole,\n                    mutations: {\n                      update: queries.UPDATE_USER,\n                      del: queries.DELETE_USER,\n                      changePassword: queries.UPDATE_USER\n                    }\n                  })}\n                  preview\n                />\n              )\n            })}\n          </Grid>\n        )\n      }\n    </ContentLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let users = []\n  let roles = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_USERS\n    })\n\n    if (response && response.data) {\n      users = response.data.getUsers\n      roles = response.data.getRoles\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        users,\n        roles\n      }\n    }\n  }\n}\n\nexport default Users\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport ProjectCard from '../../components/ProjectCard';\nimport { onProjectCreate, onProjectEdit, onProjectDelete, onProjectLink, onProjectScreenshot } from '../../store/helpers/project';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\n\nconst Projects = ({\n  store,\n  companies,\n  categories,\n  statuses\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    members: state.root.members,\n    files: state.root.files,\n    screenshots: state.root.screenshots,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  const projects = useMemo(() => documents || store.projects, [documents, store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'work',\n    title: TITLE,\n    buttonCreateText: 'Создать проект',\n    onCreate: recall(onProjectCreate, {\n      companies,\n      categories,\n      statuses,\n      canEditStatus,\n      mutation: queries.CREATE_PROJECT,\n      query: queries.GET_USERS\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: displayMethod === 'list' ? [] : templates.project.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), projects.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: projects,\n    template: templates.project,\n    onChecked: () => {},\n    onClick: project => recall(onProjectLink, {\n      id: project.id,\n      auth: user\n    })(),\n    onDelete: project => recall(onProjectDelete, {\n      id: project.id,\n      project,\n      auth: user,\n      mutation: queries.DELETE_PROJECT\n    })(),\n    onEdit: project => recall(onProjectEdit, {\n      id: project.id,\n      companies,\n      categories,\n      statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      })\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, projects.map(project => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: project.id,\n    project: project,\n    onChecked: () => {},\n    onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n      screenshots: [project.preview, ...project.screenshots],\n      key\n    })(),\n    onLink: recall(onProjectLink, {\n      id: project.id,\n      user\n    }),\n    onDelete: recall(onProjectDelete, {\n      id: project.id,\n      project,\n      auth: user,\n      mutation: queries.DELETE_PROJECT\n    }),\n    onEdit: recall(onProjectEdit, {\n      id: project.id,\n      companies,\n      categories,\n      statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      })\n    }),\n    preview: true\n  }))));\n};\n\nexport var __N_SSP = true;\nexport default Projects;","map":null,"metadata":{},"sourceType":"module"}
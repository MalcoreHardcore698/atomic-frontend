{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Column from '../../atomic-ui/components/Column';\nimport Table from '../../atomic-ui/components/Table';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { GridAside as Container, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { useRouter } from 'next/router';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"\"]);\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const List = ({\n  type,\n  query,\n  template,\n  variables,\n  component,\n  limit = 6,\n  startOffset = 6,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const router = useRouter();\n  const displayMethod = useSelector(state => state.root.displayMethod);\n  const pageStart = useMemo(() => {\n    var _router$query;\n\n    return Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1;\n  }, [router]);\n  const [offset, setOffset] = useState(startOffset + 1);\n  const [items, setItems] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(query, {\n    variables: { ...variables,\n      offset: 0,\n      limit: limit\n    }\n  });\n\n  const loadMore = async () => {\n    const updateOffset = () => setOffset(prev => prev + limit);\n\n    const result = { ...variables,\n      offset,\n      limit\n    };\n\n    if (refetch) {\n      const response = await refetch(result);\n      const list = response.data[type];\n      if (list.length === 0) setIsEnd(true);\n      updateOffset();\n    }\n  };\n\n  const renderContent = useCallback(() => {\n    if (displayMethod === 'grid') {\n      return /*#__PURE__*/React.createElement(Container, null, (items || []).map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n        key: item.id || item.email\n      }, component(item))));\n    }\n\n    return /*#__PURE__*/React.createElement(Table, {\n      data: items,\n      template: template,\n      onChecked: onChecked,\n      onClick: onClick,\n      onEdit: onEdit,\n      onDelete: onDelete\n    });\n  }, [items, displayMethod, onChecked, onClick, onEdit, onDelete]);\n\n  const renderLoader = () => /*#__PURE__*/React.createElement(LowerLoader, {\n    key: 'loader'\n  }, /*#__PURE__*/React.createElement(Spinner, null));\n\n  useEffect(() => {\n    if (!loading && data) {\n      const list = data[type];\n      if (list.length > 0) setItems(prev => [...prev, ...list]);\n      if (list.length === 0) setIsEnd(true);\n    }\n  }, [data, loading, setIsEnd]);\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) {\n      setCheckedList(items);\n    }\n  }, [items, setCheckedList]);\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: pageStart || 0,\n    loadMore: loadMore,\n    hasMore: !isEnd,\n    loader: renderLoader()\n  }, renderContent());\n};\nexport default List;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport styled from 'styled-components';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Column from '../../atomic-ui/components/Column';\nimport Button from '../../atomic-ui/components/Button';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Screenshot from '../../atomic-ui/components/Screenshot';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Icon from '../../atomic-ui/components/Icon';\nimport AddMemberForm from '../../components/FormAddMember';\nimport AddFileForm from '../../components/FormAddFile';\nimport ProjectForm from '../../components/FormProject';\nimport DeleteForm from '../../components/FormDelete';\nimport SureDeleteForm, { Content as ContentSureDelete } from '../../components/FormSureDelete';\nimport ProjectCard from '../../components/ProjectCard';\nimport ProjectView from '../../components/ProjectView';\nimport { setDocuments } from '../actions/documents';\nimport { setMutate, addProjectMember, addProjectScreenshot, addProjectFile, removeProjectMember, removeProjectScreenshot, removeProjectFile, clearProjectMembers, clearProjectScreenshots, clearProjectFiles } from '../actions/root';\nimport { setModal } from '../actions/modal';\nimport { setDrawer } from '../actions/drawer';\nimport { setItem } from '../actions/snacks';\nimport { onUserLink, onUserFolderAdd, onUserAboutMore } from './user';\nimport { onFileLink } from '.';\nconst CreateButton = styled(Button).withConfig({\n  displayName: \"project__CreateButton\",\n  componentId: \"a72d83-0\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}\"]);\nexport function onProjectLink(dispatch, props) {\n  const {\n    id,\n    auth,\n    liked,\n    onAdd,\n    onLike,\n    owned\n  } = props;\n  dispatch(setDrawer({\n    icon: 'work',\n    title: 'Проект',\n    content: /*#__PURE__*/React.createElement(ProjectView, {\n      appearance: 'clear',\n      project: id,\n      owned: owned,\n      liked: liked,\n      onLike: onLike,\n      onAdd: onAdd,\n      onFileLink: () => onFileLink(dispatch, {\n        id\n      }),\n      onAboutMore: project => onUserAboutMore(dispatch, {\n        project\n      }),\n      onMemberLink: member => onUserLink(dispatch, {\n        id: member,\n        auth,\n        owned\n      }),\n      onCompanyLink: company => onUserLink(dispatch, {\n        id: company,\n        auth,\n        owned\n      }),\n      onScreenshotClick: (_, key, screenshots) => onProjectScreenshot(dispatch, {\n        screenshots,\n        key\n      })\n    })\n  }));\n}\nexport function onProjectCreate(dispatch, props) {\n  const {\n    companies,\n    categories,\n    statuses,\n    canEditStatus,\n    mutation,\n    query,\n    onCompanyInputChange,\n    isPurpose\n  } = props;\n  dispatch(clearProjectMembers());\n  dispatch(clearProjectScreenshots());\n  dispatch(clearProjectFiles());\n  dispatch(setDrawer({\n    icon: 'work',\n    title: `${isPurpose ? 'Предложение' : 'Создание'} проекта`,\n    content: /*#__PURE__*/React.createElement(ProjectForm, {\n      mutation: mutation,\n      companies: companies,\n      categories: categories,\n      statuses: statuses,\n      appearance: 'clear',\n      canEditStatus: canEditStatus,\n      onMemberAdd: () => onMemberAdd(dispatch, {\n        query\n      }),\n      onScreenshotAdd: () => onScreenshotAdd(dispatch),\n      onFileAdd: () => onFileAdd(dispatch),\n      onMemberRemove: name => dispatch(removeProjectMember(name)),\n      onScreenshotRemove: id => onSureDelete(dispatch, {\n        id,\n        text: 'Вы действительно хотите удалить изображение?',\n        removeAction: removeProjectScreenshot\n      }),\n      onFileRemove: id => onSureDelete(dispatch, {\n        id,\n        text: 'Вы действительно хотите удалить файл?',\n        removeAction: removeProjectFile\n      }),\n      onCompanyInputChange: onCompanyInputChange,\n      onSubmit: async (form, action) => {\n        try {\n          var _form$preview, _form$company, _form$company$value, _form$preview2, _form$preview2$file, _form$category, _form$status;\n\n          const members = form.members.map(member => member.value.email);\n          const files = form.files.map(file => file.file);\n          const fileSizes = form.files.map(file => file.size);\n          const screenshots = form.screenshots.map(screenshot => screenshot.file);\n          const screenshotSizes = form.screenshots.map(screenshot => screenshot.size);\n          const projects = await action({\n            variables: {\n              input: {\n                title: form.title,\n                body: form.body,\n                characteristics: (form.characteristics || []).map(characteristic => ({\n                  name: characteristic.name,\n                  value: characteristic.value,\n                  isVisualize: characteristic.isVisualize\n                })),\n                description: form.description,\n                preview: (_form$preview = form.preview) === null || _form$preview === void 0 ? void 0 : _form$preview.file,\n                company: (_form$company = form.company) === null || _form$company === void 0 ? void 0 : (_form$company$value = _form$company.value) === null || _form$company$value === void 0 ? void 0 : _form$company$value.email,\n                previewSize: (_form$preview2 = form.preview) === null || _form$preview2 === void 0 ? void 0 : (_form$preview2$file = _form$preview2.file) === null || _form$preview2$file === void 0 ? void 0 : _form$preview2$file.size,\n                members: members.length > 0 ? members : [],\n                files: files.length > 0 ? files : [],\n                fileSizes: fileSizes.length > 0 ? fileSizes : [],\n                screenshots: screenshots.length > 0 ? screenshots : [],\n                screenshotSizes: screenshotSizes.length > 0 ? screenshotSizes : [],\n                presentation: form.presentation,\n                category: (_form$category = form.category) === null || _form$category === void 0 ? void 0 : _form$category.value,\n                status: (_form$status = form.status) === null || _form$status === void 0 ? void 0 : _form$status.value\n              }\n            }\n          });\n          dispatch(setDocuments(projects.data.createProject));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Проект успешно создан'\n          }));\n        } catch (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось создать проект'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n          dispatch(clearProjectMembers());\n          dispatch(clearProjectScreenshots());\n          dispatch(clearProjectFiles());\n        }\n      },\n      isPurpose: isPurpose\n    })\n  }));\n}\nexport function onProjectEdit(dispatch, props) {\n  const {\n    id,\n    auth,\n    companies,\n    categories,\n    statuses,\n    canEditStatus,\n    mutation,\n    query\n  } = props;\n  dispatch(setDrawer({\n    icon: 'work',\n    title: 'Редактирование проекта',\n    content: /*#__PURE__*/React.createElement(ProjectForm, {\n      project: id,\n      mutation: mutation,\n      companies: companies,\n      categories: categories,\n      statuses: statuses,\n      appearance: 'clear',\n      canEditStatus: canEditStatus,\n      onMemberAdd: () => onMemberAdd(dispatch, {\n        query\n      }),\n      onScreenshotAdd: () => onScreenshotAdd(dispatch),\n      onFileAdd: () => onFileAdd(dispatch),\n      onMemberRemove: name => dispatch(removeProjectMember(name)),\n      onScreenshotRemove: id => onSureDelete(dispatch, {\n        id,\n        text: 'Вы действительно хотите удалить изображение?',\n        removeAction: removeProjectScreenshot\n      }),\n      onFileRemove: id => onSureDelete(dispatch, {\n        id,\n        text: 'Вы действительно хотите удалить файл?',\n        removeAction: removeProjectFile\n      }),\n      onSubmit: async (form, action) => {\n        try {\n          var _form$preview3, _form$company2, _form$company2$value, _form$preview4, _form$preview4$file, _form$category2, _form$status2;\n\n          const members = form.members.map(member => {\n            var _member$value;\n\n            return member.email || ((_member$value = member.value) === null || _member$value === void 0 ? void 0 : _member$value.email);\n          });\n          const files = form.files.filter(screenshot => {\n            var _screenshot$file;\n\n            return !((_screenshot$file = screenshot.file) !== null && _screenshot$file !== void 0 && _screenshot$file.id);\n          }).map(file => {\n            var _file$file;\n\n            return (_file$file = file.file) !== null && _file$file !== void 0 && _file$file.type ? file.file : null;\n          });\n          const screenshots = form.screenshots.filter(screenshot => {\n            var _screenshot$file2;\n\n            return !((_screenshot$file2 = screenshot.file) !== null && _screenshot$file2 !== void 0 && _screenshot$file2.id);\n          }).map(screenshot => {\n            var _screenshot$file3;\n\n            return (_screenshot$file3 = screenshot.file) !== null && _screenshot$file3 !== void 0 && _screenshot$file3.type ? screenshot.file : null;\n          });\n          const fileSizes = form.files.map(file => file.size);\n          const screenshotSizes = form.screenshots.map(screenshot => screenshot.size);\n          const projects = await action({\n            variables: {\n              id,\n              input: {\n                title: form.title,\n                body: form.body,\n                characteristics: (form.characteristics || []).map(characteristic => ({\n                  name: characteristic.name,\n                  value: characteristic.value,\n                  isVisualize: characteristic.isVisualize\n                })),\n                description: form.description,\n                preview: (_form$preview3 = form.preview) === null || _form$preview3 === void 0 ? void 0 : _form$preview3.file,\n                company: (_form$company2 = form.company) === null || _form$company2 === void 0 ? void 0 : (_form$company2$value = _form$company2.value) === null || _form$company2$value === void 0 ? void 0 : _form$company2$value.email,\n                previewSize: (_form$preview4 = form.preview) === null || _form$preview4 === void 0 ? void 0 : (_form$preview4$file = _form$preview4.file) === null || _form$preview4$file === void 0 ? void 0 : _form$preview4$file.size,\n                members: members,\n                files: files,\n                fileSizes: fileSizes,\n                screenshots: screenshots,\n                screenshotSizes: screenshotSizes,\n                presentation: form.presentation,\n                category: (_form$category2 = form.category) === null || _form$category2 === void 0 ? void 0 : _form$category2.value,\n                status: (_form$status2 = form.status) === null || _form$status2 === void 0 ? void 0 : _form$status2.value\n              }\n            }\n          });\n          dispatch(setDocuments(projects.data.updateProject));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Проект успешно отредактирован'\n          }));\n        } catch (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отредактирвоать проект'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n          dispatch(clearProjectMembers());\n          dispatch(clearProjectScreenshots());\n          dispatch(clearProjectFiles());\n        }\n      },\n      onCommentLink: user => onUserLink(dispatch, {\n        email: user,\n        auth\n      })\n    })\n  }));\n}\nexport function onProjectDelete(dispatch, props) {\n  const {\n    id,\n    auth,\n    project,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление проекта',\n    content: /*#__PURE__*/React.createElement(DeleteForm, {\n      mutation: mutation,\n      appearance: 'clear',\n      onCancel: () => dispatch(setDrawer(null)),\n      onSubmit: async (_, action) => {\n        try {\n          const projects = await action({\n            variables: {\n              id\n            }\n          });\n          dispatch(setDocuments(projects.data.deleteProject));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Проект успешно удален'\n          }));\n        } catch (_unused) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось удалить проект'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n        }\n      }\n    }, /*#__PURE__*/React.createElement(ProjectCard, {\n      project: project,\n      appearance: 'clear',\n      onLink: () => onProjectLink(dispatch, {\n        id: project.id\n      }),\n      onAdd: () => onProjectAdd(dispatch, {\n        id: project.id\n      }),\n      onCompanyLink: company => onUserLink(dispatch, {\n        id: company,\n        auth\n      }),\n      onScreenshotClick: (_, key) => onProjectScreenshot(dispatch, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })\n    }))\n  }));\n}\nexport function onProjectAdd(dispatch, props) {\n  const {\n    id,\n    folders,\n    mutations,\n    callback\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'В какую папку добавить проект?',\n    component: () => /*#__PURE__*/React.createElement(Column, {\n      style: {\n        padding: '15px'\n      }\n    }, folders && folders.length > 0 ? /*#__PURE__*/React.createElement(Grid, {\n      length: 'auto-fit',\n      percentage: 'minmax(225px, 1fr)'\n    }, folders.map(folder => {\n      const length = folder.projects.length;\n      const label = length === 1 ? 'проект' : length > 1 && length < 5 ? 'проекта' : 'проектов';\n      const disabled = folder.projects.find(item => item === id);\n      return /*#__PURE__*/React.createElement(Difinition, {\n        key: folder.id,\n        icon: 'paper',\n        text: folder.name,\n        label: `${length} ${label}${disabled ? ' (уже есть)' : ''}`,\n        disabled: disabled,\n        onLink: () => {\n          dispatch(setMutate(mutations.addProject, {\n            project: id,\n            folder: folder.id\n          }));\n          dispatch(setModal(null));\n          if (callback) callback(folder);\n        },\n        revert: true\n      });\n    })) : /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        textAlign: 'center'\n      },\n      width: '100%'\n    }, \"\\u041F\\u0430\\u043F\\u043E\\u043A \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(CreateButton, {\n      onClick: () => onUserFolderAdd(dispatch, {\n        mutation: mutations.createFolder,\n        onCancel: () => onProjectAdd(dispatch, props),\n        callback: items => onProjectAdd(dispatch, { ...props,\n          folders: items || folders\n        })\n      })\n    }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430\"), /*#__PURE__*/React.createElement(Icon, {\n      icon: 'add',\n      stroke: 'white'\n    })))\n  }]));\n}\nexport function onProjectRemove(dispatch, props) {\n  const {\n    id,\n    folder,\n    mutation,\n    callback\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'Удаление проекта из папки',\n    component: () => /*#__PURE__*/React.createElement(SureDeleteForm, {\n      text: 'Вы действительно хотите удалить этот проект?',\n      mutation: mutation,\n      padding: false,\n      onCancel: () => dispatch(setModal(null)),\n      onSubmit: async (_, action) => {\n        await action({\n          variables: {\n            project: id,\n            folder: folder.id\n          }\n        });\n        dispatch(setModal(null));\n        if (callback) callback();\n      }\n    })\n  }]));\n}\nexport function onMemberAdd(dispatch, props) {\n  const {\n    query\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'Добавление участника',\n    component: () => /*#__PURE__*/React.createElement(AddMemberForm, {\n      query: query,\n      onSubmit: member => {\n        dispatch(addProjectMember(member));\n        dispatch(setModal(null));\n      }\n    })\n  }]));\n}\nexport function onScreenshotAdd(dispatch) {\n  dispatch(setModal([{\n    path: '/',\n    title: 'Добавление изображений',\n    component: () => /*#__PURE__*/React.createElement(AddFileForm, {\n      placeholder: 'Перетащите сюда изображения',\n      submitText: 'Добавить изображения',\n      onSubmit: files => {\n        for (let file of files) {\n          dispatch(addProjectScreenshot(file));\n        }\n\n        dispatch(setModal(null));\n      }\n    })\n  }]));\n}\nexport function onFileAdd(dispatch) {\n  dispatch(setModal([{\n    path: '/',\n    title: 'Добавление файлов',\n    component: () => /*#__PURE__*/React.createElement(AddFileForm, {\n      accept: 'application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint, text/plain, application/pdf, image/*',\n      onSubmit: files => {\n        for (let file of files) {\n          dispatch(addProjectFile(file));\n        }\n\n        dispatch(setModal(null));\n      }\n    })\n  }]));\n}\nexport function onSureDelete(dispatch, props) {\n  const {\n    id,\n    text,\n    removeAction\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'Удаление',\n    component: () => /*#__PURE__*/React.createElement(ContentSureDelete, {\n      text: text,\n      type: 'button',\n      onCancel: () => dispatch(setModal(null)),\n      onSubmit: async () => {\n        dispatch(removeAction(id));\n        dispatch(setModal(null));\n      },\n      padding: true\n    })\n  }]));\n}\nexport function onProjectScreenshot(dispatch, props) {\n  const {\n    key,\n    screenshots\n  } = props;\n  dispatch(setModal(screenshots.map((screenshot, index) => ({\n    title: 'Изображение',\n    path: `/${screenshot.id}`,\n    home: screenshot.id === key,\n    component: ({\n      jump\n    }) => /*#__PURE__*/React.createElement(Screenshot, {\n      index: index,\n      screenshot: screenshot,\n      screenshots: screenshots,\n      onClick: jump\n    }),\n    back: false\n  })), 'l'));\n}","map":null,"metadata":{},"sourceType":"module"}
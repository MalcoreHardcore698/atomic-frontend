{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport ArticleCard from '../ArticleCard';\nimport { useHelper } from '../../hooks/useHelper';\nimport { onArticleLink } from '../../store/helpers/article';\nimport queries from '../../graphql/queries';\nexport const ArticleList = ({\n  variables,\n  initialList = []\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const [articles, setArticles] = useState(initialList);\n  const {\n    data,\n    loading,\n    error\n  } = initialList.length > 0 ? {\n    data: null,\n    loading: false,\n    error: false\n  } : useQuery(queries.GET_ARTICLES, {\n    variables\n  });\n  useEffect(() => {\n    if (!loading && data) {\n      setArticles(data.getArticles);\n    }\n  }, [data, loading]);\n  useEffect(() => {\n    setArticles(initialList);\n  }, [initialList]);\n  return !loading && data || articles.length > 0 ? articles.map(article => {\n    var _user$articles;\n\n    return /*#__PURE__*/React.createElement(LazyLoad, {\n      key: article.id\n    }, /*#__PURE__*/React.createElement(ArticleCard, {\n      layout: 'column',\n      article: article,\n      owned: user === null || user === void 0 ? void 0 : (_user$articles = user.articles) === null || _user$articles === void 0 ? void 0 : _user$articles.find(candidate => candidate.id === article.id),\n      onLink: recall(onArticleLink, {\n        id: article.id,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      })\n    }));\n  }) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\") : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0435\\u0439 \\u043D\\u0435\\u0442\");\n};\n\n_s(ArticleList, \"jPSU9qaBEJXHBhnY5zFwSDP/FRk=\", false, function () {\n  return [useHelper, useSelector, useQuery];\n});\n\n_c = ArticleList;\nexport default ArticleList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArticleList\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/ArticleList/index.js"],"names":["React","useState","useEffect","useQuery","useSelector","Alert","Spinner","Loader","LazyLoad","ArticleCard","useHelper","onArticleLink","queries","ArticleList","variables","initialList","recall","user","state","articles","setArticles","data","loading","error","length","GET_ARTICLES","getArticles","map","article","id","find","candidate","auth","email","width","textAlign"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,WAAW,GAAG;AAA3B,CAAD,KAAqC;AAAA;;AAC9D,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAMO,IAAI,GAAGb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAACc,WAAD,CAAxC;AAEA,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MACJR,WAAW,CAACS,MAAZ,GAAqB,CAArB,GACI;AAAEH,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE,KAAvB;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GADJ,GAEIpB,QAAQ,CAACS,OAAO,CAACa,YAAT,EAAuB;AAAEX,IAAAA;AAAF,GAAvB,CAHd;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACoB,OAAD,IAAYD,IAAhB,EAAsB;AACpBD,MAAAA,WAAW,CAACC,IAAI,CAACK,WAAN,CAAX;AACD;AACF,GAJQ,EAIN,CAACL,IAAD,EAAOC,OAAP,CAJM,CAAT;AAMApB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,WAAW,CAACL,WAAD,CAAX;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,SAAQ,CAACO,OAAD,IAAYD,IAAb,IAAsBF,QAAQ,CAACK,MAAT,GAAkB,CAAxC,GACLL,QAAQ,CAACQ,GAAT,CAAcC,OAAD;AAAA;;AAAA,wBACX,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,OAAO,CAACC;AAAvB,oBACE,oBAAC,WAAD;AACE,MAAA,MAAM,EAAE,QADV;AAEE,MAAA,OAAO,EAAED,OAFX;AAGE,MAAA,KAAK,EAAEX,IAAF,aAAEA,IAAF,yCAAEA,IAAI,CAAEE,QAAR,mDAAE,eAAgBW,IAAhB,CAAsBC,SAAD,IAAeA,SAAS,CAACF,EAAV,KAAiBD,OAAO,CAACC,EAA7D,CAHT;AAIE,MAAA,MAAM,EAAEb,MAAM,CAACL,aAAD,EAAgB;AAAEkB,QAAAA,EAAE,EAAED,OAAO,CAACC,EAAd;AAAkBG,QAAAA,IAAI,EAAEf,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEgB;AAA9B,OAAhB;AAJhB,MADF,CADW;AAAA,GAAb,CADK,GAWHV,KAAK,gBACP,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAE,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEW,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B;AAAnC,2JADO,GAILb,OAAO,gBACT,oBAAC,MAAD,qBACE,oBAAC,OAAD,OADF,CADS,gBAKT,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B;AAAd,2EApBF;AAsBD,CA1CM;;GAAMtB,W;UACIH,S,EACFN,W,EAMPD,Q;;;KARKU,W;AA4Cb,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\n\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\nimport ArticleCard from '../ArticleCard'\nimport { useHelper } from '../../hooks/useHelper'\nimport { onArticleLink } from '../../store/helpers/article'\nimport queries from '../../graphql/queries'\n\nexport const ArticleList = ({ variables, initialList = [] }) => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n  const [articles, setArticles] = useState(initialList)\n\n  const { data, loading, error } =\n    initialList.length > 0\n      ? { data: null, loading: false, error: false }\n      : useQuery(queries.GET_ARTICLES, { variables })\n\n  useEffect(() => {\n    if (!loading && data) {\n      setArticles(data.getArticles)\n    }\n  }, [data, loading])\n\n  useEffect(() => {\n    setArticles(initialList)\n  }, [initialList])\n\n  return (!loading && data) || articles.length > 0 ? (\n    articles.map((article) => (\n      <LazyLoad key={article.id}>\n        <ArticleCard\n          layout={'column'}\n          article={article}\n          owned={user?.articles?.find((candidate) => candidate.id === article.id)}\n          onLink={recall(onArticleLink, { id: article.id, auth: user?.email })}\n        />\n      </LazyLoad>\n    ))\n  ) : error ? (\n    <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n      Не удалось загрузить данные\n    </Alert>\n  ) : loading ? (\n    <Loader>\n      <Spinner />\n    </Loader>\n  ) : (\n    <Alert style={{ width: '100%', textAlign: 'center' }}>Новостей нет</Alert>\n  )\n}\n\nexport default ArticleList\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/user';\nimport UserCard from '../../components/UserCard';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { onUserCreate, onUserEdit, onUserLink, onUserAboutMore } from '../../store/helpers/user';\nimport { setDocuments } from '../../store/actions/documents';\nimport { useHelper } from '../../hooks/useHelper';\nimport { onChat } from '../../store/helpers';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Пользователи';\nconst START_OFFSET = 0;\nconst LIMIT = 12;\n\nconst Users = () => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    icon: 'user2',\n    field: 'email',\n    template: template,\n    startOffset: START_OFFSET,\n    emptyMessage: 'Пользователей нет',\n    buttonCreateText: 'Создать пользователя',\n    getType: 'getUsers',\n    getQuery: queries.GET_USERS,\n    deleteQuery: queries.DELETE_USER,\n    deleteEntityMultiText: 'пользователи',\n    deleteEntitySingleText: 'пользователь',\n    onLink: author => {\n      const owned = author.name === user.name;\n      recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      });\n    },\n    onEdit: (author, onAfter) => recall(onUserEdit, {\n      user: author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      },\n      onAfter\n    })(),\n    onCreate: onAfter => recall(onUserCreate, {\n      canEditRole,\n      mutation: queries.CREATE_USER,\n      onAfter\n    })(),\n    render: document => /*#__PURE__*/React.createElement(UserCard, {\n      user: document,\n      onChat: user.email && recall(onChat, {\n        id: document.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: document\n      }),\n      preview: true\n    })\n  });\n};\n\nexport default Users;","map":null,"metadata":{},"sourceType":"module"}
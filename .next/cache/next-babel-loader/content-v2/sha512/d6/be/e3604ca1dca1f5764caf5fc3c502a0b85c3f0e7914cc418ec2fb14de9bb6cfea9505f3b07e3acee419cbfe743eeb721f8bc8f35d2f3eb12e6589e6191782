{"ast":null,"code":"import React, { useState, useMemo, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Avatar from '../Avatar';\nimport Text from '../Text';\nimport DateText from '../DateText';\nimport Button from '../Button';\nimport Icon from '../Icon';\nimport Tooltip from '../Tooltip';\nimport Checkbox from '../Checkbox';\nimport TextArea from '../TextArea';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Comment__Wrap\",\n  componentId: \"sc-16gyxu7-0\"\n})([\"position:relative;margin:0;padding:0;\", \"\"], ({\n  checked\n}) => checked && css([\"opacity:0.45;\"]));\nexport const MiniAvatar = styled(Avatar).withConfig({\n  displayName: \"Comment__MiniAvatar\",\n  componentId: \"sc-16gyxu7-1\"\n})([\"width:var(--input-height-xs);height:var(--input-height-xs);min-width:var(--input-height-xs);min-height:var(--input-height-xs);border-radius:var(--surface-border-radius);\"]);\nexport const Name = styled(Text).withConfig({\n  displayName: \"Comment__Name\",\n  componentId: \"sc-16gyxu7-2\"\n})([\"font-weight:var(--font-weight-medium);color:var(--default-color-accent);transition:opacity 150ms ease;\", \" \", \"\"], ({\n  compact\n}) => compact && css([\"display:flex;align-items:center;grid-gap:10px;margin-bottom:5px;\"]), ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.65;}\"]));\nexport const MessageTextArea = styled(TextArea).withConfig({\n  displayName: \"Comment__MessageTextArea\",\n  componentId: \"sc-16gyxu7-3\"\n})([\"height:128px;\"]);\nexport const MessageText = styled(Text).withConfig({\n  displayName: \"Comment__MessageText\",\n  componentId: \"sc-16gyxu7-4\"\n})([\"color:black;\"]);\nexport const Content = styled(Column).withConfig({\n  displayName: \"Comment__Content\",\n  componentId: \"sc-16gyxu7-5\"\n})([\"grid-gap:0;width:100%;\"]);\nexport const Meta = styled(Row).withConfig({\n  displayName: \"Comment__Meta\",\n  componentId: \"sc-16gyxu7-6\"\n})([\"grid-gap:5px;\"]);\nexport const Line = styled(Row).withConfig({\n  displayName: \"Comment__Line\",\n  componentId: \"sc-16gyxu7-7\"\n})([\"justify-content:space-between;align-items:center;\"]);\nexport const Actions = styled(Row).withConfig({\n  displayName: \"Comment__Actions\",\n  componentId: \"sc-16gyxu7-8\"\n})([\"position:absolute;top:0;right:0;grid-gap:10px;\"]);\nexport const DispatchUpdatedDate = styled(DateText).withConfig({\n  displayName: \"Comment__DispatchUpdatedDate\",\n  componentId: \"sc-16gyxu7-9\"\n})([\"font-size:var(--font-size-s);color:var(--default-color-text);\"]);\nexport const DispatchTime = styled(DateText).withConfig({\n  displayName: \"Comment__DispatchTime\",\n  componentId: \"sc-16gyxu7-10\"\n})([\"font-size:var(--font-size-s);color:var(--default-color-text);\"]);\nexport const ReplyButton = styled(Button).withConfig({\n  displayName: \"Comment__ReplyButton\",\n  componentId: \"sc-16gyxu7-11\"\n})([\"color:var(--default-color-accent);font-size:var(--font-size-s);font-weight:var(--font-weight-regular);\"]);\nexport const Likes = styled(Row).withConfig({\n  displayName: \"Comment__Likes\",\n  componentId: \"sc-16gyxu7-12\"\n})([\"align-items:center;grid-gap:0;\"]);\nexport const LikesButton = styled(Button).withConfig({\n  displayName: \"Comment__LikesButton\",\n  componentId: \"sc-16gyxu7-13\"\n})([\"span{color:var(--default-color-text);transition:color 150ms ease;}&:hover{span{color:var(--default-color-accent);}}\"]);\nexport const LikeButton = styled(Button).withConfig({\n  displayName: \"Comment__LikeButton\",\n  componentId: \"sc-16gyxu7-14\"\n})([\"&:hover{svg{path,circle{stroke:var(--default-color-accent);}}}\"]);\nexport const Comment = ({\n  user,\n  message,\n  likes,\n  time,\n  className,\n  style,\n  compact,\n  isLiked: initialLiked,\n  isUpdated,\n  isChecked,\n  onLink,\n  onReply,\n  onChecked,\n  onShowLikes,\n  onDelete,\n  onEdit,\n  onLike\n}) => {\n  var _user$avatar$path, _user$avatar, _user$avatar$path2, _user$avatar2;\n\n  const [updatedAt, setUpdatedAt] = useState(isUpdated ? time : null);\n  const [checked, setChecked] = useState(isChecked);\n  const [count, setCount] = useState(likes);\n  const [isEdit, setEdit] = useState(false);\n  const [isLiked, setLiked] = useState(initialLiked);\n  const color = useMemo(() => isLiked ? 'var(--default-color-accent)' : 'var(--default-color-text)', [isLiked]);\n  const textLikes = useMemo(() => count === 1 ? 'человеку' : 'людям', [count]);\n  const [comment, setComment] = useState(message);\n  const commentRef = useRef(null);\n\n  const onClick = () => {\n    const value = !isLiked;\n    if (onLike) onLike(value);\n    setCount(prev => prev + (value ? 1 : -1));\n    setLiked(value);\n  };\n\n  const handleToggleEdit = () => setEdit(prev => !prev);\n\n  const handleChecked = e => {\n    const value = e.target.checked;\n    if (onChecked) onChecked(value);\n    setChecked(value);\n  };\n\n  const handleApplyChanges = () => {\n    var _commentRef$current;\n\n    const value = commentRef === null || commentRef === void 0 ? void 0 : (_commentRef$current = commentRef.current) === null || _commentRef$current === void 0 ? void 0 : _commentRef$current.value;\n\n    if (value) {\n      if (onEdit) onEdit(value);\n      setUpdatedAt(new Date());\n      setComment(value);\n    }\n\n    handleToggleEdit();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    checked: checked,\n    style: style,\n    className: className\n  }, !compact && /*#__PURE__*/React.createElement(Avatar, {\n    src: (_user$avatar$path = user === null || user === void 0 ? void 0 : (_user$avatar = user.avatar) === null || _user$avatar === void 0 ? void 0 : _user$avatar.path) !== null && _user$avatar$path !== void 0 ? _user$avatar$path : ''\n  }), /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Name, {\n    compact: compact,\n    onClick: onLink\n  }, compact && /*#__PURE__*/React.createElement(MiniAvatar, {\n    src: (_user$avatar$path2 = user === null || user === void 0 ? void 0 : (_user$avatar2 = user.avatar) === null || _user$avatar2 === void 0 ? void 0 : _user$avatar2.path) !== null && _user$avatar$path2 !== void 0 ? _user$avatar$path2 : ''\n  }), user.name), isEdit ? /*#__PURE__*/React.createElement(MessageTextArea, {\n    ref: commentRef,\n    defaultValue: comment,\n    appearance: 'ghost'\n  }) : /*#__PURE__*/React.createElement(MessageText, null, comment), compact && onEdit && onDelete && /*#__PURE__*/React.createElement(Actions, null, !isEdit ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить комментарий'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: onDelete\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактировать комментарий'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    onClick: handleToggleEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отметить комментарий',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    checked: checked,\n    onChange: handleChecked\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Применить изменения',\n    self: true\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'green',\n    onClick: handleApplyChanges\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'check',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отменить изменения',\n    self: true\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: handleToggleEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'closeSquare',\n    size: 'xs',\n    stroke: 'white'\n  }))))), /*#__PURE__*/React.createElement(Line, null, /*#__PURE__*/React.createElement(Meta, null, updatedAt ? /*#__PURE__*/React.createElement(DispatchUpdatedDate, null, \"\\u041E\\u0442\\u0440\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u043E\", ' ', new Date(updatedAt).toLocaleString('ru-RU', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  })) : /*#__PURE__*/React.createElement(DispatchTime, {\n    text: time\n  }), onReply && /*#__PURE__*/React.createElement(ReplyButton, {\n    appearance: 'clear',\n    onClick: onReply\n  }, \"\\u041E\\u0442\\u0432\\u0435\\u0442\\u0438\\u0442\\u044C\")), /*#__PURE__*/React.createElement(Likes, null, count > 0 && /*#__PURE__*/React.createElement(Tooltip, {\n    text: `${count} ${textLikes} это нравится`\n  }, /*#__PURE__*/React.createElement(LikesButton, {\n    type: 'button',\n    onClick: onShowLikes,\n    appearance: 'clear',\n    size: 'xs'\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color\n    }\n  }, count))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Мне нравится'\n  }, /*#__PURE__*/React.createElement(LikeButton, {\n    type: 'button',\n    onClick: onClick,\n    appearance: 'clear',\n    size: 'xs'\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'heart',\n    size: 'xs',\n    stroke: color,\n    fill: isLiked ? 'var(--default-color-accent)' : 'none'\n  })))))));\n};\nexport default Comment;","map":null,"metadata":{},"sourceType":"module"}
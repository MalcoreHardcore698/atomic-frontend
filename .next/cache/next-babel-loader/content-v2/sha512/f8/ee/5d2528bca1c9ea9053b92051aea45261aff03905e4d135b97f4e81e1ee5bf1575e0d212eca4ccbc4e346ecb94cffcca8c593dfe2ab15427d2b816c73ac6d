{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onUserAboutMore, onUserLink, onUserMembers, onUserEdit, onUserCreate } from '../store/helpers/user';\nimport { useHelper } from './useHelper';\nimport { useMutate } from './useMutate';\nimport queries from '../graphql/queries';\nexport const useUser = ({\n  isManage\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  const hasOwned = useCallback(author => author.name === (user === null || user === void 0 ? void 0 : user.name), [user]);\n  const onLink = useCallback(author => {\n    const owned = author.name === (user === null || user === void 0 ? void 0 : user.name);\n    recall(onUserLink, {\n      id: author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      owned,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, dispatch, mutate, recall]);\n  const onChat = useCallback(author => {\n    recall(onChat, {\n      sender: user === null || user === void 0 ? void 0 : user.email,\n      recipient: author.email,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, mutate, dispatch]);\n  const onMembers = useCallback(author => {\n    recall(onUserMembers, {\n      id: author === null || author === void 0 ? void 0 : author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    })();\n  }, [user, recall]);\n  const onAboutMore = useCallback(project => {\n    recall(onUserAboutMore, {\n      user: project\n    })();\n  }, [recall]);\n  const onCompanyLink = useCallback(author => {\n    var _author$company;\n\n    recall(onUserLink, {\n      id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, recall]);\n\n  const onEdit = (author, onAfter) => recall(onUserEdit, {\n    user: author.email,\n    auth: user === null || user === void 0 ? void 0 : user.email,\n    canEditRole,\n    mutations: {\n      update: queries.UPDATE_USER,\n      del: queries.DELETE_USER,\n      changePassword: queries.UPDATE_USER\n    },\n    onAfter\n  })();\n\n  const onCreate = onAfter => recall(onUserCreate, {\n    canEditRole,\n    mutation: queries.CREATE_USER,\n    onAfter\n  })();\n\n  return {\n    user,\n    hasOwned,\n    onLink,\n    onChat,\n    onMembers,\n    onAboutMore,\n    onCompanyLink,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  };\n};\n\n_s(useUser, \"lMXGjrFPI+u/JUTflEhVoeH6H/k=\", false, function () {\n  return [useHelper, useMutate, useSelector, useDispatch];\n});","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/hooks/useUser.js"],"names":["useCallback","useMemo","useDispatch","useSelector","onUserAboutMore","onUserLink","onUserMembers","onUserEdit","onUserCreate","useHelper","useMutate","queries","useUser","isManage","recall","mutate","user","state","dispatch","canEditRole","role","name","hasOwned","author","onLink","owned","id","email","auth","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","onChat","sender","recipient","onMembers","onAboutMore","project","onCompanyLink","company","onEdit","onAfter","update","UPDATE_USER","del","DELETE_USER","changePassword","onCreate","mutation","CREATE_USER"],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  onUserAboutMore,\n  onUserLink,\n  onUserMembers,\n  onUserEdit,\n  onUserCreate\n} from '../store/helpers/user'\nimport { useHelper } from './useHelper'\nimport { useMutate } from './useMutate'\nimport queries from '../graphql/queries'\n\nexport const useUser = ({ isManage }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  const hasOwned = useCallback((author) => author.name === user?.name, [user])\n\n  const onLink = useCallback(\n    (author) => {\n      const owned = author.name === user?.name\n      recall(onUserLink, {\n        id: author.email,\n        auth: user?.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })()\n    },\n    [user, dispatch, mutate, recall]\n  )\n\n  const onChat = useCallback(\n    (author) => {\n      recall(onChat, {\n        sender: user?.email,\n        recipient: author.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })()\n    },\n    [user, mutate, dispatch]\n  )\n\n  const onMembers = useCallback(\n    (author) => {\n      recall(onUserMembers, { id: author?.email, auth: user?.email })()\n    },\n    [user, recall]\n  )\n\n  const onAboutMore = useCallback(\n    (project) => {\n      recall(onUserAboutMore, { user: project })()\n    },\n    [recall]\n  )\n\n  const onCompanyLink = useCallback(\n    (author) => {\n      recall(onUserLink, {\n        id: author.company?.email,\n        auth: user?.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })()\n    },\n    [user, recall]\n  )\n\n  const onEdit = (author, onAfter) =>\n    recall(onUserEdit, {\n      user: author.email,\n      auth: user?.email,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      },\n      onAfter\n    })()\n\n  const onCreate = (onAfter) =>\n    recall(onUserCreate, {\n      canEditRole,\n      mutation: queries.CREATE_USER,\n      onAfter\n    })()\n\n  return {\n    user,\n    hasOwned,\n    onLink,\n    onChat,\n    onMembers,\n    onAboutMore,\n    onCompanyLink,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch';\nimport { Card } from '../../layouts/dashboard/content';\nimport { setModal } from '../../store/actions/modal';\nexport const Query = memo(_c = _s(({\n  data,\n  loading,\n  search,\n  entity,\n  entities,\n  onJump,\n  onChange,\n  onSubmit\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n\n  const hideModal = () => dispatch(setModal(null));\n\n  return /*#__PURE__*/React.createElement(GlobalSearch, {\n    search: search,\n    loading: loading,\n    initialEntity: entity,\n    result: search && data && entity && data[entity === null || entity === void 0 ? void 0 : entity.value],\n    entities: (entities || []).map(elem => ({ ...elem,\n      render: item => /*#__PURE__*/React.createElement(Card, {\n        key: item.id || item.email,\n        item: item,\n        appearance: 'clear',\n        component: elem.render(item),\n        onLink: hideModal,\n        onEdit: hideModal // onDelete={(document) => onJump('/delete', { item: document, entity: elem })}\n        ,\n        withoutChecked: true\n      })\n    })),\n    onSubmit: onSubmit,\n    onChange: onChange\n  });\n}, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n}));\n_c2 = Query;\nexport const QuerySearch = memo(_c3 = _s2(({\n  search,\n  entity,\n  entities,\n  setSearch,\n  onHide,\n  onJump,\n  onChange\n}) => {\n  _s2();\n\n  const initialResult = [null, {\n    data: null,\n    loading: false,\n    refetch: null\n  }];\n  const [load, {\n    data,\n    loading,\n    refetch\n  }] = entity ? useLazyQuery(entity.query) : initialResult;\n\n  const onSubmit = value => {\n    const variables = {\n      search: value\n    };\n    if (setSearch) setSearch(value);\n\n    if (value) {\n      if (refetch) {\n        refetch(variables);\n      }\n\n      if (load) {\n        load({\n          variables\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Query, {\n    data: data,\n    entity: entity,\n    search: search,\n    loading: loading,\n    entities: entities,\n    onHide: onHide,\n    onJump: onJump,\n    onChange: onChange,\n    onSubmit: onSubmit\n  });\n}, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [useLazyQuery];\n}));\n_c4 = QuerySearch;\nexport default QuerySearch;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Query$memo\");\n$RefreshReg$(_c2, \"Query\");\n$RefreshReg$(_c3, \"QuerySearch$memo\");\n$RefreshReg$(_c4, \"QuerySearch\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/QuerySearch/index.js"],"names":["React","memo","useDispatch","useLazyQuery","GlobalSearch","Card","setModal","Query","data","loading","search","entity","entities","onJump","onChange","onSubmit","dispatch","hideModal","value","map","elem","render","item","id","email","QuerySearch","setSearch","onHide","initialResult","refetch","load","query","variables"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch'\n\nimport { Card } from '../../layouts/dashboard/content'\nimport { setModal } from '../../store/actions/modal'\n\nexport const Query = memo(\n  ({ data, loading, search, entity, entities, onJump, onChange, onSubmit }) => {\n    const dispatch = useDispatch()\n\n    const hideModal = () => dispatch(setModal(null))\n\n    return (\n      <GlobalSearch\n        search={search}\n        loading={loading}\n        initialEntity={entity}\n        result={search && data && entity && data[entity?.value]}\n        entities={(entities || []).map((elem) => ({\n          ...elem,\n          render: (item) => (\n            <Card\n              key={item.id || item.email}\n              item={item}\n              appearance={'clear'}\n              component={elem.render(item)}\n              onLink={hideModal}\n              onEdit={hideModal}\n              // onDelete={(document) => onJump('/delete', { item: document, entity: elem })}\n              withoutChecked\n            />\n          )\n        }))}\n        onSubmit={onSubmit}\n        onChange={onChange}\n      />\n    )\n  }\n)\n\nexport const QuerySearch = memo(\n  ({ search, entity, entities, setSearch, onHide, onJump, onChange }) => {\n    const initialResult = [null, { data: null, loading: false, refetch: null }]\n    const [load, { data, loading, refetch }] = entity ? useLazyQuery(entity.query) : initialResult\n\n    const onSubmit = (value) => {\n      const variables = { search: value }\n\n      if (setSearch) setSearch(value)\n\n      if (value) {\n        if (refetch) {\n          refetch(variables)\n        }\n        if (load) {\n          load({ variables })\n        }\n      }\n    }\n\n    return (\n      <Query\n        data={data}\n        entity={entity}\n        search={search}\n        loading={loading}\n        entities={entities}\n        onHide={onHide}\n        onJump={onJump}\n        onChange={onChange}\n        onSubmit={onSubmit}\n      />\n    )\n  }\n)\n\nexport default QuerySearch\n"]},"metadata":{},"sourceType":"module"}
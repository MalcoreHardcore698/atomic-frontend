{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Avatar from '../../atomic-ui/components/Avatar';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Button from '../../atomic-ui/components/Button';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Popper, { Wrap as WrapPopper } from '../../atomic-ui/components/Popper';\nimport Badge from '../../atomic-ui/components/Badge';\nimport Menu from '../../atomic-ui/components/Menu';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"AppBar__Wrap\",\n  componentId: \"vyjcbk-0\"\n})([\"position:fixed;top:0;left:0;z-index:var(--z-13);display:grid;grid-template-columns:128px 1fr 80px;grid-gap:calc(var(--default-gap) + 25px);align-content:center;margin:0;padding:0 var(--main-offset-l);width:100%;height:72px;min-height:72px;background:var(--surface-background);border:var(--surface-border);box-shadow:var(--surface-shadow);@media only screen and (max-width:996px){padding:0 var(--main-offset-m);}@media only screen and (max-width:768px){display:flex;align-items:center;grid-gap:var(--default-gap);padding:0 var(--main-offset-s);}@media only screen and (max-width:480px){padding:0 var(--main-offset-xs);}\"]);\nexport const IconButton = styled(Button).withConfig({\n  displayName: \"AppBar__IconButton\",\n  componentId: \"vyjcbk-1\"\n})([\"position:relative;\"]);\nexport const MenuButton = styled(Button).withConfig({\n  displayName: \"AppBar__MenuButton\",\n  componentId: \"vyjcbk-2\"\n})([\"display:none;@media only screen and (max-width:768px){display:flex;}\"]);\nexport const HomeLinkContainer = styled.div.withConfig({\n  displayName: \"AppBar__HomeLinkContainer\",\n  componentId: \"vyjcbk-3\"\n})([\"position:relative;top:6px;\"]);\nexport const BrandLogo = styled.img.withConfig({\n  displayName: \"AppBar__BrandLogo\",\n  componentId: \"vyjcbk-4\"\n})([\"object-fit:contain;width:100%;height:100%;transform:scale(1.25);@media only screen and (max-width:786px){display:none;}\"]);\nexport const Navigation = styled.div.withConfig({\n  displayName: \"AppBar__Navigation\",\n  componentId: \"vyjcbk-5\"\n})([\"position:relative;display:flex;grid-gap:calc(var(--default-gap) + 15px);align-items:center;@media only screen and (max-width:768px){display:none;}\"]);\nexport const Counter = styled(Badge).withConfig({\n  displayName: \"AppBar__Counter\",\n  componentId: \"vyjcbk-6\"\n})([\"position:absolute;top:-5px;right:-8px;color:var(--default-color-accent);background:var(--default-color-accent-dim);border:none;&:hover{border:none;}\"]);\nexport const Label = styled.span.withConfig({\n  displayName: \"AppBar__Label\",\n  componentId: \"vyjcbk-7\"\n})([\"font-size:var(--font-size-m);font-weight:var(--font-weight-regular);\", \"\"], ({\n  link\n}) => link && css([\"display:inline-flex;border-radius:25rem;padding:5px 15px;background:transparent;color:black;cursor:pointer;transition:all 150ms ease;&:hover{opacity:0.65;}\", \"\"], ({\n  active\n}) => active && css([\"background:var(--default-color-accent-dim);color:var(--default-color-accent-link);&:hover{opacity:1;}\"])));\nexport const Actions = styled.div.withConfig({\n  displayName: \"AppBar__Actions\",\n  componentId: \"vyjcbk-8\"\n})([\"display:flex;grid-gap:var(--default-gap);align-items:center;justify-self:end;@media only screen and (max-width:768px){width:100%;justify-content:flex-end;\", \"{flex-grow:initial;}}\"], WrapPopper);\nexport const App = ({\n  user,\n  logotype,\n  links,\n  link: Link,\n  style,\n  className,\n  onMenu,\n  onHelp,\n  onChat,\n  onProfile,\n  onSettings,\n  onNotification,\n  onLogout,\n  onLogin\n}) => {\n  var _user$avatar;\n\n  const root = useSelector(state => state.root);\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style\n  }, /*#__PURE__*/React.createElement(MenuButton, {\n    appearance: 'clear',\n    kind: 'icon',\n    onClick: onMenu\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'menu'\n  })), logotype && /*#__PURE__*/React.createElement(HomeLinkContainer, null, /*#__PURE__*/React.createElement(Link, {\n    href: '/'\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    text: root.settings.meta.description,\n    offset: {\n      bottom: 10\n    },\n    place: 'bottom',\n    maxWidth: 256,\n    multiline: true\n  }, /*#__PURE__*/React.createElement(BrandLogo, {\n    src: logotype,\n    alt: 'Logotype'\n  })))), links && links.length > 0 && /*#__PURE__*/React.createElement(Navigation, null, links.map(link => link.props.sublinks ? /*#__PURE__*/React.createElement(Popper, {\n    key: v4(),\n    place: 'bottom',\n    width: '265px',\n    offset: {\n      top: 5,\n      right: 85\n    },\n    body: /*#__PURE__*/React.createElement(Menu, {\n      key: 'slinks',\n      listStyle: {\n        padding: 'var(--default-gap)'\n      },\n      links: link.props.sublinks.map(slink => ({\n        text: slink.label,\n        active: slink.props.active,\n        onClick: slink.props.onClick\n      }))\n    }),\n    appearance: 'clear'\n  }, /*#__PURE__*/React.createElement(Label, {\n    active: link.active,\n    link: true\n  }, link.label)) : /*#__PURE__*/React.createElement(Link, _extends({\n    key: v4()\n  }, link.props), /*#__PURE__*/React.createElement(Label, null, link.label)))), /*#__PURE__*/React.createElement(Actions, null, user ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {\n    type: 'button',\n    kind: 'icon',\n    size: 'xs',\n    onClick: onNotification\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: 'xs',\n    icon: 'notification',\n    stroke: 'white'\n  }), user.countOfNewNotifications && /*#__PURE__*/React.createElement(Counter, {\n    count: user.countOfNewNotifications,\n    appearance: 'outlined'\n  })), /*#__PURE__*/React.createElement(IconButton, {\n    type: 'button',\n    kind: 'icon',\n    size: 'xs',\n    onClick: onChat\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: 'xs',\n    icon: 'chat',\n    stroke: 'white'\n  }), user.countOfNewMessages && /*#__PURE__*/React.createElement(Counter, {\n    count: user.countOfNewMessages,\n    appearance: 'outlined'\n  })), /*#__PURE__*/React.createElement(Popper, {\n    place: 'bottom',\n    width: '265px',\n    offset: {\n      top: 5,\n      left: 100\n    },\n    body: /*#__PURE__*/React.createElement(Menu, {\n      key: 'menu',\n      header: {\n        title: 'Аккаунт',\n        link: {\n          text: 'Управление',\n          onClick: onSettings\n        }\n      },\n      links: [{\n        text: 'Личный кабинет',\n        onClick: onProfile\n      }, {\n        text: 'Настройки профиля',\n        onClick: onSettings\n      }, {\n        text: 'Получить помощь',\n        onClick: onHelp\n      }, {\n        text: 'Выход',\n        onClick: onLogout\n      }]\n    }),\n    appearance: 'clear'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    appearance: 'clear'\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    src: ((_user$avatar = user.avatar) === null || _user$avatar === void 0 ? void 0 : _user$avatar.path) || '/images/avatar-default.png',\n    alt: 'Avatar'\n  })))) : /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    onClick: onLogin\n  }, \"\\u0412\\u043E\\u0439\\u0442\\u0438\")));\n};\nApp.defaultProps = {\n  link: ({\n    children,\n    ...props\n  }) => /*#__PURE__*/React.createElement(\"a\", _extends({}, props, {\n    href: '/#'\n  }), children)\n};\nexport default App;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/AppBar/index.js"],"names":["React","styled","css","useSelector","v4","Avatar","Icon","Button","Tooltip","Popper","Wrap","WrapPopper","Badge","Menu","div","IconButton","MenuButton","HomeLinkContainer","BrandLogo","img","Navigation","Counter","Label","span","link","active","Actions","App","user","logotype","links","Link","style","className","onMenu","onHelp","onChat","onProfile","onSettings","onNotification","onLogout","onLogin","root","state","settings","meta","description","bottom","length","map","props","sublinks","top","right","padding","slink","text","label","onClick","countOfNewNotifications","countOfNewMessages","left","title","avatar","path","defaultProps","children"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { useSelector } from 'react-redux'\nimport { v4 } from 'uuid'\n\nimport Avatar from '../../atomic-ui/components/Avatar'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Button from '../../atomic-ui/components/Button'\nimport Tooltip from '../../atomic-ui/components/Tooltip'\nimport Popper, { Wrap as WrapPopper } from '../../atomic-ui/components/Popper'\nimport Badge from '../../atomic-ui/components/Badge'\nimport Menu from '../../atomic-ui/components/Menu'\n\nexport const Wrap = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: var(--z-13);\n\n  display: grid;\n  grid-template-columns: 128px 1fr 80px;\n  grid-gap: calc(var(--default-gap) + 25px);\n  align-content: center;\n\n  margin: 0;\n  padding: 0 var(--main-offset-l);\n\n  width: 100%;\n  height: 72px;\n  min-height: 72px;\n\n  background: var(--surface-background);\n  border: var(--surface-border);\n  box-shadow: var(--surface-shadow);\n\n  @media only screen and (max-width: 996px) {\n    padding: 0 var(--main-offset-m);\n  }\n\n  @media only screen and (max-width: 768px) {\n    display: flex;\n    align-items: center;\n    grid-gap: var(--default-gap);\n    padding: 0 var(--main-offset-s);\n  }\n\n  @media only screen and (max-width: 480px) {\n    padding: 0 var(--main-offset-xs);\n  }\n`\n\nexport const IconButton = styled(Button)`\n  position: relative;\n`\n\nexport const MenuButton = styled(Button)`\n  display: none;\n\n  @media only screen and (max-width: 768px) {\n    display: flex;\n  }\n`\n\nexport const HomeLinkContainer = styled.div`\n  position: relative;\n  top: 6px;\n`\n\nexport const BrandLogo = styled.img`\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n  transform: scale(1.25);\n\n  @media only screen and (max-width: 786px) {\n    display: none;\n  }\n`\n\nexport const Navigation = styled.div`\n  position: relative;\n  display: flex;\n  grid-gap: calc(var(--default-gap) + 15px);\n  align-items: center;\n\n  @media only screen and (max-width: 768px) {\n    display: none;\n  }\n`\n\nexport const Counter = styled(Badge)`\n  position: absolute;\n  top: -5px;\n  right: -8px;\n  color: var(--default-color-accent);\n  background: var(--default-color-accent-dim);\n  border: none;\n\n  &:hover {\n    border: none;\n  }\n`\n\nexport const Label = styled.span`\n  font-size: var(--font-size-m);\n  font-weight: var(--font-weight-regular);\n\n  ${({ link }) =>\n    link &&\n    css`\n      display: inline-flex;\n      border-radius: 25rem;\n      padding: 5px 15px;\n      background: transparent;\n      color: black;\n      cursor: pointer;\n      transition: all 150ms ease;\n\n      &:hover {\n        opacity: 0.65;\n      }\n\n      ${({ active }) =>\n        active &&\n        css`\n          background: var(--default-color-accent-dim);\n          color: var(--default-color-accent-link);\n          &:hover {\n            opacity: 1;\n          }\n        `}\n    `}\n`\n\nexport const Actions = styled.div`\n  display: flex;\n  grid-gap: var(--default-gap);\n  align-items: center;\n  justify-self: end;\n\n  @media only screen and (max-width: 768px) {\n    width: 100%;\n    justify-content: flex-end;\n\n    ${WrapPopper} {\n      flex-grow: initial;\n    }\n  }\n`\n\nexport const App = ({\n  user,\n  logotype,\n  links,\n  link: Link,\n  style,\n  className,\n  onMenu,\n  onHelp,\n  onChat,\n  onProfile,\n  onSettings,\n  onNotification,\n  onLogout,\n  onLogin\n}) => {\n  const root = useSelector((state) => state.root)\n\n  return (\n    <Wrap className={className} style={style}>\n      <MenuButton appearance={'clear'} kind={'icon'} onClick={onMenu}>\n        <Icon icon={'menu'} />\n      </MenuButton>\n\n      {logotype && (\n        <HomeLinkContainer>\n          <Link href={'/'}>\n            <Tooltip\n              text={root.settings.meta.description}\n              offset={{ bottom: 10 }}\n              place={'bottom'}\n              maxWidth={256}\n              multiline>\n              <BrandLogo src={logotype} alt={'Logotype'} />\n            </Tooltip>\n          </Link>\n        </HomeLinkContainer>\n      )}\n\n      {links && links.length > 0 && (\n        <Navigation>\n          {links.map((link) =>\n            link.props.sublinks ? (\n              <Popper\n                key={v4()}\n                place={'bottom'}\n                width={'265px'}\n                offset={{ top: 5, right: 85 }}\n                body={\n                  <Menu\n                    key={'slinks'}\n                    listStyle={{ padding: 'var(--default-gap)' }}\n                    links={link.props.sublinks.map((slink) => ({\n                      text: slink.label,\n                      active: slink.props.active,\n                      onClick: slink.props.onClick\n                    }))}\n                  />\n                }\n                appearance={'clear'}>\n                <Label active={link.active} link>\n                  {link.label}\n                </Label>\n              </Popper>\n            ) : (\n              <Link key={v4()} {...link.props}>\n                <Label>{link.label}</Label>\n              </Link>\n            )\n          )}\n        </Navigation>\n      )}\n\n      <Actions>\n        {user ? (\n          <React.Fragment>\n            <IconButton type={'button'} kind={'icon'} size={'xs'} onClick={onNotification}>\n              <Icon size={'xs'} icon={'notification'} stroke={'white'} />\n              {user.countOfNewNotifications && (\n                <Counter count={user.countOfNewNotifications} appearance={'outlined'} />\n              )}\n            </IconButton>\n\n            <IconButton type={'button'} kind={'icon'} size={'xs'} onClick={onChat}>\n              <Icon size={'xs'} icon={'chat'} stroke={'white'} />\n              {user.countOfNewMessages && (\n                <Counter count={user.countOfNewMessages} appearance={'outlined'} />\n              )}\n            </IconButton>\n\n            <Popper\n              place={'bottom'}\n              width={'265px'}\n              offset={{ top: 5, left: 100 }}\n              body={\n                <Menu\n                  key={'menu'}\n                  header={{\n                    title: 'Аккаунт',\n                    link: { text: 'Управление', onClick: onSettings }\n                  }}\n                  links={[\n                    { text: 'Личный кабинет', onClick: onProfile },\n                    { text: 'Настройки профиля', onClick: onSettings },\n                    { text: 'Получить помощь', onClick: onHelp },\n                    { text: 'Выход', onClick: onLogout }\n                  ]}\n                />\n              }\n              appearance={'clear'}>\n              <Button type={'button'} appearance={'clear'}>\n                <Avatar src={user.avatar?.path || '/images/avatar-default.png'} alt={'Avatar'} />\n              </Button>\n            </Popper>\n          </React.Fragment>\n        ) : (\n          <Button type={'button'} onClick={onLogin}>\n            Войти\n          </Button>\n        )}\n      </Actions>\n    </Wrap>\n  )\n}\n\nApp.defaultProps = {\n  link: ({ children, ...props }) => (\n    <a {...props} href={'/#'}>\n      {children}\n    </a>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dan82\\\\Documents\\\\workspace\\\\FREELANCE\\\\atomic\\\\atomic-frontend\\\\atomic-ui\\\\components\\\\VideoPresentation\\\\index.js\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport YouTube from 'react-youtube';\nimport Vimeo from 'react-vimeo';\nexport var parseUrl = function parseUrl(url) {\n  if (url instanceof URL) {\n    var href = url.href;\n\n    if (href.includes('youtube')) {\n      var videoId = new URLSearchParams(url.search).get('v');\n      return {\n        type: 'youtube',\n        videoId: videoId\n      };\n    }\n\n    if (href.includes('vimeo')) {\n      var regExpVimeo = /https:\\/\\/(www\\.)?vimeo.com\\/(\\d+)($|\\/)/;\n      var matchVimeo = url.href.match(regExpVimeo);\n      return {\n        type: 'vimeo',\n        videoId: matchVimeo[2]\n      };\n    }\n  }\n\n  return false;\n};\nexport var VideoPresentation = function VideoPresentation(_ref) {\n  var type = _ref.type,\n      videoId = _ref.videoId;\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, type === 'youtube' ? __jsx(YouTube, {\n    videoId: videoId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }) : __jsx(Vimeo, {\n    videoId: videoId,\n    autoplay: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }));\n};\n_c = VideoPresentation;\nexport default VideoPresentation;\n\nvar _c;\n\n$RefreshReg$(_c, \"VideoPresentation\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/VideoPresentation/index.js"],"names":["React","YouTube","Vimeo","parseUrl","url","URL","href","includes","videoId","URLSearchParams","search","get","type","regExpVimeo","matchVimeo","match","VideoPresentation"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAS;AAC/B,MAAIA,GAAG,YAAYC,GAAnB,EAAwB;AACtB,QAAMC,IAAI,GAAGF,GAAG,CAACE,IAAjB;;AACA,QAAIA,IAAI,CAACC,QAAL,CAAc,SAAd,CAAJ,EAA8B;AAC5B,UAAMC,OAAO,GAAG,IAAIC,eAAJ,CAAoBL,GAAG,CAACM,MAAxB,EAAgCC,GAAhC,CAAoC,GAApC,CAAhB;AACA,aAAO;AAAEC,QAAAA,IAAI,EAAE,SAAR;AAAmBJ,QAAAA,OAAO,EAAPA;AAAnB,OAAP;AACD;;AACD,QAAIF,IAAI,CAACC,QAAL,CAAc,OAAd,CAAJ,EAA4B;AAC1B,UAAMM,WAAW,GAAG,0CAApB;AACA,UAAMC,UAAU,GAAGV,GAAG,CAACE,IAAJ,CAASS,KAAT,CAAeF,WAAf,CAAnB;AACA,aAAO;AAAED,QAAAA,IAAI,EAAE,OAAR;AAAiBJ,QAAAA,OAAO,EAAEM,UAAU,CAAC,CAAD;AAApC,OAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAdM;AAgBP,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,OAAuB;AAAA,MAApBJ,IAAoB,QAApBA,IAAoB;AAAA,MAAdJ,OAAc,QAAdA,OAAc;AACtD,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,IAAI,KAAK,SAAT,GACC,MAAC,OAAD;AAAS,IAAA,OAAO,EAAEJ,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC,MAAC,KAAD;AAAO,IAAA,OAAO,EAAEA,OAAhB;AAAyB,IAAA,QAAQ,EAAE,IAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADF;AASD,CAVM;KAAMQ,iB;AAYb,eAAeA,iBAAf","sourcesContent":["import React from 'react'\nimport YouTube from 'react-youtube'\nimport Vimeo from 'react-vimeo'\n\nexport const parseUrl = (url) => {\n  if (url instanceof URL) {\n    const href = url.href\n    if (href.includes('youtube')) {\n      const videoId = new URLSearchParams(url.search).get('v')\n      return { type: 'youtube', videoId }\n    }\n    if (href.includes('vimeo')) {\n      const regExpVimeo = /https:\\/\\/(www\\.)?vimeo.com\\/(\\d+)($|\\/)/\n      const matchVimeo = url.href.match(regExpVimeo)\n      return { type: 'vimeo', videoId: matchVimeo[2] }\n    }\n  }\n  return false\n}\n\nexport const VideoPresentation = ({ type, videoId }) => {\n  return (\n    <div>\n      {type === 'youtube' ? (\n        <YouTube videoId={videoId}></YouTube>\n      ) : (\n        <Vimeo videoId={videoId} autoplay={true} />\n      )}\n    </div>\n  )\n}\n\nexport default VideoPresentation\n"]},"metadata":{},"sourceType":"module"}
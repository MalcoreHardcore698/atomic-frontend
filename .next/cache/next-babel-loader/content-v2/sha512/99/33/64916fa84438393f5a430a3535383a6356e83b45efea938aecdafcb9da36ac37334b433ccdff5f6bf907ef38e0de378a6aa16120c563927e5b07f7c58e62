{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onUserAboutMore, onUserLink } from '../../../store/helpers/user';\nimport { onProjectAdd, onProjectRemove, onProjectScreenshot } from '../../../store/helpers/project';\nimport { setUserFolder, updateUser } from '../../../store/actions/user';\nimport { useHelper } from '../../../hooks/useHelper';\nimport { useMutate } from '../../../hooks/useMutate';\nimport queries from '../../../graphql/queries';\nexport const ProjectCard = ({\n  project\n}) => {\n  _s();\n\n  var _user$folders, _project$company;\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder,\n    search: state.root.search\n  }));\n  const dispatch = useDispatch();\n  const onAdd = useCallback(project => recall(onProjectAdd, {\n    id: project.id,\n    folders: user === null || user === void 0 ? void 0 : user.folders,\n    mutations: {\n      addProject: queries.ADD_USER_PROJECT,\n      createFolder: queries.ADD_USER_FOLDER\n    },\n    callback: item => {\n      const result = { ...item,\n        projects: [...item.projects, project.id]\n      };\n      dispatch(setUserFolder(result));\n    }\n  })(), [user]);\n  const onRemove = useCallback(project => recall(onProjectRemove, {\n    id: project.id,\n    folder,\n    mutation: queries.REMOVE_USER_PROJECT\n  })(), [user]);\n  return /*#__PURE__*/React.createElement(ProjectCard, {\n    project: project,\n    added: !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === item.id)))),\n    liked: !!(project.rating || []).find(item => item.email === user.email),\n    onLike: user.email && mutate(queries.LIKE_PROJECT, {\n      id: project.id\n    }, response => dispatch(updateUser(response.data.likeProject))),\n    onAdd: user.email && (() => onAdd(project)),\n    onRemove: user.email && (() => onRemove(project)),\n    onAboutMore: recall(onUserAboutMore, {\n      user: project\n    }),\n    onCompanyLink: recall(onUserLink, {\n      id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      recipient: project.author,\n      query: queries.GET_USER_CHATS,\n      mutation: queries.SEND_MESSAGE\n    }),\n    onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n      screenshots: [project.preview, ...project.screenshots],\n      key\n    })(),\n    withSocials: true\n  });\n};\n\n_s(ProjectCard, \"2vtjRS9Hoh3+/dPJPRrqFhf/520=\", false, function () {\n  return [useHelper, useMutate, useSelector, useDispatch];\n});\n\n_c = ProjectCard;\nexport default ProjectCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectCard\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/features/ProjectCard/index.js"],"names":["React","useCallback","useDispatch","useSelector","onUserAboutMore","onUserLink","onProjectAdd","onProjectRemove","onProjectScreenshot","setUserFolder","updateUser","useHelper","useMutate","queries","ProjectCard","project","recall","mutate","user","folder","state","root","search","dispatch","onAdd","id","folders","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","callback","item","result","projects","onRemove","mutation","REMOVE_USER_PROJECT","find","rating","email","LIKE_PROJECT","response","data","likeProject","company","auth","recipient","author","query","GET_USER_CHATS","SEND_MESSAGE","_","key","screenshots","preview"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,6BAA5C;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,mBAAxC,QAAmE,gCAAnE;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,6BAA1C;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAAA;;AAC1C,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAMM,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBhB,WAAW,CAAEiB,KAAD,KAAY;AAC/CF,IAAAA,IAAI,EAAEE,KAAK,CAACF,IADmC;AAE/CC,IAAAA,MAAM,EAAEC,KAAK,CAACC,IAAN,CAAWF,MAF4B;AAG/CG,IAAAA,MAAM,EAAEF,KAAK,CAACC,IAAN,CAAWC;AAH4B,GAAZ,CAAD,CAApC;AAKA,QAAMC,QAAQ,GAAGrB,WAAW,EAA5B;AAEA,QAAMsB,KAAK,GAAGvB,WAAW,CACtBc,OAAD,IACEC,MAAM,CAACV,YAAD,EAAe;AACnBmB,IAAAA,EAAE,EAAEV,OAAO,CAACU,EADO;AAEnBC,IAAAA,OAAO,EAAER,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEQ,OAFI;AAGnBC,IAAAA,SAAS,EAAE;AACTC,MAAAA,UAAU,EAAEf,OAAO,CAACgB,gBADX;AAETC,MAAAA,YAAY,EAAEjB,OAAO,CAACkB;AAFb,KAHQ;AAOnBC,IAAAA,QAAQ,EAAGC,IAAD,IAAU;AAClB,YAAMC,MAAM,GAAG,EAAE,GAAGD,IAAL;AAAWE,QAAAA,QAAQ,EAAE,CAAC,GAAGF,IAAI,CAACE,QAAT,EAAmBpB,OAAO,CAACU,EAA3B;AAArB,OAAf;AACAF,MAAAA,QAAQ,CAACd,aAAa,CAACyB,MAAD,CAAd,CAAR;AACD;AAVkB,GAAf,CAAN,EAFqB,EAcvB,CAAChB,IAAD,CAduB,CAAzB;AAiBA,QAAMkB,QAAQ,GAAGnC,WAAW,CACzBc,OAAD,IACEC,MAAM,CAACT,eAAD,EAAkB;AACtBkB,IAAAA,EAAE,EAAEV,OAAO,CAACU,EADU;AAEtBN,IAAAA,MAFsB;AAGtBkB,IAAAA,QAAQ,EAAExB,OAAO,CAACyB;AAHI,GAAlB,CAAN,EAFwB,EAO1B,CAACpB,IAAD,CAP0B,CAA5B;AASA,sBACE,oBAAC,WAAD;AACE,IAAA,OAAO,EAAEH,OADX;AAEE,IAAA,KAAK,EAAE,CAAC,EAACG,IAAD,aAACA,IAAD,gCAACA,IAAI,CAAEQ,OAAP,0CAAC,cAAea,IAAf,CAAqBpB,MAAD,IAAY,CAAC,EAACA,MAAD,aAACA,MAAD,eAACA,MAAM,CAAEgB,QAAR,CAAiBI,IAAjB,CAAuBN,IAAD,IAAUA,IAAI,KAAKA,IAAI,CAACR,EAA9C,CAAD,CAAjC,CAAD,CAFV;AAGE,IAAA,KAAK,EAAE,CAAC,CAAC,CAACV,OAAO,CAACyB,MAAR,IAAkB,EAAnB,EAAuBD,IAAvB,CAA6BN,IAAD,IAAUA,IAAI,CAACQ,KAAL,KAAevB,IAAI,CAACuB,KAA1D,CAHX;AAIE,IAAA,MAAM,EACJvB,IAAI,CAACuB,KAAL,IACAxB,MAAM,CAACJ,OAAO,CAAC6B,YAAT,EAAuB;AAAEjB,MAAAA,EAAE,EAAEV,OAAO,CAACU;AAAd,KAAvB,EAA4CkB,QAAD,IAC/CpB,QAAQ,CAACb,UAAU,CAACiC,QAAQ,CAACC,IAAT,CAAcC,WAAf,CAAX,CADJ,CANV;AAUE,IAAA,KAAK,EAAE3B,IAAI,CAACuB,KAAL,KAAe,MAAMjB,KAAK,CAACT,OAAD,CAA1B,CAVT;AAWE,IAAA,QAAQ,EAAEG,IAAI,CAACuB,KAAL,KAAe,MAAML,QAAQ,CAACrB,OAAD,CAA7B,CAXZ;AAYE,IAAA,WAAW,EAAEC,MAAM,CAACZ,eAAD,EAAkB;AAAEc,MAAAA,IAAI,EAAEH;AAAR,KAAlB,CAZrB;AAaE,IAAA,aAAa,EAAEC,MAAM,CAACX,UAAD,EAAa;AAChCoB,MAAAA,EAAE,sBAAEV,OAAO,CAAC+B,OAAV,qDAAE,iBAAiBL,KADW;AAEhCM,MAAAA,IAAI,EAAE7B,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEuB,KAFoB;AAGhCO,MAAAA,SAAS,EAAEjC,OAAO,CAACkC,MAHa;AAIhCC,MAAAA,KAAK,EAAErC,OAAO,CAACsC,cAJiB;AAKhCd,MAAAA,QAAQ,EAAExB,OAAO,CAACuC;AALc,KAAb,CAbvB;AAoBE,IAAA,iBAAiB,EAAE,CAACC,CAAD,EAAIC,GAAJ,KACjBtC,MAAM,CAACR,mBAAD,EAAsB;AAC1B+C,MAAAA,WAAW,EAAE,CAACxC,OAAO,CAACyC,OAAT,EAAkB,GAAGzC,OAAO,CAACwC,WAA7B,CADa;AAE1BD,MAAAA;AAF0B,KAAtB,CAAN,EArBJ;AA0BE,IAAA,WAAW;AA1Bb,IADF;AA8BD,CAlEM;;GAAMxC,W;UACIH,S,EACAC,S,EACUT,W,EAKRD,W;;;KARNY,W;AAoEb,eAAeA,WAAf","sourcesContent":["import React, { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { onUserAboutMore, onUserLink } from '../../../store/helpers/user'\nimport { onProjectAdd, onProjectRemove, onProjectScreenshot } from '../../../store/helpers/project'\nimport { setUserFolder, updateUser } from '../../../store/actions/user'\nimport { useHelper } from '../../../hooks/useHelper'\nimport { useMutate } from '../../../hooks/useMutate'\nimport queries from '../../../graphql/queries'\n\nexport const ProjectCard = ({ project }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder,\n    search: state.root.search\n  }))\n  const dispatch = useDispatch()\n\n  const onAdd = useCallback(\n    (project) =>\n      recall(onProjectAdd, {\n        id: project.id,\n        folders: user?.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        },\n        callback: (item) => {\n          const result = { ...item, projects: [...item.projects, project.id] }\n          dispatch(setUserFolder(result))\n        }\n      })(),\n    [user]\n  )\n\n  const onRemove = useCallback(\n    (project) =>\n      recall(onProjectRemove, {\n        id: project.id,\n        folder,\n        mutation: queries.REMOVE_USER_PROJECT\n      })(),\n    [user]\n  )\n  return (\n    <ProjectCard\n      project={project}\n      added={!!user?.folders?.find((folder) => !!folder?.projects.find((item) => item === item.id))}\n      liked={!!(project.rating || []).find((item) => item.email === user.email)}\n      onLike={\n        user.email &&\n        mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n          dispatch(updateUser(response.data.likeProject))\n        )\n      }\n      onAdd={user.email && (() => onAdd(project))}\n      onRemove={user.email && (() => onRemove(project))}\n      onAboutMore={recall(onUserAboutMore, { user: project })}\n      onCompanyLink={recall(onUserLink, {\n        id: project.company?.email,\n        auth: user?.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      })}\n      onScreenshotClick={(_, key) =>\n        recall(onProjectScreenshot, {\n          screenshots: [project.preview, ...project.screenshots],\n          key\n        })()\n      }\n      withSocials\n    />\n  )\n}\n\nexport default ProjectCard\n"]},"metadata":{},"sourceType":"module"}
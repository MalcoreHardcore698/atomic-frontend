{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Notice from '../../atomic-ui/components/Notice';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { useUpdateEffect } from '../../hooks/useUpdateEffect';\nimport queries from '../../graphql/queries';\nimport { Loader } from '../Styled';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"Notifications__Wrap\",\n  componentId: \"sc-1luuv3g-0\"\n})([\"\"]);\n_c = Wrap;\nexport const Notifications = ({\n  user,\n  appearance\n}) => {\n  _s();\n\n  const [notifications, setNotifications] = useState([]);\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_NOTIFICATIONS, {\n    variables: {\n      email: user\n    }\n  });\n  useUpdateEffect(data, loading, 'getNotifications', setNotifications);\n  return /*#__PURE__*/React.createElement(Wrap, null, notifications && notifications.length > 0 ? notifications.map(notification => {\n    var _notification$author, _notification$author$;\n\n    return /*#__PURE__*/React.createElement(Notice, _extends({\n      key: notification.id\n    }, notification.author ? {\n      img: ((_notification$author = notification.author) === null || _notification$author === void 0 ? void 0 : (_notification$author$ = _notification$author.avatar) === null || _notification$author$ === void 0 ? void 0 : _notification$author$.path) || '/images/avatar-default.png'\n    } : {\n      icon: 'infoCircle'\n    }, {\n      title: notification.title,\n      message: notification.message,\n      date: notification.createdAt,\n      appearance: appearance\n    }));\n  }) : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0443\\u0447\\u0430\\u0441\\u0442\\u043D\\u0438\\u043A\\u0430\\u0445\") : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      textAlign: 'center'\n    },\n    width: '100%'\n  }, \"\\u0423\\u0432\\u0435\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u0438\\u0439 \\u043D\\u0435\\u0442\"));\n};\n\n_s(Notifications, \"WVOXbDNZHAS9JzKqWw1AmI+ZJGg=\", false, function () {\n  return [useQuery, useUpdateEffect];\n});\n\n_c2 = Notifications;\nNotifications.defaultProps = {\n  appearance: 'default'\n};\nexport default Notifications;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Notifications\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/Notifications/index.js"],"names":["React","useState","useQuery","styled","Column","Alert","Notice","Spinner","useUpdateEffect","queries","Loader","Wrap","Notifications","user","appearance","notifications","setNotifications","data","loading","error","GET_NOTIFICATIONS","variables","email","length","map","notification","id","author","img","avatar","path","icon","title","message","createdAt","width","textAlign","defaultProps"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AAEA,SAASC,eAAT,QAAgC,6BAAhC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,MAAT,QAAuB,WAAvB;AAEA,OAAO,MAAMC,IAAI,GAAGR,MAAM,CAACC,MAAD,CAAT;AAAA;AAAA;AAAA,QAAV;KAAMO,I;AAEb,OAAO,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA0B;AAAA;;AACrD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAM;AAAEgB,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BjB,QAAQ,CAACO,OAAO,CAACW,iBAAT,EAA4B;AACnEC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAET;AADE;AADwD,GAA5B,CAAzC;AAMAL,EAAAA,eAAe,CAACS,IAAD,EAAOC,OAAP,EAAgB,kBAAhB,EAAoCF,gBAApC,CAAf;AAEA,sBACE,oBAAC,IAAD,QACGD,aAAa,IAAIA,aAAa,CAACQ,MAAd,GAAuB,CAAxC,GACCR,aAAa,CAACS,GAAd,CAAmBC,YAAD;AAAA;;AAAA,wBAChB,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEA,YAAY,CAACC;AADpB,OAEOD,YAAY,CAACE,MAAb,GACD;AACEC,MAAAA,GAAG,EAAE,yBAAAH,YAAY,CAACE,MAAb,uGAAqBE,MAArB,gFAA6BC,IAA7B,KAAqC;AAD5C,KADC,GAID;AACEC,MAAAA,IAAI,EAAE;AADR,KANN;AASE,MAAA,KAAK,EAAEN,YAAY,CAACO,KATtB;AAUE,MAAA,OAAO,EAAEP,YAAY,CAACQ,OAVxB;AAWE,MAAA,IAAI,EAAER,YAAY,CAACS,SAXrB;AAYE,MAAA,UAAU,EAAEpB;AAZd,OADgB;AAAA,GAAlB,CADD,GAiBGI,OAAO,gBACT,oBAAC,MAAD,qBACE,oBAAC,OAAD,OADF,CADS,GAIPC,KAAK,gBACP,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAE,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEgB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B;AAAnC,2QADO,gBAKP,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEA,MAAAA,SAAS,EAAE;AAAb,KAAd;AAAuC,IAAA,KAAK,EAAE;AAA9C,6FA3BJ,CADF;AAkCD,CA7CM;;GAAMxB,a;UAGsBV,Q,EAMjCM,e;;;MATWI,a;AA+CbA,aAAa,CAACyB,YAAd,GAA6B;AAC3BvB,EAAAA,UAAU,EAAE;AADe,CAA7B;AAIA,eAAeF,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport styled from 'styled-components'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Notice from '../../atomic-ui/components/Notice'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { useUpdateEffect } from '../../hooks/useUpdateEffect'\nimport queries from '../../graphql/queries'\nimport { Loader } from '../Styled'\n\nexport const Wrap = styled(Column)``\n\nexport const Notifications = ({ user, appearance }) => {\n  const [notifications, setNotifications] = useState([])\n\n  const { data, loading, error } = useQuery(queries.GET_NOTIFICATIONS, {\n    variables: {\n      email: user\n    }\n  })\n\n  useUpdateEffect(data, loading, 'getNotifications', setNotifications)\n\n  return (\n    <Wrap>\n      {notifications && notifications.length > 0 ? (\n        notifications.map((notification) => (\n          <Notice\n            key={notification.id}\n            {...(notification.author\n              ? {\n                  img: notification.author?.avatar?.path || '/images/avatar-default.png'\n                }\n              : {\n                  icon: 'infoCircle'\n                })}\n            title={notification.title}\n            message={notification.message}\n            date={notification.createdAt}\n            appearance={appearance}\n          />\n        ))\n      ) : loading ? (\n        <Loader>\n          <Spinner />\n        </Loader>\n      ) : error ? (\n        <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n          Упс! Не удалось загрузить информацию о участниках\n        </Alert>\n      ) : (\n        <Alert style={{ textAlign: 'center' }} width={'100%'}>\n          Уведомлений нет\n        </Alert>\n      )}\n    </Wrap>\n  )\n}\n\nNotifications.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Notifications\n"]},"metadata":{},"sourceType":"module"}
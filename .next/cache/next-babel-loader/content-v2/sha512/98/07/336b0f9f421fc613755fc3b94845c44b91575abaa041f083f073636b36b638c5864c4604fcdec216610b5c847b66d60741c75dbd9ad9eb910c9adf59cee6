{"ast":null,"code":"import React from 'react';\nimport RoleForm from '../../components/FormRole';\nimport DeleteForm from '../../components/FormDelete';\nimport RoleView from '../../components/RoleView';\nimport RoleCard from '../../components/RoleCard';\nimport { setDocuments } from '../actions/documents';\nimport { setDrawer } from '../actions/drawer';\nimport { setItem } from '../actions/snacks';\nexport function onRoleLink(dispatch, props) {\n  const {\n    id\n  } = props;\n  dispatch(setDrawer({\n    icon: 'lock',\n    title: 'Роль',\n    content: /*#__PURE__*/React.createElement(RoleView, {\n      role: id,\n      appearance: 'clear'\n    })\n  }));\n}\nexport function onRoleCreate(dispatch, props) {\n  const {\n    permissions,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'lock',\n    title: 'Создание роли',\n    content: /*#__PURE__*/React.createElement(RoleForm, {\n      mutation: mutation,\n      permissions: permissions,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          const roles = await action({\n            variables: {\n              input: {\n                name: form.name,\n                permissions: form.permissions.map(permission => permission.value)\n              }\n            }\n          });\n          dispatch(setDocuments(roles.data.createRole));\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Роль успешно создана'\n          }));\n        } catch (_unused) {\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось создать роль'\n          }));\n        }\n      }\n    })\n  }));\n}\nexport function onRoleEdit(dispatch, props) {\n  const {\n    role,\n    permissions,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'lock',\n    title: 'Редактирование роли',\n    content: /*#__PURE__*/React.createElement(RoleForm, {\n      role: role,\n      mutation: mutation,\n      permissions: permissions,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          const roles = await action({\n            variables: {\n              id: role.id,\n              input: {\n                name: form.name,\n                permissions: form.permissions.map(permission => permission.value)\n              }\n            }\n          });\n          dispatch(setDocuments(roles.data.updateRole));\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Роль успешно отредактирована'\n          }));\n        } catch (_unused2) {\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отредактировать роль'\n          }));\n        }\n      }\n    })\n  }));\n}\nexport function onRoleDelete(dispatch, props) {\n  const {\n    id,\n    role,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление роли',\n    content: /*#__PURE__*/React.createElement(DeleteForm, {\n      mutation: mutation,\n      appearance: 'clear',\n      onCancel: () => dispatch(setDrawer(null)),\n      onSubmit: async (_, action) => {\n        try {\n          const roles = await action({\n            variables: {\n              id\n            }\n          });\n          dispatch(setDocuments(roles.data.deleteRole));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Роль успешно удалена'\n          }));\n        } catch (_unused3) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось удалить роль'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n        }\n      }\n    }, /*#__PURE__*/React.createElement(RoleCard, {\n      role: role,\n      appearance: 'clear'\n    }))\n  }));\n}","map":{"version":3,"sources":["/Users/alicefromwonderland/Desktop/branches/atomic/atomic-frontend/store/helpers/role.js"],"names":["React","RoleForm","DeleteForm","RoleView","RoleCard","setDocuments","setDrawer","setItem","onRoleLink","dispatch","props","id","icon","title","content","onRoleCreate","permissions","mutation","form","action","roles","variables","input","name","map","permission","value","data","createRole","type","message","onRoleEdit","role","updateRole","onRoleDelete","color","_","deleteRole"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport RoleForm from '../../components/FormRole'\nimport DeleteForm from '../../components/FormDelete'\nimport RoleView from '../../components/RoleView'\nimport RoleCard from '../../components/RoleCard'\nimport { setDocuments } from '../actions/documents'\nimport { setDrawer } from '../actions/drawer'\nimport { setItem } from '../actions/snacks'\n\nexport function onRoleLink(dispatch, props) {\n  const { id } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'lock',\n      title: 'Роль',\n      content: <RoleView role={id} appearance={'clear'} />\n    })\n  )\n}\n\nexport function onRoleCreate(dispatch, props) {\n  const { permissions, mutation } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'lock',\n      title: 'Создание роли',\n      content: (\n        <RoleForm\n          mutation={mutation}\n          permissions={permissions}\n          appearance={'clear'}\n          onSubmit={async (form, action) => {\n            try {\n              const roles = await action({\n                variables: {\n                  input: {\n                    name: form.name,\n                    permissions: form.permissions.map((permission) => permission.value)\n                  }\n                }\n              })\n              dispatch(setDocuments(roles.data.createRole))\n              dispatch(setDrawer(null))\n              dispatch(\n                setItem({\n                  type: 'success',\n                  message: 'Роль успешно создана'\n                })\n              )\n            } catch {\n              dispatch(setDrawer(null))\n              dispatch(\n                setItem({\n                  type: 'error',\n                  message: 'Не удалось создать роль'\n                })\n              )\n            }\n          }}\n        />\n      )\n    })\n  )\n}\n\nexport function onRoleEdit(dispatch, props) {\n  const { role, permissions, mutation } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'lock',\n      title: 'Редактирование роли',\n      content: (\n        <RoleForm\n          role={role}\n          mutation={mutation}\n          permissions={permissions}\n          appearance={'clear'}\n          onSubmit={async (form, action) => {\n            try {\n              const roles = await action({\n                variables: {\n                  id: role.id,\n                  input: {\n                    name: form.name,\n                    permissions: form.permissions.map((permission) => permission.value)\n                  }\n                }\n              })\n              dispatch(setDocuments(roles.data.updateRole))\n              dispatch(setDrawer(null))\n              dispatch(\n                setItem({\n                  type: 'success',\n                  message: 'Роль успешно отредактирована'\n                })\n              )\n            } catch {\n              dispatch(setDrawer(null))\n              dispatch(\n                setItem({\n                  type: 'error',\n                  message: 'Не удалось отредактировать роль'\n                })\n              )\n            }\n          }}\n        />\n      )\n    })\n  )\n}\n\nexport function onRoleDelete(dispatch, props) {\n  const { id, role, mutation } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'delete',\n      color: 'red',\n      title: 'Удаление роли',\n      content: (\n        <DeleteForm\n          mutation={mutation}\n          appearance={'clear'}\n          onCancel={() => dispatch(setDrawer(null))}\n          onSubmit={async (_, action) => {\n            try {\n              const roles = await action({\n                variables: { id }\n              })\n              dispatch(setDocuments(roles.data.deleteRole))\n              dispatch(\n                setItem({\n                  type: 'success',\n                  message: 'Роль успешно удалена'\n                })\n              )\n            } catch {\n              dispatch(\n                setItem({\n                  type: 'error',\n                  message: 'Не удалось удалить роль'\n                })\n              )\n            } finally {\n              dispatch(setDrawer(null))\n            }\n          }}>\n          <RoleCard role={role} appearance={'clear'} />\n        </DeleteForm>\n      )\n    })\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
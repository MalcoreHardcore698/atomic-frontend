{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport generator from 'generate-password';\nimport Container from '../../atomic-ui/components/Container';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nimport Switch from '../../atomic-ui/components/Switch';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Form from '../Form';\nvar ACCOUNT_TYPES = [{\n  label: 'Физ. лицо',\n  value: 'INDIVIDUAL',\n  tooltip: 'Любое лицо'\n}, {\n  label: 'Оф. лицо',\n  value: 'OFICIAL',\n  tooltip: 'Государственный деятель'\n}, {\n  label: 'Юр. лицо',\n  value: 'ENTITY',\n  tooltip: 'Организация'\n}];\nexport var AdaptiveRow = styled(Row).withConfig({\n  displayName: \"FormRegister__AdaptiveRow\",\n  componentId: \"sc-56g8v2-0\"\n})([\"@media only screen and (max-width:575px){flex-direction:column;grid-gap:var(--default-gap);\", \"{flex-grow:1;button{width:100%;}}}\"], WrapTooltip);\n_c = AdaptiveRow;\nexport var Register = function Register(_ref) {\n  _s2();\n\n  var _ref$title = _ref.title,\n      title = _ref$title === void 0 ? true : _ref$title,\n      accountTypes = _ref.accountTypes,\n      mutation = _ref.mutation,\n      appearance = _ref.appearance,\n      className = _ref.className,\n      onLogin = _ref.onLogin,\n      _onSubmit = _ref.onSubmit;\n\n  var _useState = useState(ACCOUNT_TYPES[0]),\n      _useState2 = _slicedToArray(_useState, 2),\n      typeAccount = _useState2[0],\n      setTypeAccount = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isShowPassword = _useState4[0],\n      setShowPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      generatedPassword = _useState6[0],\n      setGeneratedPassword = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      disabled = _useState8[0],\n      setDisabled = _useState8[1];\n\n  var onTogglePassword = function onTogglePassword() {\n    return setShowPassword(!isShowPassword);\n  };\n\n  var onGeneratePassword = function onGeneratePassword() {\n    var password = generator.generate();\n    setGeneratedPassword(password);\n  };\n\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: function onSubmit(form, action) {\n      return _onSubmit(_objectSpread(_objectSpread({}, form), {}, {\n        account: typeAccount\n      }), action);\n    }\n  }, function (_ref2) {\n    var register = _ref2.register,\n        loading = _ref2.loading,\n        errors = _ref2.errors,\n        getValues = _ref2.getValues;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, title && /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Title, {\n      style: {\n        textAlign: 'center'\n      },\n      tag: 'h4'\n    }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0439\\u0442\\u0435 \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442\")), (errors.name || errors.tin || errors.email || errors.phone || errors.password || errors.confirmPassword || errors.confirmPassword) && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, errors.name && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u043E \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u043E \\u0424\\u0418\\u041E\"), errors.tin && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0418\\u041D\\u041D\"), errors.email && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u0430 \\u044D\\u043B. \\u043F\\u043E\\u0447\\u0442\\u0430\"), errors.phone && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u0430 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\"), errors.password && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\"), !errors.confirmPassword && errors.confirmPassword && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u0438 \\u043D\\u0435 \\u0441\\u043E\\u0432\\u043F\\u0430\\u0434\\u0430\\u044E\\u0442\")), /*#__PURE__*/React.createElement(Switch, {\n      onChange: function onChange(item) {\n        return setTypeAccount(item);\n      },\n      defaultValue: getValues('account') || typeAccount,\n      options: (accountTypes === null || accountTypes === void 0 ? void 0 : accountTypes.length) > 1 && accountTypes || ACCOUNT_TYPES,\n      disabled: loading,\n      stretch: true\n    }), /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'name',\n      ref: register({\n        required: true\n      }),\n      onChange: function onChange() {\n        return setDisabled(false);\n      },\n      defaultValue: getValues('name'),\n      placeholder: typeAccount.value === 'ENTITY' ? 'Название компании' : 'ФИО',\n      appearance: 'ghost',\n      disabled: loading\n    }), typeAccount.value !== 'INDIVIDUAL' && /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'tin',\n      ref: register({\n        required: true\n      }),\n      onChange: function onChange() {\n        return setDisabled(false);\n      },\n      defaultValue: getValues('tin'),\n      appearance: 'ghost',\n      placeholder: 'ИНН',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: 'email',\n      name: 'email',\n      ref: register({\n        required: true,\n        pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      }),\n      onChange: function onChange() {\n        return setDisabled(false);\n      },\n      defaultValue: getValues('email'),\n      placeholder: 'Эл. почта',\n      appearance: 'ghost',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: 'tel',\n      name: 'phone',\n      ref: register({\n        required: true,\n        maxLength: 11,\n        minLength: 8\n      }),\n      onChange: function onChange() {\n        return setDisabled(false);\n      },\n      defaultValue: getValues('phone'),\n      appearance: 'ghost',\n      placeholder: 'Телефон',\n      disabled: loading\n    })), /*#__PURE__*/React.createElement(AdaptiveRow, null, /*#__PURE__*/React.createElement(Column, {\n      style: {\n        flexGrow: 1\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: isShowPassword ? 'text' : 'password',\n      name: 'password',\n      ref: register({\n        required: true,\n        minLength: 8\n      }),\n      defaultValue: generatedPassword || getValues('password'),\n      appearance: 'ghost',\n      placeholder: 'Пароль',\n      onChange: function onChange() {\n        setGeneratedPassword('');\n        setDisabled(false);\n      },\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: isShowPassword ? 'text' : 'password',\n      name: 'confirmPassword',\n      ref: register({\n        required: true,\n        minLength: 8\n      }),\n      defaultValue: generatedPassword || getValues('confirmPassword'),\n      appearance: 'ghost',\n      placeholder: 'Подтвердить',\n      onChange: function onChange() {\n        setGeneratedPassword('');\n        setDisabled(false);\n      },\n      disabled: loading\n    })), /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Tooltip, {\n      text: 'Генерация пароля'\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: 'button',\n      kind: 'icon',\n      disabled: loading,\n      onClick: function onClick() {\n        onGeneratePassword();\n        setDisabled(false);\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      icon: 'password',\n      stroke: 'white'\n    }))), /*#__PURE__*/React.createElement(Tooltip, {\n      text: 'Отображение пароля'\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: 'button',\n      kind: 'icon',\n      disabled: loading,\n      onClick: onTogglePassword,\n      revert: !isShowPassword\n    }, /*#__PURE__*/React.createElement(Icon, {\n      icon: isShowPassword ? 'hide' : 'show',\n      stroke: isShowPassword ? 'white' : 'var(--default-color-accent)'\n    }))))), /*#__PURE__*/React.createElement(Text, null, \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u043D\\u0435 \\u043C\\u0435\\u043D\\u0435\\u0435 \\u0432\\u043E\\u0441\\u044C\\u043C\\u0438 \\u0437\\u043D\\u0430\\u043A\\u043E\\u0432, \\u0432\\u043A\\u043B\\u044E\\u0447\\u0430\\u0442\\u044C \\u0431\\u0443\\u043A\\u0432\\u044B, \\u0446\\u0438\\u0444\\u0440\\u044B \\u0438 \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u044B\\u0435 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u044B\"), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'button',\n      disabled: loading,\n      onClick: onLogin\n    }, \"\\u0412\\u043E\\u0439\\u0442\\u0438\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: disabled || loading\n    }, \"\\u0414\\u0430\\u043B\\u0435\\u0435\")));\n  });\n};\n\n_s2(Register, \"XvFxiUFVGjC9p9AFCF9QZLt08DY=\");\n\n_c2 = Register;\nexport default Register;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AdaptiveRow\");\n$RefreshReg$(_c2, \"Register\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormRegister/index.js"],"names":["React","useState","styled","generator","Container","Row","Column","Title","Text","Input","Button","Tooltip","Wrap","WrapTooltip","Switch","Icon","Alert","Form","ACCOUNT_TYPES","label","value","tooltip","AdaptiveRow","Register","title","accountTypes","mutation","appearance","className","onLogin","onSubmit","typeAccount","setTypeAccount","isShowPassword","setShowPassword","generatedPassword","setGeneratedPassword","disabled","setDisabled","onTogglePassword","onGeneratePassword","password","generate","form","action","account","register","loading","errors","getValues","textAlign","name","tin","email","phone","confirmPassword","width","item","length","required","pattern","maxLength","minLength","flexGrow"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport generator from 'generate-password'\n\nimport Container from '../../atomic-ui/components/Container'\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip'\nimport Switch from '../../atomic-ui/components/Switch'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Alert from '../../atomic-ui/components/Alert'\n\nimport Form from '../Form'\n\nconst ACCOUNT_TYPES = [\n  { label: 'Физ. лицо', value: 'INDIVIDUAL', tooltip: 'Любое лицо' },\n  { label: 'Оф. лицо', value: 'OFICIAL', tooltip: 'Государственный деятель' },\n  { label: 'Юр. лицо', value: 'ENTITY', tooltip: 'Организация' }\n]\n\nexport const AdaptiveRow = styled(Row)`\n  @media only screen and (max-width: 575px) {\n    flex-direction: column;\n    grid-gap: var(--default-gap);\n\n    ${WrapTooltip} {\n      flex-grow: 1;\n\n      button {\n        width: 100%;\n      }\n    }\n  }\n`\n\nexport const Register = ({\n  title = true,\n  accountTypes,\n  mutation,\n  appearance,\n  className,\n  onLogin,\n  onSubmit\n}) => {\n  const [typeAccount, setTypeAccount] = useState(ACCOUNT_TYPES[0])\n  const [isShowPassword, setShowPassword] = useState(false)\n  const [generatedPassword, setGeneratedPassword] = useState('')\n  const [disabled, setDisabled] = useState(true)\n\n  const onTogglePassword = () => setShowPassword(!isShowPassword)\n\n  const onGeneratePassword = () => {\n    const password = generator.generate()\n    setGeneratedPassword(password)\n  }\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) => onSubmit({ ...form, account: typeAccount }, action)}>\n      {({ register, loading, errors, getValues }) => (\n        <React.Fragment>\n          {title && (\n            <Container>\n              <Title style={{ textAlign: 'center' }} tag={'h4'}>\n                Создайте аккаунт\n              </Title>\n            </Container>\n          )}\n\n          {(errors.name ||\n            errors.tin ||\n            errors.email ||\n            errors.phone ||\n            errors.password ||\n            errors.confirmPassword ||\n            errors.confirmPassword) && (\n            <Alert style={{ width: '100%' }} appearance={'error'}>\n              {errors.name && <p>Неверно указано или не указано ФИО</p>}\n              {errors.tin && <p>Неверно указан или не указан ИНН</p>}\n              {errors.email && <p>Неверно указан или не указана эл. почта</p>}\n              {errors.phone && <p>Неверно указан или не указана телефон</p>}\n              {errors.password && <p>Неверно указан или не указан пароль</p>}\n              {!errors.confirmPassword && errors.confirmPassword && <p>Пароли не совпадают</p>}\n            </Alert>\n          )}\n\n          <Switch\n            onChange={(item) => setTypeAccount(item)}\n            defaultValue={getValues('account') || typeAccount}\n            options={(accountTypes?.length > 1 && accountTypes) || ACCOUNT_TYPES}\n            disabled={loading}\n            stretch\n          />\n\n          <Column>\n            <Input\n              type={'text'}\n              name={'name'}\n              ref={register({ required: true })}\n              onChange={() => setDisabled(false)}\n              defaultValue={getValues('name')}\n              placeholder={typeAccount.value === 'ENTITY' ? 'Название компании' : 'ФИО'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n            {typeAccount.value !== 'INDIVIDUAL' && (\n              <Input\n                type={'text'}\n                name={'tin'}\n                ref={register({ required: true })}\n                onChange={() => setDisabled(false)}\n                defaultValue={getValues('tin')}\n                appearance={'ghost'}\n                placeholder={'ИНН'}\n                disabled={loading}\n              />\n            )}\n            <Input\n              type={'email'}\n              name={'email'}\n              ref={register({\n                required: true,\n                pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n              })}\n              onChange={() => setDisabled(false)}\n              defaultValue={getValues('email')}\n              placeholder={'Эл. почта'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n            <Input\n              type={'tel'}\n              name={'phone'}\n              ref={register({ required: true, maxLength: 11, minLength: 8 })}\n              onChange={() => setDisabled(false)}\n              defaultValue={getValues('phone')}\n              appearance={'ghost'}\n              placeholder={'Телефон'}\n              disabled={loading}\n            />\n          </Column>\n\n          <AdaptiveRow>\n            <Column style={{ flexGrow: 1 }}>\n              <Input\n                type={isShowPassword ? 'text' : 'password'}\n                name={'password'}\n                ref={register({ required: true, minLength: 8 })}\n                defaultValue={generatedPassword || getValues('password')}\n                appearance={'ghost'}\n                placeholder={'Пароль'}\n                onChange={() => {\n                  setGeneratedPassword('')\n                  setDisabled(false)\n                }}\n                disabled={loading}\n              />\n              <Input\n                type={isShowPassword ? 'text' : 'password'}\n                name={'confirmPassword'}\n                ref={register({ required: true, minLength: 8 })}\n                defaultValue={generatedPassword || getValues('confirmPassword')}\n                appearance={'ghost'}\n                placeholder={'Подтвердить'}\n                onChange={() => {\n                  setGeneratedPassword('')\n                  setDisabled(false)\n                }}\n                disabled={loading}\n              />\n            </Column>\n            <Column>\n              <Tooltip text={'Генерация пароля'}>\n                <Button\n                  type={'button'}\n                  kind={'icon'}\n                  disabled={loading}\n                  onClick={() => {\n                    onGeneratePassword()\n                    setDisabled(false)\n                  }}>\n                  <Icon icon={'password'} stroke={'white'} />\n                </Button>\n              </Tooltip>\n              <Tooltip text={'Отображение пароля'}>\n                <Button\n                  type={'button'}\n                  kind={'icon'}\n                  disabled={loading}\n                  onClick={onTogglePassword}\n                  revert={!isShowPassword}>\n                  <Icon\n                    icon={isShowPassword ? 'hide' : 'show'}\n                    stroke={isShowPassword ? 'white' : 'var(--default-color-accent)'}\n                  />\n                </Button>\n              </Tooltip>\n            </Column>\n          </AdaptiveRow>\n\n          <Text>\n            Пароль должен содержать не менее восьми знаков, включать буквы, цифры и специальные\n            символы\n          </Text>\n\n          <Row>\n            <Button style={{ flexGrow: 1 }} type={'button'} disabled={loading} onClick={onLogin}>\n              Войти\n            </Button>\n            <Button style={{ flexGrow: 1 }} type={'submit'} disabled={disabled || loading}>\n              Далее\n            </Button>\n          </Row>\n        </React.Fragment>\n      )}\n    </Form>\n  )\n}\n\nexport default Register\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Table, { Wrap as WrapTable } from '../../atomic-ui/components/Table';\nimport { CentralAlert, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"width:100%;\", \"{width:calc(100vw - 280px);}\"], WrapTable);\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const Loader = () => /*#__PURE__*/React.createElement(LowerLoader, {\n  key: 'loader'\n}, /*#__PURE__*/React.createElement(Spinner, null));\nexport const Content = ({\n  type,\n  search,\n  params,\n  refetch,\n  loading,\n  template,\n  component,\n  variables,\n  limit = 6,\n  emptyMessage,\n  initialList,\n  initialDisplayMethod,\n  setCheckedList,\n  gridOptions,\n  withoutMore,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  var _router$query;\n\n  const router = useRouter();\n  const displayMethod = useSelector(state => state.root.displayMethod);\n  const [items, setItems] = useState(initialList || []);\n  const [page, setPage] = useState(Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n\n  const loadMore = async () => {\n    if (!isEnd && !loading && refetch) {\n      setIsLoading(true);\n      const response = await refetch({ ...variables,\n        ...params,\n        offset: limit * page,\n        search,\n        limit\n      });\n\n      if (response !== null && response !== void 0 && response.data) {\n        const list = response.data[type];\n        if (list.length === 0) setIsEnd(true);\n        if (list.length > 0) setItems(prev => [...prev, ...list]);\n        setPage(prev => prev + 1);\n      }\n\n      setIsLoading(false);\n    }\n  }; // Necessary for determination checkList outside [content]\n\n\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) setCheckedList(items);\n  }, [items, setCheckedList]);\n  return /*#__PURE__*/React.createElement(Wrap, null, (initialDisplayMethod || displayMethod) === 'grid' && /*#__PURE__*/React.createElement(Grid, gridOptions, items.map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n    key: item.id || item.email\n  }, component(item)))), (initialDisplayMethod || displayMethod) === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: items,\n    template: template,\n    onChecked: onChecked,\n    onClick: onClick,\n    onEdit: onEdit,\n    onDelete: onDelete\n  }), (loading || isLoading) && !withoutMore && /*#__PURE__*/React.createElement(Loader, null), !loading && !isLoading && items.length === 0 && /*#__PURE__*/React.createElement(CentralAlert, null, emptyMessage), items.length > 0 && !isEnd && !loading && !withoutMore && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      justifyContent: 'center'\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    disabled: isLoading,\n    style: {\n      width: 245\n    },\n    onClick: loadMore\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435\"))));\n};\nexport const List = ({\n  type,\n  query,\n  limit,\n  template,\n  component,\n  variables,\n  startOffset,\n  emptyMessage,\n  initialDisplayMethod,\n  setCheckedList,\n  withoutSearch,\n  withoutMore,\n  gridOptions,\n  onChecked,\n  onDelete,\n  onClick,\n  onEdit\n}) => {\n  const {\n    search,\n    params\n  } = useSelector(state => ({\n    search: withoutSearch ? '' : state.root.search,\n    params: withoutSearch ? {} : state.root.params\n  }));\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(query, {\n    variables: { ...variables,\n      ...params,\n      offset: startOffset,\n      search,\n      limit\n    }\n  });\n  if (loading) return /*#__PURE__*/React.createElement(Loader, null);\n  return /*#__PURE__*/React.createElement(Content, {\n    type: type,\n    limit: limit,\n    query: query,\n    search: search,\n    params: params,\n    refetch: refetch,\n    template: template,\n    component: component,\n    emptyMessage: emptyMessage,\n    initialList: type && data && data[type],\n    initialDisplayMethod: initialDisplayMethod,\n    setCheckedList: setCheckedList,\n    withoutMore: withoutMore,\n    gridOptions: gridOptions,\n    onChecked: onChecked,\n    onDelete: onDelete,\n    onClick: onClick,\n    onEdit: onEdit\n  });\n};\nList.defaultProps = {\n  startOffset: 0\n};\nexport default List;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { ResponsiveLine } from '@nivo/line';\nimport Column from '../Column';\nexport const Wrap = styled(Column)`\n  display: flex;\n  flex-direction: column;\n  grid-gap: 5px;\n  padding: var(--default-gap);\n  flex-grow: 1;\n\n  ${({\n  appearance\n}) => appearance === 'default' && css`\n      border: 1px solid var(--surface-border);\n      background: var(--surface-background);\n      box-shadow: 1px solid var(--surface-shadow);\n      border-radius: var(--surface-border-radius);\n    `}\n`;\nexport const Tooltip = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 7px 10px;\n  background: rgba(0, 0, 0, 0.7);\n  border-radius: var(--surface-border-radius);\n  font-size: var(--font-size-s);\n  line-height: 14px;\n  color: white;\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: calc(50% - 6px);\n    bottom: -6px;\n    width: 0;\n    height: 0;\n    border-left: 6px solid transparent;\n    border-right: 6px solid transparent;\n    border-top: 6px solid rgba(0, 0, 0, 0.7);\n  }\n`;\nexport const Chart = (_ref) => {\n  let {\n    data\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"data\"]);\n\n  return __jsx(Wrap, props, __jsx(ResponsiveLine, {\n    data: data,\n    tooltip: value => __jsx(Tooltip, null, value.point.serieId, \": \", value.point.data.y),\n    margin: {\n      top: 20,\n      right: 20,\n      bottom: 30,\n      left: 40\n    },\n    xScale: {\n      type: 'point'\n    },\n    yScale: {\n      type: 'linear',\n      min: 'auto',\n      max: 'auto',\n      stacked: true,\n      reverse: false\n    },\n    yFormat: ' >-.2f',\n    curve: 'natural',\n    axisTop: null,\n    axisRight: null,\n    axisBottom: {\n      orient: 'bottom',\n      tickSize: 0,\n      tickPadding: 15,\n      tickRotation: 0\n    },\n    axisLeft: {\n      orient: 'left',\n      tickSize: 0,\n      tickPadding: 15,\n      tickRotation: 0\n    },\n    pointColor: {\n      from: 'color',\n      modifiers: []\n    },\n    pointBorderWidth: 2,\n    pointBorderColor: {\n      from: 'serieColor',\n      modifiers: []\n    },\n    pointLabelYOffset: -12,\n    crosshairType: 'cross',\n    motionConfig: 'default',\n    enableCrosshair: false,\n    theme: {\n      axis: {\n        fontSize: '10px',\n        ticks: {\n          text: {\n            fill: '#999999'\n          }\n        }\n      }\n    },\n    useMesh: true\n  }));\n};\nChart.defaultProps = {\n  appearance: 'default'\n};\nexport default Chart;","map":null,"metadata":{},"sourceType":"module"}
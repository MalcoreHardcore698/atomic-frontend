{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Column from '../atomic-ui/components/Column';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Select from '../atomic-ui/components/Select';\nimport DashboardLayout from './dashboard';\nimport DefaultLayout from '../layouts/default';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport HandleBar from '../components/HandleBar';\nimport { LowerLoader } from '../components/Styled';\nimport { setSearch } from '../store/actions/root';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"content__Wrap\",\n  componentId: \"sc-1afm75p-0\"\n})([\"margin-top:120px;margin-bottom:80px;\", \" @media only screen and (max-width:480px){margin-top:0;}\"], ({\n  clear\n}) => clear && css([\"margin:0;\"]));\n\nconst ContentLayout = ({\n  title,\n  store,\n  query,\n  handle,\n  filters,\n  options,\n  scaffold,\n  dashboard,\n  variables = {},\n  initialize,\n  children\n}) => {\n  const router = useRouter();\n  const search = useSelector(state => state.root.search);\n  const Layout = dashboard ? DashboardLayout : DefaultLayout;\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [documents, setDocuments] = useState((store === null || store === void 0 ? void 0 : store.documents) || []);\n  const [isEnd, setIsEnd] = useState(false);\n  const pageStart = useMemo(() => {\n    var _router$query;\n\n    return Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1;\n  }, [router]);\n  const dispatch = useDispatch();\n  const [loadDocumentsBySearch, {\n    data: dataBySearch,\n    loading: loadingBySearch,\n    refetch: refetchBySearch\n  }] = useLazyQuery(query);\n  const [loadDocuments, {\n    data,\n    loading,\n    refetch\n  }] = useLazyQuery(query);\n\n  const getFilters = () => {\n    return filters.map(filter => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return /*#__PURE__*/React.createElement(DatePicker, {\n            key: v4(),\n            value: date,\n            placeholder: filter.placeholder || 'Дата публикации',\n            onChange: onChangeDate,\n            withNavigate: true\n          });\n\n        case 'SELECT':\n          return /*#__PURE__*/React.createElement(Select, {\n            key: v4(),\n            options: filter.options,\n            placeholder: filter.placeholder || 'Раздел',\n            selected: select,\n            onChange: item => onChangeSelect(item)\n          });\n\n        default:\n          return null;\n      }\n    });\n  };\n\n  const onSearch = value => {\n    setDocuments([]);\n\n    if (value) {\n      dispatch(setSearch(value));\n      loadDocumentsBySearch({\n        variables: { ...variables,\n          search: value\n        }\n      });\n    } else {\n      const result = { ...variables\n      };\n      dispatch(setSearch(null));\n      if (refetch) refetch(result);else loadDocuments({\n        variables: result\n      });\n    }\n  };\n\n  const loadMore = async () => {\n    if (search && refetchBySearch) {\n      await refetchBySearch(variables);\n    } else {\n      if (refetch) {\n        await refetch(variables);\n      } else {\n        await loadDocuments({\n          variables\n        });\n      }\n    }\n  };\n\n  const renderLoader = () => /*#__PURE__*/React.createElement(LowerLoader, {\n    key: 'loader'\n  }, /*#__PURE__*/React.createElement(Spinner, null));\n\n  useEffect(() => {\n    if (initialize) loadDocuments();\n  }, [initialize]);\n  useEffect(() => {\n    if (search) onSearch(search);\n  }, [search]);\n  useEffect(() => {\n    const commonList = !search && !loading && data;\n    const searchList = search && !loadingBySearch && dataBySearch;\n    const resultList = commonList || searchList;\n\n    if (resultList) {\n      const list = resultList[Object.keys(resultList)[0]];\n      if (list.length > 0) setDocuments(list);\n      if (list.length === 0) setIsEnd(true);\n    }\n  }, [search, loading, loadingBySearch, data, dataBySearch, setIsEnd]);\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: title,\n    scaffold: scaffold\n  }, /*#__PURE__*/React.createElement(Wrap, {\n    clear: scaffold || dashboard\n  }, !scaffold && !dashboard && /*#__PURE__*/React.createElement(SearchBar, {\n    defaultValue: search,\n    onChangeFilter: () => setVisibleFilter(!visibleFilter),\n    onSubmit: onSearch\n  }), dashboard && handle && /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: handle.icon,\n    buttonCreateText: handle.buttonCreateText,\n    onCreate: handle.onCreate,\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: handle.onChangeDisplayMethod\n  }), (filters || options) && /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: getFilters(),\n    options: options\n  }), search && loadingBySearch ? renderLoader() : search ? typeof children === 'function' ? React.createElement(children, {\n    documents\n  }) : children : /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: pageStart || 0,\n    loadMore: loadMore,\n    hasMore: !isEnd,\n    loader: renderLoader()\n  }, typeof children === 'function' ? React.createElement(children, {\n    documents\n  }) : children)));\n};\n\nexport default ContentLayout;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/layouts/content.js"],"names":["React","useState","useEffect","useMemo","useRouter","useSelector","useDispatch","useLazyQuery","InfiniteScroll","styled","css","v4","Column","DatePicker","Spinner","Select","DashboardLayout","DefaultLayout","FilterBar","SearchBar","HandleBar","LowerLoader","setSearch","Wrap","clear","ContentLayout","title","store","query","handle","filters","options","scaffold","dashboard","variables","initialize","children","router","search","state","root","Layout","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","documents","setDocuments","isEnd","setIsEnd","pageStart","Number","page","dispatch","loadDocumentsBySearch","data","dataBySearch","loading","loadingBySearch","refetch","refetchBySearch","loadDocuments","getFilters","map","filter","type","placeholder","item","onSearch","value","result","loadMore","renderLoader","commonList","searchList","resultList","list","Object","keys","length","icon","buttonCreateText","onCreate","onChangeDisplayMethod","createElement"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,EAAT,QAAmB,MAAnB;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AAEA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,MAAMC,IAAI,GAAGd,MAAM,CAACG,MAAD,CAAT;AAAA;AAAA;AAAA,yGAIN,CAAC;AAAEY,EAAAA;AAAF,CAAD,KACAA,KAAK,IACLd,GADK,eALC,CAAV;;AAeA,MAAMe,aAAa,GAAG,CAAC;AACrBC,EAAAA,KADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,KAHqB;AAIrBC,EAAAA,MAJqB;AAKrBC,EAAAA,OALqB;AAMrBC,EAAAA,OANqB;AAOrBC,EAAAA,QAPqB;AAQrBC,EAAAA,SARqB;AASrBC,EAAAA,SAAS,GAAG,EATS;AAUrBC,EAAAA,UAVqB;AAWrBC,EAAAA;AAXqB,CAAD,KAYhB;AACJ,QAAMC,MAAM,GAAGjC,SAAS,EAAxB;AACA,QAAMkC,MAAM,GAAGjC,WAAW,CAAEkC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,MAAvB,CAA1B;AACA,QAAMG,MAAM,GAAGR,SAAS,GAAGjB,eAAH,GAAqBC,aAA7C;AACA,QAAM,CAACyB,IAAD,EAAOC,YAAP,IAAuB1C,QAAQ,EAArC;AACA,QAAM,CAAC2C,MAAD,EAASC,cAAT,IAA2B5C,QAAQ,EAAzC;AACA,QAAM,CAAC6C,aAAD,EAAgBC,gBAAhB,IAAoC9C,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAAC+C,SAAD,EAAYC,YAAZ,IAA4BhD,QAAQ,CAAC,CAAA0B,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEqB,SAAP,KAAoB,EAArB,CAA1C;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBlD,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAMmD,SAAS,GAAGjD,OAAO,CAAC;AAAA;;AAAA,WAAMkD,MAAM,kBAAChB,MAAM,CAACT,KAAR,kDAAC,cAAc0B,IAAf,CAAN,IAA8B,CAApC;AAAA,GAAD,EAAwC,CAACjB,MAAD,CAAxC,CAAzB;AAEA,QAAMkB,QAAQ,GAAGjD,WAAW,EAA5B;AAEA,QAAM,CACJkD,qBADI,EAEJ;AAAEC,IAAAA,IAAI,EAAEC,YAAR;AAAsBC,IAAAA,OAAO,EAAEC,eAA/B;AAAgDC,IAAAA,OAAO,EAAEC;AAAzD,GAFI,IAGFvD,YAAY,CAACqB,KAAD,CAHhB;AAKA,QAAM,CAACmC,aAAD,EAAgB;AAAEN,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAhB,IAA8CtD,YAAY,CAACqB,KAAD,CAAhE;;AAEA,QAAMoC,UAAU,GAAG,MAAM;AACvB,WAAOlC,OAAO,CAACmC,GAAR,CAAaC,MAAD,IAAY;AAC7B,cAAQA,MAAM,CAACC,IAAf;AACE,aAAK,YAAL;AACE,8BACE,oBAAC,UAAD;AACE,YAAA,GAAG,EAAExD,EAAE,EADT;AAEE,YAAA,KAAK,EAAE+B,IAFT;AAGE,YAAA,WAAW,EAAEwB,MAAM,CAACE,WAAP,IAAsB,iBAHrC;AAIE,YAAA,QAAQ,EAAEzB,YAJZ;AAKE,YAAA,YAAY;AALd,YADF;;AASF,aAAK,QAAL;AACE,8BACE,oBAAC,MAAD;AACE,YAAA,GAAG,EAAEhC,EAAE,EADT;AAEE,YAAA,OAAO,EAAEuD,MAAM,CAACnC,OAFlB;AAGE,YAAA,WAAW,EAAEmC,MAAM,CAACE,WAAP,IAAsB,QAHrC;AAIE,YAAA,QAAQ,EAAExB,MAJZ;AAKE,YAAA,QAAQ,EAAGyB,IAAD,IAAUxB,cAAc,CAACwB,IAAD;AALpC,YADF;;AASF;AACE,iBAAO,IAAP;AAtBJ;AAwBD,KAzBM,CAAP;AA0BD,GA3BD;;AA6BA,QAAMC,QAAQ,GAAIC,KAAD,IAAW;AAC1BtB,IAAAA,YAAY,CAAC,EAAD,CAAZ;;AACA,QAAIsB,KAAJ,EAAW;AACThB,MAAAA,QAAQ,CAACjC,SAAS,CAACiD,KAAD,CAAV,CAAR;AACAf,MAAAA,qBAAqB,CAAC;AACpBtB,QAAAA,SAAS,EAAE,EAAE,GAAGA,SAAL;AAAgBI,UAAAA,MAAM,EAAEiC;AAAxB;AADS,OAAD,CAArB;AAGD,KALD,MAKO;AACL,YAAMC,MAAM,GAAG,EAAE,GAAGtC;AAAL,OAAf;AAEAqB,MAAAA,QAAQ,CAACjC,SAAS,CAAC,IAAD,CAAV,CAAR;AAEA,UAAIuC,OAAJ,EAAaA,OAAO,CAACW,MAAD,CAAP,CAAb,KACKT,aAAa,CAAC;AAAE7B,QAAAA,SAAS,EAAEsC;AAAb,OAAD,CAAb;AACN;AACF,GAfD;;AAiBA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAInC,MAAM,IAAIwB,eAAd,EAA+B;AAC7B,YAAMA,eAAe,CAAC5B,SAAD,CAArB;AACD,KAFD,MAEO;AACL,UAAI2B,OAAJ,EAAa;AACX,cAAMA,OAAO,CAAC3B,SAAD,CAAb;AACD,OAFD,MAEO;AACL,cAAM6B,aAAa,CAAC;AAAE7B,UAAAA;AAAF,SAAD,CAAnB;AACD;AACF;AACF,GAVD;;AAYA,QAAMwC,YAAY,GAAG,mBACnB,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAE;AAAlB,kBACE,oBAAC,OAAD,OADF,CADF;;AAMAxE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiC,UAAJ,EAAgB4B,aAAa;AAC9B,GAFQ,EAEN,CAAC5B,UAAD,CAFM,CAAT;AAIAjC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIoC,MAAJ,EAAYgC,QAAQ,CAAChC,MAAD,CAAR;AACb,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIApC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyE,UAAU,GAAG,CAACrC,MAAD,IAAW,CAACqB,OAAZ,IAAuBF,IAA1C;AACA,UAAMmB,UAAU,GAAGtC,MAAM,IAAI,CAACsB,eAAX,IAA8BF,YAAjD;AACA,UAAMmB,UAAU,GAAGF,UAAU,IAAIC,UAAjC;;AACA,QAAIC,UAAJ,EAAgB;AACd,YAAMC,IAAI,GAAGD,UAAU,CAACE,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwB,CAAxB,CAAD,CAAvB;AACA,UAAIC,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqBhC,YAAY,CAAC6B,IAAD,CAAZ;AACrB,UAAIA,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB9B,QAAQ,CAAC,IAAD,CAAR;AACxB;AACF,GATQ,EASN,CAACb,MAAD,EAASqB,OAAT,EAAkBC,eAAlB,EAAmCH,IAAnC,EAAyCC,YAAzC,EAAuDP,QAAvD,CATM,CAAT;AAWA,sBACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEzB,KAAf;AAAsB,IAAA,QAAQ,EAAEM;AAAhC,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEA,QAAQ,IAAIC;AAAzB,KACG,CAACD,QAAD,IAAa,CAACC,SAAd,iBACC,oBAAC,SAAD;AACE,IAAA,YAAY,EAAEK,MADhB;AAEE,IAAA,cAAc,EAAE,MAAMS,gBAAgB,CAAC,CAACD,aAAF,CAFxC;AAGE,IAAA,QAAQ,EAAEwB;AAHZ,IAFJ,EASGrC,SAAS,IAAIJ,MAAb,iBACC,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEH,KADT;AAEE,IAAA,IAAI,EAAEG,MAAM,CAACqD,IAFf;AAGE,IAAA,gBAAgB,EAAErD,MAAM,CAACsD,gBAH3B;AAIE,IAAA,QAAQ,EAAEtD,MAAM,CAACuD,QAJnB;AAKE,IAAA,qBAAqB,EAAE,MAAMrC,gBAAgB,CAAC,CAACD,aAAF,CAL/C;AAME,IAAA,qBAAqB,EAAEjB,MAAM,CAACwD;AANhC,IAVJ,EAoBG,CAACvD,OAAO,IAAIC,OAAZ,kBACC,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAEe,aAAnB;AAAkC,IAAA,OAAO,EAAEkB,UAAU,EAArD;AAAyD,IAAA,OAAO,EAAEjC;AAAlE,IArBJ,EAwBGO,MAAM,IAAIsB,eAAV,GACCc,YAAY,EADb,GAEGpC,MAAM,GACR,OAAOF,QAAP,KAAoB,UAApB,GACEpC,KAAK,CAACsF,aAAN,CAAoBlD,QAApB,EAA8B;AAAEY,IAAAA;AAAF,GAA9B,CADF,GAGEZ,QAJM,gBAOR,oBAAC,cAAD;AACE,IAAA,SAAS,EAAEgB,SAAS,IAAI,CAD1B;AAEE,IAAA,QAAQ,EAAEqB,QAFZ;AAGE,IAAA,OAAO,EAAE,CAACvB,KAHZ;AAIE,IAAA,MAAM,EAAEwB,YAAY;AAJtB,KAKG,OAAOtC,QAAP,KAAoB,UAApB,GACGpC,KAAK,CAACsF,aAAN,CAAoBlD,QAApB,EAA8B;AAAEY,IAAAA;AAAF,GAA9B,CADH,GAEGZ,QAPN,CAjCJ,CADF,CADF;AAgDD,CAnKD;;AAqKA,eAAeX,aAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useRouter } from 'next/router'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useLazyQuery } from '@apollo/react-hooks'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport styled, { css } from 'styled-components'\nimport { v4 } from 'uuid'\n\nimport Column from '../atomic-ui/components/Column'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Spinner from '../atomic-ui/components/Spinner'\nimport Select from '../atomic-ui/components/Select'\n\nimport DashboardLayout from './dashboard'\nimport DefaultLayout from '../layouts/default'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport HandleBar from '../components/HandleBar'\nimport { LowerLoader } from '../components/Styled'\nimport { setSearch } from '../store/actions/root'\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  ${({ clear }) =>\n    clear &&\n    css`\n      margin: 0;\n    `}\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst ContentLayout = ({\n  title,\n  store,\n  query,\n  handle,\n  filters,\n  options,\n  scaffold,\n  dashboard,\n  variables = {},\n  initialize,\n  children\n}) => {\n  const router = useRouter()\n  const search = useSelector((state) => state.root.search)\n  const Layout = dashboard ? DashboardLayout : DefaultLayout\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [documents, setDocuments] = useState(store?.documents || [])\n  const [isEnd, setIsEnd] = useState(false)\n  const pageStart = useMemo(() => Number(router.query?.page) || 1, [router])\n\n  const dispatch = useDispatch()\n\n  const [\n    loadDocumentsBySearch,\n    { data: dataBySearch, loading: loadingBySearch, refetch: refetchBySearch }\n  ] = useLazyQuery(query)\n\n  const [loadDocuments, { data, loading, refetch }] = useLazyQuery(query)\n\n  const getFilters = () => {\n    return filters.map((filter) => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return (\n            <DatePicker\n              key={v4()}\n              value={date}\n              placeholder={filter.placeholder || 'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />\n          )\n        case 'SELECT':\n          return (\n            <Select\n              key={v4()}\n              options={filter.options}\n              placeholder={filter.placeholder || 'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          )\n        default:\n          return null\n      }\n    })\n  }\n\n  const onSearch = (value) => {\n    setDocuments([])\n    if (value) {\n      dispatch(setSearch(value))\n      loadDocumentsBySearch({\n        variables: { ...variables, search: value }\n      })\n    } else {\n      const result = { ...variables }\n\n      dispatch(setSearch(null))\n\n      if (refetch) refetch(result)\n      else loadDocuments({ variables: result })\n    }\n  }\n\n  const loadMore = async () => {\n    if (search && refetchBySearch) {\n      await refetchBySearch(variables)\n    } else {\n      if (refetch) {\n        await refetch(variables)\n      } else {\n        await loadDocuments({ variables })\n      }\n    }\n  }\n\n  const renderLoader = () => (\n    <LowerLoader key={'loader'}>\n      <Spinner />\n    </LowerLoader>\n  )\n\n  useEffect(() => {\n    if (initialize) loadDocuments()\n  }, [initialize])\n\n  useEffect(() => {\n    if (search) onSearch(search)\n  }, [search])\n\n  useEffect(() => {\n    const commonList = !search && !loading && data\n    const searchList = search && !loadingBySearch && dataBySearch\n    const resultList = commonList || searchList\n    if (resultList) {\n      const list = resultList[Object.keys(resultList)[0]]\n      if (list.length > 0) setDocuments(list)\n      if (list.length === 0) setIsEnd(true)\n    }\n  }, [search, loading, loadingBySearch, data, dataBySearch, setIsEnd])\n\n  return (\n    <Layout title={title} scaffold={scaffold}>\n      <Wrap clear={scaffold || dashboard}>\n        {!scaffold && !dashboard && (\n          <SearchBar\n            defaultValue={search}\n            onChangeFilter={() => setVisibleFilter(!visibleFilter)}\n            onSubmit={onSearch}\n          />\n        )}\n\n        {dashboard && handle && (\n          <HandleBar\n            title={title}\n            icon={handle.icon}\n            buttonCreateText={handle.buttonCreateText}\n            onCreate={handle.onCreate}\n            onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n            onChangeDisplayMethod={handle.onChangeDisplayMethod}\n          />\n        )}\n\n        {(filters || options) && (\n          <FilterBar isOpen={visibleFilter} filters={getFilters()} options={options} />\n        )}\n\n        {search && loadingBySearch ? (\n          renderLoader()\n        ) : search ? (\n          typeof children === 'function' ? (\n            React.createElement(children, { documents })\n          ) : (\n            children\n          )\n        ) : (\n          <InfiniteScroll\n            pageStart={pageStart || 0}\n            loadMore={loadMore}\n            hasMore={!isEnd}\n            loader={renderLoader()}>\n            {typeof children === 'function'\n              ? React.createElement(children, { documents })\n              : children}\n          </InfiniteScroll>\n        )}\n      </Wrap>\n    </Layout>\n  )\n}\n\nexport default ContentLayout\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport ReactTooltip from 'react-tooltip';\nimport { v4 } from 'uuid';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"Tooltip__Wrap\",\n  componentId: \"mguwd9-0\"\n})([\"position:relative;display:inline-flex;\"]);\n_c = Wrap;\nexport const Content = styled(ReactTooltip).withConfig({\n  displayName: \"Tooltip__Content\",\n  componentId: \"mguwd9-1\"\n})([\"padding:7px 10px !important;font-size:var(--font-size-s) !important;line-height:14px !important;background:rgba(0,0,0,0.7) !important;border-radius:var(--surface-border-radius) !important;border:none !important;color:white !important;opacity:0.9;\", \"\"], ({\n  maxWidth\n}) => maxWidth && css([\"max-width:\", \"px !important;\"], maxWidth));\n_c2 = Content;\nexport const Tooltip = ({\n  text,\n  self,\n  children,\n  style,\n  className,\n  maxWidth,\n  ...props\n}) => {\n  const id = `tooltip-${v4()}`;\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style\n  }, React.cloneElement(self ? /*#__PURE__*/React.createElement(\"div\", null, children) : children, { ...{\n      'data-arrow-color': 'rgba(0, 0, 0, .7)',\n      'data-tip': true,\n      'data-for': id\n    }\n  }), /*#__PURE__*/React.createElement(Content, _extends({\n    id: id\n  }, props, {\n    maxWidth: maxWidth\n  }), /*#__PURE__*/React.createElement(\"span\", null, text)));\n};\n_c3 = Tooltip;\nTooltip.defaultProps = {\n  place: 'top',\n  effect: 'solid',\n  delayShow: 500\n};\nexport default Tooltip;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"Tooltip\");","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/atomic-ui/components/Tooltip/index.js"],"names":["React","styled","css","ReactTooltip","v4","Wrap","div","Content","maxWidth","Tooltip","text","self","children","style","className","props","id","cloneElement","defaultProps","place","effect","delayShow"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,EAAT,QAAmB,MAAnB;AAEA,OAAO,MAAMC,IAAI,GAAGJ,MAAM,CAACK,GAAV;AAAA;AAAA;AAAA,8CAAV;KAAMD,I;AAKb,OAAO,MAAME,OAAO,GAAGN,MAAM,CAACE,YAAD,CAAT;AAAA;AAAA;AAAA,mQAUhB,CAAC;AAAEK,EAAAA;AAAF,CAAD,KACAA,QAAQ,IACRN,GADQ,mCAEOM,QAFP,CAXQ,CAAb;MAAMD,O;AAiBb,OAAO,MAAME,OAAO,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,QAAd;AAAwBC,EAAAA,KAAxB;AAA+BC,EAAAA,SAA/B;AAA0CN,EAAAA,QAA1C;AAAoD,KAAGO;AAAvD,CAAD,KAAoE;AACzF,QAAMC,EAAE,GAAI,WAAUZ,EAAE,EAAG,EAA3B;AAEA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEU,SAAjB;AAA4B,IAAA,KAAK,EAAED;AAAnC,KACGb,KAAK,CAACiB,YAAN,CAAmBN,IAAI,gBAAG,iCAAMC,QAAN,CAAH,GAA2BA,QAAlD,EAA4D,EAC3D,GAAG;AACD,0BAAoB,mBADnB;AAED,kBAAY,IAFX;AAGD,kBAAYI;AAHX;AADwD,GAA5D,CADH,eAQE,oBAAC,OAAD;AAAS,IAAA,EAAE,EAAEA;AAAb,KAAqBD,KAArB;AAA4B,IAAA,QAAQ,EAAEP;AAAtC,mBACE,kCAAOE,IAAP,CADF,CARF,CADF;AAcD,CAjBM;MAAMD,O;AAmBbA,OAAO,CAACS,YAAR,GAAuB;AACrBC,EAAAA,KAAK,EAAE,KADc;AAErBC,EAAAA,MAAM,EAAE,OAFa;AAGrBC,EAAAA,SAAS,EAAE;AAHU,CAAvB;AAMA,eAAeZ,OAAf","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport ReactTooltip from 'react-tooltip'\nimport { v4 } from 'uuid'\n\nexport const Wrap = styled.div`\n  position: relative;\n  display: inline-flex;\n`\n\nexport const Content = styled(ReactTooltip)`\n  padding: 7px 10px !important;\n  font-size: var(--font-size-s) !important;\n  line-height: 14px !important;\n  background: rgba(0, 0, 0, 0.7) !important;\n  border-radius: var(--surface-border-radius) !important;\n  border: none !important;\n  color: white !important;\n  opacity: 0.9;\n\n  ${({ maxWidth }) =>\n    maxWidth &&\n    css`\n      max-width: ${maxWidth}px !important;\n    `}\n`\n\nexport const Tooltip = ({ text, self, children, style, className, maxWidth, ...props }) => {\n  const id = `tooltip-${v4()}`\n\n  return (\n    <Wrap className={className} style={style}>\n      {React.cloneElement(self ? <div>{children}</div> : children, {\n        ...{\n          'data-arrow-color': 'rgba(0, 0, 0, .7)',\n          'data-tip': true,\n          'data-for': id\n        }\n      })}\n      <Content id={id} {...props} maxWidth={maxWidth}>\n        <span>{text}</span>\n      </Content>\n    </Wrap>\n  )\n}\n\nTooltip.defaultProps = {\n  place: 'top',\n  effect: 'solid',\n  delayShow: 500\n}\n\nexport default Tooltip\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nexport const useInfiniteScroll2 = (fetchCallback, offsetBottom = 0) => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n\n  const onScroll = () => {\n    const offsetHeight = document.documentElement.scrollHeight - offsetBottom;\n    const innerHeight = window.innerHeight;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n    if (isFetching || innerHeight + scrollTop >= offsetHeight) return;\n    setIsFetching(true);\n  };\n\n  useEffect(() => {\n    if (!isFetching) return;\n    fetchCallback();\n  }, [isFetching]);\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll);\n    return () => window.removeEventListener('scroll', onScroll);\n  }, []);\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll2, \"NA5CwANT1gxbcTuimobX/8A7Nig=\");\n\nexport default useInfiniteScroll2;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/hooks/useInfiniteScroll2.js"],"names":["useState","useEffect","useInfiniteScroll2","fetchCallback","offsetBottom","isFetching","setIsFetching","onScroll","offsetHeight","document","documentElement","scrollHeight","innerHeight","window","scrollTop","pageYOffset","body","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,aAAD,EAAgBC,YAAY,GAAG,CAA/B,KAAqC;AAAA;;AACrE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMO,QAAQ,GAAG,MAAM;AACrB,UAAMC,YAAY,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,GAAwCP,YAA7D;AACA,UAAMQ,WAAW,GAAGC,MAAM,CAACD,WAA3B;AACA,UAAME,SAAS,GACbD,MAAM,CAACE,WAAP,IAAsBN,QAAQ,CAACC,eAAT,CAAyBI,SAA/C,IAA4DL,QAAQ,CAACO,IAAT,CAAcF,SAA1E,IAAuF,CADzF;AAGA,QAAIT,UAAU,IAAIO,WAAW,GAAGE,SAAd,IAA2BN,YAA7C,EAA2D;AAE3DF,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GATD;;AAWAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACI,UAAL,EAAiB;AACjBF,IAAAA,aAAa;AACd,GAHQ,EAGN,CAACE,UAAD,CAHM,CAAT;AAKAJ,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCV,QAAlC;AACA,WAAO,MAAMM,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCX,QAArC,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SAAO,CAACF,UAAD,EAAaC,aAAb,CAAP;AACD,CAzBM;;GAAMJ,kB;;AA2Bb,eAAeA,kBAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nexport const useInfiniteScroll2 = (fetchCallback, offsetBottom = 0) => {\n  const [isFetching, setIsFetching] = useState(false)\n\n  const onScroll = () => {\n    const offsetHeight = document.documentElement.scrollHeight - offsetBottom\n    const innerHeight = window.innerHeight\n    const scrollTop =\n      window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0\n\n    if (isFetching || innerHeight + scrollTop >= offsetHeight) return\n\n    setIsFetching(true)\n  }\n\n  useEffect(() => {\n    if (!isFetching) return\n    fetchCallback()\n  }, [isFetching])\n\n  useEffect(() => {\n    window.addEventListener('scroll', onScroll)\n    return () => window.removeEventListener('scroll', onScroll)\n  }, [])\n\n  return [isFetching, setIsFetching]\n}\n\nexport default useInfiniteScroll2\n"]},"metadata":{},"sourceType":"module"}
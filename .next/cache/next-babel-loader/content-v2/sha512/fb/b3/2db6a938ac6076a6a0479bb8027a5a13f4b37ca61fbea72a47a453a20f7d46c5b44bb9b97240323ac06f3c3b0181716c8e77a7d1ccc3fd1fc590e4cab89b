{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Comment from '../../atomic-ui/components/Comment';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"Comments__Wrap\",\n  componentId: \"sc-6rcmxi-0\"\n})([\"flex-grow:1;\"]);\n_c = Wrap;\nexport const CentralAlert = styled(Alert).withConfig({\n  displayName: \"Comments__CentralAlert\",\n  componentId: \"sc-6rcmxi-1\"\n})([\"display:flex;justify-content:center;align-items:center;text-align:center;width:100%;flex-grow:1;\"]);\n_c2 = CentralAlert;\nexport const Comments = ({\n  comments,\n  loading,\n  appearance,\n  onLink,\n  onReply,\n  onLike,\n  onAttach,\n  onSubmit\n}) => {\n  _s();\n\n  const user = useSelector(state => state.user);\n  const [message, setMessage] = useState('');\n  const messageRef = useRef(null);\n  return /*#__PURE__*/React.createElement(Wrap, null, comments && comments.length > 0 ? comments.map(comment => {\n    var _comment$likes;\n\n    return /*#__PURE__*/React.createElement(Comment, {\n      key: comment.id,\n      user: comment.author,\n      message: comment.text,\n      likes: (_comment$likes = comment.likes) === null || _comment$likes === void 0 ? void 0 : _comment$likes.length,\n      time: comment.time,\n      isLiked: comment.likes.find(likedUser => likedUser.email === user.email),\n      onLink: onLink,\n      onReply: onReply,\n      onLike: liked => onLike(comment.id, liked)\n    });\n  }) : /*#__PURE__*/React.createElement(CentralAlert, null, \"\\u0412\\u044B \\u043C\\u043E\\u0436\\u0435\\u0442\\u0435 \\u043E\\u0441\\u0442\\u0430\\u0432\\u0438\\u0442\\u044C \\u043A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439 \\u043F\\u0435\\u0440\\u0432\\u044B\\u043C\"), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    disabled: loading || !comments,\n    onSubmit: onAttach\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'attach',\n    stroke: 'white'\n  })), /*#__PURE__*/React.createElement(Input, {\n    name: 'text',\n    ref: messageRef,\n    placeholder: 'Отправьте комментарий...',\n    disabled: loading && !comments,\n    appearance: appearance,\n    onChange: e => {\n      var _e$target;\n\n      return setMessage((e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) || '');\n    },\n    onKeyDown: e => {\n      // Pressed ENTER\n      if (e.keyCode === 13) {\n        onSubmit(message);\n        messageRef.current.value = '';\n      }\n    },\n    tabIndex: -1\n  }), /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    onClick: () => {\n      onSubmit(message);\n      messageRef.current.value = '';\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'send',\n    stroke: 'white'\n  }))));\n};\n\n_s(Comments, \"t8hRqmEz+yMrkd6gKESUEnL4UbU=\", false, function () {\n  return [useSelector];\n});\n\n_c3 = Comments;\nComments.defaultProps = {\n  appearance: 'default'\n};\nexport default Comments;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"CentralAlert\");\n$RefreshReg$(_c3, \"Comments\");","map":{"version":3,"sources":["/Users/alicefromwonderland/Desktop/branches/atomic/atomic-frontend/components/Comments/index.js"],"names":["React","useRef","useState","styled","useSelector","Row","Column","Comment","Alert","Input","Button","Icon","Wrap","CentralAlert","Comments","comments","loading","appearance","onLink","onReply","onLike","onAttach","onSubmit","user","state","message","setMessage","messageRef","length","map","comment","id","author","text","likes","time","find","likedUser","email","liked","e","target","value","keyCode","current","defaultProps"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { useSelector } from 'react-redux'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Comment from '../../atomic-ui/components/Comment'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Icon from '../../atomic-ui/components/Icon'\n\nexport const Wrap = styled(Column)`\n  flex-grow: 1;\n`\n\nexport const CentralAlert = styled(Alert)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  width: 100%;\n  flex-grow: 1;\n`\n\nexport const Comments = ({\n  comments,\n  loading,\n  appearance,\n  onLink,\n  onReply,\n  onLike,\n  onAttach,\n  onSubmit\n}) => {\n  const user = useSelector((state) => state.user)\n  const [message, setMessage] = useState('')\n  const messageRef = useRef(null)\n\n  return (\n    <Wrap>\n      {comments && comments.length > 0 ? (\n        comments.map((comment) => (\n          <Comment\n            key={comment.id}\n            user={comment.author}\n            message={comment.text}\n            likes={comment.likes?.length}\n            time={comment.time}\n            isLiked={comment.likes.find((likedUser) => likedUser.email === user.email)}\n            onLink={onLink}\n            onReply={onReply}\n            onLike={(liked) => onLike(comment.id, liked)}\n          />\n        ))\n      ) : (\n        <CentralAlert>Вы можете оставить комментарий первым</CentralAlert>\n      )}\n\n      <Row>\n        <Button kind={'icon'} disabled={loading || !comments} onSubmit={onAttach}>\n          <Icon icon={'attach'} stroke={'white'} />\n        </Button>\n        <Input\n          name={'text'}\n          ref={messageRef}\n          placeholder={'Отправьте комментарий...'}\n          disabled={loading && !comments}\n          appearance={appearance}\n          onChange={(e) => setMessage(e?.target?.value || '')}\n          onKeyDown={(e) => {\n            // Pressed ENTER\n            if (e.keyCode === 13) {\n              onSubmit(message)\n              messageRef.current.value = ''\n            }\n          }}\n          tabIndex={-1}\n        />\n        <Button\n          kind={'icon'}\n          onClick={() => {\n            onSubmit(message)\n            messageRef.current.value = ''\n          }}>\n          <Icon icon={'send'} stroke={'white'} />\n        </Button>\n      </Row>\n    </Wrap>\n  )\n}\n\nComments.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Comments\n"]},"metadata":{},"sourceType":"module"}
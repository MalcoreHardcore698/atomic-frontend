{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onUserAboutMore, onUserLink, onUserMembers, onUserEdit, onUserCreate } from '../store/helpers/user';\nimport { onChat as onUserChat } from '../store/helpers';\nimport { useHelper } from './useHelper';\nimport { useMutate } from './useMutate';\nimport queries from '../graphql/queries';\nexport const useUser = ({\n  isManage\n} = {}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const canEditAccount = useMemo(() => (user === null || user === void 0 ? void 0 : user.account) !== 'ADMIN', [user]);\n  const canEditRole = useMemo(() => {\n    var _user$role;\n\n    return user && (user === null || user === void 0 ? void 0 : (_user$role = user.role) === null || _user$role === void 0 ? void 0 : _user$role.name) === 'ADMIN';\n  }, [user]);\n  const hasOwned = useCallback(author => (author === null || author === void 0 ? void 0 : author.name) === (user === null || user === void 0 ? void 0 : user.name), [user]);\n  const onLink = useCallback(author => {\n    const owned = (author === null || author === void 0 ? void 0 : author.name) !== (user === null || user === void 0 ? void 0 : user.name);\n    recall(onUserLink, {\n      id: author === null || author === void 0 ? void 0 : author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      sender: user,\n      recipient: author,\n      owned,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, dispatch, mutate, recall]);\n  const onChat = useCallback(author => {\n    recall(onUserChat, {\n      sender: user,\n      recipient: author,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, mutate, dispatch]);\n  const onMembers = useCallback(author => {\n    recall(onUserMembers, {\n      id: author === null || author === void 0 ? void 0 : author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    })();\n  }, [user, recall]);\n  const onAboutMore = useCallback(author => {\n    recall(onUserAboutMore, {\n      user: author\n    })();\n  }, [recall]);\n  const onCompanyLink = useCallback(author => {\n    var _author$company;\n\n    recall(onUserLink, {\n      id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, recall]);\n\n  const onEdit = (author, onAfter) => recall(onUserEdit, {\n    user: author.email,\n    auth: user === null || user === void 0 ? void 0 : user.email,\n    canEditAccount,\n    canEditRole,\n    mutations: {\n      del: queries.DELETE_USER,\n      update: queries.UPDATE_USER\n    },\n    onAfter\n  })();\n\n  const onCreate = onAfter => recall(onUserCreate, {\n    canEditRole,\n    mutation: queries.CREATE_USER,\n    onAfter\n  })();\n\n  return {\n    user,\n    hasOwned,\n    onLink,\n    onChat,\n    onAboutMore,\n    onMembers: (user === null || user === void 0 ? void 0 : user.members) > 0 && onMembers,\n    onCompanyLink: (user === null || user === void 0 ? void 0 : user.company) && onCompanyLink,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
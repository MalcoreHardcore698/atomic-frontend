{"ast":null,"code":"import { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { b64DecodeUnicode, b64EncodeUnicode } from '../atomic-ui/utils/functions';\nimport { useHelper } from './useHelper';\nimport { useMutate } from './useMutate';\nimport { onArticleLink } from '../store/helpers/article';\nimport { onCategoryLink } from '../store/helpers/category';\nimport { onProjectAdd, onProjectLink } from '../store/helpers/project';\nimport { onRoleLink } from '../store/helpers/role';\nimport { onUserLink } from '../store/helpers/user';\nimport { onTicketLink } from '../store/helpers/ticket';\nimport { updateUser } from '../store/actions/user';\nimport queries from '../graphql/queries';\nexport const getProjectLinkProps = (id, user, owned, dispatch, mutate, recall, callback) => ({\n  id,\n  auth: user === null || user === void 0 ? void 0 : user.email,\n  liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === id),\n  onLike: user.email && mutate(queries.LIKE_PROJECT, {\n    id\n  }, response => dispatch(updateUser(response.data.likeProject))),\n  onAdd: user.email && recall(onProjectAdd, {\n    id,\n    folders: user === null || user === void 0 ? void 0 : user.folders,\n    mutations: {\n      addProject: queries.ADD_USER_PROJECT,\n      createFolder: queries.ADD_USER_FOLDER\n    },\n    callback\n  }),\n  owned\n});\nexport const getUserLinkProps = (id, user, owned) => ({\n  id,\n  auth: user === null || user === void 0 ? void 0 : user.email,\n  owned,\n  queries: {\n    userChats: queries.GET_USER_CHATS,\n    chat: queries.GET_CHAT\n  },\n  mutations: {\n    addUserChat: queries.ADD_USER_CHAT,\n    sendMessage: queries.SEND_MESSAGE\n  }\n});\nexport const invokeRecall = (recall, mutate, user, dispatch, query) => {\n  if (query.article) {\n    const id = b64DecodeUnicode(query.article);\n    recall(onArticleLink, {\n      id\n    })();\n  }\n\n  if (query.category) {\n    const id = b64DecodeUnicode(query.category);\n    recall(onCategoryLink, {\n      id\n    })();\n  }\n\n  if (query.project) {\n    var _user$projects;\n\n    const id = b64DecodeUnicode(query.project);\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === id);\n    recall(onProjectLink, getProjectLinkProps(id, user, owned, dispatch, mutate, recall))();\n  }\n\n  if (query.role) {\n    const id = b64DecodeUnicode(query.role);\n    recall(onRoleLink, {\n      id\n    })();\n  }\n\n  if (query.user) {\n    const id = b64DecodeUnicode(query.user);\n    const owned = id === (user === null || user === void 0 ? void 0 : user.name);\n    recall(onUserLink, getUserLinkProps(id, user, owned))();\n  }\n\n  if (query.ticket) {\n    const id = b64DecodeUnicode(query.ticket);\n    recall(onTicketLink, {\n      id,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    })();\n  }\n};\nexport const useEntityQuery = () => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const router = useRouter();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  const setQuery = async (str, entity, callback) => {\n    await router.push({\n      pathname: router.pathname,\n      query: {\n        [entity]: b64EncodeUnicode(str)\n      }\n    }, undefined, {\n      shallow: true\n    });\n    if (callback) callback(str);\n  };\n\n  const useDetectQuery = () => {\n    useEffect(() => {\n      const query = router.query;\n      invokeRecall(recall, mutate, user, dispatch, query);\n    }, [router]);\n  };\n\n  return {\n    setQuery,\n    useDetectQuery\n  };\n};\nexport default useEntityQuery;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/hooks/useEntityQuery.js"],"names":["useEffect","useRouter","useDispatch","useSelector","b64DecodeUnicode","b64EncodeUnicode","useHelper","useMutate","onArticleLink","onCategoryLink","onProjectAdd","onProjectLink","onRoleLink","onUserLink","onTicketLink","updateUser","queries","getProjectLinkProps","id","user","owned","dispatch","mutate","recall","callback","auth","email","liked","likedProjects","find","item","onLike","LIKE_PROJECT","response","data","likeProject","onAdd","folders","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","getUserLinkProps","userChats","GET_USER_CHATS","chat","GET_CHAT","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","invokeRecall","query","article","category","project","projects","candidate","role","name","ticket","useEntityQuery","router","state","setQuery","str","entity","push","pathname","undefined","shallow","useDetectQuery"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { b64DecodeUnicode, b64EncodeUnicode } from '../atomic-ui/utils/functions'\n\nimport { useHelper } from './useHelper'\nimport { useMutate } from './useMutate'\nimport { onArticleLink } from '../store/helpers/article'\nimport { onCategoryLink } from '../store/helpers/category'\nimport { onProjectAdd, onProjectLink } from '../store/helpers/project'\nimport { onRoleLink } from '../store/helpers/role'\nimport { onUserLink } from '../store/helpers/user'\nimport { onTicketLink } from '../store/helpers/ticket'\nimport { updateUser } from '../store/actions/user'\nimport queries from '../graphql/queries'\n\nexport const getProjectLinkProps = (id, user, owned, dispatch, mutate, recall, callback) => ({\n  id,\n  auth: user?.email,\n  liked: !!(user?.likedProjects || []).find((item) => item.id === id),\n  onLike:\n    user.email &&\n    mutate(queries.LIKE_PROJECT, { id }, (response) =>\n      dispatch(updateUser(response.data.likeProject))\n    ),\n  onAdd:\n    user.email &&\n    recall(onProjectAdd, {\n      id,\n      folders: user?.folders,\n      mutations: {\n        addProject: queries.ADD_USER_PROJECT,\n        createFolder: queries.ADD_USER_FOLDER\n      },\n      callback\n    }),\n  owned\n})\n\nexport const getUserLinkProps = (id, user, owned) => ({\n  id,\n  auth: user?.email,\n  owned,\n  queries: {\n    userChats: queries.GET_USER_CHATS,\n    chat: queries.GET_CHAT\n  },\n  mutations: {\n    addUserChat: queries.ADD_USER_CHAT,\n    sendMessage: queries.SEND_MESSAGE\n  }\n})\n\nexport const invokeRecall = (recall, mutate, user, dispatch, query) => {\n  if (query.article) {\n    const id = b64DecodeUnicode(query.article)\n    recall(onArticleLink, { id })()\n  }\n\n  if (query.category) {\n    const id = b64DecodeUnicode(query.category)\n    recall(onCategoryLink, { id })()\n  }\n\n  if (query.project) {\n    const id = b64DecodeUnicode(query.project)\n    const owned = user?.projects?.find((candidate) => candidate.id === id)\n    recall(onProjectLink, getProjectLinkProps(id, user, owned, dispatch, mutate, recall))()\n  }\n\n  if (query.role) {\n    const id = b64DecodeUnicode(query.role)\n    recall(onRoleLink, { id })()\n  }\n\n  if (query.user) {\n    const id = b64DecodeUnicode(query.user)\n    const owned = id === user?.name\n    recall(onUserLink, getUserLinkProps(id, user, owned))()\n  }\n\n  if (query.ticket) {\n    const id = b64DecodeUnicode(query.ticket)\n    recall(onTicketLink, { id, auth: user?.email })()\n  }\n}\n\nexport const useEntityQuery = () => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const router = useRouter()\n\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  const setQuery = async (str, entity, callback) => {\n    await router.push(\n      {\n        pathname: router.pathname,\n        query: {\n          [entity]: b64EncodeUnicode(str)\n        }\n      },\n      undefined,\n      { shallow: true }\n    )\n    if (callback) callback(str)\n  }\n\n  const useDetectQuery = () => {\n    useEffect(() => {\n      const query = router.query\n      invokeRecall(recall, mutate, user, dispatch, query)\n    }, [router])\n  }\n\n  return { setQuery, useDetectQuery }\n}\n\nexport default useEntityQuery\n"]},"metadata":{},"sourceType":"module"}
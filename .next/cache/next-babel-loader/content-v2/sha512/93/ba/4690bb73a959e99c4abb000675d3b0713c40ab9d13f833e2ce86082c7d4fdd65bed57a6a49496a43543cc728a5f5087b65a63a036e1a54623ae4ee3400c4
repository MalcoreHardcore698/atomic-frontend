{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport TextArea from '../../atomic-ui/components/TextArea';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nexport var Category = function Category(_ref) {\n  _s2();\n\n  var category = _ref.category,\n      categoryTypes = _ref.categoryTypes,\n      mutation = _ref.mutation,\n      appearance = _ref.appearance,\n      className = _ref.className,\n      _onSubmit = _ref.onSubmit;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      typeError = _useState2[0],\n      setTypeError = _useState2[1];\n\n  var _useState3 = useState(category && category.type && {\n    value: category.type,\n    label: getLabelCategory(category.type)\n  } || null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      disabled = _useState6[0],\n      setDisabled = _useState6[1];\n\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: function onSubmit(form, action) {\n      if (type) {\n        _onSubmit(_objectSpread(_objectSpread({}, form), {}, {\n          type: type\n        }), action);\n      } else {\n        setTypeError(true);\n      }\n    }\n  }, function (_ref2) {\n    var register = _ref2.register,\n        loading = _ref2.loading,\n        errors = _ref2.errors,\n        getValues = _ref2.getValues;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.name && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'name',\n      ref: register({\n        required: true\n      }),\n      onChange: function onChange(e) {\n        if (e.target.value === (category === null || category === void 0 ? void 0 : category.name)) {\n          setDisabled(true);\n        } else {\n          setDisabled(false);\n        }\n      },\n      defaultValue: (category === null || category === void 0 ? void 0 : category.name) || getValues('name'),\n      placeholder: 'Название',\n      appearance: 'ghost',\n      disabled: loading\n    }), typeError && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0438\\u043F \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Select, {\n      name: 'type',\n      appearance: 'ghost',\n      defaultValue: type,\n      onChange: function onChange(value) {\n        setType(value);\n        setTypeError(false);\n\n        if (value.value === (category === null || category === void 0 ? void 0 : category.type)) {\n          setDisabled(true);\n        } else {\n          setDisabled(false);\n        }\n      },\n      placeholder: 'Выберите тип',\n      options: categoryTypes.map(function (type) {\n        return {\n          value: type,\n          label: getLabelCategory(type)\n        };\n      }),\n      isLoading: loading,\n      isClearable: true\n    }), /*#__PURE__*/React.createElement(TextArea, {\n      name: 'description',\n      ref: register(),\n      onChange: function onChange(e) {\n        if (e.target.value === (category === null || category === void 0 ? void 0 : category.description)) {\n          setDisabled(true);\n        } else {\n          setDisabled(false);\n        }\n      },\n      defaultValue: (category === null || category === void 0 ? void 0 : category.description) || getValues('description'),\n      placeholder: 'Описание',\n      appearance: 'ghost',\n      disabled: loading\n    })), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: disabled || loading\n    }, category ? 'Сохранить' : 'Создать')));\n  });\n};\n\n_s2(Category, \"KJbPfD8PvZcSWuag5zL9MSt8cE0=\");\n\n_c = Category;\nCategory.defaultProps = {\n  create: true\n};\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormCategory/index.js"],"names":["React","useState","Row","Column","Title","Input","Button","Select","TextArea","Alert","getLabelCategory","Form","Category","category","categoryTypes","mutation","appearance","className","onSubmit","typeError","setTypeError","type","value","label","setType","disabled","setDisabled","form","action","register","loading","errors","getValues","name","width","required","e","target","map","description","flexGrow","defaultProps","create"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Select from '../../atomic-ui/components/Select'\nimport TextArea from '../../atomic-ui/components/TextArea'\nimport Alert from '../../atomic-ui/components/Alert'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\n\nimport Form from '../Form'\n\nexport const Category = ({\n  category,\n  categoryTypes,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  const [typeError, setTypeError] = useState(false)\n  const [type, setType] = useState(\n    (category &&\n      category.type && {\n        value: category.type,\n        label: getLabelCategory(category.type)\n      }) ||\n      null\n  )\n  const [disabled, setDisabled] = useState(true)\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) => {\n        if (type) {\n          onSubmit({ ...form, type }, action)\n        } else {\n          setTypeError(true)\n        }\n      }}>\n      {({ register, loading, errors, getValues }) => (\n        <React.Fragment>\n          <Column>\n            <Title tag={'h4'}>Основное</Title>\n\n            {errors && errors.name && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Введите название категории\n              </Alert>\n            )}\n            <Input\n              type={'text'}\n              name={'name'}\n              ref={register({ required: true })}\n              onChange={(e) => {\n                if (e.target.value === category?.name) {\n                  setDisabled(true)\n                } else {\n                  setDisabled(false)\n                }\n              }}\n              defaultValue={category?.name || getValues('name')}\n              placeholder={'Название'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n\n            {typeError && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Выберите тип категории\n              </Alert>\n            )}\n            <Select\n              name={'type'}\n              appearance={'ghost'}\n              defaultValue={type}\n              onChange={(value) => {\n                setType(value)\n                setTypeError(false)\n                if (value.value === category?.type) {\n                  setDisabled(true)\n                } else {\n                  setDisabled(false)\n                }\n              }}\n              placeholder={'Выберите тип'}\n              options={categoryTypes.map((type) => ({\n                value: type,\n                label: getLabelCategory(type)\n              }))}\n              isLoading={loading}\n              isClearable\n            />\n\n            <TextArea\n              name={'description'}\n              ref={register()}\n              onChange={(e) => {\n                if (e.target.value === category?.description) {\n                  setDisabled(true)\n                } else {\n                  setDisabled(false)\n                }\n              }}\n              defaultValue={category?.description || getValues('description')}\n              placeholder={'Описание'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n          </Column>\n\n          <Row>\n            <Button style={{ flexGrow: 1 }} type={'submit'} disabled={disabled || loading}>\n              {category ? 'Сохранить' : 'Создать'}\n            </Button>\n          </Row>\n        </React.Fragment>\n      )}\n    </Form>\n  )\n}\n\nCategory.defaultProps = {\n  create: true\n}\n\nexport default Category\n"]},"metadata":{},"sourceType":"module"}
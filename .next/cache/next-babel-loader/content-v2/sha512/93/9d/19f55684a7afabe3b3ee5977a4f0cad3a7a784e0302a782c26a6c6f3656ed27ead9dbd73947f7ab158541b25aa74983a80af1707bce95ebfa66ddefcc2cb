{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/category';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport ProjectCard from '../../components/ProjectCard';\nimport { getProjectLinkProps } from '../../hooks/useEntityQuery';\nimport { onProjectCreate, onProjectEdit, onProjectLink } from '../../store/helpers/project';\nimport { setDocuments } from '../../store/actions/documents';\nimport { setUserFolder } from '../../store/actions/user';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\nconst LIMIT = 12;\nconst START_OFFSET = 0;\n\nconst Projects = () => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    icon: 'work',\n    template: template,\n    startOffset: START_OFFSET,\n    emptyMessage: 'Проектов нет',\n    buttonCreateText: 'Создать проект',\n    getType: 'getProjects',\n    getQuery: queries.GET_PROJECTS,\n    deleteQuery: queries.DELETE_PROJECT,\n    deleteEntityMultiText: 'проекты',\n    deleteEntitySingleText: 'проект',\n    onLink: project => {\n      var _user$projects;\n\n      const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n      recall(onProjectLink, getProjectLinkProps(project.id, user, owned, dispatch, mutate, recall, item => {\n        const result = { ...item,\n          projects: [...item.projects, project.id]\n        };\n        dispatch(setUserFolder(result));\n      }))();\n    },\n    onEdit: (project, onAfter) => recall(onProjectEdit, {\n      id: project.id,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      }),\n      onAfter\n    })(),\n    onCreate: onAfter => recall(onProjectCreate, {\n      canEditStatus,\n      mutation: queries.CREATE_PROJECT,\n      query: queries.GET_USERS,\n      onAfter\n    })(),\n    render: document => /*#__PURE__*/React.createElement(ProjectCard, {\n      project: document,\n      withSocials: true,\n      preview: true\n    })\n  });\n};\n\nexport default Projects;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/projects.js"],"names":["React","useEffect","useMemo","useSelector","useDispatch","template","ContentLayout","ProjectCard","getProjectLinkProps","onProjectCreate","onProjectEdit","onProjectLink","setDocuments","setUserFolder","useHelper","useMutate","queries","TITLE","LIMIT","START_OFFSET","Projects","recall","mutate","user","state","dispatch","canEditStatus","role","name","GET_PROJECTS","DELETE_PROJECT","project","owned","projects","find","candidate","id","item","result","onAfter","mutation","UPDATE_PROJECT","query","GET_USERS","onCompanyInputChange","account","CREATE_PROJECT","document"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport template from '../../atomic-ui/components/Table/templates/category'\n\nimport ContentLayout from '../../layouts/dashboard/content'\nimport ProjectCard from '../../components/ProjectCard'\nimport { getProjectLinkProps } from '../../hooks/useEntityQuery'\nimport { onProjectCreate, onProjectEdit, onProjectLink } from '../../store/helpers/project'\nimport { setDocuments } from '../../store/actions/documents'\nimport { setUserFolder } from '../../store/actions/user'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Проекты'\n\nconst LIMIT = 12\nconst START_OFFSET = 0\n\nconst Projects = () => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      limit={LIMIT}\n      icon={'work'}\n      template={template}\n      startOffset={START_OFFSET}\n      emptyMessage={'Проектов нет'}\n      buttonCreateText={'Создать проект'}\n      getType={'getProjects'}\n      getQuery={queries.GET_PROJECTS}\n      deleteQuery={queries.DELETE_PROJECT}\n      deleteEntityMultiText={'проекты'}\n      deleteEntitySingleText={'проект'}\n      onLink={(project) => {\n        const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n        recall(\n          onProjectLink,\n          getProjectLinkProps(project.id, user, owned, dispatch, mutate, recall, (item) => {\n            const result = { ...item, projects: [...item.projects, project.id] }\n            dispatch(setUserFolder(result))\n          })\n        )()\n      }}\n      onEdit={(project, onAfter) =>\n        recall(onProjectEdit, {\n          id: project.id,\n          canEditStatus,\n          mutation: queries.UPDATE_PROJECT,\n          query: queries.GET_USERS,\n          onCompanyInputChange: mutate(queries.GET_USERS, { account: 'ENTITY' }),\n          onAfter\n        })()\n      }\n      onCreate={(onAfter) =>\n        recall(onProjectCreate, {\n          canEditStatus,\n          mutation: queries.CREATE_PROJECT,\n          query: queries.GET_USERS,\n          onAfter\n        })()\n      }\n      render={(document) => <ProjectCard project={document} withSocials preview />}\n    />\n  )\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
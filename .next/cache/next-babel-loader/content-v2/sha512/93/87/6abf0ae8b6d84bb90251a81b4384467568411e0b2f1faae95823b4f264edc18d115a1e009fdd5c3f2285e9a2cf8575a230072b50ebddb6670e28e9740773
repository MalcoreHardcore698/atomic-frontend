{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Avatar from '../Avatar';\nimport Title from '../Title';\nimport Text from '../Text';\nimport Icon from '../Icon';\nimport Button from '../Button';\nimport Tooltip from '../Tooltip';\nimport DateText from '../DateText';\nimport Checkbox from '../Checkbox';\nimport TextArea from '../TextArea';\nexport const dispatchDateStyles = css`\n  position: absolute;\n  left: 0;\n  bottom: 5px;\n  font-size: var(--font-size-xs);\n`;\nexport const Wrap = styled.div`\n  display: grid;\n  grid-template-columns: 64px 1fr;\n  grid-template-areas: 'avatar opinion';\n  margin: 0;\n  transition: opacity 150ms ease;\n\n  & > span {\n    grid-area: avatar;\n    align-self: end;\n    justify-self: start;\n    cursor: pointer;\n    transition: opacity 150ms ease;\n  }\n\n  ${({\n  onClick\n}) => onClick && css`\n      & > span {\n        cursor: pointer;\n\n        &:hover {\n          opacity: 0.65;\n        }\n      }\n    `}\n\n  ${({\n  side\n}) => side === 'owner' && css`\n      grid-template-columns: 1fr 64px;\n      grid-template-areas: 'opinion avatar';\n\n      & > span {\n        justify-self: end;\n      }\n    `}\n\n  ${({\n  compact\n}) => compact && css`\n      display: flex;\n    `}\n    \n  ${({\n  checked\n}) => checked && css`\n      opacity: 0.45;\n    `}\n`;\nexport const MiniAvatar = styled(Avatar)`\n  width: var(--input-height-xs);\n  height: var(--input-height-xs);\n  min-width: var(--input-height-xs);\n  min-height: var(--input-height-xs);\n  border-radius: var(--surface-border-radius);\n`;\nexport const OpinionAvatar = styled(Avatar)`\n  grid-area: avatar;\n  align-self: end;\n  transition: opacity 150ms ease;\n\n  ${({\n  side\n}) => side === 'owner' && css`\n      justify-self: end;\n    `}\n\n  ${({\n  onClick\n}) => onClick && css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`;\nexport const Opinion = styled.div`\n  position: relative;\n  padding: 10px var(--default-gap) 25px var(--default-gap);\n  border-radius: var(--surface-border-radius);\n  color: white;\n  width: fit-content;\n  grid-area: opinion;\n\n  ${({\n  side\n}) => side === 'observer' && css`\n      background: var(--ghost-color-background);\n      color: var(--ghost-color-text);\n    `}\n\n  ${({\n  side\n}) => side === 'owner' && css`\n      justify-self: end;\n      background: var(--default-color-accent);\n      color: white;\n    `}\n\n  ${({\n  compact\n}) => compact && css`\n      padding: 0 0 25px 0;\n      background: none;\n      color: black;\n      width: 100%;\n    `}\n`;\nexport const OpinionName = styled(Title)`\n  color: inherit;\n  transition: opacity 150ms ease;\n\n  ${({\n  compact\n}) => compact && css`\n      display: flex;\n      align-items: center;\n      grid-gap: 10px;\n    `}\n\n  ${({\n  onClick\n}) => onClick && css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`;\nexport const OpinionTextArea = styled(TextArea)`\n  margin-top: 10px;\n  height: 128px;\n\n  ${({\n  height\n}) => height && css`\n      height: ${height}px;\n    `}\n`;\nexport const OpinionText = styled(Text)`\n  color: inherit;\n\n  ${({\n  compact\n}) => compact && css`\n      margin-top: 10px;\n    `}\n`;\nexport const OpinionTail = styled.span`\n  position: absolute;\n  bottom: -6px;\n  background-size: contain;\n  background-repeat: no-repeat;\n  width: 25px;\n  height: 20px;\n\n  ${({\n  side,\n  tails\n}) => side === 'observer' && css`\n      left: -12px;\n      background-image: url('${tails.default}');\n    `}\n\n  ${({\n  side,\n  tails\n}) => side === 'owner' && css`\n      right: -12px;\n      background-image: url('${tails.owner}');\n      transform: scaleX(-1);\n    `}\n`;\nexport const DispatchTime = styled(DateText)`\n  position: absolute;\n  right: 10px;\n  bottom: 5px;\n  font-size: var(--font-size-xs);\n\n  ${({\n  compact\n}) => compact && css`\n      right: 0;\n      font-size: var(--font-size-s);\n      color: var(--default-color-text);\n    `}\n`;\nexport const DispatchDate = styled(DateText)`\n  ${dispatchDateStyles}\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`;\nexport const DispatchUpdatedDate = styled.div`\n  ${dispatchDateStyles}\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`;\nexport const Actions = styled(Row)`\n  position: absolute;\n  top: 0;\n  right: 0;\n  grid-gap: 10px;\n`;\nexport const Message = ({\n  avatar,\n  side,\n  name,\n  text,\n  time,\n  tails,\n  style,\n  compact,\n  className,\n  isUpdated,\n  isChecked,\n  onEdit,\n  onChecked,\n  onDelete,\n  onLink\n}) => {\n  const {\n    0: updatedAt,\n    1: setUpdatedAt\n  } = useState(isUpdated ? time : null);\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(isChecked);\n  const {\n    0: isEdit,\n    1: setEdit\n  } = useState(false);\n  const {\n    0: message,\n    1: setMessage\n  } = useState(text);\n  const textRef = useRef(null);\n\n  const handleToggleEdit = () => setEdit(prev => !prev);\n\n  const handleChecked = e => {\n    const value = e.target.checked;\n    if (onChecked) onChecked(value);\n    setChecked(value);\n  };\n\n  const handleApplyChanges = () => {\n    var _textRef$current;\n\n    const value = textRef === null || textRef === void 0 ? void 0 : (_textRef$current = textRef.current) === null || _textRef$current === void 0 ? void 0 : _textRef$current.value;\n\n    if (value) {\n      if (onEdit) onEdit(value);\n      setUpdatedAt(new Date());\n      setMessage(value);\n    }\n\n    handleToggleEdit();\n  };\n\n  return __jsx(Wrap, {\n    side: side,\n    compact: compact,\n    checked: checked,\n    style: style,\n    className: className\n  }, !compact && __jsx(OpinionAvatar, {\n    side: side,\n    src: avatar,\n    onClick: onLink\n  }), __jsx(Opinion, {\n    side: side,\n    compact: compact\n  }, __jsx(OpinionName, {\n    tag: 'h5',\n    compact: compact,\n    onClick: onLink\n  }, compact && __jsx(MiniAvatar, {\n    side: side,\n    src: avatar,\n    onClick: onLink\n  }), name), !compact && __jsx(OpinionTail, {\n    side: side,\n    tails: tails\n  }), isEdit ? __jsx(OpinionTextArea, {\n    ref: textRef,\n    defaultValue: message,\n    appearance: 'ghost'\n  }) : __jsx(OpinionText, {\n    compact: compact\n  }, message), __jsx(DispatchTime, {\n    text: updatedAt || time,\n    compact: compact\n  }), compact && updatedAt && __jsx(DispatchUpdatedDate, null, \"\\u041E\\u0442\\u0440\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u043E\", ' ', new Date(updatedAt).toLocaleString('ru-RU', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  })), compact && !updatedAt && __jsx(DispatchDate, {\n    text: time,\n    options: {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    }\n  }), compact && onEdit && onDelete && __jsx(Actions, null, !isEdit ? __jsx(React.Fragment, null, __jsx(Tooltip, {\n    text: 'Удалить сообщение'\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: onDelete\n  }, __jsx(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), __jsx(Tooltip, {\n    text: 'Редактировать сообщение'\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    onClick: handleToggleEdit\n  }, __jsx(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), __jsx(Tooltip, {\n    text: 'Отметить сообщение',\n    self: true\n  }, __jsx(Checkbox, {\n    checked: checked,\n    onChange: handleChecked\n  }))) : __jsx(React.Fragment, null, __jsx(Tooltip, {\n    text: 'Применить изменения',\n    self: true\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'green',\n    onClick: handleApplyChanges\n  }, __jsx(Icon, {\n    icon: 'check',\n    size: 'xs',\n    stroke: 'white'\n  }))), __jsx(Tooltip, {\n    text: 'Отменить изменения',\n    self: true\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: handleToggleEdit\n  }, __jsx(Icon, {\n    icon: 'closeSquare',\n    size: 'xs',\n    stroke: 'white'\n  })))))));\n};\nMessage.defaultProps = {\n  side: 'observer',\n  text: 'Some Message',\n  time: '15:00'\n};\nexport default Message;","map":null,"metadata":{},"sourceType":"module"}
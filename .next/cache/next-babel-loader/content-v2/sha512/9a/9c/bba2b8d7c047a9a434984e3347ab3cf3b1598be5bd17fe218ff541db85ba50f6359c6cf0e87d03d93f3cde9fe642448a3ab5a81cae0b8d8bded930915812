{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\dan82\\\\Documents\\\\workspace\\\\FREELANCE\\\\atomic\\\\atomic-frontend\\\\atomic-ui\\\\components\\\\Difinition\\\\index.js\",\n    _this = this;\n\nvar __jsx = React.createElement;\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  font-weight: var(--font-weight-bold);\\n  line-height: 1;\\n\\n  @media only screen and (max-width: 480px) {\\n    font-size: var(--font-size-l);\\n  }\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n      width: auto;\\n    \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  color: var(--ghost-color-text);\\n  font-size: var(--font-size-s);\\n  white-space: nowrap;\\n  width: 128px;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n\\n  \", \"\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  width: var(--input-height-m);\\n  height: var(--input-height-m);\\n  min-width: var(--input-height-m);\\n  min-height: var(--input-height-m);\\n  background: var(--default-color-\", \"-dim);\\n  border-radius: var(--surface-border-radius);\\n\\n  @media only screen and (max-width: 480px) {\\n    width: var(--input-height-s);\\n    height: var(--input-height-s);\\n    min-width: var(--input-height-s);\\n    min-height: var(--input-height-s);\\n\\n    svg {\\n      transform: scale(0.85);\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  width: var(--input-height-m);\\n  height: var(--input-height-m);\\n  min-width: var(--input-height-m);\\n  min-height: var(--input-height-m);\\n  border-radius: var(--surface-border-radius);\\n  object-fit: cover;\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  justify-content: center;\\n  grid-gap: 0;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      cursor: pointer;\\n\\n      &:hover {\\n        opacity: 0.65;\\n      }\\n    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  transition: opacity 150ms ease;\\n\\n  \", \"\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Text from '../Text';\nimport Title from '../Title';\nimport Icon from '../Icon';\nimport Chip from '../Chip';\nimport { v4 } from 'uuid';\nimport Tooltip from '../Tooltip';\nexport var Wrap = styled(Row)(_templateObject(), function (_ref) {\n  var clickable = _ref.clickable;\n  return clickable && css(_templateObject2());\n});\n_c = Wrap;\nexport var Content = styled(Column)(_templateObject3());\n_c2 = Content;\nexport var Image = styled.img(_templateObject4());\n_c3 = Image;\nexport var RoundedIcon = styled(Icon)(_templateObject5(), function (_ref2) {\n  var color = _ref2.color;\n  return color || 'accent';\n});\n_c4 = RoundedIcon;\nexport var Label = styled(Text)(_templateObject6(), function (_ref3) {\n  var stretch = _ref3.stretch;\n  return stretch && css(_templateObject7());\n});\n_c5 = Label;\nexport var Value = styled(Title)(_templateObject8());\n_c6 = Value;\nexport var getValue = function getValue(label, text) {\n  if (Array.isArray(text)) {\n    var slicedFactor = 3;\n    return __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, text.slice(0, slicedFactor).map(function (item) {\n      return __jsx(Chip, {\n        key: v4(),\n        style: {\n          display: 'inline-flex'\n        },\n        color: 'ghost',\n        appearance: 'outlined',\n        size: 'xs',\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, item);\n    }), text.length > 5 && __jsx(Chip, {\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \"+\", text.slice(slicedFactor).length));\n  } // eslint-disable-next-line valid-typeof\n\n\n  if (typeof Text === 'funciton') {\n    var _Text = text;\n    return __jsx(_Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Value, {\n    tag: !label ? 'h2' : 'h4',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 10\n    }\n  }, text);\n};\nexport var Difinition = function Difinition(_ref4) {\n  var img = _ref4.img,\n      color = _ref4.color,\n      icon = _ref4.icon,\n      label = _ref4.label,\n      text = _ref4.text,\n      tooltip = _ref4.tooltip,\n      className = _ref4.className,\n      style = _ref4.style,\n      stretch = _ref4.stretch,\n      onLink = _ref4.onLink;\n  return __jsx(Wrap, {\n    className: className,\n    style: style,\n    clickable: !!onLink,\n    onClick: function onClick() {\n      return onLink && onLink();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 3\n    }\n  }, img && !icon && __jsx(Image, {\n    src: img,\n    alt: 'Avatar',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 22\n    }\n  }), !img && icon && __jsx(RoundedIcon, {\n    icon: icon,\n    color: color,\n    stroke: \"var(--default-color-\".concat(color || 'accent', \")\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }), __jsx(Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, label && __jsx(Label, {\n    stretch: stretch,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, label), tooltip ? __jsx(Tooltip, {\n    place: 'top',\n    text: tooltip,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, getValue(label, text))) : __jsx(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, getValue(label, text))));\n};\n_c7 = Difinition;\nexport default Difinition;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"Image\");\n$RefreshReg$(_c4, \"RoundedIcon\");\n$RefreshReg$(_c5, \"Label\");\n$RefreshReg$(_c6, \"Value\");\n$RefreshReg$(_c7, \"Difinition\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/Difinition/index.js"],"names":["React","styled","css","Row","Column","Text","Title","Icon","Chip","v4","Tooltip","Wrap","clickable","Content","Image","img","RoundedIcon","color","Label","stretch","Value","getValue","label","text","Array","isArray","slicedFactor","slice","map","item","display","length","Difinition","icon","tooltip","className","style","onLink"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport Row from '../Row'\nimport Column from '../Column'\nimport Text from '../Text'\nimport Title from '../Title'\nimport Icon from '../Icon'\nimport Chip from '../Chip'\nimport { v4 } from 'uuid'\nimport Tooltip from '../Tooltip'\n\nexport const Wrap = styled(Row)`\n  transition: opacity 150ms ease;\n\n  ${({ clickable }) =>\n    clickable &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`\n\nexport const Content = styled(Column)`\n  justify-content: center;\n  grid-gap: 0;\n`\n\nexport const Image = styled.img`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  border-radius: var(--surface-border-radius);\n  object-fit: cover;\n`\n\nexport const RoundedIcon = styled(Icon)`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  background: var(--default-color-${({ color }) => color || 'accent'}-dim);\n  border-radius: var(--surface-border-radius);\n\n  @media only screen and (max-width: 480px) {\n    width: var(--input-height-s);\n    height: var(--input-height-s);\n    min-width: var(--input-height-s);\n    min-height: var(--input-height-s);\n\n    svg {\n      transform: scale(0.85);\n    }\n  }\n`\n\nexport const Label = styled(Text)`\n  color: var(--ghost-color-text);\n  font-size: var(--font-size-s);\n  white-space: nowrap;\n  width: 128px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${({ stretch }) =>\n    stretch &&\n    css`\n      width: auto;\n    `}\n`\n\nexport const Value = styled(Title)`\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`\n\nexport const getValue = (label, text) => {\n  if (Array.isArray(text)) {\n    const slicedFactor = 3\n    return (\n      <React.Fragment>\n        {text.slice(0, slicedFactor).map((item) => (\n          <Chip\n            key={v4()}\n            style={{ display: 'inline-flex' }}\n            color={'ghost'}\n            appearance={'outlined'}\n            size={'xs'}>\n            {item}\n          </Chip>\n        ))}\n        {text.length > 5 && (\n          <Chip\n            style={{ display: 'inline-flex' }}\n            color={'ghost'}\n            appearance={'outlined'}\n            size={'xs'}>\n            +{text.slice(slicedFactor).length}\n          </Chip>\n        )}\n      </React.Fragment>\n    )\n  }\n\n  // eslint-disable-next-line valid-typeof\n  if (typeof Text === 'funciton') {\n    const Text = text\n    return <Text />\n  }\n\n  return <Value tag={!label ? 'h2' : 'h4'}>{text}</Value>\n}\n\nexport const Difinition = ({\n  img,\n  color,\n  icon,\n  label,\n  text,\n  tooltip,\n  className,\n  style,\n  stretch,\n  onLink\n}) => (\n  <Wrap className={className} style={style} clickable={!!onLink} onClick={() => onLink && onLink()}>\n    {img && !icon && <Image src={img} alt={'Avatar'} />}\n    {!img && icon && (\n      <RoundedIcon icon={icon} color={color} stroke={`var(--default-color-${color || 'accent'})`} />\n    )}\n    <Content>\n      {label && <Label stretch={stretch}>{label}</Label>}\n\n      {tooltip ? (\n        <Tooltip place={'top'} text={tooltip}>\n          <Row>{getValue(label, text)}</Row>\n        </Tooltip>\n      ) : (\n        <Row>{getValue(label, text)}</Row>\n      )}\n    </Content>\n  </Wrap>\n)\n\nexport default Difinition\n"]},"metadata":{},"sourceType":"module"}
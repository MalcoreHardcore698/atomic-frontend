{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dan82\\\\Documents\\\\workspace\\\\FREELANCE\\\\atomic\\\\atomic-frontend\\\\atomic-ui\\\\components\\\\DateSheet\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { v4 } from 'uuid';\nimport { getDaysInMonth, isWeekDay, parseDate } from '../../assets/scripts/date';\nimport DateMonth from '../DateMonth';\nimport Divider from '../Divider';\nimport Input from '../Input';\nexport const Wrap = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  grid-gap: 20px;\n`;\nconst defaultYear = new Date().getFullYear();\nexport const DateSheet = ({\n  lang,\n  value,\n  style,\n  sheets,\n  className,\n  canEditYear,\n  withMarkers,\n  withNavigate,\n  withYearDisplay,\n  onCompare,\n  onChange\n}) => {\n  const date = parseDate(value);\n  const {\n    0: months,\n    1: setMonths\n  } = useState([]);\n  const {\n    0: filterDate,\n    1: setFilterDate\n  } = useState(new Date());\n  useEffect(() => {\n    setMonths(new Array(sheets || 1).fill(null).map((_, index) => {\n      const startDate = new Date(filterDate);\n      const current = new Date(startDate.getFullYear(), startDate.getMonth() + index);\n      const month = current.getMonth();\n      const label = current.toLocaleString(lang, {\n        month: 'long'\n      });\n      return {\n        label,\n        days: getDaysInMonth(current.getFullYear(), month)\n      };\n    }));\n  }, [filterDate, sheets, lang]);\n  return __jsx(Wrap, {\n    className: className,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, canEditYear && __jsx(Input, {\n    type: 'number',\n    name: 'year',\n    defaultValue: date && date.getFullYear() || defaultYear,\n    onChange: e => setFilterDate(new Date(e.target.value, filterDate.getMonth(), filterDate.getDate())),\n    horizontalAlignment: 'center',\n    placeholder: defaultYear,\n    appearance: 'ghost',\n    min: 1920,\n    max: 2100,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), canEditYear && __jsx(Divider, {\n    clear: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }\n  }), months.map(month => __jsx(DateMonth, {\n    key: v4(),\n    value: date,\n    lang: lang,\n    month: month,\n    filterDate: filterDate,\n    setFilterDate: setFilterDate,\n    withNavigate: !!withNavigate,\n    withMarkers: withMarkers !== null && withMarkers !== void 0 ? withMarkers : true,\n    withYearDisplay: withYearDisplay !== null && withYearDisplay !== void 0 ? withYearDisplay : months.length === 1,\n    onCompare: onCompare || isWeekDay,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })));\n};\nexport default DateSheet;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/DateSheet/index.js"],"names":["React","useEffect","useState","styled","v4","getDaysInMonth","isWeekDay","parseDate","DateMonth","Divider","Input","Wrap","div","defaultYear","Date","getFullYear","DateSheet","lang","value","style","sheets","className","canEditYear","withMarkers","withNavigate","withYearDisplay","onCompare","onChange","date","months","setMonths","filterDate","setFilterDate","Array","fill","map","_","index","startDate","current","getMonth","month","label","toLocaleString","days","e","target","getDate","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { v4 } from 'uuid'\n\nimport { getDaysInMonth, isWeekDay, parseDate } from '../../assets/scripts/date'\nimport DateMonth from '../DateMonth'\nimport Divider from '../Divider'\nimport Input from '../Input'\n\nexport const Wrap = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  grid-gap: 20px;\n`\n\nconst defaultYear = new Date().getFullYear()\n\nexport const DateSheet = ({\n  lang,\n  value,\n  style,\n  sheets,\n  className,\n  canEditYear,\n  withMarkers,\n  withNavigate,\n  withYearDisplay,\n  onCompare,\n  onChange\n}) => {\n  const date = parseDate(value)\n  const [months, setMonths] = useState([])\n  const [filterDate, setFilterDate] = useState(new Date())\n\n  useEffect(() => {\n    setMonths(\n      new Array(sheets || 1).fill(null).map((_, index) => {\n        const startDate = new Date(filterDate)\n        const current = new Date(startDate.getFullYear(), startDate.getMonth() + index)\n        const month = current.getMonth()\n        const label = current.toLocaleString(lang, { month: 'long' })\n        return { label, days: getDaysInMonth(current.getFullYear(), month) }\n      })\n    )\n  }, [filterDate, sheets, lang])\n\n  return (\n    <Wrap className={className} style={style}>\n      {canEditYear && (\n        <Input\n          type={'number'}\n          name={'year'}\n          defaultValue={(date && date.getFullYear()) || defaultYear}\n          onChange={(e) =>\n            setFilterDate(new Date(e.target.value, filterDate.getMonth(), filterDate.getDate()))\n          }\n          horizontalAlignment={'center'}\n          placeholder={defaultYear}\n          appearance={'ghost'}\n          min={1920}\n          max={2100}\n          required\n        />\n      )}\n      {canEditYear && <Divider clear />}\n      {months.map((month) => (\n        <DateMonth\n          key={v4()}\n          value={date}\n          lang={lang}\n          month={month}\n          filterDate={filterDate}\n          setFilterDate={setFilterDate}\n          withNavigate={!!withNavigate}\n          withMarkers={withMarkers ?? true}\n          withYearDisplay={withYearDisplay ?? months.length === 1}\n          onCompare={onCompare || isWeekDay}\n          onChange={onChange}\n        />\n      ))}\n    </Wrap>\n  )\n}\n\nexport default DateSheet\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { motion } from 'framer-motion';\nimport Column from '../atomic-ui/components/Column';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Select from '../atomic-ui/components/Select';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll';\nimport DefaultLayout from '../layouts/default';\nimport UserCard from '../components/UserCard';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport { onUserLink, onUserMembers } from '../store/helpers/user';\nimport { onChat } from '../store/helpers';\nimport queries from '../graphql/queries';\nimport { categories, filters } from '../__mock__';\nconst TITLE = 'Авторы';\nconst START_OFFSET = 6;\nconst LIMIT = 6;\nconst Wrap = styled(Column).withConfig({\n  displayName: \"creators__Wrap\",\n  componentId: \"sc-1n5fua5-0\"\n})([\"margin-top:120px;margin-bottom:80px;@media only screen and (max-width:480px){margin-top:0;}\"]);\nconst Container = styled.aside.withConfig({\n  displayName: \"creators__Container\",\n  componentId: \"sc-1n5fua5-1\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\nconst Loader = styled.div.withConfig({\n  displayName: \"creators__Loader\",\n  componentId: \"sc-1n5fua5-2\"\n})([\"display:flex;justify-content:center;width:100%;height:80px;\"]);\nconst chatQueries = {\n  userChats: queries.GET_USER_CHATS,\n  chat: queries.GET_CHAT\n};\nconst chatMutations = {\n  addUserChat: queries.ADD_USER_CHAT,\n  sendMessage: queries.SEND_MESSAGE\n};\n\nconst Creators = ({\n  store\n}) => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [search, setSearch] = useState(null);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [offset, setOffset] = useState(START_OFFSET);\n  const [users, setUsers] = useState(store.users || []);\n  const [loadUsersBySearch, {\n    data: dataBySearch,\n    loading: loadingBySearch,\n    error: errorBySearch,\n    refetch: refetchBySearch\n  }] = useLazyQuery(queries.GET_USERS);\n  const [loadUsers, {\n    data,\n    loading,\n    error,\n    refetch\n  }] = useLazyQuery(queries.GET_USERS);\n  const [isFetching, setIsFetching] = useInfiniteScroll(async () => {\n    const variables = {\n      offset,\n      limit: LIMIT\n    };\n    if (search) await refetchBySearch(variables);else {\n      if (refetch) await refetch(variables);else await loadUsers({\n        variables\n      });\n    }\n    setOffset(prev => prev + LIMIT);\n    setIsFetching(false);\n  }, 800);\n\n  const onSearch = value => {\n    setUsers([]);\n    setOffset(value ? START_OFFSET : 0);\n\n    if (value) {\n      setSearch(value);\n      loadUsersBySearch({\n        variables: {\n          search,\n          offset: 0,\n          limit: START_OFFSET\n        }\n      });\n    } else {\n      setSearch(null);\n      const variables = {\n        offset: 0,\n        limit: LIMIT\n      };\n      if (refetch) refetch(variables);else loadUsers({\n        variables\n      });\n    }\n  };\n\n  useEffect(() => {\n    const isCommon = !search && !loading && data;\n    const isSearch = search && !loadingBySearch && dataBySearch;\n    const result = isCommon || isSearch;\n    if (result) setUsers(prev => [...prev, ...result.getUsers]);\n  }, [search, loading, loadingBySearch, data, dataBySearch]);\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter),\n    onSubmit: onSearch\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: filters\n  }), /*#__PURE__*/React.createElement(Container, null, users.map(author => {\n    var _author$company;\n\n    const owned = author.name === user.name;\n    return /*#__PURE__*/React.createElement(motion.div, {\n      key: author.email,\n      initial: 'pageInitial',\n      animate: 'pageAnimate',\n      variants: {\n        pageInitial: {\n          opacity: 0\n        },\n        pageAnimate: {\n          opacity: 1\n        }\n      }\n    }, /*#__PURE__*/React.createElement(UserCard, {\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        sender: user,\n        recipient: author,\n        queries: chatQueries,\n        mutations: chatMutations\n      }),\n      onMembers: recall(onUserMembers, {\n        id: author === null || author === void 0 ? void 0 : author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: chatQueries,\n        mutations: chatMutations\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: chatQueries,\n        mutations: chatMutations\n      })\n    }));\n  })), search && !loadingBySearch && users.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u043E \\u0432\\u0430\\u0448\\u0435\\u043C\\u0443 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u0443 \\u043D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"), (search && errorBySearch || !search && error) && /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0430\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432\"), (!error && loading || search && !errorBySearch && loadingBySearch || isFetching) && /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)), !search && !loading && !loadingBySearch && !errorBySearch && users.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432 \\u043D\\u0435\\u0442\")));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let users = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET\n      }\n    });\n\n    if (response && response.data) {\n      users = response.data.getUsers;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        users\n      }\n    }\n  };\n}\nexport default Creators;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/creators.js"],"names":["React","useState","useEffect","styled","useSelector","useLazyQuery","motion","Column","Alert","DatePicker","Spinner","Select","initializeApollo","useHelper","useInfiniteScroll","DefaultLayout","UserCard","FilterBar","SearchBar","onUserLink","onUserMembers","onChat","queries","categories","filters","TITLE","START_OFFSET","LIMIT","Wrap","Container","aside","Loader","div","chatQueries","userChats","GET_USER_CHATS","chat","GET_CHAT","chatMutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","Creators","store","recall","user","state","date","onChangeDate","select","onChangeSelect","search","setSearch","visibleFilter","setVisibleFilter","offset","setOffset","users","setUsers","loadUsersBySearch","data","dataBySearch","loading","loadingBySearch","error","errorBySearch","refetch","refetchBySearch","GET_USERS","loadUsers","isFetching","setIsFetching","variables","limit","prev","onSearch","value","isCommon","isSearch","result","getUsers","item","map","author","owned","name","email","pageInitial","opacity","pageAnimate","sender","recipient","mutations","id","auth","company","length","width","textAlign","getServerSideProps","client","response","query","GET_META_AUTHORS","err","console","log","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useSelector } from 'react-redux'\nimport { useLazyQuery } from '@apollo/react-hooks'\nimport { motion } from 'framer-motion'\n\nimport Column from '../atomic-ui/components/Column'\nimport Alert from '../atomic-ui/components/Alert'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Spinner from '../atomic-ui/components/Spinner'\nimport Select from '../atomic-ui/components/Select'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll'\nimport DefaultLayout from '../layouts/default'\nimport UserCard from '../components/UserCard'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport { onUserLink, onUserMembers } from '../store/helpers/user'\nimport { onChat } from '../store/helpers'\nimport queries from '../graphql/queries'\nimport { categories, filters } from '../__mock__'\n\nconst TITLE = 'Авторы'\nconst START_OFFSET = 6\nconst LIMIT = 6\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst Container = styled.aside`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nconst Loader = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  height: 80px;\n`\n\nconst chatQueries = {\n  userChats: queries.GET_USER_CHATS,\n  chat: queries.GET_CHAT\n}\n\nconst chatMutations = {\n  addUserChat: queries.ADD_USER_CHAT,\n  sendMessage: queries.SEND_MESSAGE\n}\n\nconst Creators = ({ store }) => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [search, setSearch] = useState(null)\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [offset, setOffset] = useState(START_OFFSET)\n  const [users, setUsers] = useState(store.users || [])\n\n  const [\n    loadUsersBySearch,\n    { data: dataBySearch, loading: loadingBySearch, error: errorBySearch, refetch: refetchBySearch }\n  ] = useLazyQuery(queries.GET_USERS)\n\n  const [loadUsers, { data, loading, error, refetch }] = useLazyQuery(queries.GET_USERS)\n\n  const [isFetching, setIsFetching] = useInfiniteScroll(async () => {\n    const variables = { offset, limit: LIMIT }\n    if (search) await refetchBySearch(variables)\n    else {\n      if (refetch) await refetch(variables)\n      else await loadUsers({ variables })\n    }\n    setOffset((prev) => prev + LIMIT)\n    setIsFetching(false)\n  }, 800)\n\n  const onSearch = (value) => {\n    setUsers([])\n    setOffset(value ? START_OFFSET : 0)\n    if (value) {\n      setSearch(value)\n      loadUsersBySearch({\n        variables: { search, offset: 0, limit: START_OFFSET }\n      })\n    } else {\n      setSearch(null)\n      const variables = { offset: 0, limit: LIMIT }\n      if (refetch) refetch(variables)\n      else loadUsers({ variables })\n    }\n  }\n\n  useEffect(() => {\n    const isCommon = !search && !loading && data\n    const isSearch = search && !loadingBySearch && dataBySearch\n    const result = isCommon || isSearch\n    if (result) setUsers((prev) => [...prev, ...result.getUsers])\n  }, [search, loading, loadingBySearch, data, dataBySearch])\n\n  return (\n    <DefaultLayout title={TITLE}>\n      <Wrap>\n        <SearchBar onChangeFilter={() => setVisibleFilter(!visibleFilter)} onSubmit={onSearch} />\n\n        <FilterBar\n          isOpen={visibleFilter}\n          filters={[\n            <DatePicker\n              key={0}\n              value={date}\n              placeholder={'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />,\n            <Select\n              key={1}\n              options={categories}\n              placeholder={'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          ]}\n          options={filters}\n        />\n\n        <Container>\n          {users.map((author) => {\n            const owned = author.name === user.name\n\n            return (\n              <motion.div\n                key={author.email}\n                initial={'pageInitial'}\n                animate={'pageAnimate'}\n                variants={{\n                  pageInitial: {\n                    opacity: 0\n                  },\n                  pageAnimate: {\n                    opacity: 1\n                  }\n                }}>\n                <UserCard\n                  user={author}\n                  owned={owned}\n                  onChat={\n                    user.email &&\n                    recall(onChat, {\n                      sender: user,\n                      recipient: author,\n                      queries: chatQueries,\n                      mutations: chatMutations\n                    })\n                  }\n                  onMembers={recall(onUserMembers, { id: author?.email, auth: user?.email })}\n                  onLink={recall(onUserLink, {\n                    id: author.email,\n                    auth: user?.email,\n                    owned,\n                    queries: chatQueries,\n                    mutations: chatMutations\n                  })}\n                  onCompanyLink={recall(onUserLink, {\n                    id: author.company?.email,\n                    auth: user?.email,\n                    queries: chatQueries,\n                    mutations: chatMutations\n                  })}\n                />\n              </motion.div>\n            )\n          })}\n        </Container>\n\n        {search && !loadingBySearch && users.length === 0 && (\n          <Alert style={{ width: '100%', textAlign: 'center' }}>\n            По вашему запросу ничего не найдено\n          </Alert>\n        )}\n\n        {((search && errorBySearch) || (!search && error)) && (\n          <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n            Не удалось загрузить авторов\n          </Alert>\n        )}\n\n        {((!error && loading) || (search && !errorBySearch && loadingBySearch) || isFetching) && (\n          <Loader>\n            <Spinner />\n          </Loader>\n        )}\n\n        {!search && !loading && !loadingBySearch && !errorBySearch && users.length === 0 && (\n          <Alert style={{ width: '100%', textAlign: 'center' }}>Авторов нет</Alert>\n        )}\n      </Wrap>\n    </DefaultLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let users = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET\n      }\n    })\n\n    if (response && response.data) {\n      users = response.data.getUsers\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { users }\n    }\n  }\n}\n\nexport default Creators\n"]},"metadata":{},"sourceType":"module"}
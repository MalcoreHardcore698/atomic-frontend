{"ast":null,"code":"import React, { useState, useMemo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../../apollo';\nimport { useHelper } from '../../hooks/useHelper';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport CategoryCard from '../../components/CategoryCard';\nimport { onCategoryCreate, onCategoryEdit, onCategoryDelete, onCategoryLink } from '../../store/helpers/category';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Категории';\n\nconst Categories = ({\n  store,\n  types\n}) => {\n  const recall = useHelper();\n  const documents = useSelector(state => state.documents);\n  const dispatch = useDispatch();\n  const [datePublish, onChangeDatePublish] = useState();\n  const [dateCreate, onChangeDateCreate] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const categories = useMemo(() => documents || store.categories, [documents, store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'folder',\n    title: TITLE,\n    buttonCreateText: 'Создать категорию',\n    onCreate: recall(onCategoryCreate, {\n      types,\n      mutation: queries.CREATE_CATEGORY\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: datePublish,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDatePublish,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: dateCreate,\n      placeholder: 'Дата создания',\n      onChange: onChangeDateCreate,\n      withNavigate: true\n    })],\n    options: displayMethod === 'list' ? [] : templates.category.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), categories.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0439 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: categories,\n    template: templates.category,\n    onChecked: () => {},\n    onClick: category => recall(onCategoryLink, {\n      id: category.id,\n      category\n    })(),\n    onDelete: category => recall(onCategoryDelete, {\n      id: category.id,\n      category,\n      mutation: queries.DELETE_CATEGORY\n    })(),\n    onEdit: category => recall(onCategoryEdit, {\n      id: category.id,\n      category,\n      types,\n      mutation: queries.UPDATE_CATEGORY\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, categories.map(category => /*#__PURE__*/React.createElement(CategoryCard, {\n    key: v4(),\n    category: category,\n    onChecked: () => {},\n    onLink: recall(onCategoryLink, {\n      id: category.id,\n      category\n    }),\n    onDelete: recall(onCategoryDelete, {\n      id: category.id,\n      category,\n      mutation: queries.DELETE_CATEGORY\n    }),\n    onEdit: recall(onCategoryEdit, {\n      id: category.id,\n      category,\n      types,\n      mutation: queries.UPDATE_CATEGORY\n    })\n  }))));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let categories = [];\n  let types = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_CATEGORIES\n    });\n\n    if (response && response.data) {\n      categories = response.data.getCategories;\n      types = response.data.getCategoryTypes;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        categories\n      },\n      types\n    }\n  };\n}\nexport default Categories;","map":null,"metadata":{},"sourceType":"module"}
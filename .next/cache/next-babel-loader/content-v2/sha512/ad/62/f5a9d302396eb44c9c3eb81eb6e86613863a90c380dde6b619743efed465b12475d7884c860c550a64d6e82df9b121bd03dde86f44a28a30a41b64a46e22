{"ast":null,"code":"import React, { useState, useCallback, useMemo } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport Table from '../../atomic-ui/components/Table';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { GridAside as Container, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"\"]);\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const Content = ({\n  type,\n  limit,\n  template,\n  component,\n  variables,\n  loading,\n  refetch,\n  initialList,\n  startOffset,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const router = useRouter();\n  const displayMethod = useSelector(state => state.root.displayMethod);\n  const pageStart = useMemo(() => {\n    var _router$query;\n\n    return Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1;\n  }, [router]);\n  const [offset, setOffset] = useState(startOffset);\n  const [items, setItems] = useState(initialList || []);\n  const [isEnd, setIsEnd] = useState(false);\n  const onCompleted = useCallback(data => {\n    const list = data[type];\n    if (list.length === 0) setIsEnd(true);\n    if (list.length > 0) setItems(prev => [...prev, ...list]);\n    if (limit) setOffset(prev => prev + limit);\n  }, [type, limit, setIsEnd, setOffset, setItems]);\n  console.log(items, offset);\n  const loadMore = useCallback(() => {\n    if (!isEnd && !loading && refetch) {\n      refetch({ ...variables,\n        offset,\n        limit\n      }).then(response => response.data && onCompleted(response.data));\n    }\n  }, [offset, limit, loading, variables, refetch, isEnd]);\n  const renderContent = useCallback(() => {\n    if (displayMethod === 'grid') {\n      return /*#__PURE__*/React.createElement(Container, null, (items || []).map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n        key: item.id || item.email\n      }, component(item))));\n    }\n\n    return /*#__PURE__*/React.createElement(Table, {\n      data: items,\n      template: template,\n      onChecked: onChecked,\n      onClick: onClick,\n      onEdit: onEdit,\n      onDelete: onDelete\n    });\n  }, [items, displayMethod, onChecked, onClick, onEdit, onDelete]);\n\n  const renderLoader = () => /*#__PURE__*/React.createElement(LowerLoader, {\n    key: 'loader'\n  }, /*#__PURE__*/React.createElement(Spinner, null));\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    hasMore: !isEnd,\n    pageStart: pageStart || 0,\n    loadMore: loadMore,\n    loader: renderLoader()\n  }, renderContent());\n};\nexport const List = ({\n  type,\n  query,\n  template,\n  variables,\n  component,\n  limit = 6,\n  startOffset = 6,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(query, {\n    variables: { ...variables,\n      offset: 0,\n      limit\n    }\n  });\n  return /*#__PURE__*/React.createElement(Content, {\n    type: type,\n    limit: limit,\n    refetch: refetch,\n    loading: loading,\n    template: template,\n    component: component,\n    startOffset: startOffset,\n    initialList: type && data && data[type],\n    onChecked: onChecked,\n    onDelete: onDelete,\n    onClick: onClick,\n    onEdit: onEdit\n  });\n};\nexport default List;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/List/index.js"],"names":["React","useState","useCallback","useMemo","InfiniteScroll","useQuery","useSelector","useRouter","styled","Column","Table","Alert","Spinner","GridAside","Container","LowerLoader","LazyLoad","Wrap","CenterAlert","Content","type","limit","template","component","variables","loading","refetch","initialList","startOffset","onChecked","onClick","onEdit","onDelete","router","displayMethod","state","root","pageStart","Number","query","page","offset","setOffset","items","setItems","isEnd","setIsEnd","onCompleted","data","list","length","prev","console","log","loadMore","then","response","renderContent","map","item","id","email","renderLoader","List"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Table from '../../atomic-ui/components/Table'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { GridAside as Container, LowerLoader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\n\nexport const Wrap = styled(Column)``\n\nexport const CenterAlert = styled(Alert)`\n  width: 100%;\n  text-align: center;\n`\n\nexport const Content = ({\n  type,\n  limit,\n  template,\n  component,\n  variables,\n  loading,\n  refetch,\n  initialList,\n  startOffset,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const router = useRouter()\n  const displayMethod = useSelector((state) => state.root.displayMethod)\n\n  const pageStart = useMemo(() => Number(router.query?.page) || 1, [router])\n\n  const [offset, setOffset] = useState(startOffset)\n  const [items, setItems] = useState(initialList || [])\n  const [isEnd, setIsEnd] = useState(false)\n\n  const onCompleted = useCallback(\n    (data) => {\n      const list = data[type]\n      if (list.length === 0) setIsEnd(true)\n      if (list.length > 0) setItems((prev) => [...prev, ...list])\n      if (limit) setOffset((prev) => prev + limit)\n    },\n    [type, limit, setIsEnd, setOffset, setItems]\n  )\n\n  console.log(items, offset)\n\n  const loadMore = useCallback(() => {\n    if (!isEnd && !loading && refetch) {\n      refetch({ ...variables, offset, limit }).then(\n        (response) => response.data && onCompleted(response.data)\n      )\n    }\n  }, [offset, limit, loading, variables, refetch, isEnd])\n\n  const renderContent = useCallback(() => {\n    if (displayMethod === 'grid') {\n      return (\n        <Container>\n          {(items || []).map((item) => (\n            <LazyLoad key={item.id || item.email}>{component(item)}</LazyLoad>\n          ))}\n        </Container>\n      )\n    }\n    return (\n      <Table\n        data={items}\n        template={template}\n        onChecked={onChecked}\n        onClick={onClick}\n        onEdit={onEdit}\n        onDelete={onDelete}\n      />\n    )\n  }, [items, displayMethod, onChecked, onClick, onEdit, onDelete])\n\n  const renderLoader = () => (\n    <LowerLoader key={'loader'}>\n      <Spinner />\n    </LowerLoader>\n  )\n\n  return (\n    <InfiniteScroll\n      hasMore={!isEnd}\n      pageStart={pageStart || 0}\n      loadMore={loadMore}\n      loader={renderLoader()}>\n      {renderContent()}\n    </InfiniteScroll>\n  )\n}\n\nexport const List = ({\n  type,\n  query,\n  template,\n  variables,\n  component,\n  limit = 6,\n  startOffset = 6,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const { data, loading, refetch } = useQuery(query, {\n    variables: {\n      ...variables,\n      offset: 0,\n      limit\n    }\n  })\n\n  return (\n    <Content\n      type={type}\n      limit={limit}\n      refetch={refetch}\n      loading={loading}\n      template={template}\n      component={component}\n      startOffset={startOffset}\n      initialList={type && data && data[type]}\n      onChecked={onChecked}\n      onDelete={onDelete}\n      onClick={onClick}\n      onEdit={onEdit}\n    />\n  )\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}
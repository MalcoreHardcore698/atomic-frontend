{"ast":null,"code":"import React from 'react';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Row from '../../atomic-ui/components/Row';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Text from '../../atomic-ui/components/Text';\nimport Message from '../../atomic-ui/components/Message';\nimport Input from '../../atomic-ui/components/Input';\nimport styled from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"TicketChat__Wrap\",\n  componentId: \"sc-3e5jur-0\"\n})([\"width:100%;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"TicketChat__Header\",\n  componentId: \"sc-3e5jur-1\"\n})([\"justify-content:space-between;width:100%;\"]);\nexport const Messages = styled(Column).withConfig({\n  displayName: \"TicketChat__Messages\",\n  componentId: \"sc-3e5jur-2\"\n})([\"position:relative;background:#fbfbfb;border-radius:var(--surface-border-radius);padding:var(--default-gap);padding-top:55px;flex-grow:1;\"]);\nexport const Meta = styled(Row).withConfig({\n  displayName: \"TicketChat__Meta\",\n  componentId: \"sc-3e5jur-3\"\n})([\"position:absolute;top:0;left:0;width:100%;justify-content:space-between;padding:8px var(--default-gap);border-radius:var(--surface-border-radius) var(--surface-border-radius) 0 0;background:var(--ghost-color-background);\"]);\nexport const Empty = styled(Text).withConfig({\n  displayName: \"TicketChat__Empty\",\n  componentId: \"sc-3e5jur-4\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;\"]);\nexport const TicketChat = ({\n  ticket,\n  loading,\n  onLink,\n  onFinish,\n  onReport,\n  onAttach,\n  onSubmit,\n  ...props\n}) => {\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(Wrap, props, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Difinition, {\n    label: 'Номер обращения',\n    text: (ticket === null || ticket === void 0 ? void 0 : ticket.token) || '-'\n  }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    onClick: onFinish,\n    disabled: !ticket\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: onReport,\n    kind: 'icon',\n    appearance: 'red',\n    disabled: !ticket\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'flag',\n    stroke: 'white'\n  })))), /*#__PURE__*/React.createElement(Messages, null, /*#__PURE__*/React.createElement(Meta, null, /*#__PURE__*/React.createElement(Text, null, \"\\u0422\\u0435\\u043C\\u0430: \", ticket.title), /*#__PURE__*/React.createElement(Text, null, ticket.createdAt)), ticket && ticket.messages && ticket.messages.length > 0 ? ticket.messages.map(message => /*#__PURE__*/React.createElement(Message, {\n    key: message.id,\n    avatar: message.avatar,\n    side: message.side,\n    name: message.name,\n    text: message.text,\n    time: message.time,\n    onLink: onLink\n  })) : /*#__PURE__*/React.createElement(Empty, null, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\")), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    onSubmit: onAttach\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'attach',\n    stroke: 'white'\n  })), /*#__PURE__*/React.createElement(Input, {\n    placeholder: 'Отправьте сообщенение...',\n    appearance: 'ghost'\n  }), /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    onSubmit: onSubmit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'send',\n    stroke: 'white'\n  }))));\n};\nexport default TicketChat;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/TicketChat/index.js"],"names":["React","Difinition","Row","Button","Icon","Text","Message","Input","styled","Column","Spinner","Loader","Wrap","Header","Messages","Meta","Empty","TicketChat","ticket","loading","onLink","onFinish","onReport","onAttach","onSubmit","props","token","title","createdAt","messages","length","map","message","id","avatar","side","name","text","time"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport Row from '../../atomic-ui/components/Row'\nimport Button from '../../atomic-ui/components/Button'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Text from '../../atomic-ui/components/Text'\nimport Message from '../../atomic-ui/components/Message'\nimport Input from '../../atomic-ui/components/Input'\nimport styled from 'styled-components'\nimport Column from '../../atomic-ui/components/Column'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport { Loader } from '../Styled'\n\nexport const Wrap = styled(Column)`\n  width: 100%;\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n  width: 100%;\n`\n\nexport const Messages = styled(Column)`\n  position: relative;\n  background: #fbfbfb;\n  border-radius: var(--surface-border-radius);\n  padding: var(--default-gap);\n  padding-top: 55px;\n  flex-grow: 1;\n`\n\nexport const Meta = styled(Row)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  justify-content: space-between;\n  padding: 8px var(--default-gap);\n  border-radius: var(--surface-border-radius) var(--surface-border-radius) 0 0;\n  background: var(--ghost-color-background);\n`\n\nexport const Empty = styled(Text)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`\n\nexport const TicketChat = ({\n  ticket,\n  loading,\n  onLink,\n  onFinish,\n  onReport,\n  onAttach,\n  onSubmit,\n  ...props\n}) => {\n  if (loading) {\n    return (\n      <Loader>\n        <Spinner />\n      </Loader>\n    )\n  }\n\n  return (\n    <Wrap {...props}>\n      <Header>\n        <Difinition label={'Номер обращения'} text={ticket?.token || '-'} />\n\n        <Row>\n          <Button onClick={onFinish} disabled={!ticket}>\n            Закрыть обращение\n          </Button>\n          <Button onClick={onReport} kind={'icon'} appearance={'red'} disabled={!ticket}>\n            <Icon icon={'flag'} stroke={'white'} />\n          </Button>\n        </Row>\n      </Header>\n\n      <Messages>\n        <Meta>\n          <Text>Тема: {ticket.title}</Text>\n          <Text>{ticket.createdAt}</Text>\n        </Meta>\n\n        {ticket && ticket.messages && ticket.messages.length > 0 ? (\n          ticket.messages.map((message) => (\n            <Message\n              key={message.id}\n              avatar={message.avatar}\n              side={message.side}\n              name={message.name}\n              text={message.text}\n              time={message.time}\n              onLink={onLink}\n            />\n          ))\n        ) : (\n          <Empty>Выберите обращение</Empty>\n        )}\n      </Messages>\n\n      <Row>\n        <Button kind={'icon'} onSubmit={onAttach}>\n          <Icon icon={'attach'} stroke={'white'} />\n        </Button>\n        <Input placeholder={'Отправьте сообщенение...'} appearance={'ghost'} />\n        <Button kind={'icon'} onSubmit={onSubmit}>\n          <Icon icon={'send'} stroke={'white'} />\n        </Button>\n      </Row>\n    </Wrap>\n  )\n}\n\nexport default TicketChat\n"]},"metadata":{},"sourceType":"module"}
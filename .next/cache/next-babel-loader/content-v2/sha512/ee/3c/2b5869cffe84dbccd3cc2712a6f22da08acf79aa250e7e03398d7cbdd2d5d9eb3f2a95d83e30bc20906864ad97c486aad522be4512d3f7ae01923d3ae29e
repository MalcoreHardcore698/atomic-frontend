{"ast":null,"code":"import React from 'react';\nimport { initializeApollo } from '../apollo';\nimport ContentLayout from '../layouts/content';\nimport { GridAside as Container } from '../components/Styled';\nimport UserList from '../components/UserList';\nimport queries from '../graphql/queries';\nconst TITLE = 'Авторы';\nconst START_OFFSET = 6;\n\nconst Creators = ({\n  store\n}) => /*#__PURE__*/React.createElement(ContentLayout, {\n  title: TITLE,\n  filters: [{\n    type: 'DATEPICKER',\n    placeholder: 'Дата регистарции'\n  }, {\n    type: 'SELECT',\n    placeholder: 'Компания',\n    options: store === null || store === void 0 ? void 0 : store.companies.map(company => ({\n      value: company.email,\n      label: company.name\n    }))\n  }],\n  options: [{\n    label: 'Компания',\n    value: 'company'\n  }, {\n    label: 'Участники',\n    value: 'members'\n  }, {\n    label: 'Дата регистарции',\n    value: 'createdAt'\n  }],\n  query: queries.GET_USERS,\n  store: {\n    documents: store === null || store === void 0 ? void 0 : store.users\n  }\n}, ({\n  documents\n}) => /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(UserList, {\n  initialList: documents\n})));\n\nexport async function getServerSideProps({\n  query\n}) {\n  const client = initializeApollo();\n  let users = [];\n  let companies = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS,\n      variables: {\n        offset: (query === null || query === void 0 ? void 0 : query.page) * START_OFFSET || 0,\n        limit: START_OFFSET,\n        role: 'User'\n      }\n    });\n\n    if (response && response.data) {\n      users = response.data.getUsers;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        users,\n        companies\n      }\n    }\n  };\n}\nexport default Creators;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/creators.js"],"names":["React","initializeApollo","ContentLayout","GridAside","Container","UserList","queries","TITLE","START_OFFSET","Creators","store","type","placeholder","options","companies","map","company","value","email","label","name","GET_USERS","documents","users","getServerSideProps","query","client","response","GET_META_AUTHORS","variables","offset","page","limit","role","data","getUsers","err","console","log","props"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,WAAjC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,SAAS,IAAIC,SAAtB,QAAuC,sBAAvC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,KAAK,GAAG,QAAd;AACA,MAAMC,YAAY,GAAG,CAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACf,oBAAC,aAAD;AACE,EAAA,KAAK,EAAEH,KADT;AAEE,EAAA,OAAO,EAAE,CACP;AAAEI,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,WAAW,EAAE;AAAnC,GADO,EAEP;AACED,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,WAAW,EAAE,UAFf;AAGEC,IAAAA,OAAO,EAAEH,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEI,SAAP,CAAiBC,GAAjB,CAAsBC,OAAD,KAAc;AAC1CC,MAAAA,KAAK,EAAED,OAAO,CAACE,KAD2B;AAE1CC,MAAAA,KAAK,EAAEH,OAAO,CAACI;AAF2B,KAAd,CAArB;AAHX,GAFO,CAFX;AAaE,EAAA,OAAO,EAAE,CACP;AAAED,IAAAA,KAAK,EAAE,UAAT;AAAqBF,IAAAA,KAAK,EAAE;AAA5B,GADO,EAEP;AAAEE,IAAAA,KAAK,EAAE,WAAT;AAAsBF,IAAAA,KAAK,EAAE;AAA7B,GAFO,EAGP;AAAEE,IAAAA,KAAK,EAAE,kBAAT;AAA6BF,IAAAA,KAAK,EAAE;AAApC,GAHO,CAbX;AAkBE,EAAA,KAAK,EAAEX,OAAO,CAACe,SAlBjB;AAmBE,EAAA,KAAK,EAAE;AAAEC,IAAAA,SAAS,EAAEZ,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEa;AAApB;AAnBT,GAoBG,CAAC;AAAED,EAAAA;AAAF,CAAD,kBACC,oBAAC,SAAD,qBACE,oBAAC,QAAD;AAAU,EAAA,WAAW,EAAEA;AAAvB,EADF,CArBJ,CADF;;AA6BA,OAAO,eAAeE,kBAAf,CAAkC;AAAEC,EAAAA;AAAF,CAAlC,EAA6C;AAClD,QAAMC,MAAM,GAAGzB,gBAAgB,EAA/B;AAEA,MAAIsB,KAAK,GAAG,EAAZ;AACA,MAAIT,SAAS,GAAG,EAAhB;;AAEA,MAAI;AACF,UAAMa,QAAQ,GAAG,MAAMD,MAAM,CAACD,KAAP,CAAa;AAClCA,MAAAA,KAAK,EAAEnB,OAAO,CAACsB,gBADmB;AAElCC,MAAAA,SAAS,EAAE;AACTC,QAAAA,MAAM,EAAE,CAAAL,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEM,IAAP,IAAcvB,YAAd,IAA8B,CAD7B;AAETwB,QAAAA,KAAK,EAAExB,YAFE;AAGTyB,QAAAA,IAAI,EAAE;AAHG;AAFuB,KAAb,CAAvB;;AASA,QAAIN,QAAQ,IAAIA,QAAQ,CAACO,IAAzB,EAA+B;AAC7BX,MAAAA,KAAK,GAAGI,QAAQ,CAACO,IAAT,CAAcC,QAAtB;AACD;AACF,GAbD,CAaE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAED,SAAO;AACLG,IAAAA,KAAK,EAAE;AACL7B,MAAAA,KAAK,EAAE;AACLa,QAAAA,KADK;AAELT,QAAAA;AAFK;AADF;AADF,GAAP;AAQD;AAED,eAAeL,QAAf","sourcesContent":["import React from 'react'\n\nimport { initializeApollo } from '../apollo'\nimport ContentLayout from '../layouts/content'\nimport { GridAside as Container } from '../components/Styled'\nimport UserList from '../components/UserList'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Авторы'\nconst START_OFFSET = 6\n\nconst Creators = ({ store }) => (\n  <ContentLayout\n    title={TITLE}\n    filters={[\n      { type: 'DATEPICKER', placeholder: 'Дата регистарции' },\n      {\n        type: 'SELECT',\n        placeholder: 'Компания',\n        options: store?.companies.map((company) => ({\n          value: company.email,\n          label: company.name\n        }))\n      }\n    ]}\n    options={[\n      { label: 'Компания', value: 'company' },\n      { label: 'Участники', value: 'members' },\n      { label: 'Дата регистарции', value: 'createdAt' }\n    ]}\n    query={queries.GET_USERS}\n    store={{ documents: store?.users }}>\n    {({ documents }) => (\n      <Container>\n        <UserList initialList={documents} />\n      </Container>\n    )}\n  </ContentLayout>\n)\n\nexport async function getServerSideProps({ query }) {\n  const client = initializeApollo()\n\n  let users = []\n  let companies = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS,\n      variables: {\n        offset: query?.page * START_OFFSET || 0,\n        limit: START_OFFSET,\n        role: 'User'\n      }\n    })\n\n    if (response && response.data) {\n      users = response.data.getUsers\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        users,\n        companies\n      }\n    }\n  }\n}\n\nexport default Creators\n"]},"metadata":{},"sourceType":"module"}
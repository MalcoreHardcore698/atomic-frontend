{"ast":null,"code":"import React, { useState } from 'react';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport TextArea from '../../atomic-ui/components/TextArea';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nexport const Category = ({\n  category,\n  categoryTypes,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  const [typeError, setTypeError] = useState(false);\n  const [type, setType] = useState(category && category.type && {\n    value: category.type,\n    label: getLabelCategory(category.type)\n  } || null);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => {\n      if (type) {\n        onSubmit({ ...form,\n          type\n        }, action);\n      } else {\n        setTypeError(true);\n      }\n    }\n  }, ({\n    register,\n    loading,\n    errors,\n    getValues\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.name && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: 'name',\n    ref: register({\n      required: true\n    }),\n    defaultValue: (category === null || category === void 0 ? void 0 : category.name) || getValues('name'),\n    placeholder: 'Название',\n    appearance: 'ghost',\n    disabled: loading\n  }), typeError && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0438\\u043F \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Select, {\n    name: 'type',\n    appearance: 'ghost',\n    defaultValue: type,\n    onChange: value => {\n      setType(value);\n      setTypeError(false);\n    },\n    placeholder: 'Выберите тип',\n    options: categoryTypes.map(type => ({\n      value: type,\n      label: getLabelCategory(type)\n    })),\n    isLoading: loading,\n    isClearable: true\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    name: 'description',\n    ref: register(),\n    defaultValue: (category === null || category === void 0 ? void 0 : category.description) || getValues('description'),\n    placeholder: 'Описание',\n    appearance: 'ghost',\n    disabled: loading\n  })), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      flexGrow: 1\n    },\n    type: 'submit',\n    disabled: loading\n  }, category ? 'Сохранить' : 'Создать'))));\n};\nCategory.defaultProps = {\n  create: true\n};\nexport default Category;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormCategory/index.js"],"names":["React","useState","Row","Column","Title","Input","Button","Select","TextArea","Alert","getLabelCategory","Form","Category","category","categoryTypes","mutation","appearance","className","onSubmit","typeError","setTypeError","type","setType","value","label","form","action","register","loading","errors","getValues","name","width","required","map","description","flexGrow","defaultProps","create"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Select from '../../atomic-ui/components/Select'\nimport TextArea from '../../atomic-ui/components/TextArea'\nimport Alert from '../../atomic-ui/components/Alert'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\n\nimport Form from '../Form'\n\nexport const Category = ({\n  category,\n  categoryTypes,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  const [typeError, setTypeError] = useState(false)\n  const [type, setType] = useState(\n    (category &&\n      category.type && {\n        value: category.type,\n        label: getLabelCategory(category.type)\n      }) ||\n      null\n  )\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) => {\n        if (type) {\n          onSubmit({ ...form, type }, action)\n        } else {\n          setTypeError(true)\n        }\n      }}>\n      {({ register, loading, errors, getValues }) => (\n        <React.Fragment>\n          <Column>\n            <Title tag={'h4'}>Основное</Title>\n\n            {errors && errors.name && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Введите название категории\n              </Alert>\n            )}\n            <Input\n              type={'text'}\n              name={'name'}\n              ref={register({ required: true })}\n              defaultValue={category?.name || getValues('name')}\n              placeholder={'Название'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n\n            {typeError && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Выберите тип категории\n              </Alert>\n            )}\n            <Select\n              name={'type'}\n              appearance={'ghost'}\n              defaultValue={type}\n              onChange={(value) => {\n                setType(value)\n                setTypeError(false)\n              }}\n              placeholder={'Выберите тип'}\n              options={categoryTypes.map((type) => ({\n                value: type,\n                label: getLabelCategory(type)\n              }))}\n              isLoading={loading}\n              isClearable\n            />\n\n            <TextArea\n              name={'description'}\n              ref={register()}\n              defaultValue={category?.description || getValues('description')}\n              placeholder={'Описание'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n          </Column>\n\n          <Row>\n            <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n              {category ? 'Сохранить' : 'Создать'}\n            </Button>\n          </Row>\n        </React.Fragment>\n      )}\n    </Form>\n  )\n}\n\nCategory.defaultProps = {\n  create: true\n}\n\nexport default Category\n"]},"metadata":{},"sourceType":"module"}
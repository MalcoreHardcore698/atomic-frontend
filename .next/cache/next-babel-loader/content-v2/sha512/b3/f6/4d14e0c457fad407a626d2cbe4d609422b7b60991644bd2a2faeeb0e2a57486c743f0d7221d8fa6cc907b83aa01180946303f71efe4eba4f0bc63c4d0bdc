{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Member from '../../atomic-ui/components/Member';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Search from '../../atomic-ui/components/Search';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport { Wrap as WrapForm } from '../Form';\nimport MessengerChat from '../MessengerChat';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Messenger__Wrap\",\n  componentId: \"sc-1hnkbvn-0\"\n})([\"height:100%;flex-grow:1;\", \"{width:100%;padding:0;}@media only screen and (max-width:568px){flex-direction:column;}\", \" \", \" \", \"\"], WrapForm, ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const ChatsSearch = styled(Search).withConfig({\n  displayName: \"Messenger__ChatsSearch\",\n  componentId: \"sc-1hnkbvn-1\"\n})([\"margin-bottom:10px;\"]);\nexport const Chats = styled(Column).withConfig({\n  displayName: \"Messenger__Chats\",\n  componentId: \"sc-1hnkbvn-2\"\n})([\"grid-gap:0;width:320px;@media only screen and (max-width:568px){width:100%;}\"]);\nexport const Chat = styled(Member).withConfig({\n  displayName: \"Messenger__Chat\",\n  componentId: \"sc-1hnkbvn-3\"\n})([\"margin:0;padding:10px 0;border-radius:var(--surface-border-radius);transition:all 150ms ease;\", \"\"], ({\n  active\n}) => active && css([\"background:var(--input-background);padding:10px;\"]));\nexport const getUnreadedMessages = (messages, sender) => (messages || []).reduce((acc, item) => {\n  var _item$user;\n\n  return acc + (item.type === 'UNREADED' && ((_item$user = item.user) === null || _item$user === void 0 ? void 0 : _item$user.email) !== sender ? 1 : 0);\n}, 0);\nexport const getLastMessage = (messages, sender) => {\n  var _message$user;\n\n  const list = messages || [];\n  const message = list[list.length - 1];\n  if (!message) return '';\n  return `${((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.email) === sender ? 'Вы: ' : ''}${message.text}`;\n};\nexport const getExtendMessages = (messages, sender) => messages.map(message => ({ ...message,\n  side: sender === message.user.email ? 'owner' : 'observer'\n}));\nexport const Messenger = ({\n  appearance,\n  recipient,\n  sender,\n  onAttach,\n  onMemberLink,\n  ...props\n}) => {\n  const [currentChat, setCurrentChat] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [userChats, setUserChats] = useState([]);\n  const [ticketChats, setTicketChats] = useState([]);\n  const [getChat, {\n    data: chat,\n    loading: loadingChat,\n    error: errorChat,\n    refetch: refetchChat\n  }] = useLazyQuery(queries.GET_CHAT);\n  const [getTicket, {\n    data: ticket,\n    loading: loadingTicket,\n    error: errorTicket,\n    refetch: refetchTicket\n  }] = useLazyQuery(queries.GET_TICKET);\n  const {\n    data: dataUserChats,\n    loading: loadingUserChats,\n    error: errorUserChats,\n    refetch: getUserChats\n  } = useQuery(queries.GET_USER_CHATS);\n  const {\n    data: dataTicketChats,\n    loading: loadingTicketChats,\n    error: errorUserTickets,\n    refetch: getUserTickets\n  } = useQuery(queries.GET_USER_TICKETS);\n  const [sendMessage, {\n    data: dataSendMessage,\n    loading: loadingSendMessage,\n    error: errorSendMessage\n  }] = useMutation(queries.SEND_MESSAGE);\n  const [sendTicketMessage, {\n    data: dataUserSendMessage,\n    loading: loadingUserSendMessage,\n    error: errorUserSendMessage\n  }] = useMutation(queries.SEND_TICKET_MESSAGE);\n  const [addUserChat] = useMutation(queries.ADD_USER_CHAT);\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: {\n          recipient\n        }\n      }).then(() => {\n        getUserChats();\n        getUserTickets();\n      });\n    }\n  }, [recipient, addUserChat]);\n  useEffect(() => {\n    if (recipient && !currentChat && !loadingUserChats && dataUserChats !== null && dataUserChats !== void 0 && dataUserChats.getUserChats) {\n      var _dataUserChats$getUse;\n\n      const id = (_dataUserChats$getUse = dataUserChats.getUserChats.find(userChat => userChat.chat.members.find(member => member.email === recipient))) === null || _dataUserChats$getUse === void 0 ? void 0 : _dataUserChats$getUse.chat.id;\n      if (id) getChat({\n        variables: {\n          id\n        }\n      });\n    }\n  }, [recipient, dataUserChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingChat && chat !== null && chat !== void 0 && chat.getChat) {\n      setCurrentChat(chat.getChat);\n    }\n  }, [chat, loadingChat]);\n  useEffect(() => {\n    if (!loadingTicket && ticket !== null && ticket !== void 0 && ticket.getTicket) {\n      setCurrentChat(ticket.getTicket);\n    }\n  }, [ticket, loadingTicket]);\n  useEffect(() => {\n    if (!loadingSendMessage && dataSendMessage) {\n      setCurrentChat(prev => ({ ...prev,\n        messages: getExtendMessages(dataSendMessage.sendMessage, sender)\n      }));\n    }\n  }, [sender, dataSendMessage, loadingSendMessage]);\n  useEffect(() => {\n    if (!loadingUserSendMessage && dataUserSendMessage) {\n      setCurrentChat(prev => ({ ...prev,\n        messages: getExtendMessages(dataUserSendMessage.sendTicketMessage, sender)\n      }));\n    }\n  }, [sender, dataUserSendMessage, loadingUserSendMessage]);\n  useEffect(() => {\n    if (!loadingUserChats && dataUserChats !== null && dataUserChats !== void 0 && dataUserChats.getUserChats) {\n      setUserChats(dataUserChats.getUserChats);\n    }\n  }, [dataUserChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingTicketChats && dataTicketChats !== null && dataTicketChats !== void 0 && dataTicketChats.getUserTickets) {\n      setTicketChats(dataTicketChats.getUserTickets);\n    }\n  }, [dataTicketChats, loadingTicketChats]);\n  useEffect(() => {\n    setChats(userChats.concat(ticketChats));\n  }, [userChats, ticketChats]);\n  return /*#__PURE__*/React.createElement(Wrap, _extends({}, props, {\n    appearance: appearance\n  }), /*#__PURE__*/React.createElement(Chats, null, /*#__PURE__*/React.createElement(ChatsSearch, {\n    appearance: 'ghost'\n  }), !loadingChat && !loadingTicket && !loadingUserChats && !loadingTicketChats && !loadingSendMessage && !loadingUserSendMessage && chats.length > 0 ? chats.map(chat => {\n    var _chat$chat, _chat$chat2, _chat$counsellor, _chat$chat3, _chat$chat3$members$f, _chat$counsellor2, _chat$counsellor2$ava, _chat$chat4, _chat$chat5, _chat$chat6, _chat$chat7, _chat$chat10;\n\n    return /*#__PURE__*/React.createElement(Chat, {\n      key: ((_chat$chat = chat.chat) === null || _chat$chat === void 0 ? void 0 : _chat$chat.id) || chat.id,\n      name: ((_chat$chat2 = chat.chat) === null || _chat$chat2 === void 0 ? void 0 : _chat$chat2.members.filter(member => member.email !== sender)[0].name) || ((_chat$counsellor = chat.counsellor) === null || _chat$counsellor === void 0 ? void 0 : _chat$counsellor.name),\n      avatar: ((_chat$chat3 = chat.chat) === null || _chat$chat3 === void 0 ? void 0 : (_chat$chat3$members$f = _chat$chat3.members.filter(member => member.email !== sender)[0].avatar) === null || _chat$chat3$members$f === void 0 ? void 0 : _chat$chat3$members$f.path) || ((_chat$counsellor2 = chat.counsellor) === null || _chat$counsellor2 === void 0 ? void 0 : (_chat$counsellor2$ava = _chat$counsellor2.avatar) === null || _chat$counsellor2$ava === void 0 ? void 0 : _chat$counsellor2$ava.path) || '/images/avatar-default.png',\n      budge: ((_chat$chat4 = chat.chat) === null || _chat$chat4 === void 0 ? void 0 : _chat$chat4.messages) && getUnreadedMessages((_chat$chat5 = chat.chat) === null || _chat$chat5 === void 0 ? void 0 : _chat$chat5.messages, sender) || chat.messages && getUnreadedMessages(chat.messages, sender) || null,\n      position: ((_chat$chat6 = chat.chat) === null || _chat$chat6 === void 0 ? void 0 : _chat$chat6.messages) && getLastMessage((_chat$chat7 = chat.chat) === null || _chat$chat7 === void 0 ? void 0 : _chat$chat7.messages, sender) || chat.messages && getLastMessage(chat.messages, sender) || null,\n      onClick: async () => {\n        var _chat$chat8;\n\n        setLoading(true);\n\n        if ((_chat$chat8 = chat.chat) !== null && _chat$chat8 !== void 0 && _chat$chat8.id) {\n          var _chat$chat9;\n\n          const variables = {\n            id: (_chat$chat9 = chat.chat) === null || _chat$chat9 === void 0 ? void 0 : _chat$chat9.id\n          };\n          if (refetchChat) await refetchChat(variables);else await getChat({\n            variables\n          });\n          setCurrentChat(chat.chat);\n        } else {\n          const variables = {\n            id: chat.id\n          };\n          if (refetchTicket) await refetchTicket(variables);else await getTicket({\n            variables\n          });\n          setCurrentChat(chat);\n        }\n\n        setLoading(false);\n      },\n      active: currentChat && currentChat.id === (((_chat$chat10 = chat.chat) === null || _chat$chat10 === void 0 ? void 0 : _chat$chat10.id) || chat.id)\n    });\n  }) : loadingChat || loadingTicket || loadingUserChats || loadingTicketChats || loadingSendMessage || loadingUserSendMessage ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      marginTop: 15\n    }\n  }, \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0435 \\u0447\\u0430\\u0442\\u044B \\u043E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u044E\\u0442\")), /*#__PURE__*/React.createElement(MessengerChat, {\n    chat: currentChat && { ...currentChat,\n      messages: getExtendMessages(currentChat.messages, sender)\n    },\n    appearance: 'ghost',\n    error: errorChat || errorTicket || errorUserChats || errorUserTickets || errorSendMessage || errorUserSendMessage,\n    loading: loading || loadingTicket || loadingChat || loadingUserChats || loadingTicketChats || loadingSendMessage || loadingUserSendMessage,\n    onLink: onMemberLink,\n    onAttach: onAttach,\n    onSubmit: value => {\n      if (currentChat.members) {\n        const candidate = currentChat.members.find(member => member.email !== sender);\n        sendMessage({\n          variables: {\n            sender,\n            recipient: recipient || (candidate === null || candidate === void 0 ? void 0 : candidate.email),\n            text: value\n          }\n        });\n      } else {\n        var _currentChat$author;\n\n        sendTicketMessage({\n          variables: {\n            ticket: currentChat.id,\n            recipient: (_currentChat$author = currentChat.author) === null || _currentChat$author === void 0 ? void 0 : _currentChat$author.email,\n            text: value,\n            isClient: true\n          }\n        });\n      }\n    }\n  }));\n};\nMessenger.defaultProps = {\n  appearance: 'default'\n};\nexport default Messenger;","map":null,"metadata":{},"sourceType":"module"}
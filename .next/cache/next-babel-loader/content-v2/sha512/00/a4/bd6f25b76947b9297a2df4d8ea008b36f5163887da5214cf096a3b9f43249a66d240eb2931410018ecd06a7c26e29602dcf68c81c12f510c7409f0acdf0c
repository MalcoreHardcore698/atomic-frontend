{"ast":null,"code":"import React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Image from '../../atomic-ui/components/Image';\nimport Meta from '../../atomic-ui/components/Meta';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport { CardContent, Surface } from '../Styled';\nimport { useEntityQuery } from '../../hooks/useEntityQuery';\nimport { onCategoryEdit, onCategoryDelete } from '../../store/helpers/category';\nimport { useHelper } from '../../hooks/useHelper';\nimport CardActions from '../CardActions';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Surface).withConfig({\n  displayName: \"CategoryCard__Wrap\",\n  componentId: \"sc-10psc0b-0\"\n})([\"height:100%;min-height:100px;\"]);\nexport const Poster = styled(Image).withConfig({\n  displayName: \"CategoryCard__Poster\",\n  componentId: \"sc-10psc0b-1\"\n})([\"object-fit:cover;width:100%;height:512px;border-radius:var(--surface-border-radius);\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"CategoryCard__Header\",\n  componentId: \"sc-10psc0b-2\"\n})([\"justify-content:space-between;align-items:center;\"]);\nexport const Name = styled(Title).withConfig({\n  displayName: \"CategoryCard__Name\",\n  componentId: \"sc-10psc0b-3\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\nexport const Card = ({\n  category,\n  checked,\n  appearance,\n  className,\n  style,\n  onLink,\n  onChecked,\n  onDelete,\n  onEdit\n}) => {\n  const recall = useHelper();\n  const {\n    setQuery\n  } = useEntityQuery();\n\n  const handleEdit = () => {\n    recall(onCategoryEdit, {\n      id: category.id,\n      category,\n      mutation: queries.UPDATE_CATEGORY\n    })();\n    if (onEdit) onEdit();\n  };\n\n  const handleDelete = () => {\n    recall(onCategoryDelete, {\n      id: category.id,\n      category,\n      mutation: queries.DELETE_CATEGORY\n    })();\n    if (onDelete) onDelete();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    checked: checked,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    style: {\n      gridGap: 0\n    },\n    editable: onEdit || onDelete || onChecked\n  }, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Meta, {\n    date: category.createdAt,\n    category: getLabelCategory(category.type)\n  }), /*#__PURE__*/React.createElement(CardActions, {\n    typeText: 'категорию',\n    checked: checked,\n    onEdit: onEdit && handleEdit,\n    onDelete: onDelete && handleDelete,\n    onChecked: onChecked\n  })), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: () => setQuery(category.id, 'category', onLink)\n  }, category.name), /*#__PURE__*/React.createElement(Text, null, category.description)));\n};\nCard.defaultProps = {\n  appearance: 'default'\n};\nexport default Card;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/CategoryCard/index.js"],"names":["React","styled","css","Row","Title","Text","Image","Meta","getLabelCategory","CardContent","Surface","useEntityQuery","onCategoryEdit","onCategoryDelete","useHelper","CardActions","queries","Wrap","Poster","Header","Name","onClick","Card","category","checked","appearance","className","style","onLink","onChecked","onDelete","onEdit","recall","setQuery","handleEdit","id","mutation","UPDATE_CATEGORY","handleDelete","DELETE_CATEGORY","gridGap","createdAt","type","name","description","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Image from '../../atomic-ui/components/Image'\nimport Meta from '../../atomic-ui/components/Meta'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\n\nimport { CardContent, Surface } from '../Styled'\nimport { useEntityQuery } from '../../hooks/useEntityQuery'\nimport { onCategoryEdit, onCategoryDelete } from '../../store/helpers/category'\nimport { useHelper } from '../../hooks/useHelper'\nimport CardActions from '../CardActions'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled(Surface)`\n  height: 100%;\n  min-height: 100px;\n`\n\nexport const Poster = styled(Image)`\n  object-fit: cover;\n  width: 100%;\n  height: 512px;\n  border-radius: var(--surface-border-radius);\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const Name = styled(Title)`\n  transition: opacity 150ms ease;\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.45;\n      }\n    `}\n`\n\nexport const Card = ({\n  category,\n  checked,\n  appearance,\n  className,\n  style,\n  onLink,\n  onChecked,\n  onDelete,\n  onEdit\n}) => {\n  const recall = useHelper()\n  const { setQuery } = useEntityQuery()\n\n  const handleEdit = () => {\n    recall(onCategoryEdit, {\n      id: category.id,\n      category,\n      mutation: queries.UPDATE_CATEGORY\n    })()\n    if (onEdit) onEdit()\n  }\n\n  const handleDelete = () => {\n    recall(onCategoryDelete, {\n      id: category.id,\n      category,\n      mutation: queries.DELETE_CATEGORY\n    })()\n    if (onDelete) onDelete()\n  }\n\n  return (\n    <Wrap className={className} style={style} checked={checked} appearance={appearance}>\n      <CardContent style={{ gridGap: 0 }} editable={onEdit || onDelete || onChecked}>\n        <Header>\n          <Meta date={category.createdAt} category={getLabelCategory(category.type)} />\n\n          <CardActions\n            typeText={'категорию'}\n            checked={checked}\n            onEdit={onEdit && handleEdit}\n            onDelete={onDelete && handleDelete}\n            onChecked={onChecked}\n          />\n        </Header>\n\n        <Name tag={'h4'} onClick={() => setQuery(category.id, 'category', onLink)}>\n          {category.name}\n        </Name>\n\n        <Text>{category.description}</Text>\n      </CardContent>\n    </Wrap>\n  )\n}\n\nCard.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Card\n"]},"metadata":{},"sourceType":"module"}
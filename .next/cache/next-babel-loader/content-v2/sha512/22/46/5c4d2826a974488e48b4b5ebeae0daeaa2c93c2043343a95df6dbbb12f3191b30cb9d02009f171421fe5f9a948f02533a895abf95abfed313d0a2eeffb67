{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Controller } from 'react-hook-form';\nimport { useQuery } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport TextEditor from '../../atomic-ui/components/TextEditor';\nimport Dropzone from '../../atomic-ui/components/Dropzone';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Comment from '../../atomic-ui/components/Comment';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Form from '../Form';\nimport { Loader } from '../Styled';\nimport { getLabelStatus, getLabelCategory } from '../../utils/functions';\nimport queries from '../../graphql/queries';\nimport config from '../../config';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nexport const Comments = styled(Column).withConfig({\n  displayName: \"FormArticle__Comments\",\n  componentId: \"sc-1ftxonu-0\"\n})([\"grid-gap:5px;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"FormArticle__Header\",\n  componentId: \"sc-1ftxonu-1\"\n})([\"justify-content:space-between;@media only screen and (max-width:480px){flex-direction:column;align-items:end;grid-gap:var(--default-gap);}\"]);\nexport const Article = ({\n  article,\n  categories,\n  statuses,\n  mutation,\n  appearance,\n  className,\n  canEditStatus,\n  onSubmit\n}) => {\n  const [checkedAll, setCheckedAll] = useState(false);\n  const [comments, setComments] = useState([]);\n  const {\n    data,\n    loading: loadingArticle,\n    error: errorArticle\n  } = article ? useQuery(queries.GET_ARTICLE, {\n    variables: {\n      id: article\n    }\n  }) : {\n    data: {\n      getArticle: {}\n    },\n    loading: false,\n    error: false\n  };\n  const {\n    data: dataComments,\n    loading: loadingComments\n  } = useQuery(queries.GET_COMMENTS, {\n    variables: {\n      id: article\n    }\n  });\n\n  const handleCheckedComments = e => {\n    setCheckedAll(e.target.checked);\n    setComments(prev => prev.map(item => ({ ...item,\n      checked: !item.checked\n    })));\n  };\n\n  const handleCheckedComment = (message, value) => {\n    setComments(prev => prev.map(item => item.id === message.id ? { ...item,\n      checked: value\n    } : item));\n  };\n\n  const handleDeleteChecked = () => {\n    setComments(prev => prev.filter(message => !message.checked));\n  };\n\n  const handleCommentEdit = (message, text) => {\n    setComments(prev => prev.map(item => item.id === message.id ? { ...item,\n      updatedAt: new Date(),\n      text\n    } : item));\n  };\n\n  const handleCommentDelete = message => {\n    setComments(prev => prev.filter(item => item.id !== message.id));\n  };\n\n  useEffect(() => {\n    if (article && !loadingComments && dataComments) {\n      setComments(dataComments.getComments.map(comment => ({ ...comment,\n        checked: false\n      })));\n    }\n  }, [article, dataComments, loadingComments]);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: onSubmit\n  }, ({\n    register,\n    loading,\n    errors,\n    control,\n    getValues\n  }) => {\n    var _data$getArticle, _data$getArticle2, _data$getArticle3, _data$getArticle4, _data$getArticle5;\n\n    return !loadingArticle && data ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.preview && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043F\\u0440\\u0435\\u0432\\u044C\\u044E\"), /*#__PURE__*/React.createElement(Controller, {\n      name: 'preview',\n      control: control,\n      rules: {\n        required: true\n      },\n      defaultValue: ((_data$getArticle = data.getArticle) === null || _data$getArticle === void 0 ? void 0 : _data$getArticle.preview) || null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Dropzone, {\n        accept: 'image/*',\n        defaultValue: value,\n        onChange: onChange,\n        placeholder: 'Перетащите сюда изображение для превью',\n        tooltip: 'Разрешение: 960x480px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB'\n      })\n    }), errors && errors.title && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A \\u0441\\u0442\\u0430\\u0442\\u044C\\u0438\"), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'title',\n      ref: register({\n        required: true\n      }),\n      defaultValue: getValues('title') || ((_data$getArticle2 = data.getArticle) === null || _data$getArticle2 === void 0 ? void 0 : _data$getArticle2.title),\n      placeholder: 'Название',\n      appearance: 'ghost',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Controller, {\n      name: 'category',\n      control: control,\n      defaultValue: (_data$getArticle3 = data.getArticle) !== null && _data$getArticle3 !== void 0 && _data$getArticle3.category ? {\n        value: data.getArticle.category.id,\n        label: getLabelCategory(data.getArticle.category.name)\n      } : null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        appearance: 'ghost',\n        placeholder: 'Выберите раздел',\n        options: categories.filter(item => item.type === 'DIVISION').map(item => ({\n          value: item.id,\n          label: getLabelCategory(item.name)\n        })),\n        onChange: onChange,\n        defaultValue: value,\n        isLoading: loading,\n        isClearable: true\n      })\n    }), errors && errors.body && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u043D\\u0438\\u0435 \\u0441\\u0442\\u0430\\u0442\\u044C\\u0438\"), /*#__PURE__*/React.createElement(Controller, {\n      name: 'body',\n      control: control,\n      defaultValue: getValues('body') || ((_data$getArticle4 = data.getArticle) === null || _data$getArticle4 === void 0 ? void 0 : _data$getArticle4.body) || null,\n      rules: {\n        required: true\n      },\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(TextEditor, {\n        apiKey: config.get('tiny-key'),\n        appearance: 'ghost',\n        defaultValue: value,\n        onChange: onChange\n      })\n    }), article && comments.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u0418\\u0441\\u0442\\u043E\\u0440\\u0438\\u044F \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0439\"), /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Checkbox, {\n      label: 'Выделить все',\n      checked: checkedAll,\n      onChange: handleCheckedComments\n    }), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        color: 'var(--default-color-red)'\n      },\n      appearance: 'clear',\n      onClick: handleDeleteChecked\n    }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0432\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u043E\\u0435\")), /*#__PURE__*/React.createElement(Comments, null, comments.map(comment => {\n      var _comment$likes;\n\n      return /*#__PURE__*/React.createElement(Comment, {\n        key: comment.id,\n        user: comment.author,\n        message: comment.text,\n        likes: (_comment$likes = comment.likes) === null || _comment$likes === void 0 ? void 0 : _comment$likes.length,\n        time: comment.createdAt !== comment.updatedAt ? comment.updatedAt : comment.createdAt,\n        isChecked: comment.checked,\n        isUpdated: comment.createdAt !== comment.updatedAt,\n        onChecked: value => handleCheckedComment(comment, value),\n        onEdit: text => handleCommentEdit(comment, text),\n        onDelete: () => handleCommentDelete(comment),\n        compact: true\n      });\n    }))), canEditStatus && /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), canEditStatus && /*#__PURE__*/React.createElement(Controller, {\n      name: 'status',\n      control: control,\n      defaultValue: (_data$getArticle5 = data.getArticle) !== null && _data$getArticle5 !== void 0 && _data$getArticle5.status ? {\n        value: data.getArticle.status,\n        label: getLabelStatus(data.getArticle.status)\n      } : null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        appearance: 'ghost',\n        placeholder: 'Выберите статус',\n        options: statuses.map(item => ({\n          value: item,\n          label: getLabelStatus(item)\n        })),\n        onChange: onChange,\n        defaultValue: value,\n        menuPlacement: 'top',\n        isLoading: loading,\n        isClearable: true\n      })\n    })), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: loading\n    }, article ? 'Сохранить' : 'Создать'))) : errorArticle ? /*#__PURE__*/React.createElement(Alert, {\n      appearance: 'error',\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      }\n    }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0441\\u0442\\u0430\\u0442\\u044C\\u0435\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  });\n};\nexport default Article;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormArticle/index.js"],"names":["React","useEffect","useState","styled","Controller","useQuery","Row","Column","Title","Input","Button","Select","TextEditor","Dropzone","Alert","Comment","Divider","Spinner","Form","Loader","getLabelStatus","getLabelCategory","queries","config","Checkbox","Comments","Header","Article","article","categories","statuses","mutation","appearance","className","canEditStatus","onSubmit","checkedAll","setCheckedAll","comments","setComments","data","loading","loadingArticle","error","errorArticle","GET_ARTICLE","variables","id","getArticle","dataComments","loadingComments","GET_COMMENTS","handleCheckedComments","e","target","checked","prev","map","item","handleCheckedComment","message","value","handleDeleteChecked","filter","handleCommentEdit","text","updatedAt","Date","handleCommentDelete","getComments","comment","register","errors","control","getValues","preview","width","required","onChange","title","category","label","name","type","body","get","length","color","author","likes","createdAt","status","flexGrow","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { Controller } from 'react-hook-form'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Select from '../../atomic-ui/components/Select'\nimport TextEditor from '../../atomic-ui/components/TextEditor'\nimport Dropzone from '../../atomic-ui/components/Dropzone'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Comment from '../../atomic-ui/components/Comment'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport Form from '../Form'\nimport { Loader } from '../Styled'\nimport { getLabelStatus, getLabelCategory } from '../../utils/functions'\nimport queries from '../../graphql/queries'\nimport config from '../../config'\nimport Checkbox from '../../atomic-ui/components/Checkbox'\n\nexport const Comments = styled(Column)`\n  grid-gap: 5px;\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n\n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n    align-items: end;\n    grid-gap: var(--default-gap);\n  }\n`\n\nexport const Article = ({\n  article,\n  categories,\n  statuses,\n  mutation,\n  appearance,\n  className,\n  canEditStatus,\n  onSubmit\n}) => {\n  const [checkedAll, setCheckedAll] = useState(false)\n  const [comments, setComments] = useState([])\n\n  const { data, loading: loadingArticle, error: errorArticle } = article\n    ? useQuery(queries.GET_ARTICLE, {\n        variables: {\n          id: article\n        }\n      })\n    : { data: { getArticle: {} }, loading: false, error: false }\n\n  const { data: dataComments, loading: loadingComments } = useQuery(queries.GET_COMMENTS, {\n    variables: {\n      id: article\n    }\n  })\n\n  const handleCheckedComments = (e) => {\n    setCheckedAll(e.target.checked)\n    setComments((prev) =>\n      prev.map((item) => ({\n        ...item,\n        checked: !item.checked\n      }))\n    )\n  }\n\n  const handleCheckedComment = (message, value) => {\n    setComments((prev) =>\n      prev.map((item) =>\n        item.id === message.id\n          ? {\n              ...item,\n              checked: value\n            }\n          : item\n      )\n    )\n  }\n\n  const handleDeleteChecked = () => {\n    setComments((prev) => prev.filter((message) => !message.checked))\n  }\n\n  const handleCommentEdit = (message, text) => {\n    setComments((prev) =>\n      prev.map((item) =>\n        item.id === message.id\n          ? {\n              ...item,\n              updatedAt: new Date(),\n              text\n            }\n          : item\n      )\n    )\n  }\n\n  const handleCommentDelete = (message) => {\n    setComments((prev) => prev.filter((item) => item.id !== message.id))\n  }\n\n  useEffect(() => {\n    if (article && !loadingComments && dataComments) {\n      setComments(\n        dataComments.getComments.map((comment) => ({\n          ...comment,\n          checked: false\n        }))\n      )\n    }\n  }, [article, dataComments, loadingComments])\n\n  return (\n    <Form className={className} appearance={appearance} mutation={mutation} onSubmit={onSubmit}>\n      {({ register, loading, errors, control, getValues }) =>\n        !loadingArticle && data ? (\n          <React.Fragment>\n            <Column>\n              <Title tag={'h4'}>Основное</Title>\n\n              {errors && errors.preview && (\n                <Alert style={{ width: '100%' }} appearance={'error'}>\n                  Выберите изображение для превью\n                </Alert>\n              )}\n              <Controller\n                name={'preview'}\n                control={control}\n                rules={{ required: true }}\n                defaultValue={data.getArticle?.preview || null}\n                render={({ value, onChange }) => (\n                  <Dropzone\n                    accept={'image/*'}\n                    defaultValue={value}\n                    onChange={onChange}\n                    placeholder={'Перетащите сюда изображение для превью'}\n                    tooltip={\n                      'Разрешение: 960x480px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB'\n                    }\n                  />\n                )}\n              />\n\n              {errors && errors.title && (\n                <Alert style={{ width: '100%' }} appearance={'error'}>\n                  Введите заголовок статьи\n                </Alert>\n              )}\n              <Input\n                type={'text'}\n                name={'title'}\n                ref={register({ required: true })}\n                defaultValue={getValues('title') || data.getArticle?.title}\n                placeholder={'Название'}\n                appearance={'ghost'}\n                disabled={loading}\n              />\n\n              <Controller\n                name={'category'}\n                control={control}\n                defaultValue={\n                  data.getArticle?.category\n                    ? {\n                        value: data.getArticle.category.id,\n                        label: getLabelCategory(data.getArticle.category.name)\n                      }\n                    : null\n                }\n                render={({ value, onChange }) => (\n                  <Select\n                    appearance={'ghost'}\n                    placeholder={'Выберите раздел'}\n                    options={categories\n                      .filter((item) => item.type === 'DIVISION')\n                      .map((item) => ({\n                        value: item.id,\n                        label: getLabelCategory(item.name)\n                      }))}\n                    onChange={onChange}\n                    defaultValue={value}\n                    isLoading={loading}\n                    isClearable\n                  />\n                )}\n              />\n\n              {errors && errors.body && (\n                <Alert style={{ width: '100%' }} appearance={'error'}>\n                  Введите содержание статьи\n                </Alert>\n              )}\n              <Controller\n                name={'body'}\n                control={control}\n                defaultValue={getValues('body') || data.getArticle?.body || null}\n                rules={{ required: true }}\n                render={({ value, onChange }) => (\n                  <TextEditor\n                    apiKey={config.get('tiny-key')}\n                    appearance={'ghost'}\n                    defaultValue={value}\n                    onChange={onChange}\n                  />\n                )}\n              />\n\n              {article && comments.length > 0 && (\n                <React.Fragment>\n                  <Divider clear />\n\n                  <Title tag={'h4'}>История сообщений</Title>\n\n                  <Header>\n                    <Checkbox\n                      label={'Выделить все'}\n                      checked={checkedAll}\n                      onChange={handleCheckedComments}\n                    />\n                    <Button\n                      style={{ color: 'var(--default-color-red)' }}\n                      appearance={'clear'}\n                      onClick={handleDeleteChecked}>\n                      Удалить выделенное\n                    </Button>\n                  </Header>\n                  <Comments>\n                    {comments.map((comment) => (\n                      <Comment\n                        key={comment.id}\n                        user={comment.author}\n                        message={comment.text}\n                        likes={comment.likes?.length}\n                        time={\n                          comment.createdAt !== comment.updatedAt\n                            ? comment.updatedAt\n                            : comment.createdAt\n                        }\n                        isChecked={comment.checked}\n                        isUpdated={comment.createdAt !== comment.updatedAt}\n                        onChecked={(value) => handleCheckedComment(comment, value)}\n                        onEdit={(text) => handleCommentEdit(comment, text)}\n                        onDelete={() => handleCommentDelete(comment)}\n                        compact\n                      />\n                    ))}\n                  </Comments>\n                </React.Fragment>\n              )}\n\n              {canEditStatus && <Divider clear />}\n\n              {canEditStatus && (\n                <Controller\n                  name={'status'}\n                  control={control}\n                  defaultValue={\n                    data.getArticle?.status\n                      ? {\n                          value: data.getArticle.status,\n                          label: getLabelStatus(data.getArticle.status)\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      appearance={'ghost'}\n                      placeholder={'Выберите статус'}\n                      options={statuses.map((item) => ({\n                        value: item,\n                        label: getLabelStatus(item)\n                      }))}\n                      onChange={onChange}\n                      defaultValue={value}\n                      menuPlacement={'top'}\n                      isLoading={loading}\n                      isClearable\n                    />\n                  )}\n                />\n              )}\n            </Column>\n\n            <Divider clear />\n\n            <Row>\n              <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n                {article ? 'Сохранить' : 'Создать'}\n              </Button>\n            </Row>\n          </React.Fragment>\n        ) : errorArticle ? (\n          <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n            Упс! Не удалось загрузить информацию о статье\n          </Alert>\n        ) : (\n          <Loader>\n            <Spinner />\n          </Loader>\n        )\n      }\n    </Form>\n  )\n}\n\nexport default Article\n"]},"metadata":{},"sourceType":"module"}
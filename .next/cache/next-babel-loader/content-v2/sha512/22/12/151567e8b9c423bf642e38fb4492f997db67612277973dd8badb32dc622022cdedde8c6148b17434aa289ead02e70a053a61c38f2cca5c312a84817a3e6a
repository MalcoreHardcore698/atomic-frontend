{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport styled, { css } from 'styled-components';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { v4 } from 'uuid';\nimport Column from '../atomic-ui/components/Column';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Select from '../atomic-ui/components/Select';\nimport DefaultLayout from '../layouts/default';\nimport DashboardLayout from './dashboard';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport HandleBar from '../components/HandleBar';\nimport { LowerLoader } from '../components/Styled';\nimport { useSelector } from 'react-redux';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"content__Wrap\",\n  componentId: \"sc-1afm75p-0\"\n})([\"margin-top:120px;margin-bottom:80px;\", \" @media only screen and (max-width:480px){margin-top:0;}\"], ({\n  clear\n}) => clear && css([\"margin:0;\"]));\n\nconst ContentLayout = ({\n  title,\n  store,\n  query,\n  handle,\n  filters,\n  options,\n  scaffold,\n  dashboard,\n  variables = {},\n  limit = 6,\n  startOffset = 6,\n  initialize,\n  children\n}) => {\n  const router = useRouter();\n  const research = useSelector(state => state.root.search);\n  const Layout = dashboard ? DashboardLayout : DefaultLayout;\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [search, setSearch] = useState(null);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [offset, setOffset] = useState(startOffset + 1);\n  const [documents, setDocuments] = useState((store === null || store === void 0 ? void 0 : store.documents) || []);\n  const [isEnd, setIsEnd] = useState(false);\n  const pageStart = useMemo(() => {\n    var _router$query;\n\n    return Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1;\n  }, [router]);\n  const [loadDocumentsBySearch, {\n    data: dataBySearch,\n    loading: loadingBySearch,\n    refetch: refetchBySearch\n  }] = useLazyQuery(query);\n  const [loadDocuments, {\n    data,\n    loading,\n    refetch\n  }] = useLazyQuery(query);\n\n  const getFilters = () => {\n    return filters.map(filter => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return /*#__PURE__*/React.createElement(DatePicker, {\n            key: v4(),\n            value: date,\n            placeholder: filter.placeholder || 'Дата публикации',\n            onChange: onChangeDate,\n            withNavigate: true\n          });\n\n        case 'SELECT':\n          return /*#__PURE__*/React.createElement(Select, {\n            key: v4(),\n            options: filter.options,\n            placeholder: filter.placeholder || 'Раздел',\n            selected: select,\n            onChange: item => onChangeSelect(item)\n          });\n\n        default:\n          return null;\n      }\n    });\n  };\n\n  const onSearch = value => {\n    setDocuments([]);\n\n    if (value) {\n      setSearch(value);\n      loadDocumentsBySearch({\n        variables: { ...variables,\n          search: value,\n          offset: 0,\n          limit: startOffset * pageStart\n        }\n      });\n    } else {\n      const result = { ...variables,\n        offset: 0,\n        limit\n      };\n      setSearch(null);\n      if (refetch) refetch(result);else loadDocuments({\n        variables: result\n      });\n    }\n\n    setOffset(0);\n  };\n\n  const loadMore = async page => {\n    const updateOffset = () => setOffset(limit * page + startOffset + 1);\n\n    const result = { ...variables,\n      offset,\n      limit\n    };\n\n    if (search && refetchBySearch) {\n      await refetchBySearch(variables);\n    } else {\n      if (refetch) {\n        await refetch(result);\n        updateOffset();\n      } else {\n        await loadDocuments({\n          variables: result\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (initialize) loadDocuments({\n      variables: {\n        offset,\n        limit\n      }\n    });\n  }, [initialize]);\n  useEffect(() => {\n    if (research) onSearch(research);\n  }, [research]);\n  useEffect(() => {\n    const commonList = !search && !loading && data;\n    const searchList = search && !loadingBySearch && dataBySearch;\n    const resultList = commonList || searchList;\n\n    if (resultList) {\n      const list = resultList[Object.keys(resultList)[0]];\n      if (list.length > 0) setDocuments(prev => [...prev, ...list]);\n      if (list.length === 0) setIsEnd(true);\n    }\n  }, [search, loading, loadingBySearch, data, dataBySearch, setIsEnd]);\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: title,\n    scaffold: scaffold\n  }, /*#__PURE__*/React.createElement(Wrap, {\n    clear: scaffold || dashboard\n  }, !scaffold && !dashboard && /*#__PURE__*/React.createElement(SearchBar, {\n    defaultValue: research || search,\n    onChangeFilter: () => setVisibleFilter(!visibleFilter),\n    onSubmit: onSearch\n  }), dashboard && handle && /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: handle.icon,\n    buttonCreateText: handle.buttonCreateText,\n    onCreate: handle.onCreate,\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: handle.onChangeDisplayMethod\n  }), (filters || options) && /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: getFilters(),\n    options: options\n  }), search ? typeof children === 'function' ? React.createElement(children, {\n    documents\n  }) : children : /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: pageStart || 0,\n    loadMore: loadMore,\n    hasMore: !isEnd,\n    loader: /*#__PURE__*/React.createElement(LowerLoader, {\n      key: 'loader'\n    }, /*#__PURE__*/React.createElement(Spinner, null))\n  }, typeof children === 'function' ? React.createElement(children, {\n    documents\n  }) : children)));\n};\n\nexport default ContentLayout;","map":null,"metadata":{},"sourceType":"module"}
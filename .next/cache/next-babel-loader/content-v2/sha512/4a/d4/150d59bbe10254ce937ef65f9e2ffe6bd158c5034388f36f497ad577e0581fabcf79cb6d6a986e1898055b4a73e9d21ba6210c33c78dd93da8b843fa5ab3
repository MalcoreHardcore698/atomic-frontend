{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row, { Wrap as WrapRow } from '../../atomic-ui/components/Row';\nimport Difinition, { Wrap as WrapDifinition } from '../../atomic-ui/components/Difinition';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Image from '../../atomic-ui/components/Image';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nexport const Poster = styled(Image).withConfig({\n  displayName: \"ProjectCard__Poster\",\n  componentId: \"g3ik0u-0\"\n})([\"position:relative;width:100%;height:100%;border-radius:var(--surface-border-radius);overflow:hidden;object-fit:cover;transition:opacity 150ms ease;\", \" \", \" @media only screen and (max-width:480px){min-height:128px;}\"], ({\n  layout\n}) => layout === 'column' && css([\"min-height:128px;\"]), ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.65;}\"]));\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"ProjectCard__Wrap\",\n  componentId: \"g3ik0u-1\"\n})([\"grid-gap:var(--default-gap);height:100%;\", \" \", \" \", \" \", \"\"], ({\n  layout\n}) => layout === 'column' && css([\"display:flex;flex-wrap:wrap;\"]), ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Content = styled(Row).withConfig({\n  displayName: \"ProjectCard__Content\",\n  componentId: \"g3ik0u-2\"\n})([\"display:grid;grid-template-columns:1fr 2fr;flex-grow:1000;width:100%;\", \" @media only screen and (max-width:480px){grid-template-columns:1fr;grid-gap:var(--default-gap);width:100%;}\"], ({\n  layout\n}) => layout && css([\"display:flex;flex-direction:column;grid-gap:var(--default-gap);\"]));\nexport const Screenshots = styled(Row).withConfig({\n  displayName: \"ProjectCard__Screenshots\",\n  componentId: \"g3ik0u-3\"\n})([\"justify-content:space-between;grid-gap:5px;\"]);\nexport const Screenshot = styled.div.withConfig({\n  displayName: \"ProjectCard__Screenshot\",\n  componentId: \"g3ik0u-4\"\n})([\"position:relative;z-index:var(--z-12);width:auto;height:var(--input-height-s);min-width:var(--input-height-s);min-height:var(--input-height-s);border-radius:var(--surface-border-radius);flex-grow:1;transition:opacity 150ms ease;img{width:100%;height:100%;object-fit:cover;}\"]);\nexport const ScreenshotsCounter = styled(Text).withConfig({\n  displayName: \"ProjectCard__ScreenshotsCounter\",\n  componentId: \"g3ik0u-5\"\n})([\"position:absolute;top:0;left:0;z-index:var(--z-10);display:flex;justify-content:center;align-items:center;width:100%;height:100%;span{position:relative;z-index:var(--z-12);color:white;}&::before{content:'';position:absolute;top:0;left:0;z-index:var(--z-10);display:flex;justify-content:center;align-items:center;width:100%;height:100%;background:var(--default-color-accent);border-radius:var(--surface-border-radius);opacity:0.65;}\"]);\nexport const Media = styled(Column).withConfig({\n  displayName: \"ProjectCard__Media\",\n  componentId: \"g3ik0u-6\"\n})([\"grid-gap:5px;\"]);\nexport const CentralAlert = styled(Alert).withConfig({\n  displayName: \"ProjectCard__CentralAlert\",\n  componentId: \"g3ik0u-7\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;text-align:center;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"ProjectCard__Header\",\n  componentId: \"g3ik0u-8\"\n})([\"justify-content:space-between;align-items:center;\"]);\nexport const Actions = styled(Row).withConfig({\n  displayName: \"ProjectCard__Actions\",\n  componentId: \"g3ik0u-9\"\n})([\"grid-gap:5px;\"]);\nexport const Name = styled(Title).withConfig({\n  displayName: \"ProjectCard__Name\",\n  componentId: \"g3ik0u-10\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\nexport const ShortText = styled(Text).withConfig({\n  displayName: \"ProjectCard__ShortText\",\n  componentId: \"g3ik0u-11\"\n})([\"display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;text-overflow:ellipsis;\"]);\nexport const Company = styled(Difinition).withConfig({\n  displayName: \"ProjectCard__Company\",\n  componentId: \"g3ik0u-12\"\n})([\"h4{max-width:250px;white-space:nowrap;font-size:var(--font-size-m);font-weight:var(--font-weight-bold);text-overflow:ellipsis;line-height:1;overflow:hidden;}\"]);\nexport const Footer = styled(Row).withConfig({\n  displayName: \"ProjectCard__Footer\",\n  componentId: \"g3ik0u-13\"\n})([\"justify-content:space-between;align-items:center;grid-gap:var(--default-gap);flex-grow:1;@media only screen and (max-width:480px){flex-direction:column;\", \"{flex-grow:1;width:100%;}\", \"{flex-grow:1;width:100%;\", \"{flex-grow:1;button{width:100%;}}}}\"], WrapDifinition, WrapRow, WrapTooltip);\nexport const Card = ({\n  layout,\n  project,\n  appearance,\n  className,\n  style,\n  preview,\n  slicedFactor = 4,\n  liked,\n  owned,\n  onAdd,\n  onLink,\n  onLike,\n  onScreenshotClick,\n  onCompanyLink,\n  onChecked,\n  onEdit,\n  onDelete\n}) => {\n  var _project$screenshots, _project$screenshots2, _project$screenshots3, _project$category, _project$category2, _project$company, _project$company$avat, _project$company2, _project$company3, _project$company4;\n\n  const [isLiked, setLike] = useState(liked);\n  const screenshots = (project === null || project === void 0 ? void 0 : (_project$screenshots = project.screenshots) === null || _project$screenshots === void 0 ? void 0 : _project$screenshots.slice(0, slicedFactor)) || [];\n  const residue = ((project === null || project === void 0 ? void 0 : (_project$screenshots2 = project.screenshots) === null || _project$screenshots2 === void 0 ? void 0 : _project$screenshots2.length) || slicedFactor) - slicedFactor;\n\n  const onClickLike = () => {\n    if (onLike) onLike();\n    setLike(!isLiked);\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance,\n    layout: layout\n  }, /*#__PURE__*/React.createElement(Content, {\n    layout: layout\n  }, /*#__PURE__*/React.createElement(Media, null, project.preview ? /*#__PURE__*/React.createElement(Poster, {\n    src: project.preview.path,\n    alt: project.title,\n    onClick: () => onScreenshotClick && onScreenshotClick(project.preview, project.preview.id),\n    magnify: true\n  }) : /*#__PURE__*/React.createElement(CentralAlert, null, \"\\u041F\\u0440\\u0435\\u0432\\u044C\\u044E \\u043D\\u0435\\u0442\"), project.screenshots && ((_project$screenshots3 = project.screenshots) === null || _project$screenshots3 === void 0 ? void 0 : _project$screenshots3.length) > 0 && /*#__PURE__*/React.createElement(Screenshots, null, screenshots.map((screenshot, index) => /*#__PURE__*/React.createElement(Screenshot, {\n    key: screenshot.id,\n    onClick: () => onScreenshotClick && onScreenshotClick(screenshot, screenshot.id)\n  }, /*#__PURE__*/React.createElement(Image, {\n    src: screenshot.path,\n    alt: screenshot.name,\n    bottomOffset: 300,\n    layout: 'fill',\n    scale: 5,\n    magnify: true,\n    portal: true\n  }), index === (screenshots === null || screenshots === void 0 ? void 0 : screenshots.length) - 1 && residue > 0 && /*#__PURE__*/React.createElement(ScreenshotsCounter, null, /*#__PURE__*/React.createElement(\"span\", null, \"+\", residue)))))), /*#__PURE__*/React.createElement(Column, {\n    style: {\n      gridGap: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Tooltip, {\n    place: 'top',\n    text: (_project$category = project.category) === null || _project$category === void 0 ? void 0 : _project$category.name\n  }, /*#__PURE__*/React.createElement(Meta, {\n    category: (_project$category2 = project.category) === null || _project$category2 === void 0 ? void 0 : _project$category2.name,\n    short: true\n  })), (onChecked || onEdit || onDelete) && /*#__PURE__*/React.createElement(Actions, null, onDelete && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить проект'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    appearance: 'red',\n    onClick: onDelete\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), onEdit && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактировать проект'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    onClick: onEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), onChecked && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отметить проект',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, null)))), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: onLink\n  }, project.title), /*#__PURE__*/React.createElement(ShortText, null, project.description))), !preview && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Footer, null, /*#__PURE__*/React.createElement(Company, _extends({}, project.company ? {\n    img: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : (_project$company$avat = _project$company.avatar) === null || _project$company$avat === void 0 ? void 0 : _project$company$avat.path\n  } : {\n    icon: 'work'\n  }, {\n    label: 'Компания',\n    text: ((_project$company2 = project.company) === null || _project$company2 === void 0 ? void 0 : _project$company2.name) || '-',\n    tooltip: (_project$company3 = project.company) === null || _project$company3 === void 0 ? void 0 : _project$company3.name,\n    onLink: ((_project$company4 = project.company) === null || _project$company4 === void 0 ? void 0 : _project$company4.email) && onCompanyLink\n  })), !owned && (onLike || onAdd) && /*#__PURE__*/React.createElement(Row, null, onLike && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Мне нравится'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onClickLike,\n    revert: !isLiked\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'heart',\n    stroke: isLiked ? 'white' : 'var(--default-color-accent)'\n  }))), onAdd && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Добавить проект к себе'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onAdd,\n    revert: true\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'var(--default-color-accent)'\n  })))))));\n};\nCard.defaultProps = {\n  appearance: 'default'\n};\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}
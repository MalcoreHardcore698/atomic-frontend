{"ast":null,"code":"import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Text from '../Text';\nimport Title from '../Title';\nimport Tooltip from '../Tooltip';\nimport Button from '../Button';\nimport Popper, { Wrap as WrapPopper } from '../Popper';\nimport Icon from '../Icon';\nimport Chip from '../Chip';\nimport Actions from './Actions';\nexport const ActionTooltip = styled(Tooltip).withConfig({\n  displayName: \"Difinition__ActionTooltip\",\n  componentId: \"ldgzgs-0\"\n})([\"display:flex;justify-content:center;align-items:center;width:var(--input-height-s);height:100%;opacity:0;visibility:hidden;transition:all 150ms ease;svg{path{stroke:var(--ghost-color-text);}}.more_square_svg__circle{fill:var(--ghost-color-text);stroke:none;}&:hover{svg{path{stroke:black;}}.more_square_svg__circle{fill:black;stroke:none;}}\"]);\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Difinition__Wrap\",\n  componentId: \"ldgzgs-1\"\n})([\"position:relative;padding-right:var(--input-height-s);transition:opacity 150ms ease;width:100%;\", \"{position:absolute;top:0;right:0;z-index:var(--z-10);display:flex;justify-content:center;align-items:center;height:100%;}&:hover{\", \"{opacity:1;visibility:visible;}}\"], WrapPopper, ActionTooltip);\nexport const Content = styled(Column).withConfig({\n  displayName: \"Difinition__Content\",\n  componentId: \"ldgzgs-2\"\n})([\"justify-content:center;grid-gap:0;\", \"\"], ({\n  clickable\n}) => clickable && css([\"cursor:pointer;&:hover{opacity:0.65;}\"]));\nexport const Image = styled.img.withConfig({\n  displayName: \"Difinition__Image\",\n  componentId: \"ldgzgs-3\"\n})([\"width:var(--input-height-m);height:var(--input-height-m);min-width:var(--input-height-m);min-height:var(--input-height-m);border-radius:var(--surface-border-radius);object-fit:cover;\"]);\nexport const RoundedIcon = styled(Icon).withConfig({\n  displayName: \"Difinition__RoundedIcon\",\n  componentId: \"ldgzgs-4\"\n})([\"width:var(--input-height-m);height:var(--input-height-m);min-width:var(--input-height-m);min-height:var(--input-height-m);background:var(--default-color-\", \"-dim);border-radius:var(--surface-border-radius);\", \" @media only screen and (max-width:480px){width:var(--input-height-s);height:var(--input-height-s);min-width:var(--input-height-s);min-height:var(--input-height-s);svg{transform:scale(0.85);}}\"], ({\n  color\n}) => color || 'accent', ({\n  disabled\n}) => disabled && css([\"background:var(--ghost-color-background);svg path{stroke:var(--ghost-color-text);}\"]));\nexport const Label = styled(Text).withConfig({\n  displayName: \"Difinition__Label\",\n  componentId: \"ldgzgs-5\"\n})([\"color:var(--ghost-color-text);font-size:var(--font-size-s);white-space:nowrap;min-width:128px;max-width:435px;overflow:hidden;text-overflow:ellipsis;\", \" \", \"\"], ({\n  disabled\n}) => disabled && css([\"color:var(--ghost-color-text);\"]), ({\n  stretch\n}) => stretch && css([\"width:auto;\"]));\nexport const Value = styled(Title).withConfig({\n  displayName: \"Difinition__Value\",\n  componentId: \"ldgzgs-6\"\n})([\"font-weight:var(--font-weight-bold);line-height:1;@media only screen and (max-width:480px){font-size:var(--font-size-l);}\"]);\nexport const MarkedText = styled(Row).withConfig({\n  displayName: \"Difinition__MarkedText\",\n  componentId: \"ldgzgs-7\"\n})([\"align-items:center;color:var(--ghost-color-text);grid-gap:5px;.red{color:var(--default-color-red);}svg{margin-top:-3px;margin-left:-4px;}\"]);\nexport const getValue = (label, text, disabled) => {\n  const disabledStyle = disabled ? {\n    color: 'var(--ghost-color-text)'\n  } : {};\n\n  if (Array.isArray(text)) {\n    const slicedFactor = 3;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, text.slice(0, slicedFactor).map(item => /*#__PURE__*/React.createElement(Chip, {\n      key: v4(),\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs'\n    }, item)), text.length > 5 && /*#__PURE__*/React.createElement(Chip, {\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs'\n    }, \"+\", text.slice(slicedFactor).length));\n  } // eslint-disable-next-line valid-typeof\n\n\n  if (typeof Text === 'funciton') {\n    const Text = text;\n    return /*#__PURE__*/React.createElement(Text, {\n      style: disabledStyle\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Value, {\n    style: disabledStyle,\n    tag: !label ? 'h2' : 'h4'\n  }, text);\n};\nexport const Difinition = ({\n  img,\n  color,\n  icon,\n  label,\n  text,\n  tooltip,\n  className,\n  style,\n  stretch,\n  disabled,\n  revert,\n  actions,\n  onLink\n}) => {\n  const renderLabel = () => label && /*#__PURE__*/React.createElement(Label, {\n    stretch: stretch,\n    disabled: disabled\n  }, label);\n\n  const renderText = () => tooltip ? /*#__PURE__*/React.createElement(Tooltip, {\n    place: 'top',\n    text: tooltip\n  }, /*#__PURE__*/React.createElement(Row, null, getValue(label, text, disabled))) : /*#__PURE__*/React.createElement(Row, null, getValue(label, text, disabled));\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style\n  }, img && !icon && /*#__PURE__*/React.createElement(Image, {\n    src: img,\n    alt: 'Avatar'\n  }), !img && icon && /*#__PURE__*/React.createElement(RoundedIcon, {\n    icon: icon,\n    color: color,\n    disabled: disabled,\n    stroke: `var(--default-color-${color || 'accent'})`\n  }), /*#__PURE__*/React.createElement(Content, {\n    clickable: !disabled && !!onLink,\n    onClick: () => !disabled && onLink && onLink()\n  }, !revert && renderLabel(), !revert && renderText(), revert && renderText(), revert && renderLabel()), (actions === null || actions === void 0 ? void 0 : actions.length) > 0 && /*#__PURE__*/React.createElement(Popper, {\n    place: 'bottom',\n    offset: {\n      right: 68\n    },\n    body: /*#__PURE__*/React.createElement(Actions, {\n      key: 'menu',\n      actions: actions\n    }),\n    appearance: 'clear'\n  }, /*#__PURE__*/React.createElement(ActionTooltip, {\n    text: 'Действия'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    appearance: 'clear',\n    kind: 'icon',\n    size: 's'\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'moreSquare',\n    size: 's'\n  })))));\n};\nexport default Difinition;","map":null,"metadata":{},"sourceType":"module"}
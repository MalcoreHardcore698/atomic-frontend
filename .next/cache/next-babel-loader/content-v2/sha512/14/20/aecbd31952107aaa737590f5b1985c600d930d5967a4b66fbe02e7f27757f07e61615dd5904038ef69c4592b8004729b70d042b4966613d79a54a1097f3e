{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onProjectAdd, onProjectRemove, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user';\nimport { setUserFolder, updateUser } from '../store/actions/user';\nimport { useHelper } from './useHelper';\nimport { useMutate } from './useMutate';\nimport queries from '../graphql/queries';\nexport const useProject = () => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const dispatch = useDispatch();\n  const hasAdded = useCallback(project => {\n    var _user$folders;\n\n    return !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === project.id))));\n  }, [user]);\n  const hasLiked = useCallback(project => !!(project.rating || []).find(item => item.email === user.email), [user]);\n  const onAdd = useCallback(project => recall(onProjectAdd, {\n    id: project.id,\n    folders: user === null || user === void 0 ? void 0 : user.folders,\n    mutations: {\n      addProject: queries.ADD_USER_PROJECT,\n      createFolder: queries.ADD_USER_FOLDER\n    },\n    callback: item => {\n      const result = { ...item,\n        projects: [...item.projects, project.id]\n      };\n      dispatch(setUserFolder(result));\n    }\n  })(), [user, recall, dispatch]);\n  const onLike = useCallback(project => {\n    if (user.email) {\n      mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject)));\n    }\n  }, [user, mutate, dispatch]);\n  const onRemove = useCallback(project => recall(onProjectRemove, {\n    id: project.id,\n    folder,\n    mutation: queries.REMOVE_USER_PROJECT\n  })(), [user, recall]);\n  const onAboutMore = useCallback(project => {\n    recall(onUserAboutMore, {\n      user: project\n    });\n  }, [recall]);\n  const onCompanyLink = useCallback(project => {\n    var _project$company;\n\n    recall(onUserLink, {\n      id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      recipient: project.author,\n      query: queries.GET_USER_CHATS,\n      mutation: queries.SEND_MESSAGE\n    });\n  }, [user, recall]);\n  const onScreenshotClick = useCallback((project, key) => {\n    recall(onProjectScreenshot, {\n      screenshots: [project.preview, ...project.screenshots],\n      key\n    })();\n  }, [recall]);\n  return {\n    user,\n    hasAdded,\n    hasLiked,\n    onAdd,\n    onLike,\n    onRemove,\n    onAboutMore,\n    onCompanyLink,\n    onScreenshotClick\n  };\n};","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/hooks/useProject.js"],"names":["useCallback","useDispatch","useSelector","onProjectAdd","onProjectRemove","onProjectScreenshot","onUserAboutMore","onUserLink","setUserFolder","updateUser","useHelper","useMutate","queries","useProject","recall","mutate","user","folder","state","root","dispatch","hasAdded","project","folders","find","projects","item","id","hasLiked","rating","email","onAdd","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","callback","result","onLike","LIKE_PROJECT","response","data","likeProject","onRemove","mutation","REMOVE_USER_PROJECT","onAboutMore","onCompanyLink","company","auth","recipient","author","query","GET_USER_CHATS","SEND_MESSAGE","onScreenshotClick","key","screenshots","preview"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { onProjectAdd, onProjectRemove, onProjectScreenshot } from '../store/helpers/project'\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user'\nimport { setUserFolder, updateUser } from '../store/actions/user'\nimport { useHelper } from './useHelper'\nimport { useMutate } from './useMutate'\nimport queries from '../graphql/queries'\n\nexport const useProject = () => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder\n  }))\n  const dispatch = useDispatch()\n\n  const hasAdded = useCallback(\n    (project) =>\n      !!user?.folders?.find((folder) => !!folder?.projects.find((item) => item === project.id)),\n    [user]\n  )\n\n  const hasLiked = useCallback(\n    (project) => !!(project.rating || []).find((item) => item.email === user.email),\n    [user]\n  )\n\n  const onAdd = useCallback(\n    (project) =>\n      recall(onProjectAdd, {\n        id: project.id,\n        folders: user?.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        },\n        callback: (item) => {\n          const result = { ...item, projects: [...item.projects, project.id] }\n          dispatch(setUserFolder(result))\n        }\n      })(),\n    [user, recall, dispatch]\n  )\n\n  const onLike = useCallback(\n    (project) => {\n      if (user.email) {\n        mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n          dispatch(updateUser(response.data.likeProject))\n        )\n      }\n    },\n    [user, mutate, dispatch]\n  )\n\n  const onRemove = useCallback(\n    (project) =>\n      recall(onProjectRemove, {\n        id: project.id,\n        folder,\n        mutation: queries.REMOVE_USER_PROJECT\n      })(),\n    [user, recall]\n  )\n\n  const onAboutMore = useCallback(\n    (project) => {\n      recall(onUserAboutMore, { user: project })\n    },\n    [recall]\n  )\n\n  const onCompanyLink = useCallback(\n    (project) => {\n      recall(onUserLink, {\n        id: project.company?.email,\n        auth: user?.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      })\n    },\n    [user, recall]\n  )\n\n  const onScreenshotClick = useCallback(\n    (project, key) => {\n      recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    },\n    [recall]\n  )\n\n  return {\n    user,\n    hasAdded,\n    hasLiked,\n    onAdd,\n    onLike,\n    onRemove,\n    onAboutMore,\n    onCompanyLink,\n    onScreenshotClick\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
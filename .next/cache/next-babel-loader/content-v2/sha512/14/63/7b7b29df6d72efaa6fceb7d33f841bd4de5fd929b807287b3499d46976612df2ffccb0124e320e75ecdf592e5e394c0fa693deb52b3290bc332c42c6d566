{"ast":null,"code":"import React, { useState } from 'react';\nimport { Controller } from 'react-hook-form';\nimport styled from 'styled-components';\nimport generator from 'generate-password';\nimport Container from '../../atomic-ui/components/Container';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nimport Switch from '../../atomic-ui/components/Switch';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Form from '../Form';\nconst ACCOUNT_TYPES = [{\n  label: 'Физ. лицо',\n  value: 'INDIVIDUAL',\n  tooltip: 'Любое лицо'\n}, {\n  label: 'Оф. лицо',\n  value: 'OFICIAL',\n  tooltip: 'Государственный деятель'\n}, {\n  label: 'Юр. лицо',\n  value: 'ENTITY',\n  tooltip: 'Организация'\n}];\nexport const LoginButton = styled(Button).withConfig({\n  displayName: \"FormRegister__LoginButton\",\n  componentId: \"sc-56g8v2-0\"\n})([\"flex-grow:1;text-align:left;color:var(--default-color-accent);background:transparent !important;border:none !important;\"]);\nexport const AdaptiveRow = styled(Row).withConfig({\n  displayName: \"FormRegister__AdaptiveRow\",\n  componentId: \"sc-56g8v2-1\"\n})([\"@media only screen and (max-width:575px){flex-direction:column;grid-gap:var(--default-gap);\", \"{flex-grow:1;button{width:100%;}}}\"], WrapTooltip);\nexport const Register = ({\n  title = true,\n  accountTypes,\n  mutation,\n  appearance,\n  className,\n  onLogin,\n  onSubmit\n}) => /*#__PURE__*/React.createElement(Form, {\n  className: className,\n  appearance: appearance,\n  mutation: mutation,\n  onSubmit: (form, action) => onSubmit(form, action)\n}, ({\n  watch,\n  register,\n  loading,\n  control,\n  errors,\n  setValue\n}) => {\n  const [isShowPassword, setShowPassword] = useState(false);\n\n  const onTogglePassword = () => setShowPassword(!isShowPassword);\n\n  const onGeneratePassword = () => {\n    const password = generator.generate({\n      numbers: true,\n      symbols: true,\n      strict: true\n    });\n    setValue('password', password);\n    setValue('confirmPassword', password);\n  };\n\n  const {\n    account,\n    name,\n    email,\n    phone,\n    password,\n    confirmPassword\n  } = watch();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, title && /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Title, {\n    style: {\n      textAlign: 'center'\n    },\n    tag: 'h4'\n  }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0439\\u0442\\u0435 \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442\")), (errors.name || errors.email || errors.phone || errors.password || errors.confirmPassword) && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, errors.name && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u043E \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u043E \\u0424\\u0418\\u041E\"), errors.email && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u0430 \\u044D\\u043B. \\u043F\\u043E\\u0447\\u0442\\u0430\"), errors.phone && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u0430 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\"), errors.password && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\"), !errors.password && errors.password !== errors.confirmPassword && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u0438 \\u043D\\u0435 \\u0441\\u043E\\u0432\\u043F\\u0430\\u0434\\u0430\\u044E\\u0442\")), /*#__PURE__*/React.createElement(Controller, {\n    name: 'account',\n    control: control,\n    defaultValue: ACCOUNT_TYPES[0],\n    render: ({\n      value,\n      onChange\n    }) => /*#__PURE__*/React.createElement(Switch, {\n      defaultValue: value,\n      options: (accountTypes === null || accountTypes === void 0 ? void 0 : accountTypes.length) > 1 && accountTypes || ACCOUNT_TYPES,\n      disabled: loading,\n      onChange: onChange,\n      stretch: true\n    })\n  }), /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: 'name',\n    ref: register({\n      required: true\n    }),\n    placeholder: (account === null || account === void 0 ? void 0 : account.value) === 'ENTITY' ? 'Название компании' : 'ФИО',\n    appearance: 'ghost',\n    defaultValue: name,\n    disabled: loading\n  }), /*#__PURE__*/React.createElement(Input, {\n    type: 'email',\n    name: 'email',\n    ref: register({\n      required: true,\n      pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    }),\n    placeholder: 'Эл. почта',\n    defaultValue: email,\n    appearance: 'ghost',\n    disabled: loading\n  }), /*#__PURE__*/React.createElement(Input, {\n    type: 'tel',\n    name: 'phone',\n    ref: register({\n      required: true,\n      maxLength: 11,\n      minLength: 8\n    }),\n    appearance: 'ghost',\n    placeholder: 'Телефон',\n    defaultValue: phone,\n    disabled: loading\n  })), /*#__PURE__*/React.createElement(AdaptiveRow, null, /*#__PURE__*/React.createElement(Column, {\n    style: {\n      flexGrow: 1\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    name: 'password',\n    type: isShowPassword ? 'text' : 'password',\n    ref: register({\n      required: true,\n      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[ -/:-@[-`{-~]).{8,64}$/\n    }),\n    appearance: 'ghost',\n    placeholder: 'Пароль',\n    disabled: loading,\n    defaultValue: password\n  }), /*#__PURE__*/React.createElement(Input, {\n    name: 'confirmPassword',\n    type: isShowPassword ? 'text' : 'password',\n    ref: register({\n      required: true,\n      pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[ -/:-@[-`{-~]).{8,64}$/\n    }),\n    appearance: 'ghost',\n    placeholder: 'Подтвердите пароль',\n    disabled: loading,\n    defaultValue: confirmPassword\n  })), /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Генерация пароля'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    disabled: loading,\n    onClick: () => onGeneratePassword()\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'password',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отображение пароля'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    disabled: loading,\n    onClick: onTogglePassword,\n    revert: !isShowPassword\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: isShowPassword ? 'hide' : 'show',\n    stroke: isShowPassword ? 'white' : 'var(--default-color-accent)'\n  }))))), /*#__PURE__*/React.createElement(Text, null, \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u043D\\u0435 \\u043C\\u0435\\u043D\\u0435\\u0435 \\u0432\\u043E\\u0441\\u044C\\u043C\\u0438 \\u0437\\u043D\\u0430\\u043A\\u043E\\u0432, \\u0432\\u043A\\u043B\\u044E\\u0447\\u0430\\u0442\\u044C \\u043A\\u0430\\u043A \\u043C\\u0438\\u043D\\u0438\\u043C\\u0443\\u043C \\u043E\\u0434\\u043D\\u0443 \\u0441\\u0442\\u0440\\u043E\\u0447\\u043D\\u0443\\u044E \\u0438 \\u043F\\u0440\\u043E\\u043F\\u0438\\u0441\\u043D\\u0443\\u044E \\u0431\\u0443\\u043A\\u0432\\u0443, \\u0446\\u0438\\u0444\\u0440\\u044B \\u0438 \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u044B\\u0435 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u044B\"), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(LoginButton, {\n    appearance: 'clear',\n    type: 'button',\n    disabled: loading,\n    onClick: onLogin\n  }, \"\\u0423\\u0436\\u0435 \\u0435\\u0441\\u0442\\u044C \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442?\"), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      flexGrow: 1\n    },\n    type: 'submit',\n    disabled: loading\n  }, \"\\u0414\\u0430\\u043B\\u0435\\u0435\")));\n});\nexport default Register;","map":null,"metadata":{},"sourceType":"module"}
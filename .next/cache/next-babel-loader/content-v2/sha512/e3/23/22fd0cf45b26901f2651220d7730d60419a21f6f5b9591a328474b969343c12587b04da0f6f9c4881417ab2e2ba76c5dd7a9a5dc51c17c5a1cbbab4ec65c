{"ast":null,"code":"import { useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport { useDispatch } from 'react-redux';\nimport { setSearch, setParams } from '../store/actions/root';\nexport const useSearch = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const onSearch = useCallback((search, params) => {\n    if (search) dispatch(setSearch(search));\n    if (params) dispatch(setParams(params));\n    router.push({\n      pathname: router.pathname,\n      query: { ...(search ? {\n          search\n        } : {}),\n        ...(params || {})\n      }\n    }, undefined, {\n      shallow: true\n    });\n  }, [router, dispatch]);\n  return [onSearch];\n};","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/hooks/useSearch.js"],"names":["useCallback","useRouter","useDispatch","setSearch","setParams","useSearch","router","dispatch","onSearch","search","params","push","pathname","query","undefined","shallow"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,uBAArC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAMM,QAAQ,GAAGL,WAAW,EAA5B;AAEA,QAAMM,QAAQ,GAAGR,WAAW,CAC3B,CAACS,MAAD,EAASC,MAAT,KAAoB;AAClB,QAAID,MAAJ,EAAYF,QAAQ,CAACJ,SAAS,CAACM,MAAD,CAAV,CAAR;AACZ,QAAIC,MAAJ,EAAYH,QAAQ,CAACH,SAAS,CAACM,MAAD,CAAV,CAAR;AAEZJ,IAAAA,MAAM,CAACK,IAAP,CACC;AACEC,MAAAA,QAAQ,EAAEN,MAAM,CAACM,QADnB;AAEEC,MAAAA,KAAK,EAAE,EACL,IAAIJ,MAAM,GAAG;AAAEA,UAAAA;AAAF,SAAH,GAAgB,EAA1B,CADK;AAEL,YAAIC,MAAM,IAAI,EAAd;AAFK;AAFT,KADD,EAQCI,SARD,EASC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KATD;AAWD,GAhB0B,EAiB3B,CAACT,MAAD,EAASC,QAAT,CAjB2B,CAA5B;AAoBA,SAAO,CAACC,QAAD,CAAP;AACD,CAzBM","sourcesContent":["import { useCallback } from 'react'\nimport { useRouter } from 'next/router'\nimport { useDispatch } from 'react-redux'\n\nimport { setSearch, setParams } from '../store/actions/root'\n\nexport const useSearch = () => {\n  const router = useRouter()\n  const dispatch = useDispatch()\n\n  const onSearch = useCallback(\n   (search, params) => {\n     if (search) dispatch(setSearch(search))\n     if (params) dispatch(setParams(params))\n\n     router.push(\n      {\n        pathname: router.pathname,\n        query: {\n          ...(search ? { search } : {}),\n          ...(params || {})\n        }\n      },\n      undefined,\n      { shallow: true }\n     )\n   },\n   [router, dispatch]\n  )\n\n  return [onSearch]\n}\n"]},"metadata":{},"sourceType":"module"}
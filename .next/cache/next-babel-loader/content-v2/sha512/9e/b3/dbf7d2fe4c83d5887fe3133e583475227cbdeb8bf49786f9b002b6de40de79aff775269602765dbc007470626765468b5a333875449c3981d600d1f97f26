{"ast":null,"code":"import React from 'react';\nimport ArticleForm from '../../components/FormArticle';\nimport DeleteForm from '../../components/FormDelete';\nimport ArticleCard from '../../components/ArticleCard';\nimport ArticleView from '../../components/ArticleView';\nimport { setDocuments } from '../actions/documents';\nimport { setDrawer } from '../actions/drawer';\nimport { setItem } from '../actions/snacks';\nimport { onUserLink } from './user';\nexport function onArticleLink(dispatch, props) {\n  const {\n    id,\n    auth\n  } = props;\n  dispatch(setDrawer({\n    icon: 'document',\n    title: 'Статья',\n    content: /*#__PURE__*/React.createElement(ArticleView, {\n      article: id,\n      appearance: 'clear',\n      onCommentLink: user => onUserLink(dispatch, {\n        email: user,\n        auth\n      })\n    })\n  }));\n}\nexport function onArticleCreate(dispatch, props) {\n  const {\n    categories,\n    statuses,\n    canEditStatus,\n    mutation,\n    isPurpose,\n    onAfter\n  } = props;\n  dispatch(setDrawer({\n    icon: 'document',\n    title: `${isPurpose ? 'Предложение' : 'Создание'} статьи`,\n    content: /*#__PURE__*/React.createElement(ArticleForm, {\n      mutation: mutation,\n      categories: categories,\n      statuses: statuses,\n      appearance: 'clear',\n      canEditStatus: canEditStatus,\n      onSubmit: async (form, action) => {\n        try {\n          var _form$preview, _form$preview2, _form$category, _form$status;\n\n          const articles = await action({\n            variables: {\n              input: {\n                title: form.title,\n                body: form.body,\n                preview: (_form$preview = form.preview) === null || _form$preview === void 0 ? void 0 : _form$preview.file,\n                previewSize: (_form$preview2 = form.preview) === null || _form$preview2 === void 0 ? void 0 : _form$preview2.file.size,\n                category: (_form$category = form.category) === null || _form$category === void 0 ? void 0 : _form$category.value,\n                status: (_form$status = form.status) === null || _form$status === void 0 ? void 0 : _form$status.value\n              }\n            }\n          });\n          dispatch(setDocuments(articles.data.createArticle));\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Статья успешно создана'\n          }));\n          if (onAfter) onAfter();\n        } catch (err) {\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось создать статью'\n          }));\n        }\n      },\n      isPurpose: isPurpose\n    })\n  }));\n}\nexport function onArticleEdit(dispatch, props) {\n  const {\n    id,\n    auth,\n    categories,\n    statuses,\n    canEditStatus,\n    mutation,\n    onAfter\n  } = props;\n  dispatch(setDrawer({\n    icon: 'document',\n    title: 'Редактирование статьи',\n    content: /*#__PURE__*/React.createElement(ArticleForm, {\n      article: id,\n      mutation: mutation,\n      categories: categories,\n      statuses: statuses,\n      appearance: 'clear',\n      canEditStatus: canEditStatus,\n      onSubmit: async (form, action) => {\n        try {\n          var _form$preview3, _form$preview4, _form$preview4$file, _form$category2, _form$status2;\n\n          const articles = await action({\n            variables: {\n              id,\n              input: {\n                title: form.title,\n                body: form.body,\n                preview: (_form$preview3 = form.preview) === null || _form$preview3 === void 0 ? void 0 : _form$preview3.file,\n                previewSize: (_form$preview4 = form.preview) === null || _form$preview4 === void 0 ? void 0 : (_form$preview4$file = _form$preview4.file) === null || _form$preview4$file === void 0 ? void 0 : _form$preview4$file.size,\n                category: (_form$category2 = form.category) === null || _form$category2 === void 0 ? void 0 : _form$category2.value,\n                status: (_form$status2 = form.status) === null || _form$status2 === void 0 ? void 0 : _form$status2.value\n              }\n            }\n          });\n          dispatch(setDocuments(articles.data.updateArticle));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Статья успешно отредактирована'\n          }));\n          if (onAfter) onAfter();\n        } catch (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отредактировать статью'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n        }\n      },\n      onCommentLink: user => onUserLink(dispatch, {\n        email: user,\n        auth\n      })\n    })\n  }));\n}\nexport function onArticleDelete(dispatch, props) {\n  const {\n    id,\n    article,\n    auth,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление статьи',\n    content: /*#__PURE__*/React.createElement(DeleteForm, {\n      mutation: mutation,\n      appearance: 'clear',\n      onCancel: () => dispatch(setDrawer(null)),\n      onSubmit: async (_, action) => {\n        try {\n          const articles = await action({\n            variables: {\n              id\n            }\n          });\n          dispatch(setDocuments(articles.data.deleteArticle));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Статья успешно удалена'\n          }));\n        } catch (_unused) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось удалить статью'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n        }\n      }\n    }, /*#__PURE__*/React.createElement(ArticleCard, {\n      article: article,\n      appearance: 'clear',\n      onLink: () => onArticleLink(dispatch, {\n        id: article.id\n      }),\n      onCommentLink: user => onUserLink(dispatch, {\n        email: user,\n        auth\n      })\n    }))\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport TicketForm from '../components/FormTicket';\nimport { setItem } from '../store/actions/snacks';\nimport { setModal } from '../store/actions/modal';\nimport queries from '../graphql/queries';\nconst Wrap = styled.div.withConfig({\n  displayName: \"support__Wrap\",\n  componentId: \"s0xf32-0\"\n})([\"display:grid;grid-template-columns:380px;justify-content:center;align-content:center;margin:120px 0;@media only screen and (max-width:480px){grid-template-columns:100%;margin:25px 0;}\"]);\n_c = Wrap;\nexport const Support = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(TicketForm, {\n    title: false,\n    mutation: queries.CREATE_USER_TICKET,\n    appearance: 'clear',\n    onSubmit: async (form, action) => {\n      try {\n        var _form$category;\n\n        await action({\n          variables: {\n            input: {\n              title: form.title,\n              message: form.message,\n              category: (_form$category = form.category) === null || _form$category === void 0 ? void 0 : _form$category.value\n            }\n          }\n        });\n        dispatch(setItem({\n          type: 'success',\n          message: 'Вопрос успешно отправлен'\n        }));\n      } catch (err) {\n        dispatch(setItem({\n          type: 'error',\n          message: 'Не удалось отправить вопрос'\n        }));\n      } finally {\n        dispatch(setModal(null));\n      }\n    },\n    isClient: true\n  }));\n};\n\n_s(Support, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = Support;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Support\");","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/pages/support.js"],"names":["React","styled","useDispatch","TicketForm","setItem","setModal","queries","Wrap","div","Support","dispatch","CREATE_USER_TICKET","form","action","variables","input","title","message","category","value","type","err"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,IAAI,GAAGN,MAAM,CAACO,GAAV;AAAA;AAAA;AAAA,+LAAV;KAAMD,I;AAaN,OAAO,MAAME,OAAO,GAAG,MAAM;AAAA;;AAC3B,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEA,sBACE,oBAAC,IAAD,qBACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAE,KADT;AAEE,IAAA,QAAQ,EAAEI,OAAO,CAACK,kBAFpB;AAGE,IAAA,UAAU,EAAE,OAHd;AAIE,IAAA,QAAQ,EAAE,OAAOC,IAAP,EAAaC,MAAb,KAAwB;AAChC,UAAI;AAAA;;AACF,cAAMA,MAAM,CAAC;AACXC,UAAAA,SAAS,EAAE;AACTC,YAAAA,KAAK,EAAE;AACLC,cAAAA,KAAK,EAAEJ,IAAI,CAACI,KADP;AAELC,cAAAA,OAAO,EAAEL,IAAI,CAACK,OAFT;AAGLC,cAAAA,QAAQ,oBAAEN,IAAI,CAACM,QAAP,mDAAE,eAAeC;AAHpB;AADE;AADA,SAAD,CAAZ;AASAT,QAAAA,QAAQ,CACNN,OAAO,CAAC;AACNgB,UAAAA,IAAI,EAAE,SADA;AAENH,UAAAA,OAAO,EAAE;AAFH,SAAD,CADD,CAAR;AAMD,OAhBD,CAgBE,OAAOI,GAAP,EAAY;AACZX,QAAAA,QAAQ,CACNN,OAAO,CAAC;AACNgB,UAAAA,IAAI,EAAE,OADA;AAENH,UAAAA,OAAO,EAAE;AAFH,SAAD,CADD,CAAR;AAMD,OAvBD,SAuBU;AACRP,QAAAA,QAAQ,CAACL,QAAQ,CAAC,IAAD,CAAT,CAAR;AACD;AACF,KA/BH;AAgCE,IAAA,QAAQ;AAhCV,IADF,CADF;AAsCD,CAzCM;;GAAMI,O;UACMP,W;;;MADNO,O","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { useDispatch } from 'react-redux'\n\nimport TicketForm from '../components/FormTicket'\nimport { setItem } from '../store/actions/snacks'\nimport { setModal } from '../store/actions/modal'\nimport queries from '../graphql/queries'\n\nconst Wrap = styled.div`\n  display: grid;\n  grid-template-columns: 380px;\n  justify-content: center;\n  align-content: center;\n  margin: 120px 0;\n\n  @media only screen and (max-width: 480px) {\n    grid-template-columns: 100%;\n    margin: 25px 0;\n  }\n`\n\nexport const Support = () => {\n  const dispatch = useDispatch()\n\n  return (\n    <Wrap>\n      <TicketForm\n        title={false}\n        mutation={queries.CREATE_USER_TICKET}\n        appearance={'clear'}\n        onSubmit={async (form, action) => {\n          try {\n            await action({\n              variables: {\n                input: {\n                  title: form.title,\n                  message: form.message,\n                  category: form.category?.value\n                }\n              }\n            })\n            dispatch(\n              setItem({\n                type: 'success',\n                message: 'Вопрос успешно отправлен'\n              })\n            )\n          } catch (err) {\n            dispatch(\n              setItem({\n                type: 'error',\n                message: 'Не удалось отправить вопрос'\n              })\n            )\n          } finally {\n            dispatch(setModal(null))\n          }\n        }}\n        isClient\n      />\n    </Wrap>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
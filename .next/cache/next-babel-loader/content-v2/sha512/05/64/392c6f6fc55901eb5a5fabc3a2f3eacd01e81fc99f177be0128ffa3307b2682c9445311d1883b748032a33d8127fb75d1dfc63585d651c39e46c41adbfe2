{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dan82\\\\Documents\\\\workspace\\\\FREELANCE\\\\atomic\\\\atomic-frontend\\\\atomic-ui\\\\components\\\\Comment\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Avatar from '../Avatar';\nimport Text from '../Text';\nimport DateText from '../DateText';\nimport Button from '../Button';\nimport Icon from '../Icon';\nimport Tooltip from '../Tooltip';\nimport Checkbox from '../Checkbox';\nimport TextArea from '../TextArea';\nexport const Wrap = styled(Row)`\n  position: relative;\n  margin: 0;\n  padding: 0;\n\n  ${({\n  checked\n}) => checked && css`\n      opacity: 0.45;\n    `}\n`;\nexport const MiniAvatar = styled(Avatar)`\n  width: var(--input-height-xs);\n  height: var(--input-height-xs);\n  min-width: var(--input-height-xs);\n  min-height: var(--input-height-xs);\n  border-radius: var(--surface-border-radius);\n`;\nexport const Name = styled(Text)`\n  font-weight: var(--font-weight-medium);\n  color: var(--default-color-accent);\n  transition: opacity 150ms ease;\n\n  ${({\n  compact\n}) => compact && css`\n      display: flex;\n      align-items: center;\n      grid-gap: 10px;\n      margin-bottom: 5px;\n    `}\n\n  ${({\n  onClick\n}) => onClick && css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`;\nexport const MessageTextArea = styled(TextArea)`\n  height: 128px;\n`;\nexport const MessageText = styled(Text)`\n  color: black;\n`;\nexport const Content = styled(Column)`\n  grid-gap: 0;\n  width: 100%;\n`;\nexport const Meta = styled(Row)`\n  grid-gap: 5px;\n`;\nexport const Line = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n`;\nexport const Actions = styled(Row)`\n  position: absolute;\n  top: 0;\n  right: 0;\n  grid-gap: 10px;\n`;\nexport const DispatchUpdatedDate = styled(DateText)`\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`;\nexport const DispatchTime = styled(DateText)`\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`;\nexport const ReplyButton = styled(Button)`\n  color: var(--default-color-accent);\n  font-size: var(--font-size-s);\n  font-weight: var(--font-weight-regular);\n`;\nexport const Likes = styled(Row)`\n  align-items: center;\n  grid-gap: 0;\n`;\nexport const LikesButton = styled(Button)`\n  span {\n    color: var(--default-color-text);\n    transition: color 150ms ease;\n  }\n\n  &:hover {\n    span {\n      color: var(--default-color-accent);\n    }\n  }\n`;\nexport const LikeButton = styled(Button)`\n  &:hover {\n    svg {\n      path,\n      circle {\n        stroke: var(--default-color-accent);\n      }\n    }\n  }\n`;\nexport const Comment = ({\n  user,\n  message,\n  likes,\n  time,\n  className,\n  style,\n  compact,\n  isLiked: initialLiked,\n  isUpdated,\n  isChecked,\n  onLink,\n  onReply,\n  onChecked,\n  onShowLikes,\n  onDelete,\n  onEdit,\n  onLike\n}) => {\n  var _user$avatar$path, _user$avatar, _user$avatar$path2, _user$avatar2;\n\n  const {\n    0: updatedAt,\n    1: setUpdatedAt\n  } = useState(isUpdated ? time : null);\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(isChecked);\n  const {\n    0: count,\n    1: setCount\n  } = useState(likes);\n  const {\n    0: isEdit,\n    1: setEdit\n  } = useState(false);\n  const {\n    0: isLiked,\n    1: setLiked\n  } = useState(initialLiked);\n  const color = useMemo(() => isLiked ? 'var(--default-color-accent)' : 'var(--default-color-text)', [isLiked]);\n  const textLikes = useMemo(() => count === 1 ? 'человеку' : 'людям', [count]);\n  const {\n    0: comment,\n    1: setComment\n  } = useState(message);\n  const commentRef = useRef(null);\n\n  const onClick = () => {\n    const value = !isLiked;\n    if (onLike) onLike(value);\n    setCount(prev => prev + (value ? 1 : -1));\n    setLiked(value);\n  };\n\n  const handleToggleEdit = () => setEdit(prev => !prev);\n\n  const handleChecked = e => {\n    const value = e.target.checked;\n    if (onChecked) onChecked(value);\n    setChecked(value);\n  };\n\n  const handleApplyChanges = () => {\n    var _commentRef$current;\n\n    const value = commentRef === null || commentRef === void 0 ? void 0 : (_commentRef$current = commentRef.current) === null || _commentRef$current === void 0 ? void 0 : _commentRef$current.value;\n\n    if (value) {\n      if (onEdit) onEdit(value);\n      setUpdatedAt(new Date());\n      setComment(value);\n    }\n\n    handleToggleEdit();\n  };\n\n  return __jsx(Wrap, {\n    checked: checked,\n    style: style,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, !compact && __jsx(Avatar, {\n    src: (_user$avatar$path = user === null || user === void 0 ? void 0 : (_user$avatar = user.avatar) === null || _user$avatar === void 0 ? void 0 : _user$avatar.path) !== null && _user$avatar$path !== void 0 ? _user$avatar$path : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 20\n    }\n  }), __jsx(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }\n  }, __jsx(Name, {\n    compact: compact,\n    onClick: onLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }\n  }, compact && __jsx(MiniAvatar, {\n    src: (_user$avatar$path2 = user === null || user === void 0 ? void 0 : (_user$avatar2 = user.avatar) === null || _user$avatar2 === void 0 ? void 0 : _user$avatar2.path) !== null && _user$avatar$path2 !== void 0 ? _user$avatar$path2 : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 23\n    }\n  }), user.name), isEdit ? __jsx(MessageTextArea, {\n    ref: commentRef,\n    defaultValue: comment,\n    appearance: 'ghost',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }) : __jsx(MessageText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, comment), compact && onEdit && onDelete && __jsx(Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 11\n    }\n  }, !isEdit ? __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 15\n    }\n  }, __jsx(Tooltip, {\n    text: 'Удалить комментарий',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: onDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 19\n    }\n  }, __jsx(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }))), __jsx(Tooltip, {\n    text: 'Редактировать комментарий',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    onClick: handleToggleEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 19\n    }\n  }, __jsx(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 21\n    }\n  }))), __jsx(Tooltip, {\n    text: 'Отметить комментарий',\n    self: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, __jsx(Checkbox, {\n    checked: checked,\n    onChange: handleChecked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 19\n    }\n  }))) : __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 15\n    }\n  }, __jsx(Tooltip, {\n    text: 'Применить изменения',\n    self: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'green',\n    onClick: handleApplyChanges,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 19\n    }\n  }, __jsx(Icon, {\n    icon: 'check',\n    size: 'xs',\n    stroke: 'white',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 21\n    }\n  }))), __jsx(Tooltip, {\n    text: 'Отменить изменения',\n    self: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 17\n    }\n  }, __jsx(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: handleToggleEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 19\n    }\n  }, __jsx(Icon, {\n    icon: 'closeSquare',\n    size: 'xs',\n    stroke: 'white',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 21\n    }\n  }))))), __jsx(Line, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, __jsx(Meta, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, updatedAt ? __jsx(DispatchUpdatedDate, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 15\n    }\n  }, \"\\u041E\\u0442\\u0440\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u043E\", ' ', new Date(updatedAt).toLocaleString('ru-RU', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  })) : __jsx(DispatchTime, {\n    text: time,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 15\n    }\n  }), onReply && __jsx(ReplyButton, {\n    appearance: 'clear',\n    onClick: onReply,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  }, \"\\u041E\\u0442\\u0432\\u0435\\u0442\\u0438\\u0442\\u044C\")), __jsx(Likes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, count > 0 && __jsx(Tooltip, {\n    text: `${count} ${textLikes} это нравится`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 15\n    }\n  }, __jsx(LikesButton, {\n    type: 'button',\n    onClick: onShowLikes,\n    appearance: 'clear',\n    size: 'xs',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 17\n    }\n  }, __jsx(\"span\", {\n    style: {\n      color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 19\n    }\n  }, count))), __jsx(Tooltip, {\n    text: 'Мне нравится',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 13\n    }\n  }, __jsx(LikeButton, {\n    type: 'button',\n    onClick: onClick,\n    appearance: 'clear',\n    size: 'xs',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    icon: 'heart',\n    size: 'xs',\n    stroke: color,\n    fill: isLiked ? 'var(--default-color-accent)' : 'none',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 17\n    }\n  })))))));\n};\nexport default Comment;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/Comment/index.js"],"names":["React","useState","useMemo","useRef","styled","css","Row","Column","Avatar","Text","DateText","Button","Icon","Tooltip","Checkbox","TextArea","Wrap","checked","MiniAvatar","Name","compact","onClick","MessageTextArea","MessageText","Content","Meta","Line","Actions","DispatchUpdatedDate","DispatchTime","ReplyButton","Likes","LikesButton","LikeButton","Comment","user","message","likes","time","className","style","isLiked","initialLiked","isUpdated","isChecked","onLink","onReply","onChecked","onShowLikes","onDelete","onEdit","onLike","updatedAt","setUpdatedAt","setChecked","count","setCount","isEdit","setEdit","setLiked","color","textLikes","comment","setComment","commentRef","value","prev","handleToggleEdit","handleChecked","e","target","handleApplyChanges","current","Date","avatar","path","name","toLocaleString","day","month","year"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useRef } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Row from '../Row'\nimport Column from '../Column'\nimport Avatar from '../Avatar'\nimport Text from '../Text'\nimport DateText from '../DateText'\nimport Button from '../Button'\nimport Icon from '../Icon'\nimport Tooltip from '../Tooltip'\nimport Checkbox from '../Checkbox'\nimport TextArea from '../TextArea'\n\nexport const Wrap = styled(Row)`\n  position: relative;\n  margin: 0;\n  padding: 0;\n\n  ${({ checked }) =>\n    checked &&\n    css`\n      opacity: 0.45;\n    `}\n`\n\nexport const MiniAvatar = styled(Avatar)`\n  width: var(--input-height-xs);\n  height: var(--input-height-xs);\n  min-width: var(--input-height-xs);\n  min-height: var(--input-height-xs);\n  border-radius: var(--surface-border-radius);\n`\n\nexport const Name = styled(Text)`\n  font-weight: var(--font-weight-medium);\n  color: var(--default-color-accent);\n  transition: opacity 150ms ease;\n\n  ${({ compact }) =>\n    compact &&\n    css`\n      display: flex;\n      align-items: center;\n      grid-gap: 10px;\n      margin-bottom: 5px;\n    `}\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`\n\nexport const MessageTextArea = styled(TextArea)`\n  height: 128px;\n`\n\nexport const MessageText = styled(Text)`\n  color: black;\n`\n\nexport const Content = styled(Column)`\n  grid-gap: 0;\n  width: 100%;\n`\n\nexport const Meta = styled(Row)`\n  grid-gap: 5px;\n`\n\nexport const Line = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const Actions = styled(Row)`\n  position: absolute;\n  top: 0;\n  right: 0;\n  grid-gap: 10px;\n`\n\nexport const DispatchUpdatedDate = styled(DateText)`\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`\n\nexport const DispatchTime = styled(DateText)`\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`\n\nexport const ReplyButton = styled(Button)`\n  color: var(--default-color-accent);\n  font-size: var(--font-size-s);\n  font-weight: var(--font-weight-regular);\n`\n\nexport const Likes = styled(Row)`\n  align-items: center;\n  grid-gap: 0;\n`\n\nexport const LikesButton = styled(Button)`\n  span {\n    color: var(--default-color-text);\n    transition: color 150ms ease;\n  }\n\n  &:hover {\n    span {\n      color: var(--default-color-accent);\n    }\n  }\n`\n\nexport const LikeButton = styled(Button)`\n  &:hover {\n    svg {\n      path,\n      circle {\n        stroke: var(--default-color-accent);\n      }\n    }\n  }\n`\n\nexport const Comment = ({\n  user,\n  message,\n  likes,\n  time,\n  className,\n  style,\n  compact,\n  isLiked: initialLiked,\n  isUpdated,\n  isChecked,\n  onLink,\n  onReply,\n  onChecked,\n  onShowLikes,\n  onDelete,\n  onEdit,\n  onLike\n}) => {\n  const [updatedAt, setUpdatedAt] = useState(isUpdated ? time : null)\n  const [checked, setChecked] = useState(isChecked)\n  const [count, setCount] = useState(likes)\n  const [isEdit, setEdit] = useState(false)\n  const [isLiked, setLiked] = useState(initialLiked)\n  const color = useMemo(\n    () => (isLiked ? 'var(--default-color-accent)' : 'var(--default-color-text)'),\n    [isLiked]\n  )\n  const textLikes = useMemo(() => (count === 1 ? 'человеку' : 'людям'), [count])\n  const [comment, setComment] = useState(message)\n  const commentRef = useRef(null)\n\n  const onClick = () => {\n    const value = !isLiked\n    if (onLike) onLike(value)\n    setCount((prev) => prev + (value ? 1 : -1))\n    setLiked(value)\n  }\n\n  const handleToggleEdit = () => setEdit((prev) => !prev)\n\n  const handleChecked = (e) => {\n    const value = e.target.checked\n    if (onChecked) onChecked(value)\n    setChecked(value)\n  }\n\n  const handleApplyChanges = () => {\n    const value = commentRef?.current?.value\n\n    if (value) {\n      if (onEdit) onEdit(value)\n      setUpdatedAt(new Date())\n      setComment(value)\n    }\n    handleToggleEdit()\n  }\n\n  return (\n    <Wrap checked={checked} style={style} className={className}>\n      {!compact && <Avatar src={user?.avatar?.path ?? ''} />}\n\n      <Content>\n        <Name compact={compact} onClick={onLink}>\n          {compact && <MiniAvatar src={user?.avatar?.path ?? ''} />}\n          {user.name}\n        </Name>\n\n        {isEdit ? (\n          <MessageTextArea ref={commentRef} defaultValue={comment} appearance={'ghost'} />\n        ) : (\n          <MessageText>{comment}</MessageText>\n        )}\n\n        {compact && onEdit && onDelete && (\n          <Actions>\n            {!isEdit ? (\n              <React.Fragment>\n                <Tooltip text={'Удалить комментарий'}>\n                  <Button\n                    kind={'icon'}\n                    size={'xs'}\n                    disabled={checked}\n                    appearance={'red'}\n                    onClick={onDelete}>\n                    <Icon icon={'delete'} size={'xs'} stroke={'white'} />\n                  </Button>\n                </Tooltip>\n                <Tooltip text={'Редактировать комментарий'}>\n                  <Button kind={'icon'} size={'xs'} disabled={checked} onClick={handleToggleEdit}>\n                    <Icon icon={'edit'} size={'xs'} stroke={'white'} />\n                  </Button>\n                </Tooltip>\n                <Tooltip text={'Отметить комментарий'} self>\n                  <Checkbox checked={checked} onChange={handleChecked} />\n                </Tooltip>\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                <Tooltip text={'Применить изменения'} self>\n                  <Button\n                    kind={'icon'}\n                    size={'xs'}\n                    disabled={checked}\n                    appearance={'green'}\n                    onClick={handleApplyChanges}>\n                    <Icon icon={'check'} size={'xs'} stroke={'white'} />\n                  </Button>\n                </Tooltip>\n                <Tooltip text={'Отменить изменения'} self>\n                  <Button\n                    kind={'icon'}\n                    size={'xs'}\n                    disabled={checked}\n                    appearance={'red'}\n                    onClick={handleToggleEdit}>\n                    <Icon icon={'closeSquare'} size={'xs'} stroke={'white'} />\n                  </Button>\n                </Tooltip>\n              </React.Fragment>\n            )}\n          </Actions>\n        )}\n\n        <Line>\n          <Meta>\n            {updatedAt ? (\n              <DispatchUpdatedDate>\n                Отредактировано{' '}\n                {new Date(updatedAt).toLocaleString('ru-RU', {\n                  day: 'numeric',\n                  month: 'long',\n                  year: 'numeric'\n                })}\n              </DispatchUpdatedDate>\n            ) : (\n              <DispatchTime text={time} />\n            )}\n\n            {onReply && (\n              <ReplyButton appearance={'clear'} onClick={onReply}>\n                Ответить\n              </ReplyButton>\n            )}\n          </Meta>\n\n          <Likes>\n            {count > 0 && (\n              <Tooltip text={`${count} ${textLikes} это нравится`}>\n                <LikesButton type={'button'} onClick={onShowLikes} appearance={'clear'} size={'xs'}>\n                  <span style={{ color }}>{count}</span>\n                </LikesButton>\n              </Tooltip>\n            )}\n            <Tooltip text={'Мне нравится'}>\n              <LikeButton type={'button'} onClick={onClick} appearance={'clear'} size={'xs'}>\n                <Icon\n                  icon={'heart'}\n                  size={'xs'}\n                  stroke={color}\n                  fill={isLiked ? 'var(--default-color-accent)' : 'none'}\n                />\n              </LikeButton>\n            </Tooltip>\n          </Likes>\n        </Line>\n      </Content>\n    </Wrap>\n  )\n}\n\nexport default Comment\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState } from 'react';\nimport { Controller } from 'react-hook-form';\nimport styled from 'styled-components';\nimport generator from 'generate-password';\nimport Container from '../../atomic-ui/components/Container';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nimport Switch from '../../atomic-ui/components/Switch';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Form from '../Form';\nconst ACCOUNT_TYPES = [{\n  label: 'Физ. лицо',\n  value: 'INDIVIDUAL',\n  tooltip: 'Любое лицо'\n}, {\n  label: 'Оф. лицо',\n  value: 'OFICIAL',\n  tooltip: 'Государственный деятель'\n}, {\n  label: 'Юр. лицо',\n  value: 'ENTITY',\n  tooltip: 'Организация'\n}];\nexport const AdaptiveRow = styled(Row).withConfig({\n  displayName: \"FormRegister__AdaptiveRow\",\n  componentId: \"sc-56g8v2-0\"\n})([\"@media only screen and (max-width:575px){flex-direction:column;grid-gap:var(--default-gap);\", \"{flex-grow:1;button{width:100%;}}}\"], WrapTooltip);\n_c = AdaptiveRow;\nexport const Register = ({\n  title = true,\n  accountTypes,\n  mutation,\n  appearance,\n  className,\n  onLogin,\n  onSubmit\n}) => {\n  var _s = $RefreshSig$();\n\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => onSubmit(form, action)\n  }, _s(({\n    watch,\n    register,\n    loading,\n    control,\n    errors\n  }) => {\n    _s();\n\n    const [isShowPassword, setShowPassword] = useState(false);\n    const [generatedPassword, setGeneratedPassword] = useState('');\n    const [disabled, setDisabled] = useState(true);\n\n    const onTogglePassword = () => setShowPassword(!isShowPassword);\n\n    const onGeneratePassword = () => {\n      const password = generator.generate();\n      setGeneratedPassword(password);\n    };\n\n    const {\n      account,\n      name,\n      email,\n      phone,\n      password,\n      confirmPassword\n    } = watch();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, title && /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Title, {\n      style: {\n        textAlign: 'center'\n      },\n      tag: 'h4'\n    }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0439\\u0442\\u0435 \\u0430\\u043A\\u043A\\u0430\\u0443\\u043D\\u0442\")), (errors.name || errors.email || errors.phone || errors.password || errors.confirmPassword || errors.confirmPassword) && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, errors.name && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u043E \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u043E \\u0424\\u0418\\u041E\"), errors.email && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u0430 \\u044D\\u043B. \\u043F\\u043E\\u0447\\u0442\\u0430\"), errors.phone && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D\\u0430 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\"), errors.password && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u043E \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435 \\u0443\\u043A\\u0430\\u0437\\u0430\\u043D \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\"), !errors.confirmPassword && errors.confirmPassword && /*#__PURE__*/React.createElement(\"p\", null, \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u0438 \\u043D\\u0435 \\u0441\\u043E\\u0432\\u043F\\u0430\\u0434\\u0430\\u044E\\u0442\")), /*#__PURE__*/React.createElement(Controller, {\n      name: 'account',\n      control: control,\n      defaultValue: account || ACCOUNT_TYPES[0],\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Switch, {\n        defaultValue: value,\n        options: (accountTypes === null || accountTypes === void 0 ? void 0 : accountTypes.length) > 1 && accountTypes || ACCOUNT_TYPES,\n        disabled: loading,\n        onChange: onChange,\n        stretch: true\n      })\n    }), /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'name',\n      ref: register({\n        required: true\n      }),\n      defaultValue: name,\n      placeholder: (account === null || account === void 0 ? void 0 : account.value) === 'ENTITY' ? 'Название компании' : 'ФИО',\n      appearance: 'ghost',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: 'email',\n      name: 'email',\n      ref: register({\n        required: true,\n        pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n      }),\n      defaultValue: email,\n      placeholder: 'Эл. почта',\n      appearance: 'ghost',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: 'tel',\n      name: 'phone',\n      ref: register({\n        required: true,\n        maxLength: 11,\n        minLength: 8\n      }),\n      defaultValue: phone,\n      appearance: 'ghost',\n      placeholder: 'Телефон',\n      disabled: loading\n    })), /*#__PURE__*/React.createElement(AdaptiveRow, null, /*#__PURE__*/React.createElement(Column, {\n      style: {\n        flexGrow: 1\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: isShowPassword ? 'text' : 'password',\n      name: 'password',\n      ref: register({\n        required: true,\n        minLength: 8\n      }),\n      defaultValue: generatedPassword ? generatedPassword : password,\n      appearance: 'ghost',\n      placeholder: 'Пароль',\n      disabled: loading,\n      onChange: () => setGeneratedPassword('')\n    }), /*#__PURE__*/React.createElement(Input, {\n      type: isShowPassword ? 'text' : 'password',\n      name: 'confirmPassword',\n      ref: register({\n        required: true,\n        minLength: 8\n      }),\n      defaultValue: generatedPassword ? generatedPassword : confirmPassword,\n      appearance: 'ghost',\n      placeholder: 'Подтвердите пароль',\n      disabled: loading,\n      onChange: () => setGeneratedPassword('')\n    })), /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Tooltip, {\n      text: 'Генерация пароля'\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: 'button',\n      kind: 'icon',\n      disabled: loading,\n      onClick: () => {\n        onGeneratePassword();\n        setDisabled(false);\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      icon: 'password',\n      stroke: 'white'\n    }))), /*#__PURE__*/React.createElement(Tooltip, {\n      text: 'Отображение пароля'\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: 'button',\n      kind: 'icon',\n      disabled: loading,\n      onClick: onTogglePassword,\n      revert: !isShowPassword\n    }, /*#__PURE__*/React.createElement(Icon, {\n      icon: isShowPassword ? 'hide' : 'show',\n      stroke: isShowPassword ? 'white' : 'var(--default-color-accent)'\n    }))))), /*#__PURE__*/React.createElement(Text, null, \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u043D\\u0435 \\u043C\\u0435\\u043D\\u0435\\u0435 \\u0432\\u043E\\u0441\\u044C\\u043C\\u0438 \\u0437\\u043D\\u0430\\u043A\\u043E\\u0432, \\u0432\\u043A\\u043B\\u044E\\u0447\\u0430\\u0442\\u044C \\u0431\\u0443\\u043A\\u0432\\u044B, \\u0446\\u0438\\u0444\\u0440\\u044B \\u0438 \\u0441\\u043F\\u0435\\u0446\\u0438\\u0430\\u043B\\u044C\\u043D\\u044B\\u0435 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u044B\"), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'button',\n      disabled: loading,\n      onClick: onLogin\n    }, \"\\u0412\\u043E\\u0439\\u0442\\u0438\"), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: disabled || loading\n    }, \"\\u0414\\u0430\\u043B\\u0435\\u0435\")));\n  }, \"ZGwOrhOky2QnRQ/akOr5M322kXM=\"));\n};\n_c2 = Register;\nexport default Register;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AdaptiveRow\");\n$RefreshReg$(_c2, \"Register\");","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/FormRegister/index.js"],"names":["React","useState","Controller","styled","generator","Container","Row","Column","Title","Text","Input","Button","Tooltip","Wrap","WrapTooltip","Switch","Icon","Alert","Form","ACCOUNT_TYPES","label","value","tooltip","AdaptiveRow","Register","title","accountTypes","mutation","appearance","className","onLogin","onSubmit","form","action","watch","register","loading","control","errors","isShowPassword","setShowPassword","generatedPassword","setGeneratedPassword","disabled","setDisabled","onTogglePassword","onGeneratePassword","password","generate","account","name","email","phone","confirmPassword","textAlign","width","onChange","length","required","pattern","maxLength","minLength","flexGrow"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Controller } from 'react-hook-form'\nimport styled from 'styled-components'\nimport generator from 'generate-password'\n\nimport Container from '../../atomic-ui/components/Container'\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip'\nimport Switch from '../../atomic-ui/components/Switch'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Alert from '../../atomic-ui/components/Alert'\n\nimport Form from '../Form'\n\nconst ACCOUNT_TYPES = [\n  { label: 'Физ. лицо', value: 'INDIVIDUAL', tooltip: 'Любое лицо' },\n  { label: 'Оф. лицо', value: 'OFICIAL', tooltip: 'Государственный деятель' },\n  { label: 'Юр. лицо', value: 'ENTITY', tooltip: 'Организация' }\n]\n\nexport const AdaptiveRow = styled(Row)`\n  @media only screen and (max-width: 575px) {\n    flex-direction: column;\n    grid-gap: var(--default-gap);\n\n    ${WrapTooltip} {\n      flex-grow: 1;\n\n      button {\n        width: 100%;\n      }\n    }\n  }\n`\n\nexport const Register = ({\n  title = true,\n  accountTypes,\n  mutation,\n  appearance,\n  className,\n  onLogin,\n  onSubmit\n}) => (\n  <Form\n    className={className}\n    appearance={appearance}\n    mutation={mutation}\n    onSubmit={(form, action) => onSubmit(form, action)}>\n    {({ watch, register, loading, control, errors }) => {\n      const [isShowPassword, setShowPassword] = useState(false)\n      const [generatedPassword, setGeneratedPassword] = useState('')\n      const [disabled, setDisabled] = useState(true)\n\n      const onTogglePassword = () => setShowPassword(!isShowPassword)\n\n      const onGeneratePassword = () => {\n        const password = generator.generate()\n        setGeneratedPassword(password)\n      }\n\n      const { account, name, email, phone, password, confirmPassword } = watch()\n\n      return (\n        <React.Fragment>\n          {title && (\n            <Container>\n              <Title style={{ textAlign: 'center' }} tag={'h4'}>\n                Создайте аккаунт\n              </Title>\n            </Container>\n          )}\n\n          {(errors.name ||\n            errors.email ||\n            errors.phone ||\n            errors.password ||\n            errors.confirmPassword ||\n            errors.confirmPassword) && (\n            <Alert style={{ width: '100%' }} appearance={'error'}>\n              {errors.name && <p>Неверно указано или не указано ФИО</p>}\n              {errors.email && <p>Неверно указан или не указана эл. почта</p>}\n              {errors.phone && <p>Неверно указан или не указана телефон</p>}\n              {errors.password && <p>Неверно указан или не указан пароль</p>}\n              {!errors.confirmPassword && errors.confirmPassword && <p>Пароли не совпадают</p>}\n            </Alert>\n          )}\n\n          <Controller\n            name={'account'}\n            control={control}\n            defaultValue={account || ACCOUNT_TYPES[0]}\n            render={({ value, onChange }) => (\n              <Switch\n                defaultValue={value}\n                options={(accountTypes?.length > 1 && accountTypes) || ACCOUNT_TYPES}\n                disabled={loading}\n                onChange={onChange}\n                stretch\n              />\n            )}\n          />\n\n          <Column>\n            <Input\n              type={'text'}\n              name={'name'}\n              ref={register({ required: true })}\n              defaultValue={name}\n              placeholder={account?.value === 'ENTITY' ? 'Название компании' : 'ФИО'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n            <Input\n              type={'email'}\n              name={'email'}\n              ref={register({\n                required: true,\n                pattern: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n              })}\n              defaultValue={email}\n              placeholder={'Эл. почта'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n            <Input\n              type={'tel'}\n              name={'phone'}\n              ref={register({ required: true, maxLength: 11, minLength: 8 })}\n              defaultValue={phone}\n              appearance={'ghost'}\n              placeholder={'Телефон'}\n              disabled={loading}\n            />\n          </Column>\n\n          <AdaptiveRow>\n            <Column style={{ flexGrow: 1 }}>\n              <Input\n                type={isShowPassword ? 'text' : 'password'}\n                name={'password'}\n                ref={register({ required: true, minLength: 8 })}\n                defaultValue={generatedPassword ? generatedPassword : password}\n                appearance={'ghost'}\n                placeholder={'Пароль'}\n                disabled={loading}\n                onChange={() => setGeneratedPassword('')}\n              />\n              <Input\n                type={isShowPassword ? 'text' : 'password'}\n                name={'confirmPassword'}\n                ref={register({ required: true, minLength: 8 })}\n                defaultValue={generatedPassword ? generatedPassword : confirmPassword}\n                appearance={'ghost'}\n                placeholder={'Подтвердите пароль'}\n                disabled={loading}\n                onChange={() => setGeneratedPassword('')}\n              />\n            </Column>\n            <Column>\n              <Tooltip text={'Генерация пароля'}>\n                <Button\n                  type={'button'}\n                  kind={'icon'}\n                  disabled={loading}\n                  onClick={() => {\n                    onGeneratePassword()\n                    setDisabled(false)\n                  }}>\n                  <Icon icon={'password'} stroke={'white'} />\n                </Button>\n              </Tooltip>\n              <Tooltip text={'Отображение пароля'}>\n                <Button\n                  type={'button'}\n                  kind={'icon'}\n                  disabled={loading}\n                  onClick={onTogglePassword}\n                  revert={!isShowPassword}>\n                  <Icon\n                    icon={isShowPassword ? 'hide' : 'show'}\n                    stroke={isShowPassword ? 'white' : 'var(--default-color-accent)'}\n                  />\n                </Button>\n              </Tooltip>\n            </Column>\n          </AdaptiveRow>\n\n          <Text>\n            Пароль должен содержать не менее восьми знаков, включать буквы, цифры и специальные\n            символы\n          </Text>\n\n          <Row>\n            <Button style={{ flexGrow: 1 }} type={'button'} disabled={loading} onClick={onLogin}>\n              Войти\n            </Button>\n            <Button style={{ flexGrow: 1 }} type={'submit'} disabled={disabled || loading}>\n              Далее\n            </Button>\n          </Row>\n        </React.Fragment>\n      )\n    }}\n  </Form>\n)\n\nexport default Register\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dan82\\\\Documents\\\\workspace\\\\FREELANCE\\\\atomic\\\\atomic-frontend\\\\atomic-ui\\\\components\\\\Tooltip\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport ReactTooltip from 'react-tooltip';\nimport { v4 } from 'uuid';\nexport const Wrap = styled.div`\n  position: relative;\n  display: inline-flex;\n`;\nexport const Content = styled(ReactTooltip)`\n  padding: 7px 10px !important;\n  font-size: var(--font-size-s) !important;\n  line-height: 14px !important;\n  background: rgba(0, 0, 0, 0.7) !important;\n  border-radius: var(--surface-border-radius) !important;\n  border: none !important;\n  color: white !important;\n  opacity: 0.9;\n\n  ${({\n  maxWidth\n}) => maxWidth && css`\n      max-width: ${maxWidth}px !important;\n    `}\n`;\nexport const Tooltip = (_ref) => {\n  let {\n    text,\n    self,\n    children,\n    style,\n    className,\n    maxWidth\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"text\", \"self\", \"children\", \"style\", \"className\", \"maxWidth\"]);\n\n  const id = `tooltip-${v4()}`;\n  return __jsx(Wrap, {\n    className: className,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.cloneElement(self ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 34\n    }\n  }, children) : children, _objectSpread({}, {\n    'data-arrow-color': 'rgba(0, 0, 0, .7)',\n    'data-tip': true,\n    'data-for': id\n  })), __jsx(Content, _extends({\n    id: id\n  }, props, {\n    maxWidth: maxWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, text)));\n};\nTooltip.defaultProps = {\n  place: 'top',\n  effect: 'solid',\n  delayShow: 500\n};\nexport default Tooltip;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/Tooltip/index.js"],"names":["React","styled","css","ReactTooltip","v4","Wrap","div","Content","maxWidth","Tooltip","text","self","children","style","className","props","id","cloneElement","defaultProps","place","effect","delayShow"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,EAAT,QAAmB,MAAnB;AAEA,OAAO,MAAMC,IAAI,GAAGJ,MAAM,CAACK,GAAI;AAC/B;AACA;AACA,CAHO;AAKP,OAAO,MAAMC,OAAO,GAAGN,MAAM,CAACE,YAAD,CAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,CAAC;AAAEK,EAAAA;AAAF,CAAD,KACAA,QAAQ,IACRN,GAAI;AACR,mBAAmBM,QAAS;AAC5B,KAAM;AACN,CAfO;AAiBP,OAAO,MAAMC,OAAO,GAAG,UAAoE;AAAA,MAAnE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA,KAAxB;AAA+BC,IAAAA,SAA/B;AAA0CN,IAAAA;AAA1C,GAAmE;AAAA,MAAZO,KAAY;;AACzF,QAAMC,EAAE,GAAI,WAAUZ,EAAE,EAAG,EAA3B;AAEA,SACE,MAAC,IAAD;AAAM,IAAA,SAAS,EAAEU,SAAjB;AAA4B,IAAA,KAAK,EAAED,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACGb,KAAK,CAACiB,YAAN,CAAmBN,IAAI,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,QAAN,CAAH,GAA2BA,QAAlD,oBACI;AACD,wBAAoB,mBADnB;AAED,gBAAY,IAFX;AAGD,gBAAYI;AAHX,GADJ,EADH,EAQE,MAAC,OAAD;AAAS,IAAA,EAAE,EAAEA;AAAb,KAAqBD,KAArB;AAA4B,IAAA,QAAQ,EAAEP,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOE,IAAP,CADF,CARF,CADF;AAcD,CAjBM;AAmBPD,OAAO,CAACS,YAAR,GAAuB;AACrBC,EAAAA,KAAK,EAAE,KADc;AAErBC,EAAAA,MAAM,EAAE,OAFa;AAGrBC,EAAAA,SAAS,EAAE;AAHU,CAAvB;AAMA,eAAeZ,OAAf","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport ReactTooltip from 'react-tooltip'\nimport { v4 } from 'uuid'\n\nexport const Wrap = styled.div`\n  position: relative;\n  display: inline-flex;\n`\n\nexport const Content = styled(ReactTooltip)`\n  padding: 7px 10px !important;\n  font-size: var(--font-size-s) !important;\n  line-height: 14px !important;\n  background: rgba(0, 0, 0, 0.7) !important;\n  border-radius: var(--surface-border-radius) !important;\n  border: none !important;\n  color: white !important;\n  opacity: 0.9;\n\n  ${({ maxWidth }) =>\n    maxWidth &&\n    css`\n      max-width: ${maxWidth}px !important;\n    `}\n`\n\nexport const Tooltip = ({ text, self, children, style, className, maxWidth, ...props }) => {\n  const id = `tooltip-${v4()}`\n\n  return (\n    <Wrap className={className} style={style}>\n      {React.cloneElement(self ? <div>{children}</div> : children, {\n        ...{\n          'data-arrow-color': 'rgba(0, 0, 0, .7)',\n          'data-tip': true,\n          'data-for': id\n        }\n      })}\n      <Content id={id} {...props} maxWidth={maxWidth}>\n        <span>{text}</span>\n      </Content>\n    </Wrap>\n  )\n}\n\nTooltip.defaultProps = {\n  place: 'top',\n  effect: 'solid',\n  delayShow: 500\n}\n\nexport default Tooltip\n"]},"metadata":{},"sourceType":"module"}
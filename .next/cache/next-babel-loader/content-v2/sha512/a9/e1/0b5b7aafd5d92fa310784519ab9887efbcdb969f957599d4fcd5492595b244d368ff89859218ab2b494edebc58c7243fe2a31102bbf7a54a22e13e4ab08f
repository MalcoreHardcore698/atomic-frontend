{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/category';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport ProjectCard from '../../components/ProjectCard';\nimport { getProjectLinkProps } from '../../hooks/useEntityQuery';\nimport { onProjectCreate, onProjectEdit, onProjectLink } from '../../store/helpers/project';\nimport { setDocuments } from '../../store/actions/documents';\nimport { setUserFolder } from '../../store/actions/user';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\nconst LIMIT = 12;\nconst START_OFFSET = 0;\n\nconst Projects = () => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    icon: 'work',\n    template: template,\n    startOffset: START_OFFSET,\n    emptyMessage: 'Проектов нет',\n    buttonCreateText: 'Создать проект',\n    getType: 'getProjects',\n    getQuery: queries.GET_PROJECTS,\n    deleteQuery: queries.DELETE_PROJECT,\n    deleteEntityMultiText: 'проекты',\n    deleteEntitySingleText: 'проект',\n    onLink: project => {\n      var _user$projects;\n\n      const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n      recall(onProjectLink, getProjectLinkProps(project.id, user, owned, dispatch, mutate, recall, item => {\n        const result = { ...item,\n          projects: [...item.projects, project.id]\n        };\n        dispatch(setUserFolder(result));\n      }))();\n    },\n    onEdit: (project, onAfter) => recall(onProjectEdit, {\n      id: project.id,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      }),\n      onAfter\n    })(),\n    onCreate: onAfter => recall(onProjectCreate, {\n      canEditStatus,\n      mutation: queries.CREATE_PROJECT,\n      query: queries.GET_USERS,\n      onAfter\n    })(),\n    render: document => /*#__PURE__*/React.createElement(ProjectCard, {\n      project: document,\n      withSocials: true,\n      preview: true\n    })\n  });\n};\n\nexport default Projects;","map":null,"metadata":{},"sourceType":"module"}
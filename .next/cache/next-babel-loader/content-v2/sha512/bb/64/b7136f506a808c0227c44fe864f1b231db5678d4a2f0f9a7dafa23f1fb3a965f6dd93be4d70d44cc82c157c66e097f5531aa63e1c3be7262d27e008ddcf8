{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Table from '../../atomic-ui/components/Table';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { GridAside as Container, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"\"]);\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const Content = ({\n  type,\n  limit = 6,\n  template,\n  component,\n  variables,\n  loading,\n  refetch,\n  initialList,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  var _router$query;\n\n  const router = useRouter();\n  const displayMethod = useSelector(state => state.root.displayMethod);\n  const [page, setPage] = useState(Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1);\n  const [items, setItems] = useState(initialList || []);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n\n  const loadMore = async () => {\n    if (!isEnd && !loading && refetch) {\n      setIsLoading(true);\n      const response = await refetch({ ...variables,\n        offset: limit * page,\n        limit\n      });\n\n      if (response !== null && response !== void 0 && response.data) {\n        const list = response.data[type];\n        if (list.length === 0) setIsEnd(true);\n        if (list.length > 0) setItems(prev => [...prev, ...list]);\n        setPage(prev => prev + 1);\n      }\n\n      setIsLoading(false);\n    }\n  }; // Necessary for determination checkList outside [content]\n\n\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) setCheckedList(items);\n  }, [items, setCheckedList]);\n  return /*#__PURE__*/React.createElement(\"div\", null, displayMethod === 'grid' && /*#__PURE__*/React.createElement(Container, null, (items || []).map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n    key: item.id || item.email\n  }, component(item)))), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: items,\n    template: template,\n    onChecked: onChecked,\n    onClick: onClick,\n    onEdit: onEdit,\n    onDelete: onDelete\n  }), (loading || isLoading) && /*#__PURE__*/React.createElement(LowerLoader, {\n    key: 'loader'\n  }, /*#__PURE__*/React.createElement(Spinner, null)), !isEnd && !loading && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      justifyContent: 'center'\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    disabled: isLoading,\n    style: {\n      width: 245\n    },\n    onClick: loadMore\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435\"))));\n};\nexport const List = ({\n  type,\n  query,\n  limit,\n  template,\n  variables,\n  component,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(query, {\n    variables: { ...variables,\n      offset: 0,\n      limit\n    }\n  });\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(LowerLoader, {\n      key: 'loader'\n    }, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(Content, {\n    type: type,\n    limit: limit,\n    refetch: refetch,\n    template: template,\n    component: component,\n    initialList: type && data && data[type],\n    setCheckedList: setCheckedList,\n    onChecked: onChecked,\n    onDelete: onDelete,\n    onClick: onClick,\n    onEdit: onEdit\n  });\n};\nexport default List;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/List/index.js"],"names":["React","useState","useEffect","useQuery","useSelector","useRouter","styled","Row","Column","Spinner","Divider","Button","Table","Alert","GridAside","Container","LowerLoader","LazyLoad","Wrap","CenterAlert","Content","type","limit","template","component","variables","loading","refetch","initialList","setCheckedList","onChecked","onClick","onEdit","onDelete","router","displayMethod","state","root","page","setPage","Number","query","items","setItems","isLoading","setIsLoading","isEnd","setIsEnd","loadMore","response","offset","data","list","length","prev","map","item","id","email","justifyContent","width","List"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Button from '../../atomic-ui/components/Button'\nimport Table from '../../atomic-ui/components/Table'\nimport Alert from '../../atomic-ui/components/Alert'\n\nimport { GridAside as Container, LowerLoader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\n\nexport const Wrap = styled(Column)``\n\nexport const CenterAlert = styled(Alert)`\n  width: 100%;\n  text-align: center;\n`\n\nexport const Content = ({\n  type,\n  limit = 6,\n  template,\n  component,\n  variables,\n  loading,\n  refetch,\n  initialList,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const router = useRouter()\n  const displayMethod = useSelector((state) => state.root.displayMethod)\n\n  const [page, setPage] = useState(Number(router.query?.page) || 1)\n  const [items, setItems] = useState(initialList || [])\n  const [isLoading, setIsLoading] = useState(false)\n  const [isEnd, setIsEnd] = useState(false)\n\n  const loadMore = async () => {\n    if (!isEnd && !loading && refetch) {\n      setIsLoading(true)\n\n      const response = await refetch({ ...variables, offset: limit * page, limit })\n      if (response?.data) {\n        const list = response.data[type]\n        if (list.length === 0) setIsEnd(true)\n        if (list.length > 0) setItems((prev) => [...prev, ...list])\n        setPage((prev) => prev + 1)\n      }\n\n      setIsLoading(false)\n    }\n  }\n\n  // Necessary for determination checkList outside [content]\n  useEffect(() => {\n    if (items?.length > 0 && setCheckedList) setCheckedList(items)\n  }, [items, setCheckedList])\n\n  return (\n    <div>\n      {displayMethod === 'grid' && (\n        <Container>\n          {(items || []).map((item) => (\n            <LazyLoad key={item.id || item.email}>{component(item)}</LazyLoad>\n          ))}\n        </Container>\n      )}\n\n      {displayMethod === 'list' && (\n        <Table\n          data={items}\n          template={template}\n          onChecked={onChecked}\n          onClick={onClick}\n          onEdit={onEdit}\n          onDelete={onDelete}\n        />\n      )}\n\n      {(loading || isLoading) && (\n        <LowerLoader key={'loader'}>\n          <Spinner />\n        </LowerLoader>\n      )}\n\n      {!isEnd && !loading && (\n        <React.Fragment>\n          <Divider />\n          <Row style={{ justifyContent: 'center' }}>\n            <Button type={'button'} disabled={isLoading} style={{ width: 245 }} onClick={loadMore}>\n              Загрузить еще\n            </Button>\n          </Row>\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n\nexport const List = ({\n  type,\n  query,\n  limit,\n  template,\n  variables,\n  component,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const { data, loading, refetch } = useQuery(query, {\n    variables: {\n      ...variables,\n      offset: 0,\n      limit\n    }\n  })\n\n  if (loading) {\n    return (\n      <LowerLoader key={'loader'}>\n        <Spinner />\n      </LowerLoader>\n    )\n  }\n\n  return (\n    <Content\n      type={type}\n      limit={limit}\n      refetch={refetch}\n      template={template}\n      component={component}\n      initialList={type && data && data[type]}\n      setCheckedList={setCheckedList}\n      onChecked={onChecked}\n      onDelete={onDelete}\n      onClick={onClick}\n      onEdit={onEdit}\n    />\n  )\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}
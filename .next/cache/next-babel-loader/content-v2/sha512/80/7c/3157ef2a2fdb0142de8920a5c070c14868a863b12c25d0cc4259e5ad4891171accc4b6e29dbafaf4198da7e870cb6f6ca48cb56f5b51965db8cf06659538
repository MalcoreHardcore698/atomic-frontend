{"ast":null,"code":"import React from 'react';\nimport { initializeApollo } from '../apollo';\nimport ContentLayout from '../layouts/content';\nimport { GridAside as Container } from '../components/Styled';\nimport UserList from '../components/UserList';\nimport queries from '../graphql/queries';\nconst TITLE = 'Авторы';\nconst START_OFFSET = 6;\n\nconst Creators = ({\n  store\n}) => /*#__PURE__*/React.createElement(ContentLayout, {\n  title: TITLE,\n  filters: [{\n    type: 'DATEPICKER',\n    placeholder: 'Дата регистарции'\n  }, {\n    type: 'SELECT',\n    placeholder: 'Компания',\n    options: store === null || store === void 0 ? void 0 : store.companies.map(company => ({\n      value: company.email,\n      label: company.name\n    }))\n  }],\n  options: [{\n    label: 'Компания',\n    value: 'company'\n  }, {\n    label: 'Участники',\n    value: 'members'\n  }, {\n    label: 'Дата регистарции',\n    value: 'createdAt'\n  }],\n  query: queries.GET_USERS,\n  store: {\n    documents: store === null || store === void 0 ? void 0 : store.users\n  }\n}, ({\n  documents\n}) => /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(UserList, {\n  initialList: documents\n})));\n\nexport async function getServerSideProps({\n  query\n}) {\n  const client = initializeApollo();\n  let users = [];\n  let companies = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS,\n      variables: {\n        offset: query.page ? query.page * START_OFFSET : 0,\n        limit: START_OFFSET,\n        role: 'USER'\n      }\n    });\n\n    if (response && response.data) {\n      users = response.data.getUsers;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        users,\n        companies\n      }\n    }\n  };\n}\nexport default Creators;","map":null,"metadata":{},"sourceType":"module"}
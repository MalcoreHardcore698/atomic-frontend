{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { onError } from 'apollo-link-error';\nimport config from '../../config';\nconst SSR = false;\nconst NODE_ENV = true;\nconst SERVER_URL = NODE_ENV ? config.get('server-local-url') : config.get('server-host-url');\nconst SECRET = config.get('secret');\n\nconst request = async operation => {\n  const token = !SSR && (await localStorage.getItem(SECRET));\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  });\n};\n\nexport const errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    console.log('[graphQLErrors]', graphQLErrors);\n  }\n\n  if (networkError) {\n    console.log('[networkError]', networkError);\n  }\n});\nexport const requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(result => request(result)).then(() => {\n    handle = forward(operation).subscribe({\n      next: observer.next.bind(observer),\n      error: observer.error.bind(observer),\n      complete: observer.complete.bind(observer)\n    });\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst uploadLink = createUploadLink({\n  uri: `${SERVER_URL}/graphql`,\n  credentials: 'same-origin'\n});\nexport default function createApolloClient(cache = {}) {\n  return new ApolloClient({\n    ssrMode: SSR,\n    link: ApolloLink.from([errorLink, requestLink, uploadLink]),\n    cache: new InMemoryCache().restore(cache)\n  });\n}","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/apollo/client/index.js"],"names":["ApolloClient","InMemoryCache","createUploadLink","ApolloLink","Observable","onError","config","SSR","NODE_ENV","SERVER_URL","get","SECRET","request","operation","token","localStorage","getItem","setContext","headers","authorization","errorLink","graphQLErrors","networkError","console","log","requestLink","forward","observer","handle","Promise","resolve","then","result","subscribe","next","bind","error","complete","catch","unsubscribe","uploadLink","uri","credentials","createApolloClient","cache","ssrMode","link","from","restore"],"mappings":"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","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { createUploadLink } from 'apollo-upload-client'\nimport { ApolloLink, Observable } from 'apollo-link'\nimport { onError } from 'apollo-link-error'\n\nimport config from '../../config'\n\nconst SSR = typeof window === 'undefined'\nconst NODE_ENV = process.env.NODE_ENV !== 'production'\nconst SERVER_URL = NODE_ENV ? config.get('server-local-url') : config.get('server-host-url')\nconst SECRET = config.get('secret')\n\nconst request = async (operation) => {\n  const token = !SSR && (await localStorage.getItem(SECRET))\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  })\n}\n\nexport const errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors) {\n    console.log('[graphQLErrors]', graphQLErrors)\n  }\n  if (networkError) {\n    console.log('[networkError]', networkError)\n  }\n})\n\nexport const requestLink = new ApolloLink(\n  (operation, forward) =>\n    new Observable((observer) => {\n      let handle\n\n      Promise.resolve(operation)\n        .then((result) => request(result))\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          })\n        })\n        .catch(observer.error.bind(observer))\n\n      return () => {\n        if (handle) handle.unsubscribe()\n      }\n    })\n)\n\nconst uploadLink = createUploadLink({\n  uri: `${SERVER_URL}/graphql`,\n  credentials: 'same-origin'\n})\n\nexport default function createApolloClient(cache = {}) {\n  return new ApolloClient({\n    ssrMode: SSR,\n    link: ApolloLink.from([errorLink, requestLink, uploadLink]),\n    cache: new InMemoryCache().restore(cache)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}
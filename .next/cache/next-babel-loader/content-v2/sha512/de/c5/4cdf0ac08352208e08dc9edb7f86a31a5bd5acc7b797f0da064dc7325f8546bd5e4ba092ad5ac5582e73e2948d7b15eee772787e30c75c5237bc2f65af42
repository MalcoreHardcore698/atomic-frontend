{"ast":null,"code":"/**\n * @return {Date[]} List with date objects for each day of the month\n */\nexport const getDaysInMonth = (year, month) => {\n  const date = new Date(year, month, 1);\n  const days = [];\n  const day = date.getDay();\n  let spaces = 0;\n  if (day === 0) spaces = 6;else spaces = day - 1;\n\n  while (spaces > 0) {\n    days.push(null);\n    spaces -= 1;\n  }\n\n  while (date.getMonth() === month) {\n    days.push(new Date(date));\n    date.setDate(date.getDate() + 1);\n  }\n\n  return days;\n};\nexport const getDaysInMonthUTC = (year, month) => {\n  const date = new Date(Date.UTC(year, month, 1));\n  const days = [];\n\n  while (date.getUTCMonth() === month) {\n    days.push(new Date(date));\n    date.setUTCDate(date.getUTCDate() + 1);\n  }\n\n  return days;\n};\n/**\n * @return {Date[]} List with date objects for each day of the week\n */\n\nexport const getDaysInWeek = date => {\n  const week = [];\n  const day = date.getDay();\n  const mondayCorrection = day === 0 ? -6 : 1;\n  date.setDate(date.getDate() - day + mondayCorrection);\n\n  for (let i = 0; i < 7; i += 1) {\n    week.push(new Date(date));\n    date.setDate(date.getDate() + 1);\n  }\n\n  return week;\n};\n/**\n * @return {string[]} List with internalization months\n */\n\nexport const getIntlMonths = lang => {\n  return new Array(12).fill(null).map((_, index) => new Date(new Date().getFullYear(), index)).map(month => month.toLocaleDateString(lang, {\n    month: 'short'\n  }));\n};\n/**\n * @return {string[]} List with internalization weekdays\n */\n\nexport const getIntlWeekdays = (lang, repr) => {\n  return new Array(7).fill(null).map((_, index) => new Date(new Date().getFullYear(), 0, index - 1)).map(weekDay => weekDay.toLocaleDateString(lang, {\n    weekday: repr\n  }));\n};\nexport const isWeekDay = date => date.getDay() !== 0 && date.getDay() !== 6;\nexport const isSame = (_date1, _date2) => {\n  const date1 = new Date(_date1);\n  date1.setHours(0, 0, 0, 0);\n  const date2 = new Date(_date2);\n  date2.setHours(0, 0, 0, 0);\n  return new Date(date1).getTime() === new Date(date2).getTime();\n};\nexport const parseDate = date => {\n  if (!date) return null;\n  return new Date(date) || null;\n};\nexport const getDateLabel = date => {\n  var _Date;\n\n  if (!date) return null;\n  return ((_Date = new Date(date)) === null || _Date === void 0 ? void 0 : _Date.toLocaleDateString()) || null;\n};","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/assets/scripts/date.js"],"names":["getDaysInMonth","year","month","date","Date","days","day","getDay","spaces","push","getMonth","setDate","getDate","getDaysInMonthUTC","UTC","getUTCMonth","setUTCDate","getUTCDate","getDaysInWeek","week","mondayCorrection","i","getIntlMonths","lang","Array","fill","map","_","index","getFullYear","toLocaleDateString","getIntlWeekdays","repr","weekDay","weekday","isWeekDay","isSame","_date1","_date2","date1","setHours","date2","getTime","parseDate","getDateLabel"],"mappings":"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","sourcesContent":["/**\n * @return {Date[]} List with date objects for each day of the month\n */\nexport const getDaysInMonth = (year, month) => {\n  const date = new Date(year, month, 1)\n  const days = []\n\n  const day = date.getDay()\n\n  let spaces = 0\n\n  if (day === 0) spaces = 6\n  else spaces = day - 1\n\n  while (spaces > 0) {\n    days.push(null)\n    spaces -= 1\n  }\n\n  while (date.getMonth() === month) {\n    days.push(new Date(date))\n    date.setDate(date.getDate() + 1)\n  }\n\n  return days\n}\n\nexport const getDaysInMonthUTC = (year, month) => {\n  const date = new Date(Date.UTC(year, month, 1))\n  const days = []\n\n  while (date.getUTCMonth() === month) {\n    days.push(new Date(date))\n    date.setUTCDate(date.getUTCDate() + 1)\n  }\n\n  return days\n}\n\n/**\n * @return {Date[]} List with date objects for each day of the week\n */\nexport const getDaysInWeek = (date) => {\n  const week = []\n  const day = date.getDay()\n  const mondayCorrection = day === 0 ? -6 : 1\n  date.setDate(date.getDate() - day + mondayCorrection)\n  for (let i = 0; i < 7; i += 1) {\n    week.push(new Date(date))\n    date.setDate(date.getDate() + 1)\n  }\n  return week\n}\n\n/**\n * @return {string[]} List with internalization months\n */\nexport const getIntlMonths = (lang) => {\n  return new Array(12)\n    .fill(null)\n    .map((_, index) => new Date(new Date().getFullYear(), index))\n    .map((month) =>\n      month.toLocaleDateString(lang, {\n        month: 'short'\n      })\n    )\n}\n\n/**\n * @return {string[]} List with internalization weekdays\n */\nexport const getIntlWeekdays = (lang, repr) => {\n  return new Array(7)\n    .fill(null)\n    .map((_, index) => new Date(new Date().getFullYear(), 0, index - 1))\n    .map((weekDay) =>\n      weekDay.toLocaleDateString(lang, {\n        weekday: repr\n      })\n    )\n}\n\nexport const isWeekDay = (date) => date.getDay() !== 0 && date.getDay() !== 6\n\nexport const isSame = (_date1, _date2) => {\n  const date1 = new Date(_date1)\n  date1.setHours(0, 0, 0, 0)\n  const date2 = new Date(_date2)\n  date2.setHours(0, 0, 0, 0)\n\n  return new Date(date1).getTime() === new Date(date2).getTime()\n}\n\nexport const parseDate = (date) => {\n  if (!date) return null\n  return new Date(date) || null\n}\n\nexport const getDateLabel = (date) => {\n  if (!date) return null\n  return new Date(date)?.toLocaleDateString() || null\n}\n"]},"metadata":{},"sourceType":"module"}
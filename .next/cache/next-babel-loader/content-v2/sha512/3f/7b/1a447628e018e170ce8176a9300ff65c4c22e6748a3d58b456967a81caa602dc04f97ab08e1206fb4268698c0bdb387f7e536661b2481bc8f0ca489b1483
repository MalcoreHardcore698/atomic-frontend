{"ast":null,"code":"import React, { useState, useMemo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../../apollo';\nimport { useHelper } from '../../hooks/useHelper';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport CategoryCard from '../../components/CategoryCard';\nimport { onCategoryCreate, onCategoryEdit, onCategoryDelete, onCategoryLink } from '../../store/helpers/category';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Категории';\n\nconst Categories = ({\n  store,\n  types\n}) => {\n  const recall = useHelper();\n  const documents = useSelector(state => state.documents);\n  const dispatch = useDispatch();\n  const [datePublish, onChangeDatePublish] = useState();\n  const [dateCreate, onChangeDateCreate] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const categories = useMemo(() => documents || store.categories, [documents, store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'folder',\n    title: TITLE,\n    buttonCreateText: 'Создать категорию',\n    onCreate: recall(onCategoryCreate, {\n      types,\n      mutation: queries.CREATE_CATEGORY\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: datePublish,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDatePublish,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: dateCreate,\n      placeholder: 'Дата создания',\n      onChange: onChangeDateCreate,\n      withNavigate: true\n    })],\n    options: displayMethod === 'list' ? [] : templates.category.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), categories.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0439 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: categories,\n    template: templates.category,\n    onChecked: () => {},\n    onClick: category => recall(onCategoryLink, {\n      id: category.id,\n      category\n    })(),\n    onDelete: category => recall(onCategoryDelete, {\n      id: category.id,\n      category,\n      mutation: queries.DELETE_CATEGORY\n    })(),\n    onEdit: category => recall(onCategoryEdit, {\n      id: category.id,\n      category,\n      types,\n      mutation: queries.UPDATE_CATEGORY\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, categories.map(category => /*#__PURE__*/React.createElement(CategoryCard, {\n    key: v4(),\n    category: category,\n    onChecked: () => {},\n    onLink: recall(onCategoryLink, {\n      id: category.id,\n      category\n    }),\n    onDelete: recall(onCategoryDelete, {\n      id: category.id,\n      category,\n      mutation: queries.DELETE_CATEGORY\n    }),\n    onEdit: recall(onCategoryEdit, {\n      id: category.id,\n      category,\n      types,\n      mutation: queries.UPDATE_CATEGORY\n    })\n  }))));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let categories = [];\n  let types = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_CATEGORIES\n    });\n\n    if (response && response.data) {\n      categories = response.data.getCategories;\n      types = response.data.getCategoryTypes;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        categories\n      },\n      types\n    }\n  };\n}\nexport default Categories;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/categories.js"],"names":["React","useState","useMemo","useEffect","useDispatch","useSelector","v4","Grid","Alert","DatePicker","Table","templates","initializeApollo","useHelper","DashboardLayout","HandleBar","FilterBar","CategoryCard","onCategoryCreate","onCategoryEdit","onCategoryDelete","onCategoryLink","setDocuments","queries","TITLE","Categories","store","types","recall","documents","state","dispatch","datePublish","onChangeDatePublish","dateCreate","onChangeDateCreate","visibleFilter","setVisibleFilter","displayMethod","onChangeDisplayMethod","categories","mutation","CREATE_CATEGORY","item","value","category","map","index","label","header","length","width","textAlign","id","DELETE_CATEGORY","UPDATE_CATEGORY","overflowX","getServerSideProps","client","response","query","GET_META_DASHBOARD_CATEGORIES","data","getCategories","getCategoryTypes","err","console","log","props"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { v4 } from 'uuid'\n\nimport Grid from '../../atomic-ui/components/Grid'\nimport Alert from '../../atomic-ui/components/Alert'\nimport DatePicker from '../../atomic-ui/components/DatePicker'\nimport Table from '../../atomic-ui/components/Table'\nimport templates from '../../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport DashboardLayout from '../../layouts/dashboard'\nimport HandleBar from '../../components/HandleBar'\nimport FilterBar from '../../components/FilterBar'\nimport CategoryCard from '../../components/CategoryCard'\nimport {\n  onCategoryCreate,\n  onCategoryEdit,\n  onCategoryDelete,\n  onCategoryLink\n} from '../../store/helpers/category'\nimport { setDocuments } from '../../store/actions/documents'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Категории'\n\nconst Categories = ({ store, types }) => {\n  const recall = useHelper()\n  const documents = useSelector((state) => state.documents)\n  const dispatch = useDispatch()\n  const [datePublish, onChangeDatePublish] = useState()\n  const [dateCreate, onChangeDateCreate] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n\n  const categories = useMemo(() => documents || store.categories, [documents, store])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <HandleBar\n        icon={'folder'}\n        title={TITLE}\n        buttonCreateText={'Создать категорию'}\n        onCreate={recall(onCategoryCreate, { types, mutation: queries.CREATE_CATEGORY })}\n        onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n        onChangeDisplayMethod={(item) => onChangeDisplayMethod(item.value)}\n      />\n\n      <FilterBar\n        isOpen={visibleFilter}\n        filters={[\n          <DatePicker\n            key={0}\n            value={datePublish}\n            placeholder={'Дата публикации'}\n            onChange={onChangeDatePublish}\n            withNavigate\n          />,\n          <DatePicker\n            key={0}\n            value={dateCreate}\n            placeholder={'Дата создания'}\n            onChange={onChangeDateCreate}\n            withNavigate\n          />\n        ]}\n        options={\n          displayMethod === 'list'\n            ? []\n            : templates.category.map((item, index) => ({\n                label: item.header,\n                value: index\n              }))\n        }\n      />\n\n      {categories.length === 0 && (\n        <Alert style={{ width: '100%', textAlign: 'center' }}>Категорий нет</Alert>\n      )}\n\n      {displayMethod === 'list' && (\n        <Table\n          data={categories}\n          template={templates.category}\n          onChecked={() => {}}\n          onClick={(category) => recall(onCategoryLink, { id: category.id, category })()}\n          onDelete={(category) =>\n            recall(onCategoryDelete, {\n              id: category.id,\n              category,\n              mutation: queries.DELETE_CATEGORY\n            })()\n          }\n          onEdit={(category) =>\n            recall(onCategoryEdit, {\n              id: category.id,\n              category,\n              types,\n              mutation: queries.UPDATE_CATEGORY\n            })()\n          }\n          style={{ overflowX: 'auto', width: 'calc(100vw - 290px)' }}\n        />\n      )}\n\n      {displayMethod === 'grid' && (\n        <Grid>\n          {categories.map((category) => (\n            <CategoryCard\n              key={v4()}\n              category={category}\n              onChecked={() => {}}\n              onLink={recall(onCategoryLink, { id: category.id, category })}\n              onDelete={recall(onCategoryDelete, {\n                id: category.id,\n                category,\n                mutation: queries.DELETE_CATEGORY\n              })}\n              onEdit={recall(onCategoryEdit, {\n                id: category.id,\n                category,\n                types,\n                mutation: queries.UPDATE_CATEGORY\n              })}\n            />\n          ))}\n        </Grid>\n      )}\n    </DashboardLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let categories = []\n  let types = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_CATEGORIES\n    })\n\n    if (response && response.data) {\n      categories = response.data.getCategories\n      types = response.data.getCategoryTypes\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { categories },\n      types\n    }\n  }\n}\n\nexport default Categories\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getLabelCategory } from '../atomic-ui/utils/functions';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport { useMutate } from '../hooks/useMutate';\nimport ProjectCard from '../components/ProjectCard';\nimport { GridAside as Container } from '../components/Styled';\nimport LazyLoad from '../components/LazyLoad';\nimport FadeLoad from '../components/FadeLoad';\nimport { updateUser } from '../store/actions/user';\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nimport ContentLayout from '../layouts/content';\nimport { useRouter } from 'next/router';\nconst TITLE = 'Проекты';\nconst START_OFFSET = 6;\n\nconst Projects = ({\n  store\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const router = useRouter();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER'\n    }, {\n      type: 'SELECT',\n      options: store === null || store === void 0 ? void 0 : store.categories.map(category => ({\n        value: category.id,\n        label: getLabelCategory(category.name)\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    query: queries.GET_PROJECTS,\n    variables: {\n      category: router.query.category,\n      status: 'PUBLISHED'\n    },\n    store: {\n      documents: store === null || store === void 0 ? void 0 : store.projects\n    }\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, documents.map(project => {\n    var _user$projects, _project$company;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: project.id\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(ProjectCard, {\n      project: project,\n      owned: owned,\n      liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user,\n        owned\n      }),\n      onLike: (user === null || user === void 0 ? void 0 : user.email) && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onAdd: (user === null || user === void 0 ? void 0 : user.email) && recall(onProjectAdd, {\n        id: project.id\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    })));\n  })));\n};\n\nexport async function getServerSideProps({\n  query\n}) {\n  const client = initializeApollo();\n  let projects = [];\n  let categories = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_PROJECTS,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET,\n        status: 'PUBLISHED',\n        category: query.category\n      }\n    });\n\n    if (response && response.data) {\n      projects = response.data.getProjects;\n      categories = response.data.getCategories;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        projects,\n        categories\n      }\n    }\n  };\n}\nexport default Projects;","map":null,"metadata":{},"sourceType":"module"}
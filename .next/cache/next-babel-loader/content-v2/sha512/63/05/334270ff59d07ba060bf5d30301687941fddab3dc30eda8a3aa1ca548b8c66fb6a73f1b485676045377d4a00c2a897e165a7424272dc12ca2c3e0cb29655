{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHelper } from '../../hooks/useHelper';\nimport CategoryCard from '../../components/CategoryCard';\nimport { onCategoryCreate, onCategoryEdit, onCategoryDelete, onCategoryLink } from '../../store/helpers/category';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Категории';\n\nconst Categories = ({\n  store,\n  types\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const documents = useSelector(state => state.documents);\n  const dispatch = useDispatch();\n  const [datePublish, onChangeDatePublish] = useState();\n  const [dateCreate, onChangeDateCreate] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const categories = useMemo(() => documents || store.categories, [documents, store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    icon: 'folder',\n    template: template,\n    emptyMessage: 'Категорий нет',\n    buttonCreateText: 'Создать категорию',\n    getType: 'getCategories',\n    getQuery: queries.GET_CATEGORIES,\n    deleteQuery: queries.DELETE_CATEGORY,\n    deleteEntityMultiText: 'категории',\n    deleteEntitySingleText: 'категорию',\n    onLink: category => recall(onCategoryLink, {\n      id: category.id,\n      category\n    }),\n    onEdit: category => recall(onCategoryEdit, {\n      id: category.id,\n      category,\n      types,\n      mutation: queries.UPDATE_CATEGORY\n    })(),\n    onSearch: true,\n    onCreate: recall(onCategoryCreate, {\n      types,\n      mutation: queries.CREATE_CATEGORY\n    }),\n    render: document => /*#__PURE__*/React.createElement(CategoryCard, {\n      category: document\n    })\n  });\n};\n\n_s(Categories, \"8nIpxIQb+fA8AsrhrlD8M1iulWM=\", false, function () {\n  return [useHelper, useSelector, useDispatch];\n});\n\n_c = Categories;\nexport var __N_SSP = true;\nexport default Categories;\n\nvar _c;\n\n$RefreshReg$(_c, \"Categories\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/categories.js"],"names":["React","useState","useMemo","useEffect","useDispatch","useSelector","useHelper","CategoryCard","onCategoryCreate","onCategoryEdit","onCategoryDelete","onCategoryLink","setDocuments","queries","TITLE","Categories","store","types","recall","documents","state","dispatch","datePublish","onChangeDatePublish","dateCreate","onChangeDateCreate","visibleFilter","setVisibleFilter","displayMethod","onChangeDisplayMethod","categories","template","GET_CATEGORIES","DELETE_CATEGORY","category","id","mutation","UPDATE_CATEGORY","CREATE_CATEGORY","document"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,QAAoD,OAApD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SACEC,gBADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,cAJF,QAKO,8BALP;AAMA,SAASC,YAAT,QAA6B,+BAA7B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,MAAMC,KAAK,GAAG,WAAd;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAsB;AAAA;;AACvC,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAMa,SAAS,GAAGd,WAAW,CAAEe,KAAD,IAAWA,KAAK,CAACD,SAAlB,CAA7B;AACA,QAAME,QAAQ,GAAGjB,WAAW,EAA5B;AACA,QAAM,CAACkB,WAAD,EAAcC,mBAAd,IAAqCtB,QAAQ,EAAnD;AACA,QAAM,CAACuB,UAAD,EAAaC,kBAAb,IAAmCxB,QAAQ,EAAjD;AACA,QAAM,CAACyB,aAAD,EAAgBC,gBAAhB,IAAoC1B,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAAC2B,aAAD,EAAgBC,qBAAhB,IAAyC5B,QAAQ,CAAC,MAAD,CAAvD;AAEA,QAAM6B,UAAU,GAAG5B,OAAO,CAAC,MAAMiB,SAAS,IAAIH,KAAK,CAACc,UAA1B,EAAsC,CAACX,SAAD,EAAYH,KAAZ,CAAtC,CAA1B;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,QAAQ,CAACT,YAAY,CAAC,IAAD,CAAb,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEE,KADT;AAEE,IAAA,IAAI,EAAE,QAFR;AAGE,IAAA,QAAQ,EAAEiB,QAHZ;AAIE,IAAA,YAAY,EAAE,eAJhB;AAKE,IAAA,gBAAgB,EAAE,mBALpB;AAME,IAAA,OAAO,EAAE,eANX;AAOE,IAAA,QAAQ,EAAElB,OAAO,CAACmB,cAPpB;AAQE,IAAA,WAAW,EAAEnB,OAAO,CAACoB,eARvB;AASE,IAAA,qBAAqB,EAAE,WATzB;AAUE,IAAA,sBAAsB,EAAE,WAV1B;AAWE,IAAA,MAAM,EAAGC,QAAD,IAAchB,MAAM,CAACP,cAAD,EAAiB;AAAEwB,MAAAA,EAAE,EAAED,QAAQ,CAACC,EAAf;AAAmBD,MAAAA;AAAnB,KAAjB,CAX9B;AAYE,IAAA,MAAM,EAAGA,QAAD,IACNhB,MAAM,CAACT,cAAD,EAAiB;AACrB0B,MAAAA,EAAE,EAAED,QAAQ,CAACC,EADQ;AAErBD,MAAAA,QAFqB;AAGrBjB,MAAAA,KAHqB;AAIrBmB,MAAAA,QAAQ,EAAEvB,OAAO,CAACwB;AAJG,KAAjB,CAAN,EAbJ;AAoBE,IAAA,QAAQ,MApBV;AAqBE,IAAA,QAAQ,EAAEnB,MAAM,CAACV,gBAAD,EAAmB;AAAES,MAAAA,KAAF;AAASmB,MAAAA,QAAQ,EAAEvB,OAAO,CAACyB;AAA3B,KAAnB,CArBlB;AAsBE,IAAA,MAAM,EAAGC,QAAD,iBAAc,oBAAC,YAAD;AAAc,MAAA,QAAQ,EAAEA;AAAxB;AAtBxB,IADF;AA0BD,CAzCD;;GAAMxB,U;UACWT,S,EACGD,W,EACDD,W;;;KAHbW,U;;AAsEN,eAAeA,UAAf","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport CategoryCard from '../../components/CategoryCard'\nimport {\n  onCategoryCreate,\n  onCategoryEdit,\n  onCategoryDelete,\n  onCategoryLink\n} from '../../store/helpers/category'\nimport { setDocuments } from '../../store/actions/documents'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Категории'\n\nconst Categories = ({ store, types }) => {\n  const recall = useHelper()\n  const documents = useSelector((state) => state.documents)\n  const dispatch = useDispatch()\n  const [datePublish, onChangeDatePublish] = useState()\n  const [dateCreate, onChangeDateCreate] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n\n  const categories = useMemo(() => documents || store.categories, [documents, store])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      icon={'folder'}\n      template={template}\n      emptyMessage={'Категорий нет'}\n      buttonCreateText={'Создать категорию'}\n      getType={'getCategories'}\n      getQuery={queries.GET_CATEGORIES}\n      deleteQuery={queries.DELETE_CATEGORY}\n      deleteEntityMultiText={'категории'}\n      deleteEntitySingleText={'категорию'}\n      onLink={(category) => recall(onCategoryLink, { id: category.id, category })}\n      onEdit={(category) =>\n        recall(onCategoryEdit, {\n          id: category.id,\n          category,\n          types,\n          mutation: queries.UPDATE_CATEGORY\n        })()\n      }\n      onSearch\n      onCreate={recall(onCategoryCreate, { types, mutation: queries.CREATE_CATEGORY })}\n      render={(document) => <CategoryCard category={document} />}\n    />\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let categories = []\n  let types = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_CATEGORIES\n    })\n\n    if (response && response.data) {\n      categories = response.data.getCategories\n      types = response.data.getCategoryTypes\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { categories },\n      types\n    }\n  }\n}\n\nexport default Categories\n"]},"metadata":{},"sourceType":"module"}
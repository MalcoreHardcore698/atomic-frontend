{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport TextArea from '../../atomic-ui/components/TextArea';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Form from '../Form';\nimport { getLabelCategory } from '../../utils/functions';\nexport const Category = ({\n  category,\n  categoryTypes,\n  mutation,\n  appearance,\n  className,\n  create,\n  edit,\n  onSubmit\n}) => {\n  _s();\n\n  const [typeError, setTypeError] = useState(false);\n  const [type, setType] = useState(category && category.type && {\n    value: category.type,\n    label: getLabelCategory(category.type)\n  } || null);\n  const [disabled, setDisabled] = useState(true);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => {\n      if (type) {\n        onSubmit({ ...form,\n          type\n        }, action);\n      } else {\n        setTypeError(true);\n      }\n    }\n  }, ({\n    register,\n    loading,\n    errors,\n    getValues\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.name && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: 'name',\n    ref: register({\n      required: true\n    }),\n    onChange: e => {\n      if (e.target.value === (category === null || category === void 0 ? void 0 : category.name)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    defaultValue: (category === null || category === void 0 ? void 0 : category.name) || getValues('name'),\n    placeholder: 'Название',\n    appearance: 'ghost',\n    disabled: loading\n  }), typeError && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0438\\u043F \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Select, {\n    name: 'type',\n    appearance: 'ghost',\n    defaultValue: type,\n    onChange: value => {\n      setType(value);\n      setTypeError(false);\n\n      if (value.value === (category === null || category === void 0 ? void 0 : category.type)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    placeholder: 'Выберите тип',\n    options: categoryTypes.map(type => ({\n      value: type,\n      label: getLabelCategory(type)\n    })),\n    isLoading: loading,\n    isClearable: true\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    name: 'description',\n    ref: register(),\n    onChange: e => {\n      if (e.target.value === (category === null || category === void 0 ? void 0 : category.description)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    defaultValue: (category === null || category === void 0 ? void 0 : category.description) || getValues('description'),\n    placeholder: 'Описание',\n    appearance: 'ghost',\n    disabled: loading\n  })), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      flexGrow: 1\n    },\n    type: 'submit',\n    disabled: disabled || loading\n  }, create && !edit && 'Создать', !create && edit && 'Сохранить'))));\n};\n\n_s(Category, \"KJbPfD8PvZcSWuag5zL9MSt8cE0=\");\n\n_c = Category;\nCategory.defaultProps = {\n  create: true\n};\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormCategory/index.js"],"names":["React","useState","Row","Column","Title","Input","Button","Select","TextArea","Alert","Form","getLabelCategory","Category","category","categoryTypes","mutation","appearance","className","create","edit","onSubmit","typeError","setTypeError","type","setType","value","label","disabled","setDisabled","form","action","register","loading","errors","getValues","name","width","required","e","target","map","description","flexGrow","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Select from '../../atomic-ui/components/Select'\nimport TextArea from '../../atomic-ui/components/TextArea'\nimport Alert from '../../atomic-ui/components/Alert'\n\nimport Form from '../Form'\nimport { getLabelCategory } from '../../utils/functions'\n\nexport const Category = ({\n  category,\n  categoryTypes,\n  mutation,\n  appearance,\n  className,\n  create,\n  edit,\n  onSubmit\n}) => {\n  const [typeError, setTypeError] = useState(false)\n  const [type, setType] = useState(\n    (category &&\n      category.type && {\n        value: category.type,\n        label: getLabelCategory(category.type)\n      }) ||\n      null\n  )\n  const [disabled, setDisabled] = useState(true)\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) => {\n        if (type) {\n          onSubmit({ ...form, type }, action)\n        } else {\n          setTypeError(true)\n        }\n      }}>\n      {({ register, loading, errors, getValues }) => (\n        <React.Fragment>\n          <Column>\n            <Title tag={'h4'}>Основное</Title>\n\n            {errors && errors.name && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Введите название категории\n              </Alert>\n            )}\n            <Input\n              type={'text'}\n              name={'name'}\n              ref={register({ required: true })}\n              onChange={(e) => {\n                if (e.target.value === category?.name) {\n                  setDisabled(true)\n                } else {\n                  setDisabled(false)\n                }\n              }}\n              defaultValue={category?.name || getValues('name')}\n              placeholder={'Название'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n\n            {typeError && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Выберите тип категории\n              </Alert>\n            )}\n            <Select\n              name={'type'}\n              appearance={'ghost'}\n              defaultValue={type}\n              onChange={(value) => {\n                setType(value)\n                setTypeError(false)\n                if (value.value === category?.type) {\n                  setDisabled(true)\n                } else {\n                  setDisabled(false)\n                }\n              }}\n              placeholder={'Выберите тип'}\n              options={categoryTypes.map((type) => ({\n                value: type,\n                label: getLabelCategory(type)\n              }))}\n              isLoading={loading}\n              isClearable\n            />\n\n            <TextArea\n              name={'description'}\n              ref={register()}\n              onChange={(e) => {\n                if (e.target.value === category?.description) {\n                  setDisabled(true)\n                } else {\n                  setDisabled(false)\n                }\n              }}\n              defaultValue={category?.description || getValues('description')}\n              placeholder={'Описание'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n          </Column>\n\n          <Row>\n            <Button style={{ flexGrow: 1 }} type={'submit'} disabled={disabled || loading}>\n              {create && !edit && 'Создать'}\n              {!create && edit && 'Сохранить'}\n            </Button>\n          </Row>\n        </React.Fragment>\n      )}\n    </Form>\n  )\n}\n\nCategory.defaultProps = {\n  create: true\n}\n\nexport default Category\n"]},"metadata":{},"sourceType":"module"}
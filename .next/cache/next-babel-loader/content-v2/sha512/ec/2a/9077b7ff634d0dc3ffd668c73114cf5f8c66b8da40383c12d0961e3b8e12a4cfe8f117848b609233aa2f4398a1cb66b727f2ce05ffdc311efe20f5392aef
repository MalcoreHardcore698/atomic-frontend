{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/category';\nimport ProjectSuit from '../../components/ProjectSuit';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { onProjectCreate, onProjectEdit } from '../../store/helpers/project';\nimport { setDocuments } from '../../store/actions/documents';\nimport { useProject } from '../../hooks/useProject';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\nconst LIMIT = 12;\nconst START_OFFSET = 0;\n\nconst Projects = () => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const methods = useProject();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    icon: 'work',\n    template: template,\n    getType: 'getProjects',\n    startOffset: START_OFFSET,\n    emptyMessage: 'Проектов нет',\n    getQuery: queries.GET_PROJECTS,\n    buttonCreateText: 'Создать проект',\n    deleteQuery: queries.DELETE_PROJECT,\n    deleteEntityMultiText: 'проекты',\n    deleteEntitySingleText: 'проект',\n    onEdit: (project, onAfter) => recall(onProjectEdit, {\n      id: project.id,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      }),\n      onAfter\n    })(),\n    onCreate: onAfter => recall(onProjectCreate, {\n      canEditStatus,\n      mutation: queries.CREATE_PROJECT,\n      query: queries.GET_USERS,\n      onAfter\n    })(),\n    render: document => /*#__PURE__*/React.createElement(ProjectSuit, _extends({}, methods, {\n      project: document,\n      withSocials: true,\n      preview: true\n    }))\n  });\n};\n\n_s(Projects, \"Xi+0Z3g11wNc65GrNtdCKIPiCxc=\", false, function () {\n  return [useHelper, useMutate, useProject, useSelector, useDispatch];\n});\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/projects.js"],"names":["React","useEffect","useMemo","useSelector","useDispatch","template","ProjectSuit","ContentLayout","onProjectCreate","onProjectEdit","setDocuments","useProject","useHelper","useMutate","queries","TITLE","LIMIT","START_OFFSET","Projects","recall","mutate","methods","user","state","dispatch","canEditStatus","role","name","GET_PROJECTS","DELETE_PROJECT","project","onAfter","id","mutation","UPDATE_PROJECT","query","GET_USERS","onCompanyInputChange","account","CREATE_PROJECT","document"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport template from '../../atomic-ui/components/Table/templates/category'\n\nimport ProjectSuit from '../../components/ProjectSuit'\nimport ContentLayout from '../../layouts/dashboard/content'\nimport { onProjectCreate, onProjectEdit } from '../../store/helpers/project'\nimport { setDocuments } from '../../store/actions/documents'\nimport { useProject } from '../../hooks/useProject'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Проекты'\n\nconst LIMIT = 12\nconst START_OFFSET = 0\n\nconst Projects = () => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const methods = useProject()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      limit={LIMIT}\n      icon={'work'}\n      template={template}\n      getType={'getProjects'}\n      startOffset={START_OFFSET}\n      emptyMessage={'Проектов нет'}\n      getQuery={queries.GET_PROJECTS}\n      buttonCreateText={'Создать проект'}\n      deleteQuery={queries.DELETE_PROJECT}\n      deleteEntityMultiText={'проекты'}\n      deleteEntitySingleText={'проект'}\n      onEdit={(project, onAfter) =>\n        recall(onProjectEdit, {\n          id: project.id,\n          canEditStatus,\n          mutation: queries.UPDATE_PROJECT,\n          query: queries.GET_USERS,\n          onCompanyInputChange: mutate(queries.GET_USERS, { account: 'ENTITY' }),\n          onAfter\n        })()\n      }\n      onCreate={(onAfter) =>\n        recall(onProjectCreate, {\n          canEditStatus,\n          mutation: queries.CREATE_PROJECT,\n          query: queries.GET_USERS,\n          onAfter\n        })()\n      }\n      render={(document) => <ProjectSuit {...methods} project={document} withSocials preview />}\n    />\n  )\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
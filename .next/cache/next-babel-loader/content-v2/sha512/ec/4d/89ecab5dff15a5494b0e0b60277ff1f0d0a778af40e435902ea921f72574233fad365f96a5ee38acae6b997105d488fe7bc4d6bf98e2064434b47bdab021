{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Image from '../../atomic-ui/components/Image';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Button from '../../atomic-ui/components/Button';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport { getLabelRole } from '../../atomic-ui/utils/functions';\nimport { More } from '../Styled';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"UserBar__Wrap\",\n  componentId: \"sc-17kd9nb-0\"\n})([\"width:100%;@media only screen and (max-width:568px){flex-direction:column;grid-gap:var(--default-gap);}\"]);\n_c = Wrap;\nexport const Content = styled(Column).withConfig({\n  displayName: \"UserBar__Content\",\n  componentId: \"sc-17kd9nb-1\"\n})([\"justify-content:space-between;grid-gap:0;width:100%;\"]);\n_c2 = Content;\nexport const RoundedAvatar = styled(Image).withConfig({\n  displayName: \"UserBar__RoundedAvatar\",\n  componentId: \"sc-17kd9nb-2\"\n})([\"width:256px;height:256px;border-radius:var(--surface-border-radius);object-fit:cover;@media only screen and (max-width:768px){width:169px;}@media only screen and (max-width:568px){width:100%;}\"]);\n_c3 = RoundedAvatar;\nexport const About = styled.div.withConfig({\n  displayName: \"UserBar__About\",\n  componentId: \"sc-17kd9nb-3\"\n})([\"display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;text-overflow:ellipsis;flex-grow:100;@media only screen and (max-width:568px){margin-bottom:15px;}\"]);\n_c4 = About;\nexport const Difinitions = styled(Row).withConfig({\n  displayName: \"UserBar__Difinitions\",\n  componentId: \"sc-17kd9nb-4\"\n})([\"flex-wrap:wrap;justify-content:space-between;grid-gap:var(--default-gap);@media only screen and (max-width:568px){flex-direction:column;grid-gap:var(--default-gap);}\"]);\n_c5 = Difinitions;\nexport const EditButton = styled(Button).withConfig({\n  displayName: \"UserBar__EditButton\",\n  componentId: \"sc-17kd9nb-5\"\n})([\"font-size:var(--font-size-s);color:var(--ghost-color-text);transition:color 150ms ease;&:hover{color:black;}\"]);\n_c6 = EditButton;\nexport const User = ({\n  user,\n  onEdit,\n  onAboutMore,\n  onCompanyLink,\n  onMembers\n}) => {\n  var _user$avatar, _user$about, _user$company, _user$company$avatar, _user$company2, _user$projects;\n\n  return /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(RoundedAvatar, {\n    src: (user === null || user === void 0 ? void 0 : (_user$avatar = user.avatar) === null || _user$avatar === void 0 ? void 0 : _user$avatar.path) || '/images/avatar-default.png'\n  }), /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Meta, {\n    category: getLabelRole(user.account)\n  }), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      gridGap: '0 10px'\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h3'\n  }, user.name), /*#__PURE__*/React.createElement(Tooltip, {\n    place: 'top',\n    text: 'Редактировать'\n  }, /*#__PURE__*/React.createElement(EditButton, {\n    type: 'button',\n    kind: 'icon',\n    size: 'xs',\n    appearance: 'clear',\n    onClick: onEdit\n  }, \"\\u0420\\u0435\\u0434.\"))), /*#__PURE__*/React.createElement(Divider, {\n    style: {\n      margin: '5px 0'\n    }\n  }), /*#__PURE__*/React.createElement(About, null, (user === null || user === void 0 ? void 0 : (_user$about = user.about) === null || _user$about === void 0 ? void 0 : _user$about.length) > 135 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, null, user.about.slice(0, 135), \"...\"), /*#__PURE__*/React.createElement(More, {\n    onClick: onAboutMore\n  }, \"\\u041F\\u043E\\u0434\\u0440\\u043E\\u0431\\u043D\\u0435\\u0435\")) : /*#__PURE__*/React.createElement(Text, null, user.about || 'Информация о себе не заполнена')), /*#__PURE__*/React.createElement(Difinitions, null, user.account === 'ENTITY' ? /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'user2',\n    label: 'Участники',\n    text: user.members,\n    onLink: user.members && onMembers\n  }) : /*#__PURE__*/React.createElement(Difinition, _extends({}, user.company ? {\n    img: (_user$company = user.company) === null || _user$company === void 0 ? void 0 : (_user$company$avatar = _user$company.avatar) === null || _user$company$avatar === void 0 ? void 0 : _user$company$avatar.path\n  } : {\n    icon: 'work'\n  }, {\n    label: 'Компания',\n    text: ((_user$company2 = user.company) === null || _user$company2 === void 0 ? void 0 : _user$company2.name) || '-',\n    onLink: onCompanyLink\n  })), /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'work',\n    label: 'Проекты',\n    text: (user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.length) || 0\n  }))));\n};\n_c7 = User;\nexport default User;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"RoundedAvatar\");\n$RefreshReg$(_c4, \"About\");\n$RefreshReg$(_c5, \"Difinitions\");\n$RefreshReg$(_c6, \"EditButton\");\n$RefreshReg$(_c7, \"User\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/UserBar/index.js"],"names":["React","styled","Row","Column","Meta","Divider","Title","Text","Image","Tooltip","Button","Difinition","getLabelRole","More","Wrap","Content","RoundedAvatar","About","div","Difinitions","EditButton","User","user","onEdit","onAboutMore","onCompanyLink","onMembers","avatar","path","account","gridGap","name","margin","about","length","slice","members","company","img","icon","projects"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Meta from '../../atomic-ui/components/Meta'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Image from '../../atomic-ui/components/Image'\nimport Tooltip from '../../atomic-ui/components/Tooltip'\nimport Button from '../../atomic-ui/components/Button'\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport { getLabelRole } from '../../atomic-ui/utils/functions'\n\nimport { More } from '../Styled'\n\nexport const Wrap = styled(Row)`\n  width: 100%;\n\n  @media only screen and (max-width: 568px) {\n    flex-direction: column;\n    grid-gap: var(--default-gap);\n  }\n`\n\nexport const Content = styled(Column)`\n  justify-content: space-between;\n  grid-gap: 0;\n  width: 100%;\n`\n\nexport const RoundedAvatar = styled(Image)`\n  width: 256px;\n  height: 256px;\n  border-radius: var(--surface-border-radius);\n  object-fit: cover;\n\n  @media only screen and (max-width: 768px) {\n    width: 169px;\n  }\n\n  @media only screen and (max-width: 568px) {\n    width: 100%;\n  }\n`\n\nexport const About = styled.div`\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  flex-grow: 100;\n\n  @media only screen and (max-width: 568px) {\n    margin-bottom: 15px;\n  }\n`\n\nexport const Difinitions = styled(Row)`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 568px) {\n    flex-direction: column;\n    grid-gap: var(--default-gap);\n  }\n`\n\nexport const EditButton = styled(Button)`\n  font-size: var(--font-size-s);\n  color: var(--ghost-color-text);\n  transition: color 150ms ease;\n\n  &:hover {\n    color: black;\n  }\n`\n\nexport const User = ({ user, onEdit, onAboutMore, onCompanyLink, onMembers }) => (\n  <Wrap>\n    <RoundedAvatar src={user?.avatar?.path || '/images/avatar-default.png'} />\n\n    <Content>\n      <Meta category={getLabelRole(user.account)} />\n\n      <Row style={{ gridGap: '0 10px' }}>\n        <Title tag={'h3'}>{user.name}</Title>\n        <Tooltip place={'top'} text={'Редактировать'}>\n          <EditButton\n            type={'button'}\n            kind={'icon'}\n            size={'xs'}\n            appearance={'clear'}\n            onClick={onEdit}>\n            Ред.\n          </EditButton>\n        </Tooltip>\n      </Row>\n\n      <Divider style={{ margin: '5px 0' }} />\n\n      <About>\n        {user?.about?.length > 135 ? (\n          <React.Fragment>\n            <Text>{user.about.slice(0, 135)}...</Text>\n            <More onClick={onAboutMore}>Подробнее</More>\n          </React.Fragment>\n        ) : (\n          <Text>{user.about || 'Информация о себе не заполнена'}</Text>\n        )}\n      </About>\n\n      <Difinitions>\n        {user.account === 'ENTITY' ? (\n          <Difinition\n            icon={'user2'}\n            label={'Участники'}\n            text={user.members}\n            onLink={user.members && onMembers}\n          />\n        ) : (\n          <Difinition\n            {...(user.company\n              ? {\n                  img: user.company?.avatar?.path\n                }\n              : {\n                  icon: 'work'\n                })}\n            label={'Компания'}\n            text={user.company?.name || '-'}\n            onLink={onCompanyLink}\n          />\n        )}\n        <Difinition icon={'work'} label={'Проекты'} text={user?.projects?.length || 0} />\n        {/* <Difinition icon={'user2'} label={'Подписчики'} text={user?.followers || 0} /> */}\n      </Difinitions>\n    </Content>\n  </Wrap>\n)\n\nexport default User\n"]},"metadata":{},"sourceType":"module"}
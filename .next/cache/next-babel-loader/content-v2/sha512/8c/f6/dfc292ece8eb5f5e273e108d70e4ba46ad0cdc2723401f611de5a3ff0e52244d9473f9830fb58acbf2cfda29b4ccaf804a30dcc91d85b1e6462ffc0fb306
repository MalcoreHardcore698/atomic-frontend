{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Column from '../atomic-ui/components/Column';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport DashboardLayout from './dashboard';\nimport DefaultLayout from '../layouts/default';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport HandleBar from '../components/HandleBar';\nimport { setSearch } from '../store/actions/root';\nimport { Card } from './dashboard/content';\nimport List from '../components/List';\nexport const INITIAL_DISPLAY_METHOD = 'grid';\nconst DISABLED_FILTERS = true;\nconst Wrap = styled(Column).withConfig({\n  displayName: \"content__Wrap\",\n  componentId: \"sc-1afm75p-0\"\n})([\"margin-top:120px;margin-bottom:80px;\", \" @media only screen and (max-width:480px){margin-top:0;}\"], ({\n  clear\n}) => clear && css([\"margin:0;\"]));\n_c = Wrap;\nconst Container = styled.div.withConfig({\n  displayName: \"content__Container\",\n  componentId: \"sc-1afm75p-1\"\n})([\"display:grid;grid-template-columns:1fr min-content;grid-gap:var(--default-gap);margin-bottom:80px;\", \" @media only screen and (max-width:1196px){grid-template-columns:1fr;}\"], ({\n  stretch\n}) => stretch && css([\"grid-template-columns:1fr;\"]));\n_c2 = Container;\n\nconst ContentLayout = ({\n  limit,\n  title,\n  aside,\n  store,\n  handle,\n  render,\n  filters,\n  getType,\n  getQuery,\n  dashboard,\n  variables,\n  emptyMessage,\n  startOffset,\n  onLink\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const search = useSelector(state => state.root.search);\n  const Layout = dashboard ? DashboardLayout : DefaultLayout;\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n\n  const getFilters = () => {\n    return (filters || []).map(filter => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return /*#__PURE__*/React.createElement(DatePicker, {\n            key: v4(),\n            value: date,\n            placeholder: filter.placeholder || 'Дата публикации',\n            onChange: onChangeDate,\n            withNavigate: true\n          });\n\n        case 'SELECT':\n          return /*#__PURE__*/React.createElement(Select, {\n            key: v4(),\n            options: filter.options,\n            placeholder: filter.placeholder || 'Раздел',\n            selected: select,\n            onChange: item => onChangeSelect(item)\n          });\n\n        default:\n          return null;\n      }\n    });\n  };\n\n  const getOptions = () => [];\n\n  const onSearch = value => {\n    if (value) dispatch(setSearch(value));else dispatch(setSearch(null));\n  };\n\n  const renderCard = item => /*#__PURE__*/React.createElement(Card, {\n    item: item,\n    component: render(item),\n    onLink: item => onLink(item),\n    withoutChecked: true\n  });\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: title,\n    scaffold: store === null || store === void 0 ? void 0 : store.scaffold\n  }, /*#__PURE__*/React.createElement(Wrap, {\n    clear: (store === null || store === void 0 ? void 0 : store.scaffold) || dashboard\n  }, !(store !== null && store !== void 0 && store.scaffold) && !dashboard && /*#__PURE__*/React.createElement(SearchBar, {\n    defaultValue: search,\n    onChangeFilter: !DISABLED_FILTERS && (() => setVisibleFilter(!visibleFilter)),\n    onSubmit: onSearch\n  }), !DISABLED_FILTERS && dashboard && handle && /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: handle.icon,\n    buttonCreateText: handle.buttonCreateText,\n    onCreate: handle.onCreate,\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: handle.onChangeDisplayMethod\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: getFilters(),\n    options: getOptions()\n  }), /*#__PURE__*/React.createElement(Container, {\n    stretch: search && !aside || !aside\n  }, /*#__PURE__*/React.createElement(List, {\n    limit: limit,\n    type: getType,\n    query: getQuery,\n    variables: variables,\n    startOffset: startOffset,\n    emptyMessage: emptyMessage,\n    component: item => renderCard(item),\n    initialDisplayMethod: INITIAL_DISPLAY_METHOD,\n    onClick: onLink && (item => onLink(item))\n  }), aside)));\n};\n\n_s(ContentLayout, \"YAc2mKnGo2IfZalMcoGSM5XAL4w=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c3 = ContentLayout;\nexport default ContentLayout;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"ContentLayout\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/layouts/content.js"],"names":["React","useState","useSelector","useDispatch","styled","css","v4","Column","DatePicker","Select","DashboardLayout","DefaultLayout","FilterBar","SearchBar","HandleBar","setSearch","Card","List","INITIAL_DISPLAY_METHOD","DISABLED_FILTERS","Wrap","clear","Container","div","stretch","ContentLayout","limit","title","aside","store","handle","render","filters","getType","getQuery","dashboard","variables","emptyMessage","startOffset","onLink","dispatch","search","state","root","Layout","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","getFilters","map","filter","type","placeholder","options","item","getOptions","onSearch","value","renderCard","scaffold","icon","buttonCreateText","onCreate","onChangeDisplayMethod"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport styled, { css } from 'styled-components'\nimport { v4 } from 'uuid'\n\nimport Column from '../atomic-ui/components/Column'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Select from '../atomic-ui/components/Select'\n\nimport DashboardLayout from './dashboard'\nimport DefaultLayout from '../layouts/default'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport HandleBar from '../components/HandleBar'\nimport { setSearch } from '../store/actions/root'\nimport { Card } from './dashboard/content'\nimport List from '../components/List'\n\nexport const INITIAL_DISPLAY_METHOD = 'grid'\n\nconst DISABLED_FILTERS = true\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  ${({ clear }) =>\n    clear &&\n    css`\n      margin: 0;\n    `}\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  grid-gap: var(--default-gap);\n  margin-bottom: 80px;\n\n  ${({ stretch }) =>\n    stretch &&\n    css`\n      grid-template-columns: 1fr;\n    `}\n\n  @media only screen and (max-width: 1196px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst ContentLayout = ({\n  limit,\n  title,\n  aside,\n  store,\n  handle,\n  render,\n  filters,\n  getType,\n  getQuery,\n  dashboard,\n  variables,\n  emptyMessage,\n  startOffset,\n  onLink\n}) => {\n  const dispatch = useDispatch()\n  const search = useSelector((state) => state.root.search)\n  const Layout = dashboard ? DashboardLayout : DefaultLayout\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n\n  const getFilters = () => {\n    return (filters || []).map((filter) => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return (\n            <DatePicker\n              key={v4()}\n              value={date}\n              placeholder={filter.placeholder || 'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />\n          )\n        case 'SELECT':\n          return (\n            <Select\n              key={v4()}\n              options={filter.options}\n              placeholder={filter.placeholder || 'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          )\n        default:\n          return null\n      }\n    })\n  }\n\n  const getOptions = () => []\n\n  const onSearch = (value) => {\n    if (value) dispatch(setSearch(value))\n    else dispatch(setSearch(null))\n  }\n\n  const renderCard = (item) => (\n    <Card item={item} component={render(item)} onLink={(item) => onLink(item)} withoutChecked />\n  )\n\n  return (\n    <Layout title={title} scaffold={store?.scaffold}>\n      <Wrap clear={store?.scaffold || dashboard}>\n        {!store?.scaffold && !dashboard && (\n          <SearchBar\n            defaultValue={search}\n            onChangeFilter={!DISABLED_FILTERS && (() => setVisibleFilter(!visibleFilter))}\n            onSubmit={onSearch}\n          />\n        )}\n\n        {!DISABLED_FILTERS && dashboard && handle && (\n          <HandleBar\n            title={title}\n            icon={handle.icon}\n            buttonCreateText={handle.buttonCreateText}\n            onCreate={handle.onCreate}\n            onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n            onChangeDisplayMethod={handle.onChangeDisplayMethod}\n          />\n        )}\n\n        <FilterBar isOpen={visibleFilter} filters={getFilters()} options={getOptions()} />\n\n        <Container stretch={(search && !aside) || !aside}>\n          <List\n            limit={limit}\n            type={getType}\n            query={getQuery}\n            variables={variables}\n            startOffset={startOffset}\n            emptyMessage={emptyMessage}\n            component={(item) => renderCard(item)}\n            initialDisplayMethod={INITIAL_DISPLAY_METHOD}\n            onClick={onLink && ((item) => onLink(item))}\n          />\n          {aside}\n        </Container>\n      </Wrap>\n    </Layout>\n  )\n}\n\nexport default ContentLayout\n"]},"metadata":{},"sourceType":"module"}
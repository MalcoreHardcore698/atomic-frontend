{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../../apollo';\nimport { useHelper } from '../../hooks/useHelper';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport TicketCard from '../../components/TicketCard';\nimport { onTicketCreate, onTicketEdit, onTicketDelete, onTicketLink } from '../../store/helpers/ticket';\nimport { setDocuments } from '../../store/actions/documents';\nimport { onUserLink } from '../../store/helpers/user';\nimport queries from '../../graphql/queries';\nimport { categories } from '../../__mock__';\nconst TITLE = 'Обращения';\n\nconst Tickets = ({\n  store\n}) => {\n  const recall = useHelper();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const tickets = useMemo(() => documents || store.tickets, [documents, store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'ticket',\n    title: TITLE,\n    buttonCreateText: 'Создать обращение',\n    onCreate: recall(onTicketCreate, {\n      mutation: queries.CREATE_TICKET\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: displayMethod === 'list' ? [] : templates.ticket.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), tickets.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0439 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: tickets,\n    template: templates.ticket,\n    onChecked: () => {},\n    onClick: ticket => recall(onTicketLink, {\n      id: ticket.id,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    })(),\n    onDelete: ticket => recall(onTicketDelete, {\n      ticket,\n      mutation: queries.DELETE_TICKET\n    })(),\n    onEdit: ticket => recall(onTicketEdit, {\n      id: ticket.id,\n      mutation: queries.UPDATE_TICKET\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, tickets.map(ticket => /*#__PURE__*/React.createElement(TicketCard, {\n    key: ticket.id,\n    ticket: ticket,\n    onChecked: () => {},\n    onLink: recall(onTicketLink, {\n      id: ticket.id,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    }),\n    onAuthorLink: author => recall(onUserLink, {\n      id: author,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      owned: author === user.name\n    })(),\n    onDelete: recall(onTicketDelete, {\n      ticket,\n      mutation: queries.DELETE_TICKET\n    }),\n    onEdit: recall(onTicketEdit, {\n      id: ticket.id,\n      mutation: queries.UPDATE_TICKET\n    })\n  }))));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let tickets = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_TICKETS\n    });\n\n    if (response && response.data) {\n      tickets = response.data.getTickets;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        tickets\n      }\n    }\n  };\n}\nexport default Tickets;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/tickets.js"],"names":["React","useState","useEffect","useMemo","useDispatch","useSelector","Grid","Alert","DatePicker","Select","Table","templates","initializeApollo","useHelper","DashboardLayout","HandleBar","FilterBar","TicketCard","onTicketCreate","onTicketEdit","onTicketDelete","onTicketLink","setDocuments","onUserLink","queries","categories","TITLE","Tickets","store","recall","user","documents","state","dispatch","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","displayMethod","onChangeDisplayMethod","tickets","mutation","CREATE_TICKET","item","value","ticket","map","index","label","header","length","width","textAlign","id","auth","email","DELETE_TICKET","UPDATE_TICKET","overflowX","author","owned","name","getServerSideProps","client","response","query","GET_META_DASHBOARD_TICKETS","data","getTickets","err","console","log","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Grid from '../../atomic-ui/components/Grid'\nimport Alert from '../../atomic-ui/components/Alert'\nimport DatePicker from '../../atomic-ui/components/DatePicker'\nimport Select from '../../atomic-ui/components/Select'\nimport Table from '../../atomic-ui/components/Table'\nimport templates from '../../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport DashboardLayout from '../../layouts/dashboard'\nimport HandleBar from '../../components/HandleBar'\nimport FilterBar from '../../components/FilterBar'\nimport TicketCard from '../../components/TicketCard'\nimport {\n  onTicketCreate,\n  onTicketEdit,\n  onTicketDelete,\n  onTicketLink\n} from '../../store/helpers/ticket'\nimport { setDocuments } from '../../store/actions/documents'\nimport { onUserLink } from '../../store/helpers/user'\nimport queries from '../../graphql/queries'\nimport { categories } from '../../__mock__'\n\nconst TITLE = 'Обращения'\n\nconst Tickets = ({ store }) => {\n  const recall = useHelper()\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    documents: state.documents\n  }))\n  const dispatch = useDispatch()\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n\n  const tickets = useMemo(() => documents || store.tickets, [documents, store])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <HandleBar\n        icon={'ticket'}\n        title={TITLE}\n        buttonCreateText={'Создать обращение'}\n        onCreate={recall(onTicketCreate, { mutation: queries.CREATE_TICKET })}\n        onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n        onChangeDisplayMethod={(item) => onChangeDisplayMethod(item.value)}\n      />\n\n      <FilterBar\n        isOpen={visibleFilter}\n        filters={[\n          <DatePicker\n            key={0}\n            value={date}\n            placeholder={'Дата публикации'}\n            onChange={onChangeDate}\n            withNavigate\n          />,\n          <Select\n            key={1}\n            options={categories}\n            placeholder={'Раздел'}\n            selected={select}\n            onChange={(item) => onChangeSelect(item)}\n          />\n        ]}\n        options={\n          displayMethod === 'list'\n            ? []\n            : templates.ticket.map((item, index) => ({\n                label: item.header,\n                value: index\n              }))\n        }\n      />\n\n      {tickets.length === 0 && (\n        <Alert style={{ width: '100%', textAlign: 'center' }}>Обращений нет</Alert>\n      )}\n\n      {displayMethod === 'list' && (\n        <Table\n          data={tickets}\n          template={templates.ticket}\n          onChecked={() => {}}\n          onClick={(ticket) => recall(onTicketLink, { id: ticket.id, auth: user?.email })()}\n          onDelete={(ticket) =>\n            recall(onTicketDelete, { ticket, mutation: queries.DELETE_TICKET })()\n          }\n          onEdit={(ticket) =>\n            recall(onTicketEdit, { id: ticket.id, mutation: queries.UPDATE_TICKET })()\n          }\n          style={{ overflowX: 'auto', width: 'calc(100vw - 290px)' }}\n        />\n      )}\n\n      {displayMethod === 'grid' && (\n        <Grid>\n          {tickets.map((ticket) => (\n            <TicketCard\n              key={ticket.id}\n              ticket={ticket}\n              onChecked={() => {}}\n              onLink={recall(onTicketLink, { id: ticket.id, auth: user?.email })}\n              onAuthorLink={(author) =>\n                recall(onUserLink, {\n                  id: author,\n                  auth: user?.email,\n                  owned: author === user.name\n                })()\n              }\n              onDelete={recall(onTicketDelete, {\n                ticket,\n                mutation: queries.DELETE_TICKET\n              })}\n              onEdit={recall(onTicketEdit, {\n                id: ticket.id,\n                mutation: queries.UPDATE_TICKET\n              })}\n            />\n          ))}\n        </Grid>\n      )}\n    </DashboardLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let tickets = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_TICKETS\n    })\n\n    if (response && response.data) {\n      tickets = response.data.getTickets\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { tickets }\n    }\n  }\n}\n\nexport default Tickets\n"]},"metadata":{},"sourceType":"module"}
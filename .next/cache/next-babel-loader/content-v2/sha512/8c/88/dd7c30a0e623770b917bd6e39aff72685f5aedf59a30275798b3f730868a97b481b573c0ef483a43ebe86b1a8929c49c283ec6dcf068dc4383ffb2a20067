{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dan82\\\\Documents\\\\workspace\\\\FREELANCE\\\\atomic\\\\atomic-frontend\\\\atomic-ui\\\\components\\\\Difinition\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Text from '../Text';\nimport Title from '../Title';\nimport Icon from '../Icon';\nimport Chip from '../Chip';\nimport { v4 } from 'uuid';\nimport Tooltip from '../Tooltip';\nexport const Wrap = styled(Row)`\n  transition: opacity 150ms ease;\n\n  ${({\n  clickable\n}) => clickable && css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`;\nexport const Content = styled(Column)`\n  justify-content: center;\n  grid-gap: 0;\n`;\nexport const Image = styled.img`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  border-radius: var(--surface-border-radius);\n  object-fit: cover;\n`;\nexport const RoundedIcon = styled(Icon)`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  background: var(--default-color-${({\n  color\n}) => color || 'accent'}-dim);\n  border-radius: var(--surface-border-radius);\n\n  @media only screen and (max-width: 480px) {\n    width: var(--input-height-s);\n    height: var(--input-height-s);\n    min-width: var(--input-height-s);\n    min-height: var(--input-height-s);\n\n    svg {\n      transform: scale(0.85);\n    }\n  }\n`;\nexport const Label = styled(Text)`\n  color: var(--ghost-color-text);\n  font-size: var(--font-size-s);\n  white-space: nowrap;\n  width: 128px;\n  max-width: 400px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${({\n  stretch\n}) => stretch && css`\n      width: auto;\n    `}\n`;\nexport const Value = styled(Title)`\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`;\nexport const getValue = (label, text) => {\n  if (Array.isArray(text)) {\n    const slicedFactor = 3;\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, text.slice(0, slicedFactor).map(item => __jsx(Chip, {\n      key: v4(),\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, item)), text.length > 5 && __jsx(Chip, {\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, \"+\", text.slice(slicedFactor).length));\n  } // eslint-disable-next-line valid-typeof\n\n\n  if (typeof Text === 'funciton') {\n    const Text = text;\n    return __jsx(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Value, {\n    tag: !label ? 'h2' : 'h4',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 10\n    }\n  }, text);\n};\nexport const Difinition = ({\n  img,\n  color,\n  icon,\n  label,\n  text,\n  tooltip,\n  className,\n  style,\n  stretch,\n  onLink\n}) => __jsx(Wrap, {\n  className: className,\n  style: style,\n  clickable: !!onLink,\n  onClick: () => onLink && onLink(),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 3\n  }\n}, img && !icon && __jsx(Image, {\n  src: img,\n  alt: 'Avatar',\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 22\n  }\n}), !img && icon && __jsx(RoundedIcon, {\n  icon: icon,\n  color: color,\n  stroke: `var(--default-color-${color || 'accent'})`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 7\n  }\n}), __jsx(Content, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }\n}, label && __jsx(Label, {\n  stretch: stretch,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 17\n  }\n}, label), tooltip ? __jsx(Tooltip, {\n  place: 'top',\n  text: tooltip,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }\n}, __jsx(Row, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 11\n  }\n}, getValue(label, text))) : __jsx(Row, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }\n}, getValue(label, text))));\nexport default Difinition;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/Difinition/index.js"],"names":["React","styled","css","Row","Column","Text","Title","Icon","Chip","v4","Tooltip","Wrap","clickable","Content","Image","img","RoundedIcon","color","Label","stretch","Value","getValue","label","text","Array","isArray","slicedFactor","slice","map","item","display","length","Difinition","icon","tooltip","className","style","onLink"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport Row from '../Row'\nimport Column from '../Column'\nimport Text from '../Text'\nimport Title from '../Title'\nimport Icon from '../Icon'\nimport Chip from '../Chip'\nimport { v4 } from 'uuid'\nimport Tooltip from '../Tooltip'\n\nexport const Wrap = styled(Row)`\n  transition: opacity 150ms ease;\n\n  ${({ clickable }) =>\n    clickable &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`\n\nexport const Content = styled(Column)`\n  justify-content: center;\n  grid-gap: 0;\n`\n\nexport const Image = styled.img`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  border-radius: var(--surface-border-radius);\n  object-fit: cover;\n`\n\nexport const RoundedIcon = styled(Icon)`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  background: var(--default-color-${({ color }) => color || 'accent'}-dim);\n  border-radius: var(--surface-border-radius);\n\n  @media only screen and (max-width: 480px) {\n    width: var(--input-height-s);\n    height: var(--input-height-s);\n    min-width: var(--input-height-s);\n    min-height: var(--input-height-s);\n\n    svg {\n      transform: scale(0.85);\n    }\n  }\n`\n\nexport const Label = styled(Text)`\n  color: var(--ghost-color-text);\n  font-size: var(--font-size-s);\n  white-space: nowrap;\n  width: 128px;\n  max-width: 400px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${({ stretch }) =>\n    stretch &&\n    css`\n      width: auto;\n    `}\n`\n\nexport const Value = styled(Title)`\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`\n\nexport const getValue = (label, text) => {\n  if (Array.isArray(text)) {\n    const slicedFactor = 3\n    return (\n      <React.Fragment>\n        {text.slice(0, slicedFactor).map((item) => (\n          <Chip\n            key={v4()}\n            style={{ display: 'inline-flex' }}\n            color={'ghost'}\n            appearance={'outlined'}\n            size={'xs'}>\n            {item}\n          </Chip>\n        ))}\n        {text.length > 5 && (\n          <Chip\n            style={{ display: 'inline-flex' }}\n            color={'ghost'}\n            appearance={'outlined'}\n            size={'xs'}>\n            +{text.slice(slicedFactor).length}\n          </Chip>\n        )}\n      </React.Fragment>\n    )\n  }\n\n  // eslint-disable-next-line valid-typeof\n  if (typeof Text === 'funciton') {\n    const Text = text\n    return <Text />\n  }\n\n  return <Value tag={!label ? 'h2' : 'h4'}>{text}</Value>\n}\n\nexport const Difinition = ({\n  img,\n  color,\n  icon,\n  label,\n  text,\n  tooltip,\n  className,\n  style,\n  stretch,\n  onLink\n}) => (\n  <Wrap className={className} style={style} clickable={!!onLink} onClick={() => onLink && onLink()}>\n    {img && !icon && <Image src={img} alt={'Avatar'} />}\n    {!img && icon && (\n      <RoundedIcon icon={icon} color={color} stroke={`var(--default-color-${color || 'accent'})`} />\n    )}\n    <Content>\n      {label && <Label stretch={stretch}>{label}</Label>}\n\n      {tooltip ? (\n        <Tooltip place={'top'} text={tooltip}>\n          <Row>{getValue(label, text)}</Row>\n        </Tooltip>\n      ) : (\n        <Row>{getValue(label, text)}</Row>\n      )}\n    </Content>\n  </Wrap>\n)\n\nexport default Difinition\n"]},"metadata":{},"sourceType":"module"}
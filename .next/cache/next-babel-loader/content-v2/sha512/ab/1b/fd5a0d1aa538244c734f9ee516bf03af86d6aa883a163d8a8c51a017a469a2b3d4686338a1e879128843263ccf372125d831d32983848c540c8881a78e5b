{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Avatar from '../Avatar';\nimport Title from '../Title';\nimport Text from '../Text';\nimport Icon from '../Icon';\nimport Button from '../Button';\nimport Tooltip from '../Tooltip';\nimport DateText from '../DateText';\nimport Checkbox from '../Checkbox';\nimport TextArea from '../TextArea';\nexport const dispatchDateStyles = css([\"position:absolute;left:0;bottom:5px;font-size:var(--font-size-xs);\"]);\nexport const Wrap = styled.div.withConfig({\n  displayName: \"Message__Wrap\",\n  componentId: \"sc-1x5w1wb-0\"\n})([\"display:grid;grid-template-columns:64px 1fr;grid-template-areas:'avatar opinion';margin:0;transition:opacity 150ms ease;& > span{display:flex;grid-area:avatar;align-self:end;justify-self:start;cursor:pointer;transition:opacity 150ms ease;}\", \" \", \" \", \" \", \"\"], ({\n  onClick\n}) => onClick && css([\"& > span{cursor:pointer;&:hover{opacity:0.65;}}\"]), ({\n  side\n}) => side === 'owner' && css([\"grid-template-columns:1fr 64px;grid-template-areas:'opinion avatar';& > span{justify-self:end;}\"]), ({\n  compact\n}) => compact && css([\"display:flex;\"]), ({\n  checked\n}) => checked && css([\"opacity:0.45;\"]));\n_c = Wrap;\nexport const MiniAvatar = styled(Avatar).withConfig({\n  displayName: \"Message__MiniAvatar\",\n  componentId: \"sc-1x5w1wb-1\"\n})([\"width:var(--input-height-xs);height:var(--input-height-xs);min-width:var(--input-height-xs);min-height:var(--input-height-xs);border-radius:var(--surface-border-radius);\"]);\n_c2 = MiniAvatar;\nexport const OpinionAvatar = styled(Avatar).withConfig({\n  displayName: \"Message__OpinionAvatar\",\n  componentId: \"sc-1x5w1wb-2\"\n})([\"grid-area:avatar;align-self:end;transition:opacity 150ms ease;\", \" \", \"\"], ({\n  side\n}) => side === 'owner' && css([\"justify-self:end;\"]), ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.65;}\"]));\n_c3 = OpinionAvatar;\nexport const Opinion = styled.div.withConfig({\n  displayName: \"Message__Opinion\",\n  componentId: \"sc-1x5w1wb-3\"\n})([\"position:relative;padding:10px var(--default-gap) 25px var(--default-gap);border-radius:var(--surface-border-radius);color:white;width:fit-content;min-width:80px;grid-area:opinion;\", \" \", \" \", \"\"], ({\n  side\n}) => side === 'observer' && css([\"background:var(--ghost-color-background);color:var(--ghost-color-text);\"]), ({\n  side\n}) => side === 'owner' && css([\"justify-self:end;background:var(--default-color-accent);color:white;\"]), ({\n  compact\n}) => compact && css([\"padding:0 0 25px 0;background:none;color:black;width:100%;\"]));\n_c4 = Opinion;\nexport const OpinionName = styled(Title).withConfig({\n  displayName: \"Message__OpinionName\",\n  componentId: \"sc-1x5w1wb-4\"\n})([\"color:inherit;transition:opacity 150ms ease;\", \" \", \"\"], ({\n  compact\n}) => compact && css([\"display:flex;align-items:center;grid-gap:10px;\"]), ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.65;}\"]));\n_c5 = OpinionName;\nexport const OpinionTextArea = styled(TextArea).withConfig({\n  displayName: \"Message__OpinionTextArea\",\n  componentId: \"sc-1x5w1wb-5\"\n})([\"margin-top:10px;height:128px;\", \"\"], ({\n  height\n}) => height && css([\"height:\", \"px;\"], height));\n_c6 = OpinionTextArea;\nexport const OpinionText = styled(Text).withConfig({\n  displayName: \"Message__OpinionText\",\n  componentId: \"sc-1x5w1wb-6\"\n})([\"color:inherit;\", \"\"], ({\n  compact\n}) => compact && css([\"margin-top:10px;\"]));\n_c7 = OpinionText;\nexport const OpinionTail = styled.span.withConfig({\n  displayName: \"Message__OpinionTail\",\n  componentId: \"sc-1x5w1wb-7\"\n})([\"position:absolute;bottom:-6px;background-size:contain;background-repeat:no-repeat;width:25px;height:20px;\", \" \", \"\"], ({\n  side,\n  tails\n}) => side === 'observer' && css([\"left:-12px;background-image:url('\", \"');\"], tails.default), ({\n  side,\n  tails\n}) => side === 'owner' && css([\"right:-12px;background-image:url('\", \"');transform:scaleX(-1);\"], tails.owner));\n_c8 = OpinionTail;\nexport const DispatchTime = styled(DateText).withConfig({\n  displayName: \"Message__DispatchTime\",\n  componentId: \"sc-1x5w1wb-8\"\n})([\"position:absolute;right:10px;bottom:5px;font-size:var(--font-size-xs);\", \"\"], ({\n  compact\n}) => compact && css([\"right:0;font-size:var(--font-size-s);color:var(--default-color-text);\"]));\n_c9 = DispatchTime;\nexport const DispatchDate = styled(DateText).withConfig({\n  displayName: \"Message__DispatchDate\",\n  componentId: \"sc-1x5w1wb-9\"\n})([\"\", \" font-size:var(--font-size-s);color:var(--default-color-text);\"], dispatchDateStyles);\n_c10 = DispatchDate;\nexport const DispatchUpdatedDate = styled.div.withConfig({\n  displayName: \"Message__DispatchUpdatedDate\",\n  componentId: \"sc-1x5w1wb-10\"\n})([\"\", \" font-size:var(--font-size-s);color:var(--default-color-text);\"], dispatchDateStyles);\n_c11 = DispatchUpdatedDate;\nexport const Actions = styled(Row).withConfig({\n  displayName: \"Message__Actions\",\n  componentId: \"sc-1x5w1wb-11\"\n})([\"position:absolute;top:0;right:0;grid-gap:10px;\"]);\n_c12 = Actions;\nexport const Message = ({\n  avatar,\n  side,\n  name,\n  text,\n  time,\n  tails,\n  style,\n  compact,\n  className,\n  isUpdated,\n  isChecked,\n  onEdit,\n  onChecked,\n  onDelete,\n  onLink\n}) => {\n  _s();\n\n  const [updatedAt, setUpdatedAt] = useState(isUpdated ? time : null);\n  const [checked, setChecked] = useState(isChecked);\n  const [isEdit, setEdit] = useState(false);\n  const [message, setMessage] = useState(text);\n  const textRef = useRef(null);\n\n  const handleToggleEdit = () => setEdit(prev => !prev);\n\n  const handleChecked = e => {\n    const value = e.target.checked;\n    if (onChecked) onChecked(value);\n    setChecked(value);\n  };\n\n  const handleApplyChanges = () => {\n    var _textRef$current;\n\n    const value = textRef === null || textRef === void 0 ? void 0 : (_textRef$current = textRef.current) === null || _textRef$current === void 0 ? void 0 : _textRef$current.value;\n\n    if (value) {\n      if (onEdit) onEdit(value);\n      setUpdatedAt(new Date());\n      setMessage(value);\n    }\n\n    handleToggleEdit();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    side: side,\n    compact: compact,\n    checked: checked,\n    style: style,\n    className: className\n  }, !compact && /*#__PURE__*/React.createElement(OpinionAvatar, {\n    side: side,\n    src: avatar,\n    onClick: onLink\n  }), /*#__PURE__*/React.createElement(Opinion, {\n    side: side,\n    compact: compact\n  }, /*#__PURE__*/React.createElement(OpinionName, {\n    tag: 'h5',\n    compact: compact,\n    onClick: onLink\n  }, compact && /*#__PURE__*/React.createElement(MiniAvatar, {\n    side: side,\n    src: avatar,\n    onClick: onLink\n  }), name), !compact && /*#__PURE__*/React.createElement(OpinionTail, {\n    side: side,\n    tails: tails\n  }), isEdit ? /*#__PURE__*/React.createElement(OpinionTextArea, {\n    ref: textRef,\n    defaultValue: message,\n    appearance: 'ghost'\n  }) : /*#__PURE__*/React.createElement(OpinionText, {\n    compact: compact\n  }, message), /*#__PURE__*/React.createElement(DispatchTime, {\n    text: updatedAt || time,\n    compact: compact\n  }), compact && updatedAt && /*#__PURE__*/React.createElement(DispatchUpdatedDate, null, \"\\u041E\\u0442\\u0440\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u043E\", ' ', new Date(updatedAt).toLocaleString('ru-RU', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  })), compact && !updatedAt && /*#__PURE__*/React.createElement(DispatchDate, {\n    text: time,\n    options: {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    }\n  }), compact && onEdit && onDelete && /*#__PURE__*/React.createElement(Actions, null, !isEdit ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить сообщение'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: onDelete\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактировать сообщение'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    onClick: handleToggleEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отметить сообщение',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    checked: checked,\n    onChange: handleChecked\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Применить изменения',\n    self: true\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'green',\n    onClick: handleApplyChanges\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'check',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отменить изменения',\n    self: true\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: handleToggleEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'closeSquare',\n    size: 'xs',\n    stroke: 'white'\n  })))))));\n};\n\n_s(Message, \"bjBq4qiGUT/uS/EwJTJDi5In/1o=\");\n\n_c13 = Message;\nMessage.defaultProps = {\n  side: 'observer',\n  text: 'Some Message',\n  time: '15:00'\n};\nexport default Message;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"MiniAvatar\");\n$RefreshReg$(_c3, \"OpinionAvatar\");\n$RefreshReg$(_c4, \"Opinion\");\n$RefreshReg$(_c5, \"OpinionName\");\n$RefreshReg$(_c6, \"OpinionTextArea\");\n$RefreshReg$(_c7, \"OpinionText\");\n$RefreshReg$(_c8, \"OpinionTail\");\n$RefreshReg$(_c9, \"DispatchTime\");\n$RefreshReg$(_c10, \"DispatchDate\");\n$RefreshReg$(_c11, \"DispatchUpdatedDate\");\n$RefreshReg$(_c12, \"Actions\");\n$RefreshReg$(_c13, \"Message\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/Message/index.js"],"names":["React","useState","useRef","styled","css","Row","Avatar","Title","Text","Icon","Button","Tooltip","DateText","Checkbox","TextArea","dispatchDateStyles","Wrap","div","onClick","side","compact","checked","MiniAvatar","OpinionAvatar","Opinion","OpinionName","OpinionTextArea","height","OpinionText","OpinionTail","span","tails","default","owner","DispatchTime","DispatchDate","DispatchUpdatedDate","Actions","Message","avatar","name","text","time","style","className","isUpdated","isChecked","onEdit","onChecked","onDelete","onLink","updatedAt","setUpdatedAt","setChecked","isEdit","setEdit","message","setMessage","textRef","handleToggleEdit","prev","handleChecked","e","value","target","handleApplyChanges","current","Date","toLocaleString","day","month","year","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Row from '../Row'\nimport Avatar from '../Avatar'\nimport Title from '../Title'\nimport Text from '../Text'\nimport Icon from '../Icon'\nimport Button from '../Button'\nimport Tooltip from '../Tooltip'\nimport DateText from '../DateText'\nimport Checkbox from '../Checkbox'\nimport TextArea from '../TextArea'\n\nexport const dispatchDateStyles = css`\n  position: absolute;\n  left: 0;\n  bottom: 5px;\n  font-size: var(--font-size-xs);\n`\n\nexport const Wrap = styled.div`\n  display: grid;\n  grid-template-columns: 64px 1fr;\n  grid-template-areas: 'avatar opinion';\n  margin: 0;\n  transition: opacity 150ms ease;\n\n  & > span {\n    display: flex;\n    grid-area: avatar;\n    align-self: end;\n    justify-self: start;\n    cursor: pointer;\n    transition: opacity 150ms ease;\n  }\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      & > span {\n        cursor: pointer;\n\n        &:hover {\n          opacity: 0.65;\n        }\n      }\n    `}\n\n  ${({ side }) =>\n    side === 'owner' &&\n    css`\n      grid-template-columns: 1fr 64px;\n      grid-template-areas: 'opinion avatar';\n\n      & > span {\n        justify-self: end;\n      }\n    `}\n\n  ${({ compact }) =>\n    compact &&\n    css`\n      display: flex;\n    `}\n    \n  ${({ checked }) =>\n    checked &&\n    css`\n      opacity: 0.45;\n    `}\n`\n\nexport const MiniAvatar = styled(Avatar)`\n  width: var(--input-height-xs);\n  height: var(--input-height-xs);\n  min-width: var(--input-height-xs);\n  min-height: var(--input-height-xs);\n  border-radius: var(--surface-border-radius);\n`\n\nexport const OpinionAvatar = styled(Avatar)`\n  grid-area: avatar;\n  align-self: end;\n  transition: opacity 150ms ease;\n\n  ${({ side }) =>\n    side === 'owner' &&\n    css`\n      justify-self: end;\n    `}\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`\n\nexport const Opinion = styled.div`\n  position: relative;\n  padding: 10px var(--default-gap) 25px var(--default-gap);\n  border-radius: var(--surface-border-radius);\n  color: white;\n  width: fit-content;\n  min-width: 80px;\n  grid-area: opinion;\n\n  ${({ side }) =>\n    side === 'observer' &&\n    css`\n      background: var(--ghost-color-background);\n      color: var(--ghost-color-text);\n    `}\n\n  ${({ side }) =>\n    side === 'owner' &&\n    css`\n      justify-self: end;\n      background: var(--default-color-accent);\n      color: white;\n    `}\n\n  ${({ compact }) =>\n    compact &&\n    css`\n      padding: 0 0 25px 0;\n      background: none;\n      color: black;\n      width: 100%;\n    `}\n`\n\nexport const OpinionName = styled(Title)`\n  color: inherit;\n  transition: opacity 150ms ease;\n\n  ${({ compact }) =>\n    compact &&\n    css`\n      display: flex;\n      align-items: center;\n      grid-gap: 10px;\n    `}\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`\n\nexport const OpinionTextArea = styled(TextArea)`\n  margin-top: 10px;\n  height: 128px;\n\n  ${({ height }) =>\n    height &&\n    css`\n      height: ${height}px;\n    `}\n`\n\nexport const OpinionText = styled(Text)`\n  color: inherit;\n\n  ${({ compact }) =>\n    compact &&\n    css`\n      margin-top: 10px;\n    `}\n`\n\nexport const OpinionTail = styled.span`\n  position: absolute;\n  bottom: -6px;\n  background-size: contain;\n  background-repeat: no-repeat;\n  width: 25px;\n  height: 20px;\n\n  ${({ side, tails }) =>\n    side === 'observer' &&\n    css`\n      left: -12px;\n      background-image: url('${tails.default}');\n    `}\n\n  ${({ side, tails }) =>\n    side === 'owner' &&\n    css`\n      right: -12px;\n      background-image: url('${tails.owner}');\n      transform: scaleX(-1);\n    `}\n`\n\nexport const DispatchTime = styled(DateText)`\n  position: absolute;\n  right: 10px;\n  bottom: 5px;\n  font-size: var(--font-size-xs);\n\n  ${({ compact }) =>\n    compact &&\n    css`\n      right: 0;\n      font-size: var(--font-size-s);\n      color: var(--default-color-text);\n    `}\n`\n\nexport const DispatchDate = styled(DateText)`\n  ${dispatchDateStyles}\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`\n\nexport const DispatchUpdatedDate = styled.div`\n  ${dispatchDateStyles}\n  font-size: var(--font-size-s);\n  color: var(--default-color-text);\n`\n\nexport const Actions = styled(Row)`\n  position: absolute;\n  top: 0;\n  right: 0;\n  grid-gap: 10px;\n`\n\nexport const Message = ({\n  avatar,\n  side,\n  name,\n  text,\n  time,\n  tails,\n  style,\n  compact,\n  className,\n  isUpdated,\n  isChecked,\n  onEdit,\n  onChecked,\n  onDelete,\n  onLink\n}) => {\n  const [updatedAt, setUpdatedAt] = useState(isUpdated ? time : null)\n  const [checked, setChecked] = useState(isChecked)\n  const [isEdit, setEdit] = useState(false)\n  const [message, setMessage] = useState(text)\n  const textRef = useRef(null)\n\n  const handleToggleEdit = () => setEdit((prev) => !prev)\n\n  const handleChecked = (e) => {\n    const value = e.target.checked\n    if (onChecked) onChecked(value)\n    setChecked(value)\n  }\n\n  const handleApplyChanges = () => {\n    const value = textRef?.current?.value\n\n    if (value) {\n      if (onEdit) onEdit(value)\n      setUpdatedAt(new Date())\n      setMessage(value)\n    }\n    handleToggleEdit()\n  }\n\n  return (\n    <Wrap side={side} compact={compact} checked={checked} style={style} className={className}>\n      {!compact && <OpinionAvatar side={side} src={avatar} onClick={onLink} />}\n      <Opinion side={side} compact={compact}>\n        <OpinionName tag={'h5'} compact={compact} onClick={onLink}>\n          {compact && <MiniAvatar side={side} src={avatar} onClick={onLink} />}\n          {name}\n        </OpinionName>\n        {!compact && <OpinionTail side={side} tails={tails} />}\n\n        {isEdit ? (\n          <OpinionTextArea ref={textRef} defaultValue={message} appearance={'ghost'} />\n        ) : (\n          <OpinionText compact={compact}>{message}</OpinionText>\n        )}\n\n        <DispatchTime text={updatedAt || time} compact={compact} />\n        {compact && updatedAt && (\n          <DispatchUpdatedDate>\n            Отредактировано{' '}\n            {new Date(updatedAt).toLocaleString('ru-RU', {\n              day: 'numeric',\n              month: 'long',\n              year: 'numeric'\n            })}\n          </DispatchUpdatedDate>\n        )}\n        {compact && !updatedAt && (\n          <DispatchDate\n            text={time}\n            options={{\n              day: 'numeric',\n              month: 'long',\n              year: 'numeric'\n            }}\n          />\n        )}\n\n        {compact && onEdit && onDelete && (\n          <Actions>\n            {!isEdit ? (\n              <React.Fragment>\n                <Tooltip text={'Удалить сообщение'}>\n                  <Button\n                    kind={'icon'}\n                    size={'xs'}\n                    disabled={checked}\n                    appearance={'red'}\n                    onClick={onDelete}>\n                    <Icon icon={'delete'} size={'xs'} stroke={'white'} />\n                  </Button>\n                </Tooltip>\n                <Tooltip text={'Редактировать сообщение'}>\n                  <Button kind={'icon'} size={'xs'} disabled={checked} onClick={handleToggleEdit}>\n                    <Icon icon={'edit'} size={'xs'} stroke={'white'} />\n                  </Button>\n                </Tooltip>\n                <Tooltip text={'Отметить сообщение'} self>\n                  <Checkbox checked={checked} onChange={handleChecked} />\n                </Tooltip>\n              </React.Fragment>\n            ) : (\n              <React.Fragment>\n                <Tooltip text={'Применить изменения'} self>\n                  <Button\n                    kind={'icon'}\n                    size={'xs'}\n                    disabled={checked}\n                    appearance={'green'}\n                    onClick={handleApplyChanges}>\n                    <Icon icon={'check'} size={'xs'} stroke={'white'} />\n                  </Button>\n                </Tooltip>\n                <Tooltip text={'Отменить изменения'} self>\n                  <Button\n                    kind={'icon'}\n                    size={'xs'}\n                    disabled={checked}\n                    appearance={'red'}\n                    onClick={handleToggleEdit}>\n                    <Icon icon={'closeSquare'} size={'xs'} stroke={'white'} />\n                  </Button>\n                </Tooltip>\n              </React.Fragment>\n            )}\n          </Actions>\n        )}\n      </Opinion>\n    </Wrap>\n  )\n}\n\nMessage.defaultProps = {\n  side: 'observer',\n  text: 'Some Message',\n  time: '15:00'\n}\n\nexport default Message\n"]},"metadata":{},"sourceType":"module"}
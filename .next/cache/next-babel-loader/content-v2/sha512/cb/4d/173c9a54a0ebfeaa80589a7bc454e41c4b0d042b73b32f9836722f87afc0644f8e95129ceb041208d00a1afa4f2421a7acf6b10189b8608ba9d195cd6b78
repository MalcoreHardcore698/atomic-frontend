{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../store/helpers/user';\nimport { useHelper } from './useHelper';\nimport { useMutate } from './useMutate';\nimport queries from '../graphql/queries';\nexport const useUser = () => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const hasOwned = useCallback(author => author.name === (user === null || user === void 0 ? void 0 : user.name), [user]);\n  const onLink = useCallback(author => {\n    const owned = author.name === (user === null || user === void 0 ? void 0 : user.name);\n    recall(onUserLink, {\n      id: author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      owned,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, dispatch, mutate, recall]);\n  const onChat = useCallback(author => {\n    recall(onChat, {\n      sender: user === null || user === void 0 ? void 0 : user.email,\n      recipient: author.email,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, mutate, dispatch]);\n  const onMembers = useCallback(author => {\n    recall(onUserMembers, {\n      id: author === null || author === void 0 ? void 0 : author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    })();\n  }, [user, recall]);\n  const onAboutMore = useCallback(project => {\n    recall(onUserAboutMore, {\n      user: project\n    })();\n  }, [recall]);\n  const onCompanyLink = useCallback(author => {\n    var _author$company;\n\n    recall(onUserLink, {\n      id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, recall]);\n  return {\n    user,\n    hasOwned,\n    onLink,\n    onChat,\n    onMembers,\n    onAboutMore,\n    onCompanyLink\n  };\n};\n\n_s(useUser, \"RqgkgR/pOj3HAq++e4zvGLRKsuo=\", false, function () {\n  return [useHelper, useMutate, useSelector, useDispatch];\n});","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/hooks/useUser.js"],"names":["useCallback","useDispatch","useSelector","onUserAboutMore","onUserLink","onUserMembers","useHelper","useMutate","queries","useUser","recall","mutate","user","state","dispatch","hasOwned","author","name","onLink","owned","id","email","auth","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","onChat","sender","recipient","onMembers","onAboutMore","project","onCompanyLink","company"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../store/helpers/user'\nimport { useHelper } from './useHelper'\nimport { useMutate } from './useMutate'\nimport queries from '../graphql/queries'\n\nexport const useUser = () => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  const hasOwned = useCallback((author) => author.name === user?.name, [user])\n\n  const onLink = useCallback(\n    (author) => {\n      const owned = author.name === user?.name\n      recall(onUserLink, {\n        id: author.email,\n        auth: user?.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })()\n    },\n    [user, dispatch, mutate, recall]\n  )\n\n  const onChat = useCallback(\n    (author) => {\n      recall(onChat, {\n        sender: user?.email,\n        recipient: author.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })()\n    },\n    [user, mutate, dispatch]\n  )\n\n  const onMembers = useCallback(\n    (author) => {\n      recall(onUserMembers, { id: author?.email, auth: user?.email })()\n    },\n    [user, recall]\n  )\n\n  const onAboutMore = useCallback(\n    (project) => {\n      recall(onUserAboutMore, { user: project })()\n    },\n    [recall]\n  )\n\n  const onCompanyLink = useCallback(\n    (author) => {\n      recall(onUserLink, {\n        id: author.company?.email,\n        auth: user?.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })()\n    },\n    [user, recall]\n  )\n\n  return {\n    user,\n    hasOwned,\n    onLink,\n    onChat,\n    onMembers,\n    onAboutMore,\n    onCompanyLink\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport { useRouter } from 'next/router';\nimport { getLabelCategory } from '../atomic-ui/utils/functions';\nimport { initializeApollo } from '../apollo';\nimport ContentLayout from '../layouts/content';\nimport { GridAside as Container } from '../components/Styled';\nimport ProjectList from '../components/ProjectList';\nimport queries from '../graphql/queries';\nconst TITLE = 'Проекты';\nconst START_OFFSET = 6;\n\nconst Projects = ({\n  store\n}) => {\n  const router = useRouter();\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER'\n    }, {\n      type: 'SELECT',\n      options: store === null || store === void 0 ? void 0 : store.categories.map(category => ({\n        value: category.id,\n        label: getLabelCategory(category.name)\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    query: queries.GET_PROJECTS,\n    variables: {\n      category: router.query.category,\n      status: 'PUBLISHED'\n    },\n    store: {\n      documents: store === null || store === void 0 ? void 0 : store.projects\n    }\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(ProjectList, {\n    initialList: documents,\n    layout: true\n  })));\n};\n\nexport async function getServerSideProps({\n  query\n}) {\n  const client = initializeApollo();\n  let projects = [];\n  let categories = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_PROJECTS,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET,\n        status: 'PUBLISHED',\n        category: query.category\n      }\n    });\n\n    if (response && response.data) {\n      projects = response.data.getProjects;\n      categories = response.data.getCategories;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        projects,\n        categories\n      }\n    }\n  };\n}\nexport default Projects;","map":null,"metadata":{},"sourceType":"module"}
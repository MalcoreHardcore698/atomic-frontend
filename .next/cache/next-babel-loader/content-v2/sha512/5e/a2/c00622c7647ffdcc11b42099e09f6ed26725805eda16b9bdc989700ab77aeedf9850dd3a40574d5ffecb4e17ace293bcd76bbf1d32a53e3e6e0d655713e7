{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport const useInfiniteScroll = ({\n  callbackOnTop,\n  callbackOnBottom,\n  offset = 50\n}) => {\n  const ref = useRef(null);\n  const lastScrollTop = useRef(0);\n  useEffect(() => {\n    const scrollElement = ref.current;\n\n    const onScroll = () => {\n      if (!scrollElement) return;\n      const dir = scrollElement.scrollTop - lastScrollTop.current;\n\n      if (callbackOnBottom && dir > 0 && scrollElement.scrollTop + scrollElement.clientHeight >= scrollElement.scrollHeight - offset) {\n        callbackOnBottom(scrollElement.scrollTop, scrollElement.scrollHeight);\n      }\n\n      if (callbackOnTop && dir < 0 && scrollElement.scrollTop <= offset) {\n        callbackOnTop(scrollElement.scrollTop, scrollElement.scrollHeight);\n      }\n\n      lastScrollTop.current = scrollElement.scrollTop;\n    };\n\n    if (scrollElement) {\n      scrollElement.addEventListener('scroll', onScroll);\n    }\n\n    return () => {\n      if (scrollElement) {\n        scrollElement.removeEventListener('scroll', onScroll);\n      }\n    };\n  }, [callbackOnTop, callbackOnBottom, offset]);\n  return [ref];\n};\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/hooks/useInfiniteScroll.js"],"names":["useEffect","useRef","useInfiniteScroll","callbackOnTop","callbackOnBottom","offset","ref","lastScrollTop","scrollElement","current","onScroll","dir","scrollTop","clientHeight","scrollHeight","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,gBAAjB;AAAmCC,EAAAA,MAAM,GAAG;AAA5C,CAAD,KAAsD;AACrF,QAAMC,GAAG,GAAGL,MAAM,CAAC,IAAD,CAAlB;AACA,QAAMM,aAAa,GAAGN,MAAM,CAAC,CAAD,CAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,aAAa,GAAGF,GAAG,CAACG,OAA1B;;AAEA,UAAMC,QAAQ,GAAG,MAAM;AACrB,UAAI,CAACF,aAAL,EAAoB;AACpB,YAAMG,GAAG,GAAGH,aAAa,CAACI,SAAd,GAA0BL,aAAa,CAACE,OAApD;;AAEA,UACEL,gBAAgB,IAChBO,GAAG,GAAG,CADN,IAEAH,aAAa,CAACI,SAAd,GAA0BJ,aAAa,CAACK,YAAxC,IAAwDL,aAAa,CAACM,YAAd,GAA6BT,MAHvF,EAIE;AACAD,QAAAA,gBAAgB,CAACI,aAAa,CAACI,SAAf,EAA0BJ,aAAa,CAACM,YAAxC,CAAhB;AACD;;AACD,UAAIX,aAAa,IAAIQ,GAAG,GAAG,CAAvB,IAA4BH,aAAa,CAACI,SAAd,IAA2BP,MAA3D,EAAmE;AACjEF,QAAAA,aAAa,CAACK,aAAa,CAACI,SAAf,EAA0BJ,aAAa,CAACM,YAAxC,CAAb;AACD;;AAEDP,MAAAA,aAAa,CAACE,OAAd,GAAwBD,aAAa,CAACI,SAAtC;AACD,KAhBD;;AAkBA,QAAIJ,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACO,gBAAd,CAA+B,QAA/B,EAAyCL,QAAzC;AACD;;AAED,WAAO,MAAM;AACX,UAAIF,aAAJ,EAAmB;AACjBA,QAAAA,aAAa,CAACQ,mBAAd,CAAkC,QAAlC,EAA4CN,QAA5C;AACD;AACF,KAJD;AAKD,GA9BQ,EA8BN,CAACP,aAAD,EAAgBC,gBAAhB,EAAkCC,MAAlC,CA9BM,CAAT;AAgCA,SAAO,CAACC,GAAD,CAAP;AACD,CArCM;AAuCP,eAAeJ,iBAAf","sourcesContent":["import { useEffect, useRef } from 'react'\n\nexport const useInfiniteScroll = ({ callbackOnTop, callbackOnBottom, offset = 50 }) => {\n  const ref = useRef(null)\n  const lastScrollTop = useRef(0)\n\n  useEffect(() => {\n    const scrollElement = ref.current\n\n    const onScroll = () => {\n      if (!scrollElement) return\n      const dir = scrollElement.scrollTop - lastScrollTop.current\n\n      if (\n        callbackOnBottom &&\n        dir > 0 &&\n        scrollElement.scrollTop + scrollElement.clientHeight >= scrollElement.scrollHeight - offset\n      ) {\n        callbackOnBottom(scrollElement.scrollTop, scrollElement.scrollHeight)\n      }\n      if (callbackOnTop && dir < 0 && scrollElement.scrollTop <= offset) {\n        callbackOnTop(scrollElement.scrollTop, scrollElement.scrollHeight)\n      }\n\n      lastScrollTop.current = scrollElement.scrollTop\n    }\n\n    if (scrollElement) {\n      scrollElement.addEventListener('scroll', onScroll)\n    }\n\n    return () => {\n      if (scrollElement) {\n        scrollElement.removeEventListener('scroll', onScroll)\n      }\n    }\n  }, [callbackOnTop, callbackOnBottom, offset])\n\n  return [ref]\n}\n\nexport default useInfiniteScroll\n"]},"metadata":{},"sourceType":"module"}
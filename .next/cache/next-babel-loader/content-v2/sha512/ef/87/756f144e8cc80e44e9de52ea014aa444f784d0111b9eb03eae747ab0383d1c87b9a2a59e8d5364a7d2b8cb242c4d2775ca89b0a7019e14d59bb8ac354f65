{"ast":null,"code":"import React, { useState } from 'react';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { createSelectOptions, getLabelPermission } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nexport const Role = ({\n  role,\n  permissions,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  var _role$permissions;\n\n  const [permissionsError, setPermissionsError] = useState(false);\n  const [selectedPermissions, setSelectedPermissions] = useState((role === null || role === void 0 ? void 0 : (_role$permissions = role.permissions) === null || _role$permissions === void 0 ? void 0 : _role$permissions.map(permission => ({\n    value: permission,\n    label: getLabelPermission(permission)\n  }))) || null);\n  const [disabled, setDisabled] = useState(true);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => {\n      if ((selectedPermissions === null || selectedPermissions === void 0 ? void 0 : selectedPermissions.length) > 0) {\n        onSubmit({ ...form,\n          permissions: selectedPermissions\n        }, action);\n      } else {\n        setPermissionsError(true);\n      }\n    }\n  }, ({\n    register,\n    loading,\n    errors,\n    getValues\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.name && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0440\\u043E\\u043B\\u0438 \\u0434\\u043E\\u043B\\u0436\\u043D\\u043E \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u043B\\u0430\\u0442\\u0438\\u043D\\u0441\\u043A\\u0438\\u0435 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u044B\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: 'name',\n    ref: register({\n      required: true,\n      pattern: /[A-Za-z]/\n    }),\n    onChange: e => {\n      if (e.target.value === (role === null || role === void 0 ? void 0 : role.name)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    defaultValue: (role === null || role === void 0 ? void 0 : role.name) || getValues('name'),\n    placeholder: 'Название',\n    appearance: 'ghost',\n    disabled: loading\n  }), permissionsError && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u043F\\u0440\\u0438\\u0432\\u0438\\u043B\\u0435\\u0433\\u0438\\u0439 \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u0445\\u043E\\u0442\\u044F \\u0431\\u044B \\u043E\\u0434\\u0438\\u043D \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\"), /*#__PURE__*/React.createElement(Select, {\n    name: 'permissions',\n    appearance: 'ghost',\n    defaultValue: selectedPermissions,\n    onChange: value => {\n      var _role$permissions2;\n\n      setSelectedPermissions(value);\n      setPermissionsError(false);\n\n      if (value.value.length === (role === null || role === void 0 ? void 0 : (_role$permissions2 = role.permissions) === null || _role$permissions2 === void 0 ? void 0 : _role$permissions2.length)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    placeholder: 'Выберите привелегии',\n    options: createSelectOptions(permissions).map(option => ({ ...option,\n      label: getLabelPermission(option.label)\n    })),\n    isLoading: loading,\n    isClearable: true,\n    isMulti: true\n  })), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      flexGrow: 1\n    },\n    type: 'submit',\n    disabled: disabled || loading\n  }, role ? 'Сохранить' : 'Создать'))));\n};\nexport default Role;","map":null,"metadata":{},"sourceType":"module"}
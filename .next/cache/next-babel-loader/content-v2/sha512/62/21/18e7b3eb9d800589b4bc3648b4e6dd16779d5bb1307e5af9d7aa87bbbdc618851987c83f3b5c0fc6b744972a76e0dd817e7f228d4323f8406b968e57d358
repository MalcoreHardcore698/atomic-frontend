{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport Row, { Wrap as WrapRow } from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Image from '../../atomic-ui/components/Image';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nimport Difinition, { MarkedText } from '../../atomic-ui/components/Difinition';\nimport { getLabelRole } from '../../atomic-ui/utils/functions';\nimport { Surface, More } from '../Styled';\nimport CardActions from '../CardActions';\nimport { ResponsibleMark, hasResponsibleMember } from '../Members';\nimport { onUserDelete, onUserEdit } from '../../store/helpers/user';\nimport { useEntityQuery } from '../../hooks/useEntityQuery';\nimport { useHelper } from '../../hooks/useHelper';\nimport queries from '../../graphql/queries';\nimport config from '../../config';\nconst HOST_URL = config.get('host-url');\nexport const Wrap = styled(Surface).withConfig({\n  displayName: \"UserCard__Wrap\",\n  componentId: \"bx733i-0\"\n})([\"grid-gap:var(--default-gap);\", \"\"], ({\n  layout\n}) => layout === 'column' && css([\"display:flex;flex-wrap:wrap;\"]));\nexport const Content = styled(Row).withConfig({\n  displayName: \"UserCard__Content\",\n  componentId: \"bx733i-1\"\n})([\"display:grid;grid-template-columns:120px 1fr;grid-template-rows:175px;@media only screen and (max-width:480px){display:flex;flex-direction:column;grid-gap:var(--default-gap);}\"]);\nexport const Avatar = styled(Image).withConfig({\n  displayName: \"UserCard__Avatar\",\n  componentId: \"bx733i-2\"\n})([\"position:relative;width:100%;height:100%;border-radius:var(--surface-border-radius);border:1px solid var(--ghost-color-background);overflow:hidden;object-fit:cover;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"UserCard__Header\",\n  componentId: \"bx733i-3\"\n})([\"justify-content:space-between;align-items:center;\"]);\nexport const Actions = styled(Row).withConfig({\n  displayName: \"UserCard__Actions\",\n  componentId: \"bx733i-4\"\n})([\"grid-gap:5px;height:100%;\"]);\nexport const Name = styled(Title).withConfig({\n  displayName: \"UserCard__Name\",\n  componentId: \"bx733i-5\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\nexport const About = styled.div.withConfig({\n  displayName: \"UserCard__About\",\n  componentId: \"bx733i-6\"\n})([\"font-size:var(--font-size-m);\"]);\nexport const Indicator = styled(Difinition).withConfig({\n  displayName: \"UserCard__Indicator\",\n  componentId: \"bx733i-7\"\n})([\"align-items:flex-end;flex-grow:10;height:100%;\"]);\nexport const Footer = styled(Row).withConfig({\n  displayName: \"UserCard__Footer\",\n  componentId: \"bx733i-8\"\n})([\"justify-content:space-between;grid-column:1 / 3;@media only screen and (max-width:480px){display:flex;flex-direction:column;grid-gap:var(--default-gap);\", \"{flex-grow:1;\", \"{flex-grow:1;button{width:100%;}}}}\"], WrapRow, WrapTooltip);\nexport const Card = ({\n  user,\n  preview,\n  owned,\n  added,\n  style,\n  checked,\n  className,\n  appearance,\n  onAdd,\n  onLink,\n  onChat,\n  onMembers,\n  onAboutMore,\n  onCompanyLink,\n  onChecked,\n  onEdit,\n  onDelete,\n  withSocials\n}) => {\n  var _user$avatar, _user$about, _user$projects, _user$company, _user$company$avatar, _user$company2;\n\n  const recall = useHelper();\n  const {\n    setQuery\n  } = useEntityQuery();\n  const auth = useSelector(state => state.user);\n  const [isAdded, setAdded] = useState(added);\n  const canEditRole = useMemo(() => {\n    var _auth$role;\n\n    return auth && (auth === null || auth === void 0 ? void 0 : (_auth$role = auth.role) === null || _auth$role === void 0 ? void 0 : _auth$role.name) === 'ADMIN';\n  }, [auth]);\n\n  const onClickAdd = () => {\n    if (onAdd) onAdd();\n    setAdded(!isAdded);\n  };\n\n  const handleEdit = () => {\n    recall(onUserEdit, {\n      user: user === null || user === void 0 ? void 0 : user.email,\n      auth: auth === null || auth === void 0 ? void 0 : auth.email,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      }\n    })();\n    if (onEdit) onEdit();\n  };\n\n  const handleDelete = () => {\n    recall(onUserDelete, {\n      id: user === null || user === void 0 ? void 0 : user.email,\n      user,\n      auth: auth === null || auth === void 0 ? void 0 : auth.email,\n      mutation: queries.DELETE_USER\n    })();\n    if (onDelete) onDelete();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    checked: checked,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Avatar, {\n    src: (user === null || user === void 0 ? void 0 : (_user$avatar = user.avatar) === null || _user$avatar === void 0 ? void 0 : _user$avatar.path) || '/images/avatar-default.png',\n    alt: user === null || user === void 0 ? void 0 : user.name,\n    effect: 'opacity',\n    layout: 'fill'\n  }), /*#__PURE__*/React.createElement(Column, {\n    style: {\n      gridGap: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(MarkedText, null, /*#__PURE__*/React.createElement(Meta, {\n    shareTitle: withSocials && (user === null || user === void 0 ? void 0 : user.name),\n    shareUrl: false && withSocials ? location.href : HOST_URL,\n    category: getLabelRole(user === null || user === void 0 ? void 0 : user.account)\n  }), hasResponsibleMember(user) && /*#__PURE__*/React.createElement(ResponsibleMark, null)), /*#__PURE__*/React.createElement(CardActions, {\n    typeText: 'категорию',\n    checked: checked,\n    onEdit: onEdit && handleEdit,\n    onDelete: onDelete && handleDelete,\n    onChecked: onChecked\n  })), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: () => setQuery(user === null || user === void 0 ? void 0 : user.email, 'user', onLink)\n  }, user === null || user === void 0 ? void 0 : user.name), /*#__PURE__*/React.createElement(About, null, (user === null || user === void 0 ? void 0 : (_user$about = user.about) === null || _user$about === void 0 ? void 0 : _user$about.length) > 135 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Text, null, user === null || user === void 0 ? void 0 : user.about.slice(0, 100), \"...\"), /*#__PURE__*/React.createElement(More, {\n    onClick: onAboutMore\n  }, \"\\u041F\\u043E\\u0434\\u0440\\u043E\\u0431\\u043D\\u0435\\u0435\")) : /*#__PURE__*/React.createElement(Text, null, (user === null || user === void 0 ? void 0 : user.about) || 'Информация о себе не заполнена')), (user === null || user === void 0 ? void 0 : user.projects) && /*#__PURE__*/React.createElement(Indicator, {\n    icon: 'work',\n    label: 'Проекты',\n    text: user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.length\n  }))), !preview && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Footer, null, (user === null || user === void 0 ? void 0 : user.account) === 'ENTITY' ? /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'user2',\n    label: 'Участники',\n    text: user === null || user === void 0 ? void 0 : user.members,\n    onLink: (user === null || user === void 0 ? void 0 : user.members) && onMembers\n  }) : /*#__PURE__*/React.createElement(Difinition, _extends({}, user !== null && user !== void 0 && user.company ? {\n    img: user === null || user === void 0 ? void 0 : (_user$company = user.company) === null || _user$company === void 0 ? void 0 : (_user$company$avatar = _user$company.avatar) === null || _user$company$avatar === void 0 ? void 0 : _user$company$avatar.path\n  } : {\n    icon: 'work'\n  }, {\n    label: 'Компания',\n    text: (user === null || user === void 0 ? void 0 : (_user$company2 = user.company) === null || _user$company2 === void 0 ? void 0 : _user$company2.name) || '-',\n    onLink: (user === null || user === void 0 ? void 0 : user.company) && onCompanyLink && (() => {\n      var _user$company3;\n\n      return setQuery(user === null || user === void 0 ? void 0 : (_user$company3 = user.company) === null || _user$company3 === void 0 ? void 0 : _user$company3.email, 'user', onCompanyLink);\n    })\n  })), !owned && (onChat || onAdd) && /*#__PURE__*/React.createElement(Row, null, onChat && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Написать пользователю'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    appearance: 'green',\n    onClick: onChat,\n    revert: true\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'chat',\n    stroke: 'var(--default-color-green)'\n  }))), onAdd && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Подписаться на пользователя'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onClickAdd,\n    revert: !isAdded\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: isAdded ? 'check' : 'add',\n    stroke: isAdded ? 'white' : 'var(--default-color-accent)'\n  })))))));\n};\nCard.defaultProps = {\n  appearance: 'default'\n};\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport Tooltip from '../Tooltip';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"Switch__Wrap\",\n  componentId: \"sc-13eyhlh-0\"\n})([\"display:flex;justify-content:space-between;width:min-content;min-width:240px;\"]);\nexport const Track = styled.div.withConfig({\n  displayName: \"Switch__Track\",\n  componentId: \"sc-13eyhlh-1\"\n})([\"position:relative;display:flex;border-radius:var(--surface-border-radius);background:var(--ghost-color-background);padding:3px;width:100%;height:var(--input-height-m);\", \" \", \" @media only screen and (max-width:480px){flex-direction:column;height:auto;}\"], ({\n  unary\n}) => unary && css([\"width:48px;height:24px;border-radius:25rem;cursor:pointer;\"]), ({\n  stretch\n}) => stretch && css([\"flex-grow:1;width:100%;\"]));\nexport const Label = styled.p.withConfig({\n  displayName: \"Switch__Label\",\n  componentId: \"sc-13eyhlh-2\"\n})([\"font-size:var(--font-size-m);font-weight:var(--font-weight-regular);\"]);\nexport const LabeledToggle = styled.span.withConfig({\n  displayName: \"Switch__LabeledToggle\",\n  componentId: \"sc-13eyhlh-3\"\n})([\"display:flex;justify-content:center;align-items:center;border:var(--surface-border);background:none;box-shadow:none;color:var(--ghost-color-text);font-size:var(--font-size-m);font-weight:var(--font-weight-medium);white-space:nowrap;padding:0 15px;cursor:pointer;flex-grow:1;width:\", \";svg{path,circle{stroke:var(--ghost-color-text);}}\", \" @media only screen and (max-width:480px){height:var(--input-height-m);}\"], ({\n  width\n}) => width, ({\n  active\n}) => active && css([\"border-radius:var(--surface-border-radius);background:var(--surface-background);box-shadow:var(--surface-box-shadow);color:var(--default-color-accent);svg{path,circle{stroke:var(--default-color-accent);}}\"]));\nexport const Toggle = styled.span.withConfig({\n  displayName: \"Switch__Toggle\",\n  componentId: \"sc-13eyhlh-4\"\n})([\"position:absolute;left:4px;display:flex;justify-content:center;align-items:center;width:18px;height:18px;border-radius:50%;background:var(--ghost-color-text);box-shadow:var(--surface-box-shadow);transition:left 150ms ease;\", \"\"], ({\n  active\n}) => active && css([\"left:26px;background:var(--default-color-accent);\"]));\nexport const Switch = ({\n  label,\n  options,\n  ltr,\n  rtl,\n  defaultValue,\n  className,\n  style,\n  onChange\n}) => {\n  const list = options || [0, 1];\n  const [selected, setSelected] = useState(defaultValue);\n\n  const onClick = item => {\n    setSelected(item);\n    if (onChange) onChange(item);\n  };\n\n  const renderLabeledToggle = (item, key) => /*#__PURE__*/React.createElement(LabeledToggle, {\n    key: key,\n    width: item.width || 'auto',\n    active: selected && item.value === selected.value,\n    onClick: () => onClick(item)\n  }, item.label);\n\n  return options && options.length > 0 ? /*#__PURE__*/React.createElement(Track, {\n    className: className,\n    style: style\n  }, list.map((item, index) => item.tooltip ? /*#__PURE__*/React.createElement(Tooltip, {\n    key: index,\n    style: {\n      flexGrow: 1\n    },\n    text: item.tooltip\n  }, renderLabeledToggle(item)) : renderLabeledToggle(item, index))) : /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    onClick: () => onClick(!selected)\n  }, ltr && !rtl && /*#__PURE__*/React.createElement(Label, null, label), /*#__PURE__*/React.createElement(Track, {\n    unary: true\n  }, /*#__PURE__*/React.createElement(Toggle, {\n    active: selected\n  })), rtl && /*#__PURE__*/React.createElement(Label, null, label));\n};\nSwitch.defaultProps = {\n  label: 'Enable good mood',\n  ltr: true\n};\nexport default Switch;","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/Switch/index.js"],"names":["React","useState","styled","css","Tooltip","Wrap","div","Track","unary","stretch","Label","p","LabeledToggle","span","width","active","Toggle","Switch","label","options","ltr","rtl","defaultValue","className","style","onChange","list","selected","setSelected","onClick","item","renderLabeledToggle","key","value","length","map","index","tooltip","flexGrow","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Tooltip from '../Tooltip'\n\nexport const Wrap = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: min-content;\n  min-width: 240px;\n`\n\nexport const Track = styled.div`\n  position: relative;\n  display: flex;\n  border-radius: var(--surface-border-radius);\n  background: var(--ghost-color-background);\n  padding: 3px;\n  width: 100%;\n  height: var(--input-height-m);\n\n  ${({ unary }) =>\n    unary &&\n    css`\n      width: 48px;\n      height: 24px;\n      border-radius: 25rem;\n      cursor: pointer;\n    `}\n\n  ${({ stretch }) =>\n    stretch &&\n    css`\n      flex-grow: 1;\n      width: 100%;\n    `}\n  \n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n    height: auto;\n  }\n`\n\nexport const Label = styled.p`\n  font-size: var(--font-size-m);\n  font-weight: var(--font-weight-regular);\n`\n\nexport const LabeledToggle = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: var(--surface-border);\n  background: none;\n  box-shadow: none;\n  color: var(--ghost-color-text);\n  font-size: var(--font-size-m);\n  font-weight: var(--font-weight-medium);\n  white-space: nowrap;\n  padding: 0 15px;\n  cursor: pointer;\n  flex-grow: 1;\n\n  width: ${({ width }) => width};\n\n  svg {\n    path,\n    circle {\n      stroke: var(--ghost-color-text);\n    }\n  }\n\n  ${({ active }) =>\n    active &&\n    css`\n      border-radius: var(--surface-border-radius);\n      background: var(--surface-background);\n      box-shadow: var(--surface-box-shadow);\n      color: var(--default-color-accent);\n\n      svg {\n        path,\n        circle {\n          stroke: var(--default-color-accent);\n        }\n      }\n    `}\n\n  @media only screen and (max-width: 480px) {\n    height: var(--input-height-m);\n  }\n`\n\nexport const Toggle = styled.span`\n  position: absolute;\n  left: 4px;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 18px;\n  height: 18px;\n\n  border-radius: 50%;\n  background: var(--ghost-color-text);\n  box-shadow: var(--surface-box-shadow);\n  transition: left 150ms ease;\n\n  ${({ active }) =>\n    active &&\n    css`\n      left: 26px;\n      background: var(--default-color-accent);\n    `}\n`\n\nexport const Switch = ({ label, options, ltr, rtl, defaultValue, className, style, onChange }) => {\n  const list = options || [0, 1]\n  const [selected, setSelected] = useState(defaultValue)\n\n  const onClick = (item) => {\n    setSelected(item)\n    if (onChange) onChange(item)\n  }\n\n  const renderLabeledToggle = (item, key) => (\n    <LabeledToggle\n      key={key}\n      width={item.width || 'auto'}\n      active={selected && item.value === selected.value}\n      onClick={() => onClick(item)}>\n      {item.label}\n    </LabeledToggle>\n  )\n\n  return options && options.length > 0 ? (\n    <Track className={className} style={style}>\n      {list.map((item, index) =>\n        item.tooltip ? (\n          <Tooltip key={index} style={{ flexGrow: 1 }} text={item.tooltip}>\n            {renderLabeledToggle(item)}\n          </Tooltip>\n        ) : (\n          renderLabeledToggle(item, index)\n        )\n      )}\n    </Track>\n  ) : (\n    <Wrap className={className} style={style} onClick={() => onClick(!selected)}>\n      {ltr && !rtl && <Label>{label}</Label>}\n      <Track unary>\n        <Toggle active={selected} />\n      </Track>\n      {rtl && <Label>{label}</Label>}\n    </Wrap>\n  )\n}\n\nSwitch.defaultProps = {\n  label: 'Enable good mood',\n  ltr: true\n}\n\nexport default Switch\n"]},"metadata":{},"sourceType":"module"}
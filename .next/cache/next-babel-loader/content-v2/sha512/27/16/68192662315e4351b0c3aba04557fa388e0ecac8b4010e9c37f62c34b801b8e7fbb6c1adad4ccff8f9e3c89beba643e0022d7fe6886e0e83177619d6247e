{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentPage } from '../store/actions/root';\nimport { onArticleCreate } from '../store/helpers/article';\nimport { onProjectCreate } from '../store/helpers/project';\nimport { onUserClientEdit } from '../store/helpers/user';\nimport { useHelper } from './useHelper';\nimport { useSearch } from './useSearch';\nimport { useUser } from './useUser';\nimport queries from '../graphql/queries';\nexport const useProfile = ({\n  isManage\n} = {}) => {\n  const recall = useHelper();\n  const [onSearch] = useSearch();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    onAboutMore,\n    onMembers,\n    onCompanyLink\n  } = useUser({\n    isManage\n  });\n\n  const onChangePage = item => {\n    onSearch(null, null);\n    dispatch(setCurrentPage(item.value));\n  };\n\n  const onPurposeProject = useCallback(() => {\n    recall(onProjectCreate, {\n      mutation: queries.CREATE_PROJECT,\n      query: queries.GET_USERS,\n      isPurpose: true\n    })();\n  }, [recall]);\n  const onPurposeArticle = useCallback(() => {\n    recall(onArticleCreate, {\n      mutation: queries.CREATE_ARTICLE,\n      isPurpose: true\n    })();\n  }, [recall]);\n  const onEdit = useCallback(() => {\n    recall(onUserClientEdit, {\n      user: user === null || user === void 0 ? void 0 : user.email,\n      mutations: {\n        del: queries.DELETE_USER,\n        forgotEmail: queries.LOGIN,\n        forgotPassword: queries.RESET,\n        changePassword: queries.UPDATE_CLIENT_USER,\n        checkResetToken: queries.CHECK_RESET_TOKEN,\n        update: queries.UPDATE_CLIENT_USER\n      }\n    })();\n  }, [user, recall]);\n  return {\n    user,\n    onChangePage,\n    onCompanyLink,\n    onPurposeProject,\n    onPurposeArticle,\n    onAboutMore,\n    onMembers,\n    onEdit\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
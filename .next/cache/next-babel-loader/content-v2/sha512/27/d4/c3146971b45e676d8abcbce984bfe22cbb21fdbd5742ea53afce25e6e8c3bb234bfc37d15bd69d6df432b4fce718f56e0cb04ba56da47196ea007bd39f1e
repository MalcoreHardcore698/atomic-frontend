{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport Column from '../atomic-ui/components/Column';\nimport Switch from '../atomic-ui/components/Switch';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport { hasAccess } from '../atomic-ui/utils/functions';\nimport DefaultLayout from '../layouts/default';\nimport UserBar from '../components/UserBar';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport PageRouter from '../components/Profile/PageRouter';\nimport { hasResponsibleMember } from '../components/Members';\nimport { Loader } from '../components/Styled';\nimport { useProfile } from '../hooks/useProfile';\nimport { profilePages } from '../__mock__';\nconst TITLE = 'Профиль';\nconst DISABLED_FILTERS = true;\n\nconst Profile = () => {\n  _s();\n\n  const router = useRouter();\n  const {\n    onChangePage,\n    onChangeVisibleFilters,\n    onAddProject,\n    onAddArticle,\n    onCompanyLink,\n    onAboutMore,\n    onMembers,\n    onEdit\n  } = useProfile();\n  const {\n    user,\n    search,\n    currentPage,\n    visibleFilters\n  } = useSelector(state => ({\n    user: state.user,\n    search: state.root.search,\n    currentPage: state.root.currentPage,\n    visibleFilters: state.root.visibleFilters\n  }));\n  const isProjects = useMemo(() => currentPage.value === '/projects', [currentPage]);\n  const isArticles = useMemo(() => currentPage.value === '/articles', [currentPage]);\n  const defaultCurrentPage = useMemo(() => profilePages.find(page => page.value === currentPage), [currentPage]);\n  const buttonCreateText = useMemo(() => isProjects ? 'Предложить проект' : isArticles ? 'Предложить статью' : '', [isProjects, isArticles]);\n  const pages = useMemo(() => profilePages.filter(page => !hasResponsibleMember(user) ? page.value !== 'articles' : true), [user, profilePages]);\n  const getCreateMethod = useCallback(() => {\n    if (isProjects && hasAccess(user, 'PURPOSE_PROJECT')) return onAddProject;\n    if (isArticles && hasAccess(user, 'PURPOSE_ARTICLE')) return onAddArticle;\n  }, [user, isProjects, isArticles, onAddProject, onAddArticle]);\n  useEffect(() => {\n    if (!user.authenticated) {\n      router.push({\n        pathname: '/auth',\n        query: router.query\n      });\n    }\n  }, [user]);\n  useEffect(() => {\n    const {\n      page\n    } = router.query;\n    if (page) onChangePage({\n      value: page\n    });\n  }, [router]);\n\n  if (!user.authenticated) {\n    return /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: user.authenticated ? user.name || TITLE : 'Авторизация'\n  }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(UserBar, {\n    user: user,\n    onAboutMore: onAboutMore,\n    onCompanyLink: onCompanyLink,\n    onMembers: onMembers,\n    onEdit: onEdit\n  }), /*#__PURE__*/React.createElement(Switch, {\n    options: pages,\n    defaultValue: defaultCurrentPage,\n    onChange: onChangePage,\n    stretch: true\n  }), /*#__PURE__*/React.createElement(SearchBar, {\n    defaultValue: search,\n    buttonCreateText: buttonCreateText,\n    onChangeFilter: !DISABLED_FILTERS && onChangeVisibleFilters,\n    onCreate: getCreateMethod()\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilters,\n    filters: [],\n    options: []\n  }), /*#__PURE__*/React.createElement(PageRouter, {\n    page: currentPage\n  })));\n};\n\n_s(Profile, \"YGBio/eKCKd/knHyUs1+l7vOuKI=\", false, function () {\n  return [useRouter, useProfile, useSelector];\n});\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/pages/profile.js"],"names":["React","useEffect","useMemo","useCallback","useSelector","useRouter","Column","Switch","Spinner","hasAccess","DefaultLayout","UserBar","FilterBar","SearchBar","PageRouter","hasResponsibleMember","Loader","useProfile","profilePages","TITLE","DISABLED_FILTERS","Profile","router","onChangePage","onChangeVisibleFilters","onAddProject","onAddArticle","onCompanyLink","onAboutMore","onMembers","onEdit","user","search","currentPage","visibleFilters","state","root","isProjects","value","isArticles","defaultCurrentPage","find","page","buttonCreateText","pages","filter","getCreateMethod","authenticated","push","pathname","query","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useCallback } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useRouter } from 'next/router'\n\nimport Column from '../atomic-ui/components/Column'\nimport Switch from '../atomic-ui/components/Switch'\nimport Spinner from '../atomic-ui/components/Spinner'\nimport { hasAccess } from '../atomic-ui/utils/functions'\n\nimport DefaultLayout from '../layouts/default'\nimport UserBar from '../components/UserBar'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport PageRouter from '../components/Profile/PageRouter'\nimport { hasResponsibleMember } from '../components/Members'\nimport { Loader } from '../components/Styled'\nimport { useProfile } from '../hooks/useProfile'\nimport { profilePages } from '../__mock__'\n\nconst TITLE = 'Профиль'\n\nconst DISABLED_FILTERS = true\n\nconst Profile = () => {\n  const router = useRouter()\n\n  const {\n    onChangePage,\n    onChangeVisibleFilters,\n    onAddProject,\n    onAddArticle,\n    onCompanyLink,\n    onAboutMore,\n    onMembers,\n    onEdit\n  } = useProfile()\n\n  const { user, search, currentPage, visibleFilters } = useSelector((state) => ({\n    user: state.user,\n    search: state.root.search,\n    currentPage: state.root.currentPage,\n    visibleFilters: state.root.visibleFilters\n  }))\n\n  const isProjects = useMemo(() => currentPage.value === '/projects', [currentPage])\n  const isArticles = useMemo(() => currentPage.value === '/articles', [currentPage])\n\n  const defaultCurrentPage = useMemo(\n    () => profilePages.find((page) => page.value === currentPage),\n    [currentPage]\n  )\n\n  const buttonCreateText = useMemo(\n    () => (isProjects ? 'Предложить проект' : isArticles ? 'Предложить статью' : ''),\n    [isProjects, isArticles]\n  )\n\n  const pages = useMemo(\n    () =>\n      profilePages.filter((page) =>\n        !hasResponsibleMember(user) ? page.value !== 'articles' : true\n      ),\n    [user, profilePages]\n  )\n\n  const getCreateMethod = useCallback(() => {\n    if (isProjects && hasAccess(user, 'PURPOSE_PROJECT')) return onAddProject\n    if (isArticles && hasAccess(user, 'PURPOSE_ARTICLE')) return onAddArticle\n  }, [user, isProjects, isArticles, onAddProject, onAddArticle])\n\n  useEffect(() => {\n    if (!user.authenticated) {\n      router.push({ pathname: '/auth', query: router.query })\n    }\n  }, [user])\n\n  useEffect(() => {\n    const { page } = router.query\n    if (page) onChangePage({ value: page })\n  }, [router])\n\n  if (!user.authenticated) {\n    return (\n      <Loader>\n        <Spinner />\n      </Loader>\n    )\n  }\n\n  return (\n    <DefaultLayout title={user.authenticated ? user.name || TITLE : 'Авторизация'}>\n      <Column>\n        <UserBar\n          user={user}\n          onAboutMore={onAboutMore}\n          onCompanyLink={onCompanyLink}\n          onMembers={onMembers}\n          onEdit={onEdit}\n        />\n\n        <Switch options={pages} defaultValue={defaultCurrentPage} onChange={onChangePage} stretch />\n\n        <SearchBar\n          defaultValue={search}\n          buttonCreateText={buttonCreateText}\n          onChangeFilter={!DISABLED_FILTERS && onChangeVisibleFilters}\n          onCreate={getCreateMethod()}\n        />\n\n        <FilterBar isOpen={visibleFilters} filters={[]} options={[]} />\n\n        <PageRouter page={currentPage} />\n      </Column>\n    </DefaultLayout>\n  )\n}\n\nexport default Profile\n"]},"metadata":{},"sourceType":"module"}
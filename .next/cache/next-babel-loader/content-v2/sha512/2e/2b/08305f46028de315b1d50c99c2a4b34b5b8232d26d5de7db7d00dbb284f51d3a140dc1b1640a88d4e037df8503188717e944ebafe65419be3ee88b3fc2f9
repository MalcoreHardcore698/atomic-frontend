{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport AsyncSelect, { components } from 'react-select';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"Select__Wrap\",\n  componentId: \"sc-1ame639-0\"\n})([\"min-width:128px;\"]);\nconst surface = {\n  background: 'white',\n  border: 'var(--surface-border)',\n  boxShadow: 'var(--surface-shadow)',\n  borderRadius: 'var(--surface-border-radius)'\n};\nconst ghost = {\n  background: 'var(--input-background)',\n  border: 'none',\n  boxShadow: 'none',\n  borderRadius: 'var(--surface-border-radius)'\n};\nconst font = {\n  fontSize: 'var(--font-size-m)',\n  fontWeight: 'var(--font-weight-regular)',\n  fontFamily: 'var(--font-family)'\n};\nexport const Menu = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ui-select-menu\"\n  }, /*#__PURE__*/React.createElement(components.Menu, props, props.children));\n};\nexport const Select = ({\n  appearance,\n  className,\n  style,\n  ...props\n}) => /*#__PURE__*/React.createElement(Wrap, {\n  className: className,\n  style: style\n}, /*#__PURE__*/React.createElement(AsyncSelect, _extends({}, props, {\n  styles: {\n    control: (provided, state) => ({ ...provided,\n      ...(appearance === 'ghost' ? ghost : surface),\n      ...font,\n      minHeight: '38px',\n      padding: '0 5px',\n      color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-color)' : 'var(--ghost-color-text)',\n      cursor: 'pointer',\n      transition: 'all 150ms ease'\n    }),\n    valueContainer: provided => ({ ...provided,\n      padding: '5px'\n    }),\n    singleValue: (provided, state) => ({ ...provided,\n      ...(appearance === 'ghost' ? ghost : surface),\n      ...font,\n      color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-color)' : 'var(--ghost-color-text)',\n      transition: 'all 150ms ease'\n    }),\n    placeholder: (provided, state) => ({ ...provided,\n      color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-placeholder-color)' : 'var(--ghost-color-text)',\n      transition: 'all 150ms ease'\n    }),\n    menu: provided => ({ ...provided,\n      ...surface,\n      boxShadow: 'var(--default-shadow)',\n      zIndex: 'var(--z-102)',\n      ...font\n    }),\n    option: (provided, state) => ({ ...provided,\n      ...font,\n      color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-color)' : 'rgba(0, 0, 0, 75%)',\n      background: 'none !important',\n      cursor: 'pointer',\n      transition: 'all 150ms ease'\n    }),\n    multiValue: provided => ({ ...provided,\n      borderRadius: '5px',\n      background: 'var(--default-color-accent)',\n      color: 'white'\n    }),\n    multiValueLabel: provided => ({ ...provided,\n      ...font,\n      color: 'white',\n      fontSize: 'var(--font-size-xs)'\n    })\n  },\n  components: {\n    Menu\n  }\n})));\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}
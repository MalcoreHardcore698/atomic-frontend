{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContentLayout from '../layouts/content';\nimport ProjectCard from '../components/ProjectCard';\nimport { onProjectAdd, onProjectRemove, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user';\nimport { setUserFolder, updateUser } from '../store/actions/user';\nimport { useHelper } from '../hooks/useHelper';\nimport { useMutate } from '../hooks/useMutate';\nimport queries from '../graphql/queries';\nconst TITLE = 'Проекты';\nconst START_OFFSET = 0;\nconst LIMIT = 4;\n\nconst Projects = () => {\n  var _router$query;\n\n  const router = useRouter();\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder,\n    search: state.root.search\n  }));\n  const dispatch = useDispatch();\n  const onAdd = useCallback(project => recall(onProjectAdd, {\n    id: project.id,\n    folders: user === null || user === void 0 ? void 0 : user.folders,\n    mutations: {\n      addProject: queries.ADD_USER_PROJECT,\n      createFolder: queries.ADD_USER_FOLDER\n    },\n    callback: item => {\n      const result = { ...item,\n        projects: [...item.projects, project.id]\n      };\n      dispatch(setUserFolder(result));\n    }\n  })(), [user]);\n  const onRemove = useCallback(project => recall(onProjectRemove, {\n    id: project.id,\n    folder,\n    mutation: queries.REMOVE_USER_PROJECT\n  })(), [user]);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    getType: 'getProjects',\n    getQuery: queries.GET_PROJECTS,\n    emptyMessage: 'Проектов нет',\n    startOffsett: START_OFFSET,\n    variables: {\n      category: (_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.c,\n      status: 'PUBLISHED'\n    },\n    render: document => {\n      var _user$folders, _document$company;\n\n      return /*#__PURE__*/React.createElement(ProjectCard, {\n        project: document,\n        added: !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === item.id)))),\n        liked: !!(document.rating || []).find(item => item.email === user.email),\n        onLike: user.email && mutate(queries.LIKE_PROJECT, {\n          id: document.id\n        }, response => dispatch(updateUser(response.data.likeProject))),\n        onAdd: user.email && (() => onAdd(document)),\n        onRemove: user.email && (() => onRemove(document)),\n        onAboutMore: recall(onUserAboutMore, {\n          user: document\n        }),\n        onCompanyLink: recall(onUserLink, {\n          id: (_document$company = document.company) === null || _document$company === void 0 ? void 0 : _document$company.email,\n          auth: user === null || user === void 0 ? void 0 : user.email,\n          recipient: document.author,\n          query: queries.GET_USER_CHATS,\n          mutation: queries.SEND_MESSAGE\n        }),\n        onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n          screenshots: [document.preview, ...document.screenshots],\n          key\n        })(),\n        withSocials: true\n      });\n    }\n  });\n};\n\nexport default Projects;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/projects.js"],"names":["React","useCallback","useRouter","useDispatch","useSelector","ContentLayout","ProjectCard","onProjectAdd","onProjectRemove","onProjectScreenshot","onUserAboutMore","onUserLink","setUserFolder","updateUser","useHelper","useMutate","queries","TITLE","START_OFFSET","LIMIT","Projects","router","recall","mutate","user","folder","state","root","search","dispatch","onAdd","project","id","folders","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","callback","item","result","projects","onRemove","mutation","REMOVE_USER_PROJECT","GET_PROJECTS","category","query","c","status","document","find","rating","email","LIKE_PROJECT","response","data","likeProject","company","auth","recipient","author","GET_USER_CHATS","SEND_MESSAGE","_","key","screenshots","preview"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\nimport { useRouter } from 'next/router'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ContentLayout from '../layouts/content'\nimport ProjectCard from '../components/ProjectCard'\nimport { onProjectAdd, onProjectRemove, onProjectScreenshot } from '../store/helpers/project'\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user'\nimport { setUserFolder, updateUser } from '../store/actions/user'\nimport { useHelper } from '../hooks/useHelper'\nimport { useMutate } from '../hooks/useMutate'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Проекты'\nconst START_OFFSET = 0\nconst LIMIT = 4\n\nconst Projects = () => {\n  const router = useRouter()\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder,\n    search: state.root.search\n  }))\n  const dispatch = useDispatch()\n\n  const onAdd = useCallback(\n    (project) =>\n      recall(onProjectAdd, {\n        id: project.id,\n        folders: user?.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        },\n        callback: (item) => {\n          const result = { ...item, projects: [...item.projects, project.id] }\n          dispatch(setUserFolder(result))\n        }\n      })(),\n    [user]\n  )\n\n  const onRemove = useCallback(\n    (project) =>\n      recall(onProjectRemove, {\n        id: project.id,\n        folder,\n        mutation: queries.REMOVE_USER_PROJECT\n      })(),\n    [user]\n  )\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      limit={LIMIT}\n      getType={'getProjects'}\n      getQuery={queries.GET_PROJECTS}\n      emptyMessage={'Проектов нет'}\n      startOffsett={START_OFFSET}\n      variables={{ category: router.query?.c, status: 'PUBLISHED' }}\n      render={(document) => (\n        <ProjectCard\n          project={document}\n          added={\n            !!user?.folders?.find((folder) => !!folder?.projects.find((item) => item === item.id))\n          }\n          liked={!!(document.rating || []).find((item) => item.email === user.email)}\n          onLike={\n            user.email &&\n            mutate(queries.LIKE_PROJECT, { id: document.id }, (response) =>\n              dispatch(updateUser(response.data.likeProject))\n            )\n          }\n          onAdd={user.email && (() => onAdd(document))}\n          onRemove={user.email && (() => onRemove(document))}\n          onAboutMore={recall(onUserAboutMore, { user: document })}\n          onCompanyLink={recall(onUserLink, {\n            id: document.company?.email,\n            auth: user?.email,\n            recipient: document.author,\n            query: queries.GET_USER_CHATS,\n            mutation: queries.SEND_MESSAGE\n          })}\n          onScreenshotClick={(_, key) =>\n            recall(onProjectScreenshot, {\n              screenshots: [document.preview, ...document.screenshots],\n              key\n            })()\n          }\n          withSocials\n        />\n      )}\n    />\n  )\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
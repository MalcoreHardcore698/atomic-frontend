{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport List from '../List';\nimport ProjectCard from '../ProjectCard';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport { Card } from '../../layouts/dashboard/content';\nimport { setUserFolder, updateUser } from '../../store/actions/user';\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user';\nimport { onProjectAdd, onProjectRemove, onProjectLink, onProjectScreenshot } from '../../store/helpers/project';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"ProjectList__Wrap\",\n  componentId: \"zcwfmw-0\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);grid-auto-rows:max-content;@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\n_c = Wrap;\nexport const ProjectList = ({\n  variables,\n  layout,\n  eliminable,\n  initialList,\n  initialRefetch\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const [projects, setProjects] = useState(initialList || []);\n  const dispatch = useDispatch();\n  const {\n    data,\n    loading\n  } = initialList ? {\n    data: null,\n    loading: false,\n    error: false\n  } : useQuery(queries.GET_PROJECTS, {\n    variables\n  });\n  const onAdd = useCallback(project => recall(onProjectAdd, {\n    id: project.id,\n    folders: user === null || user === void 0 ? void 0 : user.folders,\n    mutations: {\n      addProject: queries.ADD_USER_PROJECT,\n      createFolder: queries.ADD_USER_FOLDER\n    },\n    callback: item => {\n      const result = { ...item,\n        projects: [...item.projects, project.id]\n      };\n      dispatch(setUserFolder(result));\n    }\n  })(), [user]);\n  const onRemove = useCallback(project => recall(onProjectRemove, {\n    id: project.id,\n    folder,\n    mutation: queries.REMOVE_USER_PROJECT,\n    callback: () => initialRefetch && initialRefetch(projects.filter(pr => pr.id !== project.id).map(pr => pr.id))\n  })(), [user]);\n  useEffect(() => {\n    if (!loading && data) {\n      setProjects(data.getProjects);\n    }\n  }, [data, loading]);\n  useEffect(() => {\n    if (!loading && (initialList === null || initialList === void 0 ? void 0 : initialList.length) > 0) setProjects(initialList);\n  }, [loading, initialList]);\n  return /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(List, {\n    type: 'getProjects',\n    query: queries.GET_PROJECTS,\n    variables: {\n      status: 'PUBLISHED'\n    },\n    component: item => {\n      var _user$projects, _user$folders, _user$folders2, _item$company;\n\n      const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === item.id);\n      return /*#__PURE__*/React.createElement(Card, {\n        item: item,\n        component: /*#__PURE__*/React.createElement(ProjectCard, {\n          project: item,\n          eliminable: eliminable,\n          layout: layout || 'column',\n          owned: owned,\n          added: !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === item.id)))),\n          liked: !!(item.rating || []).find(item => item.email === user.email),\n          onLink: recall(onProjectLink, {\n            id: item.id,\n            auth: user === null || user === void 0 ? void 0 : user.email,\n            added: !!(user !== null && user !== void 0 && (_user$folders2 = user.folders) !== null && _user$folders2 !== void 0 && _user$folders2.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === item.id)))),\n            liked: !!(item.rating || []).find(item => item.email === user.email),\n            onLike: user.email && mutate(queries.LIKE_PROJECT, {\n              id: item.id\n            }, response => dispatch(updateUser(response.data.likeProject))),\n            onAdd: user.email && recall(onProjectAdd, {\n              id: item.id,\n              folders: user === null || user === void 0 ? void 0 : user.folders,\n              mutations: {\n                addProject: queries.ADD_USER_PROJECT,\n                createFolder: queries.ADD_USER_FOLDER\n              },\n              callback: item => {\n                const result = { ...item,\n                  projects: [...item.projects, item.id]\n                };\n                dispatch(setUserFolder(result));\n              }\n            }),\n            owned\n          }),\n          onLike: user.email && mutate(queries.LIKE_PROJECT, {\n            id: item.id\n          }, response => dispatch(updateUser(response.data.likeProject))),\n          onAdd: user.email && (() => onAdd(item)),\n          onRemove: user.email && (() => onRemove(item)),\n          onAboutMore: recall(onUserAboutMore, {\n            user: item\n          }),\n          onCompanyLink: recall(onUserLink, {\n            id: (_item$company = item.company) === null || _item$company === void 0 ? void 0 : _item$company.email,\n            auth: user === null || user === void 0 ? void 0 : user.email,\n            recipient: item.author,\n            query: queries.GET_USER_CHATS,\n            mutation: queries.SEND_MESSAGE\n          }),\n          onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n            screenshots: [item.preview, ...item.screenshots],\n            key\n          })(),\n          withSocials: true\n        }),\n        withoutChecked: true\n      });\n    },\n    onClick: true\n  }));\n};\n\n_s(ProjectList, \"9KQAIdc23om6uteTXc9s3mKo3FI=\", false, function () {\n  return [useHelper, useMutate, useSelector, useDispatch, useQuery];\n});\n\n_c2 = ProjectList;\nProjectList.defaultProps = {\n  emptyMessage: 'Проектов нет'\n};\nexport default ProjectList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"ProjectList\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/ProjectList/index.js"],"names":["React","useState","useEffect","useCallback","styled","useQuery","useDispatch","useSelector","List","ProjectCard","useHelper","useMutate","Card","setUserFolder","updateUser","onUserAboutMore","onUserLink","onProjectAdd","onProjectRemove","onProjectLink","onProjectScreenshot","queries","Wrap","div","ProjectList","variables","layout","eliminable","initialList","initialRefetch","recall","mutate","user","folder","state","root","projects","setProjects","dispatch","data","loading","error","GET_PROJECTS","onAdd","project","id","folders","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","callback","item","result","onRemove","mutation","REMOVE_USER_PROJECT","filter","pr","map","getProjects","length","status","owned","find","candidate","rating","email","auth","added","liked","onLike","LIKE_PROJECT","response","likeProject","company","recipient","author","query","GET_USER_CHATS","SEND_MESSAGE","_","key","screenshots","preview","defaultProps","emptyMessage"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport List from '../List'\nimport ProjectCard from '../ProjectCard'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\nimport { Card } from '../../layouts/dashboard/content'\nimport { setUserFolder, updateUser } from '../../store/actions/user'\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user'\nimport {\n  onProjectAdd,\n  onProjectRemove,\n  onProjectLink,\n  onProjectScreenshot\n} from '../../store/helpers/project'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n  grid-auto-rows: max-content;\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nexport const ProjectList = ({ variables, layout, eliminable, initialList, initialRefetch }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder\n  }))\n  const [projects, setProjects] = useState(initialList || [])\n  const dispatch = useDispatch()\n\n  const { data, loading } = initialList\n    ? { data: null, loading: false, error: false }\n    : useQuery(queries.GET_PROJECTS, { variables })\n\n  const onAdd = useCallback(\n    (project) =>\n      recall(onProjectAdd, {\n        id: project.id,\n        folders: user?.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        },\n        callback: (item) => {\n          const result = { ...item, projects: [...item.projects, project.id] }\n          dispatch(setUserFolder(result))\n        }\n      })(),\n    [user]\n  )\n\n  const onRemove = useCallback(\n    (project) =>\n      recall(onProjectRemove, {\n        id: project.id,\n        folder,\n        mutation: queries.REMOVE_USER_PROJECT,\n        callback: () =>\n          initialRefetch &&\n          initialRefetch(projects.filter((pr) => pr.id !== project.id).map((pr) => pr.id))\n      })(),\n    [user]\n  )\n\n  useEffect(() => {\n    if (!loading && data) {\n      setProjects(data.getProjects)\n    }\n  }, [data, loading])\n\n  useEffect(() => {\n    if (!loading && initialList?.length > 0) setProjects(initialList)\n  }, [loading, initialList])\n\n  return (\n    <Wrap>\n      <List\n        type={'getProjects'}\n        query={queries.GET_PROJECTS}\n        variables={{ status: 'PUBLISHED' }}\n        component={(item) => {\n          const owned = user?.projects?.find((candidate) => candidate.id === item.id)\n          return (\n            <Card\n              item={item}\n              component={\n                <ProjectCard\n                  project={item}\n                  eliminable={eliminable}\n                  layout={layout || 'column'}\n                  owned={owned}\n                  added={\n                    !!user?.folders?.find(\n                      (folder) => !!folder?.projects.find((item) => item === item.id)\n                    )\n                  }\n                  liked={!!(item.rating || []).find((item) => item.email === user.email)}\n                  onLink={recall(onProjectLink, {\n                    id: item.id,\n                    auth: user?.email,\n                    added: !!user?.folders?.find(\n                      (folder) => !!folder?.projects.find((item) => item === item.id)\n                    ),\n                    liked: !!(item.rating || []).find((item) => item.email === user.email),\n                    onLike:\n                      user.email &&\n                      mutate(queries.LIKE_PROJECT, { id: item.id }, (response) =>\n                        dispatch(updateUser(response.data.likeProject))\n                      ),\n                    onAdd:\n                      user.email &&\n                      recall(onProjectAdd, {\n                        id: item.id,\n                        folders: user?.folders,\n                        mutations: {\n                          addProject: queries.ADD_USER_PROJECT,\n                          createFolder: queries.ADD_USER_FOLDER\n                        },\n                        callback: (item) => {\n                          const result = { ...item, projects: [...item.projects, item.id] }\n                          dispatch(setUserFolder(result))\n                        }\n                      }),\n                    owned\n                  })}\n                  onLike={\n                    user.email &&\n                    mutate(queries.LIKE_PROJECT, { id: item.id }, (response) =>\n                      dispatch(updateUser(response.data.likeProject))\n                    )\n                  }\n                  onAdd={user.email && (() => onAdd(item))}\n                  onRemove={user.email && (() => onRemove(item))}\n                  onAboutMore={recall(onUserAboutMore, { user: item })}\n                  onCompanyLink={recall(onUserLink, {\n                    id: item.company?.email,\n                    auth: user?.email,\n                    recipient: item.author,\n                    query: queries.GET_USER_CHATS,\n                    mutation: queries.SEND_MESSAGE\n                  })}\n                  onScreenshotClick={(_, key) =>\n                    recall(onProjectScreenshot, {\n                      screenshots: [item.preview, ...item.screenshots],\n                      key\n                    })()\n                  }\n                  withSocials\n                />\n              }\n              withoutChecked\n            />\n          )\n        }}\n        onClick\n      />\n    </Wrap>\n  )\n}\n\nProjectList.defaultProps = {\n  emptyMessage: 'Проектов нет'\n}\n\nexport default ProjectList\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport DashboardLayout from '../../layouts/dashboard';\nimport FormSettings from '../../components/FormSettings';\nimport queries from '../../graphql/queries';\nimport Processed from '../../components/Processed';\nconst TITLE = 'Настройки';\nconst Container = styled.div.withConfig({\n  displayName: \"settings__Container\",\n  componentId: \"mgp0x9-0\"\n})([\"width:100%;max-width:745px;@media only screen and (max-width:768px){max-width:100%;}\"]);\n_c = Container;\n\nconst Settings = () => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_META_DASHBOARD_SETTINGS);\n  const [settings, setSettings] = useState(null);\n  useEffect(() => {\n    if (!loading && data) {\n      setSettings(data.getDashboardSettings);\n    }\n  }, [data, loading]);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'setting',\n    text: TITLE\n  }), /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Processed, {\n    data: data === null || data === void 0 ? void 0 : data.getDashboardSettings,\n    loading: loading,\n    error: error,\n    errorMessage: 'Упс! Не удалось получить настройки',\n    emptyMessage: 'Кажется настройки не были созданы'\n  }, /*#__PURE__*/React.createElement(FormSettings, {\n    settings: settings,\n    mutation: queries.UPDATE_META_DASHBOARD_SETTINGS,\n    onSubmit: form => {\n      console.log(form);\n    }\n  }))));\n};\n\n_s(Settings, \"9MXQH8GZ7cOTOQD5XfAWswBebt0=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = Settings;\nexport default Settings;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Settings\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/settings.js"],"names":["React","useState","useEffect","styled","useQuery","Difinition","DashboardLayout","FormSettings","queries","Processed","TITLE","Container","div","Settings","data","loading","error","GET_META_DASHBOARD_SETTINGS","settings","setSettings","getDashboardSettings","UPDATE_META_DASHBOARD_SETTINGS","form","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,UAAP,MAAuB,uCAAvB;AAEA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AAEA,MAAMC,KAAK,GAAG,WAAd;AAEA,MAAMC,SAAS,GAAGR,MAAM,CAACS,GAAV;AAAA;AAAA;AAAA,4FAAf;KAAMD,S;;AASN,MAAME,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BZ,QAAQ,CAACI,OAAO,CAACS,2BAAT,CAAzC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,IAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACa,OAAD,IAAYD,IAAhB,EAAsB;AACpBK,MAAAA,WAAW,CAACL,IAAI,CAACM,oBAAN,CAAX;AACD;AACF,GAJQ,EAIN,CAACN,IAAD,EAAOC,OAAP,CAJM,CAAT;AAMA,sBACE,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAEL;AAAxB,kBACE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAE,SAAlB;AAA6B,IAAA,IAAI,EAAEA;AAAnC,IADF,eAGE,oBAAC,SAAD,qBACE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAEI,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEM,oBADd;AAEE,IAAA,OAAO,EAAEL,OAFX;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,YAAY,EAAE,oCAJhB;AAKE,IAAA,YAAY,EAAE;AALhB,kBAME,oBAAC,YAAD;AACE,IAAA,QAAQ,EAAEE,QADZ;AAEE,IAAA,QAAQ,EAAEV,OAAO,CAACa,8BAFpB;AAGE,IAAA,QAAQ,EAAGC,IAAD,IAAU;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACD;AALH,IANF,CADF,CAHF,CADF;AAsBD,CAhCD;;GAAMT,Q;UAC6BT,Q;;;MAD7BS,Q;AAkCN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Difinition from '../../atomic-ui/components/Difinition'\n\nimport DashboardLayout from '../../layouts/dashboard'\nimport FormSettings from '../../components/FormSettings'\nimport queries from '../../graphql/queries'\nimport Processed from '../../components/Processed'\n\nconst TITLE = 'Настройки'\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 745px;\n\n  @media only screen and (max-width: 768px) {\n    max-width: 100%;\n  }\n`\n\nconst Settings = () => {\n  const { data, loading, error } = useQuery(queries.GET_META_DASHBOARD_SETTINGS)\n  const [settings, setSettings] = useState(null)\n\n  useEffect(() => {\n    if (!loading && data) {\n      setSettings(data.getDashboardSettings)\n    }\n  }, [data, loading])\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <Difinition icon={'setting'} text={TITLE} />\n\n      <Container>\n        <Processed\n          data={data?.getDashboardSettings}\n          loading={loading}\n          error={error}\n          errorMessage={'Упс! Не удалось получить настройки'}\n          emptyMessage={'Кажется настройки не были созданы'}>\n          <FormSettings\n            settings={settings}\n            mutation={queries.UPDATE_META_DASHBOARD_SETTINGS}\n            onSubmit={(form) => {\n              console.log(form)\n            }}\n          />\n        </Processed>\n      </Container>\n    </DashboardLayout>\n  )\n}\n\nexport default Settings\n"]},"metadata":{},"sourceType":"module"}
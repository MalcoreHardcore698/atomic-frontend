{"ast":null,"code":"import { useCallback, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useDispatch } from 'react-redux';\nimport { omit, b64EncodeUnicode, b64DecodeUnicode } from '../atomic-ui/utils/functions';\nimport { setSearch, setParams } from '../store/actions/root';\nexport const parseParams = params => ({ ...omit(params, ['search']),\n  ...(params.email ? {\n    email: b64DecodeUnicode(params.email)\n  } : {})\n});\nexport const useSearch = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const onSearch = useCallback((search, params) => {\n    if (search) dispatch(setSearch(search));\n    if (params) dispatch(setParams(parseParams(params)));\n    router.push({\n      pathname: router.pathname,\n      query: { ...(params || {}),\n        ...(search ? {\n          search\n        } : {}),\n        ...(params.email ? {\n          email: b64EncodeUnicode(params.email)\n        } : {})\n      }\n    }, undefined, {\n      shallow: true\n    });\n  }, [router, dispatch]);\n  useEffect(() => {\n    const query = router.query;\n    if (query) dispatch(setParams(parseParams(query)));\n  }, [router, dispatch]);\n  return [onSearch];\n};","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/hooks/useSearch.js"],"names":["useCallback","useEffect","useRouter","useDispatch","omit","b64EncodeUnicode","b64DecodeUnicode","setSearch","setParams","parseParams","params","email","useSearch","router","dispatch","onSearch","search","push","pathname","query","undefined","shallow"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,IAAT,EAAeC,gBAAf,EAAiCC,gBAAjC,QAAyD,8BAAzD;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,uBAArC;AAEA,OAAO,MAAMC,WAAW,GAAIC,MAAD,KAAa,EACtC,GAAGN,IAAI,CAACM,MAAD,EAAS,CAAC,QAAD,CAAT,CAD+B;AAEtC,MACEA,MAAM,CAACC,KAAP,GAAe;AACbA,IAAAA,KAAK,EAAEL,gBAAgB,CAACI,MAAM,CAACC,KAAR;AADV,GAAf,GAEI,EAHN;AAFsC,CAAb,CAApB;AASP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAMY,QAAQ,GAAGX,WAAW,EAA5B;AAEA,QAAMY,QAAQ,GAAGf,WAAW,CAC3B,CAACgB,MAAD,EAASN,MAAT,KAAoB;AAClB,QAAIM,MAAJ,EAAYF,QAAQ,CAACP,SAAS,CAACS,MAAD,CAAV,CAAR;AACZ,QAAIN,MAAJ,EAAYI,QAAQ,CAACN,SAAS,CAACC,WAAW,CAACC,MAAD,CAAZ,CAAV,CAAR;AAEZG,IAAAA,MAAM,CAACI,IAAP,CACC;AACEC,MAAAA,QAAQ,EAAEL,MAAM,CAACK,QADnB;AAEEC,MAAAA,KAAK,EAAE,EACL,IAAIT,MAAM,IAAI,EAAd,CADK;AAEL,YAAIM,MAAM,GAAG;AAAEA,UAAAA;AAAF,SAAH,GAAgB,EAA1B,CAFK;AAGL,YAAIN,MAAM,CAACC,KAAP,GAAe;AAAEA,UAAAA,KAAK,EAAEN,gBAAgB,CAACK,MAAM,CAACC,KAAR;AAAzB,SAAf,GAA2D,EAA/D;AAHK;AAFT,KADD,EASCS,SATD,EAUC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAVD;AAYD,GAjB0B,EAkB3B,CAACR,MAAD,EAASC,QAAT,CAlB2B,CAA5B;AAqBAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,KAAK,GAAGN,MAAM,CAACM,KAArB;AACA,QAAIA,KAAJ,EAAWL,QAAQ,CAACN,SAAS,CAACC,WAAW,CAACU,KAAD,CAAZ,CAAV,CAAR;AACZ,GAHQ,EAGN,CAACN,MAAD,EAASC,QAAT,CAHM,CAAT;AAKA,SAAO,CAACC,QAAD,CAAP;AACD,CA/BM","sourcesContent":["import { useCallback, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport { useDispatch } from 'react-redux'\n\nimport { omit, b64EncodeUnicode, b64DecodeUnicode } from '../atomic-ui/utils/functions'\n\nimport { setSearch, setParams } from '../store/actions/root'\n\nexport const parseParams = (params) => ({\n  ...omit(params, ['search']),\n  ...(\n    params.email ? {\n      email: b64DecodeUnicode(params.email)\n    } : {}\n  )\n})\n\nexport const useSearch = () => {\n  const router = useRouter()\n  const dispatch = useDispatch()\n\n  const onSearch = useCallback(\n   (search, params) => {\n     if (search) dispatch(setSearch(search))\n     if (params) dispatch(setParams(parseParams(params)))\n\n     router.push(\n      {\n        pathname: router.pathname,\n        query: {\n          ...(params || {}),\n          ...(search ? { search } : {}),\n          ...(params.email ? { email: b64EncodeUnicode(params.email) } : {})\n        }\n      },\n      undefined,\n      { shallow: true }\n     )\n   },\n   [router, dispatch]\n  )\n\n  useEffect(() => {\n    const query = router.query\n    if (query) dispatch(setParams(parseParams(query)))\n  }, [router, dispatch])\n\n  return [onSearch]\n}\n"]},"metadata":{},"sourceType":"module"}
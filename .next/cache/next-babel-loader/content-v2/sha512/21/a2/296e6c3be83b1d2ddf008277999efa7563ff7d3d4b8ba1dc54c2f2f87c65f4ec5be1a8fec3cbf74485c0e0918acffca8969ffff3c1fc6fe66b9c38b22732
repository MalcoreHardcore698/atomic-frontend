{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport styled, { css } from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport Row from '../atomic-ui/components/Row';\nimport Column from '../atomic-ui/components/Column';\nimport Switch from '../atomic-ui/components/Switch';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport Button from '../atomic-ui/components/Button';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Tooltip from '../atomic-ui/components/Tooltip';\nimport { Wrap as WrapText } from '../atomic-ui/components/Text';\nimport Icon from '../atomic-ui/components/Icon';\nimport templates from '../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport DefaultLayout from '../layouts/default';\nimport UserBar from '../components/UserBar';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport ProjectList from '../components/ProjectList';\nimport ArticleList from '../components/ArticleList';\nimport Difinition from '../atomic-ui/components/Difinition';\nimport { Loader } from '../components/Styled';\nimport { setUserFolder } from '../store/actions/user';\nimport { setFolder } from '../store/actions/root';\nimport { onUserClientEdit, onUserAboutMore, onUserFolderAdd, onUserFolderDelete } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nimport { profilePages } from '../__mock__';\nconst TITLE = 'Профиль';\nconst ContainerInProgress = styled(Row).withConfig({\n  displayName: \"profile__ContainerInProgress\",\n  componentId: \"sc-84d5hd-0\"\n})([\"grid-gap:var(--default-gap);@media only screen and (max-width:768px){flex-direction:column;}\"]);\nconst CreateButton = styled(Button).withConfig({\n  displayName: \"profile__CreateButton\",\n  componentId: \"sc-84d5hd-1\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}\"]);\nconst Organizer = styled(Column).withConfig({\n  displayName: \"profile__Organizer\",\n  componentId: \"sc-84d5hd-2\"\n})([\"width:265px;min-width:265px;\"]);\nconst RemoveTooltip = styled(Tooltip).withConfig({\n  displayName: \"profile__RemoveTooltip\",\n  componentId: \"sc-84d5hd-3\"\n})([\"position:absolute;right:8px;z-index:var(--z-11);display:none;\"]);\nconst CentralAlert = styled(Alert).withConfig({\n  displayName: \"profile__CentralAlert\",\n  componentId: \"sc-84d5hd-4\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;flex-grow:10;\"]);\nconst ListItem = styled.div.withConfig({\n  displayName: \"profile__ListItem\",\n  componentId: \"sc-84d5hd-5\"\n})([\"position:relative;display:flex;justify-content:space-between;align-items:center;height:var(--input-height-s);background:var(--ghost-color-background);border-radius:var(--surface-border-radius);padding:8px 10px;width:100%;height:auto;cursor:pointer;transition:all 150ms ease;\", \",h4{color:var(--ghost-color-text);}\", \"{svg path{color:var(--ghost-color-text);}}&:hover{\", \"{display:flex;svg path{stroke:black;}}\", \",h4{color:black;}}\", \"\"], WrapText, RemoveTooltip, RemoveTooltip, WrapText, ({\n  active\n}) => active && css([\"color:var(--default-color-accent);background:var(--default-color-accent-dim);\", \"{svg path{stroke:var(--default-color-accent) !important;}}\", \",h4,p{color:var(--default-color-accent);}&:hover{\", \",h4,p{color:var(--default-color-accent);}}\"], RemoveTooltip, WrapText, WrapText));\n\nconst Projects = ({\n  variables,\n  projects\n}) => /*#__PURE__*/React.createElement(ProjectList, {\n  variables: variables,\n  initialList: projects,\n  layout: true\n});\n\nconst Articles = ({\n  variables\n}) => /*#__PURE__*/React.createElement(ArticleList, {\n  variables: variables\n});\n\nconst InProgress = () => {\n  const recall = useHelper();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const dispatch = useDispatch();\n  const defaultFolder = useMemo(() => user === null || user === void 0 ? void 0 : user.folders[0], [user]);\n  const [getProjects, {\n    data,\n    loading,\n    refetch\n  }] = useLazyQuery(queries.GET_PROJECTS_BY_IDS);\n  const [customLoading, setCustomLoading] = useState(false);\n\n  const onRefetch = async (item, projects) => {\n    if (projects && refetch) {\n      setCustomLoading(true);\n\n      if (item) {\n        const result = { ...item,\n          projects\n        };\n        dispatch(setFolder(result));\n        dispatch(setUserFolder(result));\n      }\n\n      await refetch({\n        projects\n      });\n      setCustomLoading(false);\n    }\n  };\n\n  const onFolderClick = item => onRefetch(item, item.projects);\n\n  useEffect(() => {\n    if (defaultFolder) {\n      dispatch(setFolder(defaultFolder));\n    }\n  }, [defaultFolder, dispatch]);\n  useEffect(() => {\n    if (!refetch && !data && defaultFolder) {\n      getProjects({\n        variables: {\n          projects: defaultFolder.projects\n        }\n      });\n    }\n  }, [data, refetch, defaultFolder, getProjects]);\n  return /*#__PURE__*/React.createElement(ContainerInProgress, null, /*#__PURE__*/React.createElement(Organizer, null, user.folders && user.folders.length > 0 ? /*#__PURE__*/React.createElement(Column, null, user.folders.map(item => {\n    const length = item.projects.length;\n    const label = length === 1 ? 'проект' : length > 1 && length < 5 ? 'проекта' : 'проектов';\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: item.id,\n      active: folder && item.id === folder.id\n    }, /*#__PURE__*/React.createElement(Difinition, {\n      text: item.name,\n      label: `${length} ${label}`,\n      onLink: () => onFolderClick(item),\n      revert: true\n    }), /*#__PURE__*/React.createElement(RemoveTooltip, {\n      place: 'left',\n      text: 'Удалить'\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: 'xs',\n      kind: 'icon',\n      type: 'button',\n      disabled: loading,\n      appearance: 'clear',\n      onClick: recall(onUserFolderDelete, {\n        id: item.id,\n        mutation: queries.DELETE_USER_FOLDER,\n        callback: () => onFolderClick(defaultFolder)\n      })\n    }, /*#__PURE__*/React.createElement(Icon, {\n      size: 'xs',\n      icon: 'delete',\n      stroke: 'var(--ghost-color-text)'\n    }))));\n  })) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0430\\u043F\\u043E\\u043A \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(CreateButton, {\n    onClick: recall(onUserFolderAdd, {\n      mutation: queries.ADD_USER_FOLDER\n    })\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430\"), /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'white'\n  }))), !loading && !customLoading && data && data.getProjectsByIds.length > 0 ? /*#__PURE__*/React.createElement(ProjectList, {\n    initialList: folder ? data.getProjectsByIds : [],\n    initialRefetch: projects => onRefetch(folder, projects),\n    eliminable: true,\n    layout: true\n  }) : loading || customLoading ? /*#__PURE__*/React.createElement(Loader, {\n    style: {\n      height: 'auto'\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(CentralAlert, null, \"\\u0412 \\u044D\\u0442\\u043E\\u0439 \\u043F\\u0430\\u043F\\u043A\\u0435 \\u043D\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432\"));\n};\n\nconst Profile = ({\n  categories\n}) => {\n  const recall = useHelper();\n  const router = useRouter();\n  const user = useSelector(state => state.user);\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [currentPage, setCurrentPage] = useState(profilePages[0]);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const isAdmin = useMemo(() => (user === null || user === void 0 ? void 0 : user.account) === 'ADMIN', [user]);\n  const [loadCompanies, {\n    data: dataCompanies\n  }] = useLazyQuery(queries.GET_USERS);\n  const [loadCategories, {\n    data: dataCategories\n  }] = useLazyQuery(queries.GET_CATEGORIES);\n  const [loadStatuses, {\n    data: dataStatuses\n  }] = useLazyQuery(queries.GET_POST_STATUSES);\n  const renderContentPage = useCallback(() => {\n    if (!user) return null;\n\n    switch (currentPage.value) {\n      case '/projects':\n        return /*#__PURE__*/React.createElement(Projects, {\n          variables: {\n            author: user.email\n          },\n          projects: user.projects\n        });\n\n      case '/liked':\n        return /*#__PURE__*/React.createElement(Projects, {\n          variables: {\n            rating: user.email\n          },\n          projects: user.likedProjects\n        });\n\n      case '/articles':\n        return /*#__PURE__*/React.createElement(Articles, {\n          variables: {\n            author: user.email\n          }\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(InProgress, null);\n    }\n  }, [user, currentPage]);\n  useEffect(() => {\n    if (!user.authenticated) {\n      router.push('/auth');\n    }\n  }, [user]);\n\n  if (!user.authenticated) {\n    return /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: user.authenticated ? user.name || TITLE : 'Авторизация'\n  }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(UserBar, {\n    user: user,\n    onEdit: recall(onUserClientEdit, {\n      user: user === null || user === void 0 ? void 0 : user.email,\n      canEditAccount: !isAdmin,\n      mutations: {\n        update: queries.UPDATE_CLIENT_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_CLIENT_USER\n      }\n    }),\n    onAboutMore: recall(onUserAboutMore, {\n      user\n    })\n  }), /*#__PURE__*/React.createElement(Switch, {\n    defaultValue: currentPage,\n    options: profilePages,\n    onChange: item => setCurrentPage(item),\n    stretch: true\n  }), /*#__PURE__*/React.createElement(SearchBar, {\n    onAddButton: async () => {\n      await loadCompanies({\n        variables: {\n          account: ['ENTITY']\n        }\n      });\n      await loadCategories({\n        variables: {\n          type: 'DIVISION'\n        }\n      });\n      await loadStatuses();\n      recall(onProjectCreate, {\n        companies: dataCompanies,\n        categories: dataCategories,\n        statuses: dataStatuses,\n        mutation: queries.CREATE_PROJECT,\n        query: queries.GET_USERS\n      })();\n    },\n    onChangeFilter: () => setVisibleFilter(!visibleFilter),\n    withAddButton: currentPage.value === '/projects'\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 'publishedAt',\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 'categories',\n      options: categories.map(category => ({\n        value: category.id,\n        label: category.name\n      })),\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: templates.project.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), renderContentPage()));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let categories = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_CATEGORIES\n    });\n\n    if (response && response.data) {\n      categories = response.data.getCategories;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      categories\n    }\n  };\n}\nexport default Profile;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/profile.js"],"names":["React","useState","useEffect","useCallback","useMemo","useRouter","styled","css","useSelector","useDispatch","useLazyQuery","Row","Column","Switch","Alert","DatePicker","Select","Button","Spinner","Tooltip","Wrap","WrapText","Icon","templates","initializeApollo","useHelper","DefaultLayout","UserBar","FilterBar","SearchBar","ProjectList","ArticleList","Difinition","Loader","setUserFolder","setFolder","onUserClientEdit","onUserAboutMore","onUserFolderAdd","onUserFolderDelete","queries","profilePages","TITLE","ContainerInProgress","CreateButton","Organizer","RemoveTooltip","CentralAlert","ListItem","div","active","Projects","variables","projects","Articles","InProgress","recall","user","folder","state","root","dispatch","defaultFolder","folders","getProjects","data","loading","refetch","GET_PROJECTS_BY_IDS","customLoading","setCustomLoading","onRefetch","item","result","onFolderClick","length","map","label","id","name","mutation","DELETE_USER_FOLDER","callback","width","textAlign","ADD_USER_FOLDER","getProjectsByIds","height","Profile","categories","router","date","onChangeDate","select","onChangeSelect","currentPage","setCurrentPage","visibleFilter","setVisibleFilter","isAdmin","account","loadCompanies","dataCompanies","GET_USERS","loadCategories","dataCategories","GET_CATEGORIES","loadStatuses","dataStatuses","GET_POST_STATUSES","renderContentPage","value","author","email","rating","likedProjects","authenticated","push","canEditAccount","mutations","update","UPDATE_CLIENT_USER","del","DELETE_USER","changePassword","type","onProjectCreate","companies","statuses","CREATE_PROJECT","query","category","project","index","header","getServerSideProps","client","response","getCategories","err","console","log","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useRouter } from 'next/router'\nimport styled, { css } from 'styled-components'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport Row from '../atomic-ui/components/Row'\nimport Column from '../atomic-ui/components/Column'\nimport Switch from '../atomic-ui/components/Switch'\nimport Alert from '../atomic-ui/components/Alert'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Select from '../atomic-ui/components/Select'\nimport Button from '../atomic-ui/components/Button'\nimport Spinner from '../atomic-ui/components/Spinner'\nimport Tooltip from '../atomic-ui/components/Tooltip'\nimport { Wrap as WrapText } from '../atomic-ui/components/Text'\nimport Icon from '../atomic-ui/components/Icon'\nimport templates from '../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport DefaultLayout from '../layouts/default'\nimport UserBar from '../components/UserBar'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport ProjectList from '../components/ProjectList'\nimport ArticleList from '../components/ArticleList'\nimport Difinition from '../atomic-ui/components/Difinition'\nimport { Loader } from '../components/Styled'\nimport { setUserFolder } from '../store/actions/user'\nimport { setFolder } from '../store/actions/root'\nimport {\n  onUserClientEdit,\n  onUserAboutMore,\n  onUserFolderAdd,\n  onUserFolderDelete\n} from '../store/helpers/user'\nimport queries from '../graphql/queries'\nimport { profilePages } from '../__mock__'\n\nconst TITLE = 'Профиль'\n\nconst ContainerInProgress = styled(Row)`\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`\n\nconst CreateButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  grid-gap: 10px;\n\n  span {\n    white-space: nowrap;\n  }\n`\n\nconst Organizer = styled(Column)`\n  width: 265px;\n  min-width: 265px;\n`\n\nconst RemoveTooltip = styled(Tooltip)`\n  position: absolute;\n  right: 8px;\n  z-index: var(--z-11);\n  display: none;\n`\n\nconst CentralAlert = styled(Alert)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  flex-grow: 10;\n`\n\nconst ListItem = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: var(--input-height-s);\n  background: var(--ghost-color-background);\n  border-radius: var(--surface-border-radius);\n  padding: 8px 10px;\n  width: 100%;\n  height: auto;\n  cursor: pointer;\n  transition: all 150ms ease;\n\n  ${WrapText}, h4 {\n    color: var(--ghost-color-text);\n  }\n\n  ${RemoveTooltip} {\n    svg path {\n      color: var(--ghost-color-text);\n    }\n  }\n\n  &:hover {\n    ${RemoveTooltip} {\n      display: flex;\n\n      svg path {\n        stroke: black;\n      }\n    }\n\n    ${WrapText}, h4 {\n      color: black;\n    }\n  }\n\n  ${({ active }) =>\n    active &&\n    css`\n      color: var(--default-color-accent);\n      background: var(--default-color-accent-dim);\n\n      ${RemoveTooltip} {\n        svg path {\n          stroke: var(--default-color-accent) !important;\n        }\n      }\n\n      ${WrapText}, h4, p {\n        color: var(--default-color-accent);\n      }\n\n      &:hover {\n        ${WrapText}, h4, p {\n          color: var(--default-color-accent);\n        }\n      }\n    `}\n`\n\nconst Projects = ({ variables, projects }) => (\n  <ProjectList variables={variables} initialList={projects} layout />\n)\n\nconst Articles = ({ variables }) => (\n  <ArticleList variables={variables} />\n)\n\nconst InProgress = () => {\n  const recall = useHelper()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder\n  }))\n  const dispatch = useDispatch()\n\n  const defaultFolder = useMemo(() => user?.folders[0], [user])\n  const [getProjects, { data, loading, refetch }] = useLazyQuery(queries.GET_PROJECTS_BY_IDS)\n  const [customLoading, setCustomLoading] = useState(false)\n\n  const onRefetch = async (item, projects) => {\n    if (projects && refetch) {\n      setCustomLoading(true)\n\n      if (item) {\n        const result = { ...item, projects }\n        dispatch(setFolder(result))\n        dispatch(setUserFolder(result))\n      }\n\n      await refetch({ projects })\n      setCustomLoading(false)\n    }\n  }\n\n  const onFolderClick = (item) => onRefetch(item, item.projects)\n\n  useEffect(() => {\n    if (defaultFolder) {\n      dispatch(setFolder(defaultFolder))\n    }\n  }, [defaultFolder, dispatch])\n\n  useEffect(() => {\n    if (!refetch && !data && defaultFolder) {\n      getProjects({\n        variables: { projects: defaultFolder.projects }\n      })\n    }\n  }, [data, refetch, defaultFolder, getProjects])\n\n  return (\n    <ContainerInProgress>\n      <Organizer>\n        {user.folders && user.folders.length > 0 ? (\n          <Column>\n            {user.folders.map((item) => {\n              const length = item.projects.length\n              const label =\n                length === 1 ? 'проект' : length > 1 && length < 5 ? 'проекта' : 'проектов'\n\n              return (\n                <ListItem key={item.id} active={folder && item.id === folder.id}>\n                  <Difinition\n                    text={item.name}\n                    label={`${length} ${label}`}\n                    onLink={() => onFolderClick(item)}\n                    revert\n                  />\n                  <RemoveTooltip place={'left'} text={'Удалить'}>\n                    <Button\n                      size={'xs'}\n                      kind={'icon'}\n                      type={'button'}\n                      disabled={loading}\n                      appearance={'clear'}\n                      onClick={recall(onUserFolderDelete, {\n                        id: item.id,\n                        mutation: queries.DELETE_USER_FOLDER,\n                        callback: () => onFolderClick(defaultFolder)\n                      })}>\n                      <Icon size={'xs'} icon={'delete'} stroke={'var(--ghost-color-text)'} />\n                    </Button>\n                  </RemoveTooltip>\n                </ListItem>\n              )\n            })}\n          </Column>\n        ) : (\n          <Alert style={{ width: '100%', textAlign: 'center' }}>Папок нет</Alert>\n        )}\n        <CreateButton onClick={recall(onUserFolderAdd, { mutation: queries.ADD_USER_FOLDER })}>\n          <span>Новая папка</span>\n          <Icon icon={'add'} stroke={'white'} />\n        </CreateButton>\n      </Organizer>\n\n      {!loading && !customLoading && data && data.getProjectsByIds.length > 0 ? (\n        <ProjectList\n          initialList={folder ? data.getProjectsByIds : []}\n          initialRefetch={(projects) => onRefetch(folder, projects)}\n          eliminable\n          layout\n        />\n      ) : loading || customLoading ? (\n        <Loader style={{ height: 'auto' }}>\n          <Spinner />\n        </Loader>\n      ) : (\n        <CentralAlert>В этой папке нет проектов</CentralAlert>\n      )}\n    </ContainerInProgress>\n  )\n}\n\nconst Profile = ({ categories }) => {\n  const recall = useHelper()\n  const router = useRouter()\n  const user = useSelector((state) => state.user)\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [currentPage, setCurrentPage] = useState(profilePages[0])\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const isAdmin = useMemo(() => user?.account === 'ADMIN', [user])\n\n  const [loadCompanies, { data: dataCompanies }] = useLazyQuery(queries.GET_USERS)\n  const [loadCategories, { data: dataCategories }] = useLazyQuery(queries.GET_CATEGORIES)\n  const [loadStatuses, { data: dataStatuses }] = useLazyQuery(queries.GET_POST_STATUSES)\n\n  const renderContentPage = useCallback(() => {\n    if (!user) return null\n    switch (currentPage.value) {\n      case '/projects':\n        return <Projects variables={{ author: user.email }} projects={user.projects} />\n      case '/liked':\n        return <Projects variables={{ rating: user.email }} projects={user.likedProjects} />\n      case '/articles':\n        return <Articles variables={{ author: user.email }} />\n      default:\n        return <InProgress />\n    }\n  }, [user, currentPage])\n\n  useEffect(() => {\n    if (!user.authenticated) {\n      router.push('/auth')\n    }\n  }, [user])\n\n  if (!user.authenticated) {\n    return (\n      <Loader>\n        <Spinner />\n      </Loader>\n    )\n  }\n\n  return (\n    <DefaultLayout title={user.authenticated ? user.name || TITLE : 'Авторизация'}>\n      <Column>\n        <UserBar\n          user={user}\n          onEdit={recall(onUserClientEdit, {\n            user: user?.email,\n            canEditAccount: !isAdmin,\n            mutations: {\n              update: queries.UPDATE_CLIENT_USER,\n              del: queries.DELETE_USER,\n              changePassword: queries.UPDATE_CLIENT_USER\n            }\n          })}\n          onAboutMore={recall(onUserAboutMore, { user })}\n        />\n\n        <Switch\n          defaultValue={currentPage}\n          options={profilePages}\n          onChange={(item) => setCurrentPage(item)}\n          stretch\n        />\n\n        <SearchBar\n          onAddButton={async () => {\n            await loadCompanies({ variables: { account: ['ENTITY'] } })\n            await loadCategories({ variables: { type: 'DIVISION' } })\n            await loadStatuses()\n\n            recall(onProjectCreate, {\n              companies: dataCompanies,\n              categories: dataCategories,\n              statuses: dataStatuses,\n              mutation: queries.CREATE_PROJECT,\n              query: queries.GET_USERS\n            })()\n          }}\n          onChangeFilter={() => setVisibleFilter(!visibleFilter)}\n          withAddButton={currentPage.value === '/projects'}\n        />\n\n        <FilterBar\n          isOpen={visibleFilter}\n          filters={[\n            <DatePicker\n              key={'publishedAt'}\n              value={date}\n              placeholder={'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />,\n            <Select\n              key={'categories'}\n              options={categories.map((category) => ({\n                value: category.id,\n                label: category.name\n              }))}\n              placeholder={'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          ]}\n          options={templates.project.map((item, index) => ({\n            label: item.header,\n            value: index\n          }))}\n        />\n\n        {renderContentPage()}\n      </Column>\n    </DefaultLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let categories = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_CATEGORIES\n    })\n\n    if (response && response.data) {\n      categories = response.data.getCategories\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      categories\n    }\n  }\n}\n\nexport default Profile\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useRef, memo } from 'react';\nimport { useRouter } from 'next/router';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\nimport html2canvas from 'html2canvas';\nimport jsPDF from 'jspdf';\nimport Row from '../../atomic-ui/components/Row';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport DrawerBase from '../../atomic-ui/components/Drawer';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Column from '../../atomic-ui/components/Column';\nimport useEntityQuery from '../../hooks/useEntityQuery';\nimport { setDrawer } from '../../store/actions/drawer';\nconst Wrap = styled(DrawerBase).withConfig({\n  displayName: \"Drawer__Wrap\",\n  componentId: \"sc-15dabmr-0\"\n})([\"\"]);\nconst BrandLogo = styled.img.withConfig({\n  displayName: \"Drawer__BrandLogo\",\n  componentId: \"sc-15dabmr-1\"\n})([\"object-fit:contain;width:100%;height:100%;\"]);\nconst Container = styled(Column).withConfig({\n  displayName: \"Drawer__Container\",\n  componentId: \"sc-15dabmr-2\"\n})([\"height:100%;flex-grow:1;&.fade-enter{opacity:0;}&.fade-enter-active{opacity:1;transition:opacity 100ms,blur 100ms;}&.fade-exit{opacity:1;}&.fade-exit-active{opacity:0;transition:opacity 100ms,blur 100ms;}\"]);\nconst Header = styled(Row).withConfig({\n  displayName: \"Drawer__Header\",\n  componentId: \"sc-15dabmr-3\"\n})([\"display:flex;justify-content:space-between;grid-gap:var(--default-gap);\"]);\nconst Content = styled.div.withConfig({\n  displayName: \"Drawer__Content\",\n  componentId: \"sc-15dabmr-4\"\n})([\"display:flex;flex-direction:column;flex-grow:1;\"]);\nconst BackButton = styled(Button).withConfig({\n  displayName: \"Drawer__BackButton\",\n  componentId: \"sc-15dabmr-5\"\n})([\"display:none;@media only screen and (max-width:480px){display:flex;justify-content:center;align-items:center;}\"]);\nexport const Drawer = memo(() => {\n  var _root$settings$genera;\n\n  const router = useRouter();\n  const {\n    useDetectQuery\n  } = useEntityQuery();\n  const {\n    root,\n    drawer\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const [loadingExportToPDF, setLoadingExportToPDF] = useState(false);\n  const containerForExportToPDF = useRef(null);\n\n  const onDrawerBack = async () => {\n    await router.push({\n      pathname: router.pathname,\n      query: root.search ? {\n        search: root.search\n      } : {}\n    }, undefined, {\n      shallow: true\n    });\n    dispatch(setDrawer(null));\n  };\n\n  const onExportToPDF = () => {\n    setLoadingExportToPDF(true);\n    html2canvas(containerForExportToPDF.current).then(canvas => {\n      const [margin, position] = [6, 6];\n      const imgData = canvas.toDataURL('image/png', 1.0);\n      const pdf = new jsPDF('p', 'px', 'a4');\n      const width = pdf.internal.pageSize.getWidth();\n      const height = pdf.internal.pageSize.getHeight();\n      const widthRatio = width / canvas.width;\n      const heightRatio = height / canvas.height;\n      const ratio = widthRatio > heightRatio ? heightRatio : widthRatio;\n      pdf.addImage(imgData, 'PNG', margin, position, canvas.width * ratio - margin * 2, canvas.height * ratio - margin * 2);\n      pdf.save(`${drawer.pdfName}.pdf`);\n      setLoadingExportToPDF(false);\n    });\n  };\n\n  useDetectQuery();\n  return /*#__PURE__*/React.createElement(Wrap, {\n    side: drawer.side,\n    half: drawer.half,\n    isOpen: drawer.open,\n    onBack: onDrawerBack\n  }, /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Row, null, drawer.side === 'left' && drawer.half ? /*#__PURE__*/React.createElement(Button, {\n    appearance: 'clear',\n    onClick: () => router.push('/')\n  }, /*#__PURE__*/React.createElement(BrandLogo, {\n    src: (_root$settings$genera = root.settings.general.logotype) === null || _root$settings$genera === void 0 ? void 0 : _root$settings$genera.path,\n    alt: 'Logotype'\n  })) : /*#__PURE__*/React.createElement(BackButton, {\n    size: 's',\n    kind: 'icon',\n    onClick: onDrawerBack,\n    revert: true\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'arrowLeft',\n    size: 's',\n    stroke: 'var(--default-color-accent)'\n  })), drawer.title && /*#__PURE__*/React.createElement(Difinition, {\n    color: drawer.color,\n    icon: drawer.icon,\n    text: drawer.title\n  })), drawer.pdfName && /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Экспорт проекта в PDF'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 's',\n    kind: 'icon',\n    appearance: 'clear',\n    disabled: loadingExportToPDF,\n    onClick: onExportToPDF\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'scan',\n    size: 's',\n    stroke: 'var(--ghost-color-text)'\n  }))))), drawer.title && /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Content, {\n    ref: containerForExportToPDF\n  }, drawer.content)));\n});\nexport default Drawer;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/Drawer/index.js"],"names":["React","useState","useRef","memo","useRouter","useSelector","useDispatch","styled","html2canvas","jsPDF","Row","Difinition","DrawerBase","Divider","Tooltip","Button","Icon","Column","useEntityQuery","setDrawer","Wrap","BrandLogo","img","Container","Header","Content","div","BackButton","Drawer","router","useDetectQuery","root","drawer","state","dispatch","loadingExportToPDF","setLoadingExportToPDF","containerForExportToPDF","onDrawerBack","push","pathname","query","search","undefined","shallow","onExportToPDF","current","then","canvas","margin","position","imgData","toDataURL","pdf","width","internal","pageSize","getWidth","height","getHeight","widthRatio","heightRatio","ratio","addImage","save","pdfName","side","half","open","settings","general","logotype","path","title","color","icon","content"],"mappings":"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","sourcesContent":["import React, { useState, useRef, memo } from 'react'\nimport { useRouter } from 'next/router'\nimport { useSelector, useDispatch } from 'react-redux'\nimport styled from 'styled-components'\nimport html2canvas from 'html2canvas'\nimport jsPDF from 'jspdf'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport DrawerBase from '../../atomic-ui/components/Drawer'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Tooltip from '../../atomic-ui/components/Tooltip'\nimport Button from '../../atomic-ui/components/Button'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Column from '../../atomic-ui/components/Column'\n\nimport useEntityQuery from '../../hooks/useEntityQuery'\nimport { setDrawer } from '../../store/actions/drawer'\n\nconst Wrap = styled(DrawerBase)``\n\nconst BrandLogo = styled.img`\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n`\n\nconst Container = styled(Column)`\n  height: 100%;\n  flex-grow: 1;\n\n  &.fade-enter {\n    opacity: 0;\n  }\n\n  &.fade-enter-active {\n    opacity: 1;\n    transition: opacity 100ms, blur 100ms;\n  }\n\n  &.fade-exit {\n    opacity: 1;\n  }\n\n  &.fade-exit-active {\n    opacity: 0;\n    transition: opacity 100ms, blur 100ms;\n  }\n`\n\nconst Header = styled(Row)`\n  display: flex;\n  justify-content: space-between;\n  grid-gap: var(--default-gap);\n`\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n`\n\nconst BackButton = styled(Button)`\n  display: none;\n\n  @media only screen and (max-width: 480px) {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n`\n\nexport const Drawer = memo(() => {\n  const router = useRouter()\n  const { useDetectQuery } = useEntityQuery()\n  const { root, drawer } = useSelector((state) => state)\n  const dispatch = useDispatch()\n\n  const [loadingExportToPDF, setLoadingExportToPDF] = useState(false)\n  const containerForExportToPDF = useRef(null)\n\n  const onDrawerBack = async () => {\n    await router.push(\n      {\n        pathname: router.pathname,\n        query: root.search\n          ? {\n              search: root.search\n            }\n          : {}\n      },\n      undefined,\n      { shallow: true }\n    )\n    dispatch(setDrawer(null))\n  }\n\n  const onExportToPDF = () => {\n    setLoadingExportToPDF(true)\n\n    html2canvas(containerForExportToPDF.current).then((canvas) => {\n      const [margin, position] = [6, 6]\n      const imgData = canvas.toDataURL('image/png', 1.0)\n\n      const pdf = new jsPDF('p', 'px', 'a4')\n\n      const width = pdf.internal.pageSize.getWidth()\n      const height = pdf.internal.pageSize.getHeight()\n\n      const widthRatio = width / canvas.width\n      const heightRatio = height / canvas.height\n\n      const ratio = widthRatio > heightRatio ? heightRatio : widthRatio\n\n      pdf.addImage(\n        imgData,\n        'PNG',\n        margin,\n        position,\n        canvas.width * ratio - margin * 2,\n        canvas.height * ratio - margin * 2\n      )\n      pdf.save(`${drawer.pdfName}.pdf`)\n\n      setLoadingExportToPDF(false)\n    })\n  }\n\n  useDetectQuery()\n\n  return (\n    <Wrap side={drawer.side} half={drawer.half} isOpen={drawer.open} onBack={onDrawerBack}>\n      <Container>\n        <Header>\n          <Row>\n            {drawer.side === 'left' && drawer.half ? (\n              <Button appearance={'clear'} onClick={() => router.push('/')}>\n                <BrandLogo src={root.settings.general.logotype?.path} alt={'Logotype'} />\n              </Button>\n            ) : (\n              <BackButton size={'s'} kind={'icon'} onClick={onDrawerBack} revert>\n                <Icon icon={'arrowLeft'} size={'s'} stroke={'var(--default-color-accent)'} />\n              </BackButton>\n            )}\n\n            {drawer.title && (\n              <Difinition color={drawer.color} icon={drawer.icon} text={drawer.title} />\n            )}\n          </Row>\n\n          {drawer.pdfName && (\n            <Row>\n              <Tooltip text={'Экспорт проекта в PDF'}>\n                <Button\n                  size={'s'}\n                  kind={'icon'}\n                  appearance={'clear'}\n                  disabled={loadingExportToPDF}\n                  onClick={onExportToPDF}>\n                  <Icon icon={'scan'} size={'s'} stroke={'var(--ghost-color-text)'} />\n                </Button>\n              </Tooltip>\n            </Row>\n          )}\n        </Header>\n        {drawer.title && <Divider clear />}\n\n        <Content ref={containerForExportToPDF}>{drawer.content}</Content>\n      </Container>\n    </Wrap>\n  )\n})\n\nexport default Drawer\n"]},"metadata":{},"sourceType":"module"}
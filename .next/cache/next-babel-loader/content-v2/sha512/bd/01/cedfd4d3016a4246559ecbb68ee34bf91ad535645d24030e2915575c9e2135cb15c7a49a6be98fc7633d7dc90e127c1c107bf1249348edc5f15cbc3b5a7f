{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Text from '../Text';\nimport Title from '../Title';\nimport Icon from '../Icon';\nimport Chip from '../Chip';\nimport { v4 } from 'uuid';\nimport Tooltip from '../Tooltip';\nexport const Wrap = styled(Row)`\n  transition: opacity 150ms ease;\n\n  ${({\n  clickable\n}) => clickable && css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`;\nexport const Content = styled(Column)`\n  justify-content: center;\n  grid-gap: 0;\n`;\nexport const Image = styled.img`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  border-radius: var(--surface-border-radius);\n  object-fit: cover;\n`;\nexport const RoundedIcon = styled(Icon)`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  background: var(--default-color-${({\n  color\n}) => color || 'accent'}-dim);\n  border-radius: var(--surface-border-radius);\n\n  @media only screen and (max-width: 480px) {\n    width: var(--input-height-s);\n    height: var(--input-height-s);\n    min-width: var(--input-height-s);\n    min-height: var(--input-height-s);\n\n    svg {\n      transform: scale(0.85);\n    }\n  }\n`;\nexport const Label = styled(Text)`\n  color: var(--ghost-color-text);\n  font-size: var(--font-size-s);\n  white-space: nowrap;\n  width: 128px;\n  max-width: 400px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${({\n  stretch\n}) => stretch && css`\n      width: auto;\n    `}\n`;\nexport const Value = styled(Title)`\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`;\nexport const getValue = (label, text) => {\n  if (Array.isArray(text)) {\n    const slicedFactor = 3;\n    return __jsx(React.Fragment, null, text.slice(0, slicedFactor).map(item => __jsx(Chip, {\n      key: v4(),\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs'\n    }, item)), text.length > 5 && __jsx(Chip, {\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs'\n    }, \"+\", text.slice(slicedFactor).length));\n  } // eslint-disable-next-line valid-typeof\n\n\n  if (typeof Text === 'funciton') {\n    const Text = text;\n    return __jsx(Text, null);\n  }\n\n  return __jsx(Value, {\n    tag: !label ? 'h2' : 'h4'\n  }, text);\n};\nexport const Difinition = ({\n  img,\n  color,\n  icon,\n  label,\n  text,\n  tooltip,\n  className,\n  style,\n  stretch,\n  onLink\n}) => __jsx(Wrap, {\n  className: className,\n  style: style,\n  clickable: !!onLink,\n  onClick: () => onLink && onLink()\n}, img && !icon && __jsx(Image, {\n  src: img,\n  alt: 'Avatar'\n}), !img && icon && __jsx(RoundedIcon, {\n  icon: icon,\n  color: color,\n  stroke: `var(--default-color-${color || 'accent'})`\n}), __jsx(Content, null, label && __jsx(Label, {\n  stretch: stretch\n}, label), tooltip ? __jsx(Tooltip, {\n  place: 'top',\n  text: tooltip\n}, __jsx(Row, null, getValue(label, text))) : __jsx(Row, null, getValue(label, text))));\nexport default Difinition;","map":null,"metadata":{},"sourceType":"module"}
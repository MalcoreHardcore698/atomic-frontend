{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Notice from '../../atomic-ui/components/Notice';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport { useMutationEffect } from '../../hooks/useMutationEffect';\nimport { useUpdateEffect } from '../../hooks/useUpdateEffect';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"Notifications__Wrap\",\n  componentId: \"sc-1luuv3g-0\"\n})([\"\"]);\nexport const Notifications = ({\n  user,\n  appearance\n}) => {\n  const [notifications, setNotifications] = useState([]);\n  const unreadedNotificationIds = useMemo(() => notifications.filter(n => n.status === 'UNREADED').map(n => n.id), [notifications]);\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_NOTIFICATIONS, {\n    variables: {\n      author: user\n    }\n  });\n  const [apply, {\n    loading: loadingApply,\n    error: errorApply\n  }] = useMutationEffect(queries.APPLY_INVITE_USER_MEMBER, 'applyInviteUserMember', setNotifications);\n  const [reject, {\n    loading: loadingReject,\n    error: errorReject\n  }] = useMutationEffect(queries.REJECT_INVITE_USER_MEMBER, 'rejectInviteUserMember', setNotifications);\n  const [readNotifications, {\n    loading: loadingReadNotifications\n  }] = useMutation(queries.READ_NOTIFICATIONS);\n\n  const onApply = notice => {\n    var _notice$company;\n\n    return apply({\n      variables: {\n        id: notice.id,\n        email: (_notice$company = notice.company) === null || _notice$company === void 0 ? void 0 : _notice$company.email\n      }\n    });\n  };\n\n  const onReject = notice => {\n    var _notice$company2;\n\n    return reject({\n      variables: {\n        id: notice.id,\n        email: (_notice$company2 = notice.company) === null || _notice$company2 === void 0 ? void 0 : _notice$company2.email\n      }\n    });\n  };\n\n  useUpdateEffect(data, loading, 'getNotifications', setNotifications);\n  useEffect(() => {\n    if ((unreadedNotificationIds === null || unreadedNotificationIds === void 0 ? void 0 : unreadedNotificationIds.length) > 0) {\n      readNotifications({\n        variables: {\n          id: unreadedNotificationIds\n        }\n      });\n    }\n  }, [unreadedNotificationIds, readNotifications]);\n  return /*#__PURE__*/React.createElement(Wrap, null, notifications && !loading && !loadingApply && !loadingReject && !loadingReadNotifications && notifications.length > 0 ? notifications.map(notice => {\n    var _notice$author, _notice$author$avatar;\n\n    return /*#__PURE__*/React.createElement(Notice, _extends({\n      key: notice.id\n    }, notice.author ? {\n      img: ((_notice$author = notice.author) === null || _notice$author === void 0 ? void 0 : (_notice$author$avatar = _notice$author.avatar) === null || _notice$author$avatar === void 0 ? void 0 : _notice$author$avatar.path) || '/images/avatar-default.png'\n    } : {\n      icon: 'infoCircle'\n    }, {\n      title: notice.title,\n      message: notice.message,\n      date: notice.createdAt,\n      appearance: appearance,\n      onApply: notice.type === 'INVITE' && (() => onApply(notice)),\n      onReject: notice.type === 'INVITE' && (() => onReject(notice))\n    }));\n  }) : loading || loadingApply || loadingReject || loadingReadNotifications ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : error || errorApply || errorReject ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0443\\u0447\\u0430\\u0441\\u0442\\u043D\\u0438\\u043A\\u0430\\u0445\") : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      textAlign: 'center'\n    },\n    width: '100%'\n  }, \"\\u0423\\u0432\\u0435\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u0438\\u0439 \\u043D\\u0435\\u0442\"));\n};\nNotifications.defaultProps = {\n  appearance: 'default'\n};\nexport default Notifications;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/Notifications/index.js"],"names":["React","useState","useEffect","useMemo","useMutation","useQuery","styled","Column","Alert","Notice","Spinner","Loader","useMutationEffect","useUpdateEffect","queries","Wrap","Notifications","user","appearance","notifications","setNotifications","unreadedNotificationIds","filter","n","status","map","id","data","loading","error","GET_NOTIFICATIONS","variables","author","apply","loadingApply","errorApply","APPLY_INVITE_USER_MEMBER","reject","loadingReject","errorReject","REJECT_INVITE_USER_MEMBER","readNotifications","loadingReadNotifications","READ_NOTIFICATIONS","onApply","notice","email","company","onReject","length","img","avatar","path","icon","title","message","createdAt","type","width","textAlign","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,qBAAtC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAO,MAAMC,IAAI,GAAGT,MAAM,CAACC,MAAD,CAAT;AAAA;AAAA;AAAA,QAAV;AAEP,OAAO,MAAMS,aAAa,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA0B;AACrD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAMoB,uBAAuB,GAAGlB,OAAO,CACrC,MAAMgB,aAAa,CAACG,MAAd,CAAsBC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAa,UAAzC,EAAqDC,GAArD,CAA0DF,CAAD,IAAOA,CAAC,CAACG,EAAlE,CAD+B,EAErC,CAACP,aAAD,CAFqC,CAAvC;AAKA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BxB,QAAQ,CAACS,OAAO,CAACgB,iBAAT,EAA4B;AACnEC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAEf;AADC;AADwD,GAA5B,CAAzC;AAMA,QAAM,CAACgB,KAAD,EAAQ;AAAEL,IAAAA,OAAO,EAAEM,YAAX;AAAyBL,IAAAA,KAAK,EAAEM;AAAhC,GAAR,IAAwDvB,iBAAiB,CAC7EE,OAAO,CAACsB,wBADqE,EAE7E,uBAF6E,EAG7EhB,gBAH6E,CAA/E;AAMA,QAAM,CAACiB,MAAD,EAAS;AAAET,IAAAA,OAAO,EAAEU,aAAX;AAA0BT,IAAAA,KAAK,EAAEU;AAAjC,GAAT,IAA2D3B,iBAAiB,CAChFE,OAAO,CAAC0B,yBADwE,EAEhF,wBAFgF,EAGhFpB,gBAHgF,CAAlF;AAMA,QAAM,CAACqB,iBAAD,EAAoB;AAAEb,IAAAA,OAAO,EAAEc;AAAX,GAApB,IAA6DtC,WAAW,CAC5EU,OAAO,CAAC6B,kBADoE,CAA9E;;AAIA,QAAMC,OAAO,GAAIC,MAAD;AAAA;;AAAA,WAAYZ,KAAK,CAAC;AAAEF,MAAAA,SAAS,EAAE;AAAEL,QAAAA,EAAE,EAAEmB,MAAM,CAACnB,EAAb;AAAiBoB,QAAAA,KAAK,qBAAED,MAAM,CAACE,OAAT,oDAAE,gBAAgBD;AAAxC;AAAb,KAAD,CAAjB;AAAA,GAAhB;;AAEA,QAAME,QAAQ,GAAIH,MAAD;AAAA;;AAAA,WACfR,MAAM,CAAC;AAAEN,MAAAA,SAAS,EAAE;AAAEL,QAAAA,EAAE,EAAEmB,MAAM,CAACnB,EAAb;AAAiBoB,QAAAA,KAAK,sBAAED,MAAM,CAACE,OAAT,qDAAE,iBAAgBD;AAAxC;AAAb,KAAD,CADS;AAAA,GAAjB;;AAGAjC,EAAAA,eAAe,CAACc,IAAD,EAAOC,OAAP,EAAgB,kBAAhB,EAAoCR,gBAApC,CAAf;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAAmB,uBAAuB,SAAvB,IAAAA,uBAAuB,WAAvB,YAAAA,uBAAuB,CAAE4B,MAAzB,IAAkC,CAAtC,EAAyC;AACvCR,MAAAA,iBAAiB,CAAC;AAChBV,QAAAA,SAAS,EAAE;AACTL,UAAAA,EAAE,EAAEL;AADK;AADK,OAAD,CAAjB;AAKD;AACF,GARQ,EAQN,CAACA,uBAAD,EAA0BoB,iBAA1B,CARM,CAAT;AAUA,sBACE,oBAAC,IAAD,QACGtB,aAAa,IACd,CAACS,OADA,IAED,CAACM,YAFA,IAGD,CAACI,aAHA,IAID,CAACI,wBAJA,IAKDvB,aAAa,CAAC8B,MAAd,GAAuB,CALtB,GAMC9B,aAAa,CAACM,GAAd,CAAmBoB,MAAD;AAAA;;AAAA,wBAChB,oBAAC,MAAD;AACE,MAAA,GAAG,EAAEA,MAAM,CAACnB;AADd,OAEOmB,MAAM,CAACb,MAAP,GACD;AACEkB,MAAAA,GAAG,EAAE,mBAAAL,MAAM,CAACb,MAAP,2FAAemB,MAAf,gFAAuBC,IAAvB,KAA+B;AADtC,KADC,GAID;AACEC,MAAAA,IAAI,EAAE;AADR,KANN;AASE,MAAA,KAAK,EAAER,MAAM,CAACS,KAThB;AAUE,MAAA,OAAO,EAAET,MAAM,CAACU,OAVlB;AAWE,MAAA,IAAI,EAAEV,MAAM,CAACW,SAXf;AAYE,MAAA,UAAU,EAAEtC,UAZd;AAaE,MAAA,OAAO,EAAE2B,MAAM,CAACY,IAAP,KAAgB,QAAhB,KAA6B,MAAMb,OAAO,CAACC,MAAD,CAA1C,CAbX;AAcE,MAAA,QAAQ,EAAEA,MAAM,CAACY,IAAP,KAAgB,QAAhB,KAA6B,MAAMT,QAAQ,CAACH,MAAD,CAA3C;AAdZ,OADgB;AAAA,GAAlB,CAND,GAwBGjB,OAAO,IAAIM,YAAX,IAA2BI,aAA3B,IAA4CI,wBAA5C,gBACF,oBAAC,MAAD,qBACE,oBAAC,OAAD,OADF,CADE,GAIAb,KAAK,IAAIM,UAAT,IAAuBI,WAAvB,gBACF,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAE,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEmB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B;AAAnC,2QADE,gBAKF,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEA,MAAAA,SAAS,EAAE;AAAb,KAAd;AAAuC,IAAA,KAAK,EAAE;AAA9C,6FAlCJ,CADF;AAyCD,CAxFM;AA0FP3C,aAAa,CAAC4C,YAAd,GAA6B;AAC3B1C,EAAAA,UAAU,EAAE;AADe,CAA7B;AAIA,eAAeF,aAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useMutation, useQuery } from '@apollo/react-hooks'\nimport styled from 'styled-components'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Notice from '../../atomic-ui/components/Notice'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport { useMutationEffect } from '../../hooks/useMutationEffect'\nimport { useUpdateEffect } from '../../hooks/useUpdateEffect'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled(Column)``\n\nexport const Notifications = ({ user, appearance }) => {\n  const [notifications, setNotifications] = useState([])\n\n  const unreadedNotificationIds = useMemo(\n    () => notifications.filter((n) => n.status === 'UNREADED').map((n) => n.id),\n    [notifications]\n  )\n\n  const { data, loading, error } = useQuery(queries.GET_NOTIFICATIONS, {\n    variables: {\n      author: user\n    }\n  })\n\n  const [apply, { loading: loadingApply, error: errorApply }] = useMutationEffect(\n    queries.APPLY_INVITE_USER_MEMBER,\n    'applyInviteUserMember',\n    setNotifications\n  )\n\n  const [reject, { loading: loadingReject, error: errorReject }] = useMutationEffect(\n    queries.REJECT_INVITE_USER_MEMBER,\n    'rejectInviteUserMember',\n    setNotifications\n  )\n\n  const [readNotifications, { loading: loadingReadNotifications }] = useMutation(\n    queries.READ_NOTIFICATIONS\n  )\n\n  const onApply = (notice) => apply({ variables: { id: notice.id, email: notice.company?.email } })\n\n  const onReject = (notice) =>\n    reject({ variables: { id: notice.id, email: notice.company?.email } })\n\n  useUpdateEffect(data, loading, 'getNotifications', setNotifications)\n\n  useEffect(() => {\n    if (unreadedNotificationIds?.length > 0) {\n      readNotifications({\n        variables: {\n          id: unreadedNotificationIds\n        }\n      })\n    }\n  }, [unreadedNotificationIds, readNotifications])\n\n  return (\n    <Wrap>\n      {notifications &&\n      !loading &&\n      !loadingApply &&\n      !loadingReject &&\n      !loadingReadNotifications &&\n      notifications.length > 0 ? (\n        notifications.map((notice) => (\n          <Notice\n            key={notice.id}\n            {...(notice.author\n              ? {\n                  img: notice.author?.avatar?.path || '/images/avatar-default.png'\n                }\n              : {\n                  icon: 'infoCircle'\n                })}\n            title={notice.title}\n            message={notice.message}\n            date={notice.createdAt}\n            appearance={appearance}\n            onApply={notice.type === 'INVITE' && (() => onApply(notice))}\n            onReject={notice.type === 'INVITE' && (() => onReject(notice))}\n          />\n        ))\n      ) : loading || loadingApply || loadingReject || loadingReadNotifications ? (\n        <Loader>\n          <Spinner />\n        </Loader>\n      ) : error || errorApply || errorReject ? (\n        <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n          Упс! Не удалось загрузить информацию о участниках\n        </Alert>\n      ) : (\n        <Alert style={{ textAlign: 'center' }} width={'100%'}>\n          Уведомлений нет\n        </Alert>\n      )}\n    </Wrap>\n  )\n}\n\nNotifications.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Notifications\n"]},"metadata":{},"sourceType":"module"}
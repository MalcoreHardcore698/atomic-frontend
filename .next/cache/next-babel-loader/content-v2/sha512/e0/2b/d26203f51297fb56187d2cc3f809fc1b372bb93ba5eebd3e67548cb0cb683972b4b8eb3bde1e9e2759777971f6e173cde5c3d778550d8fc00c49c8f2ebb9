{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\dan82\\\\Documents\\\\workspace\\\\FREELANCE\\\\atomic\\\\atomic-frontend\\\\atomic-ui\\\\components\\\\GlobalSearch\\\\index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\\n  width: 100%;\\n  height: 100%;\\n  flex-grow: 1;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: var(--default-gap);\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Column from '../Column';\nimport Select from '../Select';\nimport Search from '../Search';\nimport Spinner from '../Spinner';\nexport var Wrap = styled(Column)(_templateObject());\n_c = Wrap;\nexport var Loader = styled.div(_templateObject2());\n/*\n * const entities: entity[]\n * type entity = {\n *  label: string;\n *  value: ObjectID | string;\n *  render: ReactNode | Element | string;\n * }\n */\n\n_c2 = Loader;\nexport var GlobalSearch = function GlobalSearch(_ref) {\n  _s();\n\n  var result = _ref.result,\n      search = _ref.search,\n      loading = _ref.loading,\n      entities = _ref.entities,\n      initialEntity = _ref.initialEntity,\n      appearance = _ref.appearance,\n      style = _ref.style,\n      className = _ref.className,\n      onChange = _ref.onChange,\n      onSubmit = _ref.onSubmit;\n\n  var _useState = useState(initialEntity),\n      entity = _useState[0],\n      setEntity = _useState[1];\n\n  var renderContent = function renderContent() {\n    return __jsx(React.Fragment, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }, __jsx(Search, {\n      appearance: 'ghost',\n      placeholder: 'Поиск',\n      defaultValue: search,\n      onSubmit: onSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }), Array.isArray(result) && result.map(function (item) {\n      return entity.render && __jsx(React.Fragment, {\n        key: item.id || item.email,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }\n      }, entity.render(item));\n    }));\n  };\n\n  useEffect(function () {\n    if (onChange) onChange(entity);\n  }, [entity, onChange]);\n  return __jsx(Wrap, {\n    style: style,\n    className: className,\n    appearance: appearance,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(Select, {\n    appearance: 'ghost',\n    defaultValue: entity,\n    placeholder: 'Где будем искать?',\n    label: 'Зона поиска',\n    options: entities,\n    onChange: setEntity,\n    isLoading: loading,\n    isSearchable: true,\n    isClearable: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), !loading && entity && renderContent(), loading && __jsx(Loader, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })));\n};\n\n_s(GlobalSearch, \"EjweL2ygXXZIS0ustJGCa/SQ8f8=\");\n\n_c3 = GlobalSearch;\nGlobalSearch.defaultProps = {\n  appearance: 'clear'\n};\nexport default GlobalSearch;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Loader\");\n$RefreshReg$(_c3, \"GlobalSearch\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/GlobalSearch/index.js"],"names":["React","useState","useEffect","styled","Column","Select","Search","Spinner","Wrap","Loader","div","GlobalSearch","result","search","loading","entities","initialEntity","appearance","style","className","onChange","onSubmit","entity","setEntity","renderContent","Array","isArray","map","item","render","id","email","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport Column from '../Column'\nimport Select from '../Select'\nimport Search from '../Search'\nimport Spinner from '../Spinner'\n\nexport const Wrap = styled(Column)`\n  padding: var(--default-gap);\n`\n\nexport const Loader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n`\n\n/*\n * const entities: entity[]\n * type entity = {\n *  label: string;\n *  value: ObjectID | string;\n *  render: ReactNode | Element | string;\n * }\n */\n\nexport const GlobalSearch = ({\n  result,\n  search,\n  loading,\n  entities,\n  initialEntity,\n  appearance,\n  style,\n  className,\n  onChange,\n  onSubmit\n}) => {\n  const [entity, setEntity] = useState(initialEntity)\n\n  const renderContent = () => (\n    <React.Fragment>\n      <Search\n        appearance={'ghost'}\n        placeholder={'Поиск'}\n        defaultValue={search}\n        onSubmit={onSubmit}\n      />\n\n      {Array.isArray(result) &&\n        result.map(\n          (item) =>\n            entity.render && (\n              <React.Fragment key={item.id || item.email}>{entity.render(item)}</React.Fragment>\n            )\n        )}\n    </React.Fragment>\n  )\n\n  useEffect(() => {\n    if (onChange) onChange(entity)\n  }, [entity, onChange])\n\n  return (\n    <Wrap style={style} className={className} appearance={appearance}>\n      <Select\n        appearance={'ghost'}\n        defaultValue={entity}\n        placeholder={'Где будем искать?'}\n        label={'Зона поиска'}\n        options={entities}\n        onChange={setEntity}\n        isLoading={loading}\n        isSearchable\n        isClearable\n      />\n\n      {!loading && entity && renderContent()}\n\n      {loading && (\n        <Loader>\n          <Spinner />\n        </Loader>\n      )}\n    </Wrap>\n  )\n}\n\nGlobalSearch.defaultProps = {\n  appearance: 'clear'\n}\n\nexport default GlobalSearch\n"]},"metadata":{},"sourceType":"module"}
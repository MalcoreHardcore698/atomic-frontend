{"ast":null,"code":"import React from 'react';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport ContentLayout from '../layouts/default';\nimport ArticleCard from '../components/ArticleCard';\nimport { GridAside as Container } from '../components/Styled';\nimport { onArticleLink } from '../store/helpers/article';\nimport queries from '../graphql/queries';\nconst TITLE = 'Статьи';\nconst START_OFFSET = 6;\n\nconst Articles = ({\n  store\n}) => {\n  const recall = useHelper();\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER',\n      placeholder: 'Дата публикации'\n    }],\n    options: [{\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    query: queries.GET_ARTICLES,\n    store: {\n      documents: store === null || store === void 0 ? void 0 : store.articles\n    }\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, documents.map(article => /*#__PURE__*/React.createElement(ArticleCard, {\n    key: article.id,\n    article: article,\n    onLink: recall(onArticleLink, {\n      id: article.id,\n      article\n    })\n  }))));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let articles = [];\n  let categories = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_ARTICLES,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET,\n        status: 'PUBLISHED'\n      }\n    });\n\n    if (response && response.data) {\n      articles = response.data.getArticles;\n      categories = response.data.getCategories;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        articles,\n        categories\n      }\n    }\n  };\n}\nexport default Articles;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/articles.js"],"names":["React","initializeApollo","useHelper","ContentLayout","ArticleCard","GridAside","Container","onArticleLink","queries","TITLE","START_OFFSET","Articles","store","recall","type","placeholder","label","value","GET_ARTICLES","documents","articles","map","article","id","getServerSideProps","client","categories","response","query","GET_META_ARTICLES","variables","offset","limit","status","data","getArticles","getCategories","err","console","log","props"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,SAAS,IAAIC,SAAtB,QAAuC,sBAAvC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,KAAK,GAAG,QAAd;AACA,MAAMC,YAAY,GAAG,CAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC9B,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AAEA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEO,KADT;AAEE,IAAA,OAAO,EAAE,CAAC;AAAEK,MAAAA,IAAI,EAAE,YAAR;AAAsBC,MAAAA,WAAW,EAAE;AAAnC,KAAD,CAFX;AAGE,IAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAE,iBAAT;AAA4BC,MAAAA,KAAK,EAAE;AAAnC,KAAD,CAHX;AAIE,IAAA,KAAK,EAAET,OAAO,CAACU,YAJjB;AAKE,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAEP,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEQ;AAApB;AALT,KAMG,CAAC;AAAED,IAAAA;AAAF,GAAD,kBACC,oBAAC,SAAD,QACGA,SAAS,CAACE,GAAV,CAAeC,OAAD,iBACb,oBAAC,WAAD;AACE,IAAA,GAAG,EAAEA,OAAO,CAACC,EADf;AAEE,IAAA,OAAO,EAAED,OAFX;AAGE,IAAA,MAAM,EAAET,MAAM,CAACN,aAAD,EAAgB;AAAEgB,MAAAA,EAAE,EAAED,OAAO,CAACC,EAAd;AAAkBD,MAAAA;AAAlB,KAAhB;AAHhB,IADD,CADH,CAPJ,CADF;AAoBD,CAvBD;;AAyBA,OAAO,eAAeE,kBAAf,GAAoC;AACzC,QAAMC,MAAM,GAAGxB,gBAAgB,EAA/B;AAEA,MAAImB,QAAQ,GAAG,EAAf;AACA,MAAIM,UAAU,GAAG,EAAjB;;AAEA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACG,KAAP,CAAa;AAClCA,MAAAA,KAAK,EAAEpB,OAAO,CAACqB,iBADmB;AAElCC,MAAAA,SAAS,EAAE;AACTC,QAAAA,MAAM,EAAE,CADC;AAETC,QAAAA,KAAK,EAAEtB,YAFE;AAGTuB,QAAAA,MAAM,EAAE;AAHC;AAFuB,KAAb,CAAvB;;AASA,QAAIN,QAAQ,IAAIA,QAAQ,CAACO,IAAzB,EAA+B;AAC7Bd,MAAAA,QAAQ,GAAGO,QAAQ,CAACO,IAAT,CAAcC,WAAzB;AACAT,MAAAA,UAAU,GAAGC,QAAQ,CAACO,IAAT,CAAcE,aAA3B;AACD;AACF,GAdD,CAcE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;;AAED,SAAO;AACLG,IAAAA,KAAK,EAAE;AACL5B,MAAAA,KAAK,EAAE;AACLQ,QAAAA,QADK;AAELM,QAAAA;AAFK;AADF;AADF,GAAP;AAQD;AAED,eAAef,QAAf","sourcesContent":["import React from 'react'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport ContentLayout from '../layouts/default'\nimport ArticleCard from '../components/ArticleCard'\nimport { GridAside as Container } from '../components/Styled'\nimport { onArticleLink } from '../store/helpers/article'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Статьи'\nconst START_OFFSET = 6\n\nconst Articles = ({ store }) => {\n  const recall = useHelper()\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      filters={[{ type: 'DATEPICKER', placeholder: 'Дата публикации' }]}\n      options={[{ label: 'Дата публикации', value: 'createdAt' }]}\n      query={queries.GET_ARTICLES}\n      store={{ documents: store?.articles }}>\n      {({ documents }) => (\n        <Container>\n          {documents.map((article) => (\n            <ArticleCard\n              key={article.id}\n              article={article}\n              onLink={recall(onArticleLink, { id: article.id, article })}\n            />\n          ))}\n        </Container>\n      )}\n    </ContentLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let articles = []\n  let categories = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_ARTICLES,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET,\n        status: 'PUBLISHED'\n      }\n    })\n\n    if (response && response.data) {\n      articles = response.data.getArticles\n      categories = response.data.getCategories\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        articles,\n        categories\n      }\n    }\n  }\n}\n\nexport default Articles\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport styled, { css } from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport Row from '../atomic-ui/components/Row';\nimport Column from '../atomic-ui/components/Column';\nimport Switch from '../atomic-ui/components/Switch';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport Button from '../atomic-ui/components/Button';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Tooltip from '../atomic-ui/components/Tooltip';\nimport Text, { Wrap as WrapText } from '../atomic-ui/components/Text';\nimport Icon from '../atomic-ui/components/Icon';\nimport templates from '../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport DefaultLayout from '../layouts/default';\nimport UserBar from '../components/UserBar';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport ProjectList from '../components/ProjectList';\nimport { Loader } from '../components/Styled';\nimport { setFolder } from '../store/actions/root';\nimport { onUserClientEdit, onUserAboutMore, onUserFolderAdd, onUserFolderDelete } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nimport { profilePages } from '../__mock__';\nconst TITLE = 'Профиль';\nconst ContainerInProgress = styled(Row).withConfig({\n  displayName: \"profile__ContainerInProgress\",\n  componentId: \"sc-84d5hd-0\"\n})([\"grid-gap:var(--default-gap);@media only screen and (max-width:768px){flex-direction:column;}\"]);\nconst CreateButton = styled(Button).withConfig({\n  displayName: \"profile__CreateButton\",\n  componentId: \"sc-84d5hd-1\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}\"]);\nconst Organizer = styled(Column).withConfig({\n  displayName: \"profile__Organizer\",\n  componentId: \"sc-84d5hd-2\"\n})([\"width:265px;min-width:265px;\"]);\nconst RemoveTooltip = styled(Tooltip).withConfig({\n  displayName: \"profile__RemoveTooltip\",\n  componentId: \"sc-84d5hd-3\"\n})([\"position:absolute;right:5px;display:none;\"]);\nconst CentralAlert = styled(Alert).withConfig({\n  displayName: \"profile__CentralAlert\",\n  componentId: \"sc-84d5hd-4\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;flex-grow:10;\"]);\nconst ListItem = styled.div.withConfig({\n  displayName: \"profile__ListItem\",\n  componentId: \"sc-84d5hd-5\"\n})([\"position:relative;display:flex;justify-content:space-between;align-items:center;height:var(--input-height-s);cursor:pointer;transition:all 150ms ease;\", \"{display:flex;align-items:center;border-radius:var(--surface-border-radius);background:var(--ghost-color-background);width:100%;height:var(--input-height-s);padding:0 10px;transition:all 150ms ease;}&:hover{\", \"{display:flex;}\", \"{color:black;}}\", \"\"], WrapText, RemoveTooltip, WrapText, ({\n  active\n}) => active && css([\"\", \"{color:var(--default-color-accent);background:var(--default-color-accent-dim);}&:hover{\", \"{color:var(--default-color-accent);}}\"], WrapText, WrapText));\n\nconst Projects = ({\n  variables,\n  projects\n}) => /*#__PURE__*/React.createElement(ProjectList, {\n  variables: variables,\n  initialList: projects,\n  layout: true\n});\n\nconst InProgress = () => {\n  const recall = useHelper();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const dispatch = useDispatch();\n  const defaultFolder = useMemo(() => user === null || user === void 0 ? void 0 : user.folders[0], [user]);\n  const [getProjects, {\n    data,\n    loading,\n    refetch\n  }] = useLazyQuery(queries.GET_PROJECTS_BY_IDS);\n  const [customLoading, setCustomLoading] = useState(false);\n\n  const onFolderClick = async item => {\n    dispatch(setFolder(item));\n\n    if (item && refetch) {\n      setCustomLoading(true);\n      await refetch({\n        projects: item.projects\n      });\n      setCustomLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (!folder && defaultFolder) {\n      dispatch(setFolder(defaultFolder));\n    }\n  }, [folder, defaultFolder, dispatch]);\n  useEffect(() => {\n    var _folder$projects;\n\n    if (!refetch && !data && (folder === null || folder === void 0 ? void 0 : (_folder$projects = folder.projects) === null || _folder$projects === void 0 ? void 0 : _folder$projects.length) > 0) {\n      getProjects({\n        variables: {\n          projects: folder.projects\n        }\n      });\n    }\n  }, [folder, data, refetch, getProjects]);\n  return /*#__PURE__*/React.createElement(ContainerInProgress, null, /*#__PURE__*/React.createElement(Organizer, null, user.folders && user.folders.length > 0 ? /*#__PURE__*/React.createElement(Column, null, user.folders.map(item => /*#__PURE__*/React.createElement(ListItem, {\n    key: item.id,\n    active: folder && item.id === folder.id,\n    onClick: () => onFolderClick(item)\n  }, /*#__PURE__*/React.createElement(Text, null, item.name), /*#__PURE__*/React.createElement(RemoveTooltip, {\n    place: 'left',\n    text: 'Удалить'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    size: 'xs',\n    disabled: loading,\n    onClick: recall(onUserFolderDelete, {\n      id: item.id,\n      mutation: queries.DELETE_USER_FOLDER,\n      callback: () => onFolderClick(defaultFolder)\n    })\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: 'xs',\n    icon: 'delete',\n    stroke: 'white'\n  })))))) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0430\\u043F\\u043E\\u043A \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(CreateButton, {\n    onClick: recall(onUserFolderAdd, {\n      mutation: queries.ADD_USER_FOLDER\n    })\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430\"), /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'white'\n  }))), !loading && !customLoading && data && data.getProjectsByIds.length > 0 ? /*#__PURE__*/React.createElement(ProjectList, {\n    initialList: folder ? data.getProjectsByIds : []\n  }) : loading || customLoading ? /*#__PURE__*/React.createElement(Loader, {\n    style: {\n      flexGrow: 10\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(CentralAlert, null, \"\\u0412 \\u044D\\u0442\\u043E\\u0439 \\u043F\\u0430\\u043F\\u043A\\u0435 \\u043D\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432\"));\n};\n\nconst Profile = ({\n  categories\n}) => {\n  const recall = useHelper();\n  const router = useRouter();\n  const user = useSelector(state => state.user);\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [currentPage, setCurrentPage] = useState(profilePages[0]);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const isAdmin = useMemo(() => (user === null || user === void 0 ? void 0 : user.account) === 'ADMIN', [user]);\n  const renderContentPage = useCallback(() => {\n    if (!user) return null;\n\n    switch (currentPage.value) {\n      case '/projects':\n        return /*#__PURE__*/React.createElement(Projects, {\n          variables: {\n            author: user.email\n          },\n          projects: user.projects\n        });\n\n      case '/liked':\n        return /*#__PURE__*/React.createElement(Projects, {\n          variables: {\n            rating: user.email\n          },\n          projects: user.likedProjects\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(InProgress, null);\n    }\n  }, [user, currentPage]);\n  useEffect(() => {\n    if (!user.authenticated) {\n      router.push('/auth');\n    }\n  }, [user]);\n\n  if (!user.authenticated) {\n    return /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: user.authenticated ? user.name || TITLE : 'Авторизация'\n  }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(UserBar, {\n    user: user,\n    onEdit: recall(onUserClientEdit, {\n      user: user === null || user === void 0 ? void 0 : user.email,\n      canEditAccount: !isAdmin,\n      mutations: {\n        update: queries.UPDATE_CLIENT_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_CLIENT_USER\n      }\n    }),\n    onAboutMore: recall(onUserAboutMore, {\n      user\n    })\n  }), /*#__PURE__*/React.createElement(Switch, {\n    defaultValue: currentPage,\n    options: profilePages,\n    onChange: item => setCurrentPage(item),\n    stretch: true\n  }), /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 'publishedAt',\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 'categories',\n      options: categories.map(category => ({\n        value: category.id,\n        label: category.name\n      })),\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: templates.project.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), renderContentPage()));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let categories = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_CATEGORIES\n    });\n\n    if (response && response.data) {\n      categories = response.data.getCategories;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      categories\n    }\n  };\n}\nexport default Profile;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/profile.js"],"names":["React","useState","useEffect","useCallback","useMemo","useRouter","styled","css","useSelector","useDispatch","useLazyQuery","Row","Column","Switch","Alert","DatePicker","Select","Button","Spinner","Tooltip","Text","Wrap","WrapText","Icon","templates","initializeApollo","useHelper","DefaultLayout","UserBar","FilterBar","SearchBar","ProjectList","Loader","setFolder","onUserClientEdit","onUserAboutMore","onUserFolderAdd","onUserFolderDelete","queries","profilePages","TITLE","ContainerInProgress","CreateButton","Organizer","RemoveTooltip","CentralAlert","ListItem","div","active","Projects","variables","projects","InProgress","recall","user","folder","state","root","dispatch","defaultFolder","folders","getProjects","data","loading","refetch","GET_PROJECTS_BY_IDS","customLoading","setCustomLoading","onFolderClick","item","length","map","id","name","mutation","DELETE_USER_FOLDER","callback","width","textAlign","ADD_USER_FOLDER","getProjectsByIds","flexGrow","Profile","categories","router","date","onChangeDate","select","onChangeSelect","currentPage","setCurrentPage","visibleFilter","setVisibleFilter","isAdmin","account","renderContentPage","value","author","email","rating","likedProjects","authenticated","push","canEditAccount","mutations","update","UPDATE_CLIENT_USER","del","DELETE_USER","changePassword","category","label","project","index","header","getServerSideProps","client","response","query","GET_CATEGORIES","getCategories","err","console","log","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useRouter } from 'next/router'\nimport styled, { css } from 'styled-components'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport Row from '../atomic-ui/components/Row'\nimport Column from '../atomic-ui/components/Column'\nimport Switch from '../atomic-ui/components/Switch'\nimport Alert from '../atomic-ui/components/Alert'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Select from '../atomic-ui/components/Select'\nimport Button from '../atomic-ui/components/Button'\nimport Spinner from '../atomic-ui/components/Spinner'\nimport Tooltip from '../atomic-ui/components/Tooltip'\nimport Text, { Wrap as WrapText } from '../atomic-ui/components/Text'\nimport Icon from '../atomic-ui/components/Icon'\nimport templates from '../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport DefaultLayout from '../layouts/default'\nimport UserBar from '../components/UserBar'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport ProjectList from '../components/ProjectList'\nimport { Loader } from '../components/Styled'\nimport { setFolder } from '../store/actions/root'\nimport {\n  onUserClientEdit,\n  onUserAboutMore,\n  onUserFolderAdd,\n  onUserFolderDelete\n} from '../store/helpers/user'\nimport queries from '../graphql/queries'\nimport { profilePages } from '../__mock__'\n\nconst TITLE = 'Профиль'\n\nconst ContainerInProgress = styled(Row)`\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`\n\nconst CreateButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  grid-gap: 10px;\n\n  span {\n    white-space: nowrap;\n  }\n`\n\nconst Organizer = styled(Column)`\n  width: 265px;\n  min-width: 265px;\n`\n\nconst RemoveTooltip = styled(Tooltip)`\n  position: absolute;\n  right: 5px;\n  display: none;\n`\n\nconst CentralAlert = styled(Alert)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  flex-grow: 10;\n`\n\nconst ListItem = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: var(--input-height-s);\n  cursor: pointer;\n  transition: all 150ms ease;\n\n  ${WrapText} {\n    display: flex;\n    align-items: center;\n    border-radius: var(--surface-border-radius);\n    background: var(--ghost-color-background);\n    width: 100%;\n    height: var(--input-height-s);\n    padding: 0 10px;\n    transition: all 150ms ease;\n  }\n\n  &:hover {\n    ${RemoveTooltip} {\n      display: flex;\n    }\n\n    ${WrapText} {\n      color: black;\n    }\n  }\n\n  ${({ active }) =>\n    active &&\n    css`\n      ${WrapText} {\n        color: var(--default-color-accent);\n        background: var(--default-color-accent-dim);\n      }\n\n      &:hover {\n        ${WrapText} {\n          color: var(--default-color-accent);\n        }\n      }\n    `}\n`\n\nconst Projects = ({ variables, projects }) => (\n  <ProjectList variables={variables} initialList={projects} layout />\n)\n\nconst InProgress = () => {\n  const recall = useHelper()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder\n  }))\n  const dispatch = useDispatch()\n\n  const defaultFolder = useMemo(() => user?.folders[0], [user])\n  const [getProjects, { data, loading, refetch }] = useLazyQuery(queries.GET_PROJECTS_BY_IDS)\n  const [customLoading, setCustomLoading] = useState(false)\n\n  const onFolderClick = async (item) => {\n    dispatch(setFolder(item))\n    if (item && refetch) {\n      setCustomLoading(true)\n      await refetch({ projects: item.projects })\n      setCustomLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    if (!folder && defaultFolder) {\n      dispatch(setFolder(defaultFolder))\n    }\n  }, [folder, defaultFolder, dispatch])\n\n  useEffect(() => {\n    if (!refetch && !data && folder?.projects?.length > 0) {\n      getProjects({\n        variables: { projects: folder.projects }\n      })\n    }\n  }, [folder, data, refetch, getProjects])\n\n  return (\n    <ContainerInProgress>\n      <Organizer>\n        {user.folders && user.folders.length > 0 ? (\n          <Column>\n            {user.folders.map((item) => (\n              <ListItem\n                key={item.id}\n                active={folder && item.id === folder.id}\n                onClick={() => onFolderClick(item)}>\n                <Text>{item.name}</Text>\n\n                <RemoveTooltip place={'left'} text={'Удалить'}>\n                  <Button\n                    type={'button'}\n                    kind={'icon'}\n                    size={'xs'}\n                    disabled={loading}\n                    onClick={recall(onUserFolderDelete, {\n                      id: item.id,\n                      mutation: queries.DELETE_USER_FOLDER,\n                      callback: () => onFolderClick(defaultFolder)\n                    })}>\n                    <Icon size={'xs'} icon={'delete'} stroke={'white'} />\n                  </Button>\n                </RemoveTooltip>\n              </ListItem>\n            ))}\n          </Column>\n        ) : (\n          <Alert style={{ width: '100%', textAlign: 'center' }}>Папок нет</Alert>\n        )}\n        <CreateButton onClick={recall(onUserFolderAdd, { mutation: queries.ADD_USER_FOLDER })}>\n          <span>Новая папка</span>\n          <Icon icon={'add'} stroke={'white'} />\n        </CreateButton>\n      </Organizer>\n\n      {!loading && !customLoading && data && data.getProjectsByIds.length > 0 ? (\n        <ProjectList initialList={folder ? data.getProjectsByIds : []} />\n      ) : loading || customLoading ? (\n        <Loader style={{ flexGrow: 10 }}>\n          <Spinner />\n        </Loader>\n      ) : (\n        <CentralAlert>В этой папке нет проектов</CentralAlert>\n      )}\n    </ContainerInProgress>\n  )\n}\n\nconst Profile = ({ categories }) => {\n  const recall = useHelper()\n  const router = useRouter()\n  const user = useSelector((state) => state.user)\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [currentPage, setCurrentPage] = useState(profilePages[0])\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const isAdmin = useMemo(() => user?.account === 'ADMIN', [user])\n\n  const renderContentPage = useCallback(() => {\n    if (!user) return null\n    switch (currentPage.value) {\n      case '/projects':\n        return <Projects variables={{ author: user.email }} projects={user.projects} />\n      case '/liked':\n        return <Projects variables={{ rating: user.email }} projects={user.likedProjects} />\n      default:\n        return <InProgress />\n    }\n  }, [user, currentPage])\n\n  useEffect(() => {\n    if (!user.authenticated) {\n      router.push('/auth')\n    }\n  }, [user])\n\n  if (!user.authenticated) {\n    return (\n      <Loader>\n        <Spinner />\n      </Loader>\n    )\n  }\n\n  return (\n    <DefaultLayout title={user.authenticated ? user.name || TITLE : 'Авторизация'}>\n      <Column>\n        <UserBar\n          user={user}\n          onEdit={recall(onUserClientEdit, {\n            user: user?.email,\n            canEditAccount: !isAdmin,\n            mutations: {\n              update: queries.UPDATE_CLIENT_USER,\n              del: queries.DELETE_USER,\n              changePassword: queries.UPDATE_CLIENT_USER\n            }\n          })}\n          onAboutMore={recall(onUserAboutMore, { user })}\n        />\n\n        <Switch\n          defaultValue={currentPage}\n          options={profilePages}\n          onChange={(item) => setCurrentPage(item)}\n          stretch\n        />\n\n        <SearchBar onChangeFilter={() => setVisibleFilter(!visibleFilter)} />\n\n        <FilterBar\n          isOpen={visibleFilter}\n          filters={[\n            <DatePicker\n              key={'publishedAt'}\n              value={date}\n              placeholder={'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />,\n            <Select\n              key={'categories'}\n              options={categories.map((category) => ({\n                value: category.id,\n                label: category.name\n              }))}\n              placeholder={'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          ]}\n          options={templates.project.map((item, index) => ({\n            label: item.header,\n            value: index\n          }))}\n        />\n\n        {renderContentPage()}\n      </Column>\n    </DefaultLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let categories = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_CATEGORIES\n    })\n\n    if (response && response.data) {\n      categories = response.data.getCategories\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      categories\n    }\n  }\n}\n\nexport default Profile\n"]},"metadata":{},"sourceType":"module"}
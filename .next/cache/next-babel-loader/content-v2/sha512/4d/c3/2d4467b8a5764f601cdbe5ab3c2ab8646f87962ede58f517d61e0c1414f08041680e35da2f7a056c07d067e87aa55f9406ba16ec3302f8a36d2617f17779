{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Switch, { Track as SwitchTrack } from '../../atomic-ui/components/Switch';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nexport var Wrap = styled(Column).withConfig({\n  displayName: \"HandleBar__Wrap\",\n  componentId: \"phr6ix-0\"\n})([\"\"]);\n_c = Wrap;\nexport var Header = styled(Row).withConfig({\n  displayName: \"HandleBar__Header\",\n  componentId: \"phr6ix-1\"\n})([\"justify-content:space-between;grid-gap:var(--default-gap);flex-wrap:wrap;\"]);\n_c2 = Header;\nexport var ActionGroup = styled(Row).withConfig({\n  displayName: \"HandleBar__ActionGroup\",\n  componentId: \"phr6ix-2\"\n})([\"justify-content:flex-end;@media only screen and (max-width:996px){width:100%;\", \"{width:auto;}}@media only screen and (max-width:480px){flex-wrap:wrap;grid-gap:var(--default-gap);\", \"{flex-direction:row;flex-grow:1;}\", \"{button{width:100%;height:100%;}}}\"], SwitchTrack, SwitchTrack, WrapTooltip);\n_c3 = ActionGroup;\nexport var CreateButton = styled(Button).withConfig({\n  displayName: \"HandleBar__CreateButton\",\n  componentId: \"phr6ix-3\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}@media only screen and (max-width:996px){width:100%;}\"]);\n_c4 = CreateButton;\nexport var Footer = styled(Row).withConfig({\n  displayName: \"HandleBar__Footer\",\n  componentId: \"phr6ix-4\"\n})([\"justify-content:space-between;@media only screen and (max-width:480px){flex-direction:column;align-items:end;grid-gap:var(--default-gap);}\"]);\n_c5 = Footer;\nvar displayMethods = [{\n  label: /*#__PURE__*/React.createElement(Icon, {\n    icon: 'menu'\n  }),\n  value: 'list',\n  tooltip: 'Отображение списком'\n}, {\n  label: /*#__PURE__*/React.createElement(Icon, {\n    icon: 'category'\n  }),\n  value: 'grid',\n  tooltip: 'Отображение сеткой'\n}];\nexport var Handle = function Handle(_ref) {\n  _s2();\n\n  var icon = _ref.icon,\n      title = _ref.title,\n      buttonCreateText = _ref.buttonCreateText,\n      onCreate = _ref.onCreate,\n      onDeleteChecked = _ref.onDeleteChecked,\n      onChangeVisibleFilter = _ref.onChangeVisibleFilter,\n      onChangeDisplayMethod = _ref.onChangeDisplayMethod;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visibleFilter = _useState2[0],\n      setVisibleFilter = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayMethod = _useState4[0],\n      setDisplayMethod = _useState4[1];\n\n  var onVisibleFilter = function onVisibleFilter() {\n    setVisibleFilter(!visibleFilter);\n    if (onChangeVisibleFilter) onChangeVisibleFilter();\n  };\n\n  var onDisplayMethod = function onDisplayMethod(item) {\n    setDisplayMethod(item);\n    if (onChangeDisplayMethod) onChangeDisplayMethod(item);\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Difinition, {\n    icon: icon,\n    text: title\n  }), /*#__PURE__*/React.createElement(ActionGroup, null, onCreate && /*#__PURE__*/React.createElement(CreateButton, {\n    type: 'button',\n    onClick: onCreate\n  }, /*#__PURE__*/React.createElement(\"span\", null, buttonCreateText), /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'white'\n  })), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отображение фильтров'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onVisibleFilter,\n    revert: !visibleFilter\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'filter2',\n    stroke: !visibleFilter ? 'var(--default-color-accent)' : 'white'\n  }))), /*#__PURE__*/React.createElement(Switch, {\n    defaultValue: displayMethod || displayMethods[1],\n    options: displayMethods,\n    onChange: function onChange(item) {\n      return onDisplayMethod(item);\n    }\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Footer, null, /*#__PURE__*/React.createElement(Checkbox, {\n    label: 'Выделить все'\n  }), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      color: 'var(--default-color-red)'\n    },\n    appearance: 'clear',\n    onClick: onDeleteChecked\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0432\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u043E\\u0435\")));\n};\n\n_s2(Handle, \"RwsiX6on8DZu5TEYzAikoVJa+EM=\");\n\n_c6 = Handle;\nexport default Handle;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"ActionGroup\");\n$RefreshReg$(_c4, \"CreateButton\");\n$RefreshReg$(_c5, \"Footer\");\n$RefreshReg$(_c6, \"Handle\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/HandleBar/index.js"],"names":["React","useState","styled","Row","Column","Button","Icon","Switch","Track","SwitchTrack","Difinition","Checkbox","Divider","Tooltip","Wrap","WrapTooltip","Header","ActionGroup","CreateButton","Footer","displayMethods","label","value","tooltip","Handle","icon","title","buttonCreateText","onCreate","onDeleteChecked","onChangeVisibleFilter","onChangeDisplayMethod","visibleFilter","setVisibleFilter","displayMethod","setDisplayMethod","onVisibleFilter","onDisplayMethod","item","color"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,MAAP,IAAiBC,KAAK,IAAIC,WAA1B,QAA6C,mCAA7C;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,OAAP,IAAkBC,IAAI,IAAIC,WAA1B,QAA6C,oCAA7C;AAEA,OAAO,IAAMD,IAAI,GAAGZ,MAAM,CAACE,MAAD,CAAT;AAAA;AAAA;AAAA,QAAV;KAAMU,I;AAEb,OAAO,IAAME,MAAM,GAAGd,MAAM,CAACC,GAAD,CAAT;AAAA;AAAA;AAAA,iFAAZ;MAAMa,M;AAMb,OAAO,IAAMC,WAAW,GAAGf,MAAM,CAACC,GAAD,CAAT;AAAA;AAAA;AAAA,uQAMlBM,WANkB,EAelBA,WAfkB,EAoBlBM,WApBkB,CAAjB;MAAME,W;AA6Bb,OAAO,IAAMC,YAAY,GAAGhB,MAAM,CAACG,MAAD,CAAT;AAAA;AAAA;AAAA,2JAAlB;MAAMa,Y;AAeb,OAAO,IAAMC,MAAM,GAAGjB,MAAM,CAACC,GAAD,CAAT;AAAA;AAAA;AAAA,kJAAZ;MAAMgB,M;AAUb,IAAMC,cAAc,GAAG,CACrB;AAAEC,EAAAA,KAAK,eAAE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,IAAT;AAAiCC,EAAAA,KAAK,EAAE,MAAxC;AAAgDC,EAAAA,OAAO,EAAE;AAAzD,CADqB,EAErB;AAAEF,EAAAA,KAAK,eAAE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,IAAT;AAAqCC,EAAAA,KAAK,EAAE,MAA5C;AAAoDC,EAAAA,OAAO,EAAE;AAA7D,CAFqB,CAAvB;AAKA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,OAQhB;AAAA;;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,MALJC,gBAKI,QALJA,gBAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,eAGI,QAHJA,eAGI;AAAA,MAFJC,qBAEI,QAFJA,qBAEI;AAAA,MADJC,qBACI,QADJA,qBACI;;AAAA,kBACsC9B,QAAQ,CAAC,KAAD,CAD9C;AAAA;AAAA,MACG+B,aADH;AAAA,MACkBC,gBADlB;;AAAA,mBAEsChC,QAAQ,CAAC,IAAD,CAF9C;AAAA;AAAA,MAEGiC,aAFH;AAAA,MAEkBC,gBAFlB;;AAIJ,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BH,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACA,QAAIF,qBAAJ,EAA2BA,qBAAqB;AACjD,GAHD;;AAKA,MAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAU;AAChCH,IAAAA,gBAAgB,CAACG,IAAD,CAAhB;AACA,QAAIP,qBAAJ,EAA2BA,qBAAqB,CAACO,IAAD,CAArB;AAC5B,GAHD;;AAKA,sBACE,oBAAC,IAAD,qBACE,oBAAC,MAAD,qBACE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEb,IAAlB;AAAwB,IAAA,IAAI,EAAEC;AAA9B,IADF,eAGE,oBAAC,WAAD,QACGE,QAAQ,iBACP,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAE,QAApB;AAA8B,IAAA,OAAO,EAAEA;AAAvC,kBACE,kCAAOD,gBAAP,CADF,eAEE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,KAAZ;AAAmB,IAAA,MAAM,EAAE;AAA3B,IAFF,CAFJ,eAQE,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAE;AAAf,kBACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE,QAAd;AAAwB,IAAA,IAAI,EAAE,MAA9B;AAAsC,IAAA,OAAO,EAAES,eAA/C;AAAgE,IAAA,MAAM,EAAE,CAACJ;AAAzE,kBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAE,SADR;AAEE,IAAA,MAAM,EAAE,CAACA,aAAD,GAAiB,6BAAjB,GAAiD;AAF3D,IADF,CADF,CARF,eAiBE,oBAAC,MAAD;AACE,IAAA,YAAY,EAAEE,aAAa,IAAId,cAAc,CAAC,CAAD,CAD/C;AAEE,IAAA,OAAO,EAAEA,cAFX;AAGE,IAAA,QAAQ,EAAE,kBAACkB,IAAD;AAAA,aAAUD,eAAe,CAACC,IAAD,CAAzB;AAAA;AAHZ,IAjBF,CAHF,CADF,eA6BE,oBAAC,OAAD;AAAS,IAAA,KAAK;AAAd,IA7BF,eA+BE,oBAAC,MAAD,qBACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAjB,IADF,eAEE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADT;AAEE,IAAA,UAAU,EAAE,OAFd;AAGE,IAAA,OAAO,EAAEV;AAHX,+GAFF,CA/BF,CADF;AA2CD,CAjEM;;IAAML,M;;MAAAA,M;AAmEb,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Button from '../../atomic-ui/components/Button'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Switch, { Track as SwitchTrack } from '../../atomic-ui/components/Switch'\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport Checkbox from '../../atomic-ui/components/Checkbox'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip'\n\nexport const Wrap = styled(Column)``\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n  grid-gap: var(--default-gap);\n  flex-wrap: wrap;\n`\n\nexport const ActionGroup = styled(Row)`\n  justify-content: flex-end;\n\n  @media only screen and (max-width: 996px) {\n    width: 100%;\n\n    ${SwitchTrack} {\n      width: auto;\n    }\n  }\n\n  @media only screen and (max-width: 480px) {\n    flex-wrap: wrap;\n    grid-gap: var(--default-gap);\n\n    ${SwitchTrack} {\n      flex-direction: row;\n      flex-grow: 1;\n    }\n\n    ${WrapTooltip} {\n      button {\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n`\n\nexport const CreateButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  grid-gap: 10px;\n\n  span {\n    white-space: nowrap;\n  }\n\n  @media only screen and (max-width: 996px) {\n    width: 100%;\n  }\n`\n\nexport const Footer = styled(Row)`\n  justify-content: space-between;\n\n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n    align-items: end;\n    grid-gap: var(--default-gap);\n  }\n`\n\nconst displayMethods = [\n  { label: <Icon icon={'menu'} />, value: 'list', tooltip: 'Отображение списком' },\n  { label: <Icon icon={'category'} />, value: 'grid', tooltip: 'Отображение сеткой' }\n]\n\nexport const Handle = ({\n  icon,\n  title,\n  buttonCreateText,\n  onCreate,\n  onDeleteChecked,\n  onChangeVisibleFilter,\n  onChangeDisplayMethod\n}) => {\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [displayMethod, setDisplayMethod] = useState(null)\n\n  const onVisibleFilter = () => {\n    setVisibleFilter(!visibleFilter)\n    if (onChangeVisibleFilter) onChangeVisibleFilter()\n  }\n\n  const onDisplayMethod = (item) => {\n    setDisplayMethod(item)\n    if (onChangeDisplayMethod) onChangeDisplayMethod(item)\n  }\n\n  return (\n    <Wrap>\n      <Header>\n        <Difinition icon={icon} text={title} />\n\n        <ActionGroup>\n          {onCreate && (\n            <CreateButton type={'button'} onClick={onCreate}>\n              <span>{buttonCreateText}</span>\n              <Icon icon={'add'} stroke={'white'} />\n            </CreateButton>\n          )}\n\n          <Tooltip text={'Отображение фильтров'}>\n            <Button type={'button'} kind={'icon'} onClick={onVisibleFilter} revert={!visibleFilter}>\n              <Icon\n                icon={'filter2'}\n                stroke={!visibleFilter ? 'var(--default-color-accent)' : 'white'}\n              />\n            </Button>\n          </Tooltip>\n\n          <Switch\n            defaultValue={displayMethod || displayMethods[1]}\n            options={displayMethods}\n            onChange={(item) => onDisplayMethod(item)}\n          />\n        </ActionGroup>\n      </Header>\n\n      <Divider clear />\n\n      <Footer>\n        <Checkbox label={'Выделить все'} />\n        <Button\n          style={{ color: 'var(--default-color-red)' }}\n          appearance={'clear'}\n          onClick={onDeleteChecked}>\n          Удалить выделенное\n        </Button>\n      </Footer>\n    </Wrap>\n  )\n}\n\nexport default Handle\n"]},"metadata":{},"sourceType":"module"}
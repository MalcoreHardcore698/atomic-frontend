{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onProjectAdd, onProjectCreate, onProjectEdit, onProjectLink, onProjectRemove, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user';\nimport { setUserFolder, updateUser } from '../store/actions/user';\nimport { getProjectLinkProps } from './useEntityQuery';\nimport { useHelper } from './useHelper';\nimport { useMutate } from './useMutate';\nimport queries from '../graphql/queries';\nexport const useProject = ({\n  isManage\n} = {}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const dispatch = useDispatch();\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  const hasAdded = useCallback(project => {\n    var _user$folders;\n\n    return !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === project.id))));\n  }, [user]);\n  const hasLiked = useCallback(project => !!(project.rating || []).find(item => item.email === user.email), [user]);\n  const onAdd = useCallback(project => recall(onProjectAdd, {\n    id: project.id,\n    folders: user === null || user === void 0 ? void 0 : user.folders,\n    mutations: {\n      addProject: queries.ADD_USER_PROJECT,\n      createFolder: queries.ADD_USER_FOLDER\n    },\n    callback: item => {\n      const result = { ...item,\n        projects: [...item.projects, project.id]\n      };\n      dispatch(setUserFolder(result));\n    }\n  })(), [user, recall, dispatch]);\n  const onLike = useCallback(project => {\n    if (user.email) {\n      mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject)));\n    }\n  }, [user, mutate, dispatch]);\n  const onLink = useCallback(project => {\n    var _user$projects;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    recall(onProjectLink, getProjectLinkProps(project.id, user, owned, dispatch, mutate, recall, item => {\n      const result = { ...item,\n        projects: [...item.projects, project.id]\n      };\n      dispatch(setUserFolder(result));\n    }))();\n  }, [user, dispatch, mutate, recall]);\n  const onRemove = useCallback(project => recall(onProjectRemove, {\n    id: project.id,\n    folder,\n    mutation: queries.REMOVE_USER_PROJECT\n  })(), [user, recall]);\n  const onAboutMore = useCallback(project => {\n    recall(onUserAboutMore, {\n      user: project\n    })();\n  }, [recall]);\n  const onCompanyLink = useCallback(project => {\n    var _project$company;\n\n    recall(onUserLink, {\n      id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      recipient: project.author,\n      query: queries.GET_USER_CHATS,\n      mutation: queries.SEND_MESSAGE\n    })();\n  }, [user, recall]);\n  const onScreenshotClick = useCallback((project, key) => {\n    recall(onProjectScreenshot, {\n      screenshots: [project.preview, ...project.screenshots],\n      key\n    })();\n  }, [recall]);\n\n  const onEdit = (project, onAfter) => recall(onProjectEdit, {\n    id: project.id,\n    canEditStatus,\n    mutation: queries.UPDATE_PROJECT,\n    query: queries.GET_USERS,\n    onCompanyInputChange: mutate(queries.GET_USERS, {\n      account: 'ENTITY'\n    }),\n    onAfter\n  })();\n\n  const onCreate = onAfter => recall(onProjectCreate, {\n    canEditStatus,\n    mutation: queries.CREATE_PROJECT,\n    query: queries.GET_USERS,\n    onAfter\n  })();\n\n  return {\n    user,\n    hasAdded,\n    hasLiked,\n    onAdd,\n    onLike,\n    onLink,\n    onRemove,\n    onAboutMore,\n    onCompanyLink,\n    onScreenshotClick,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  };\n};","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/hooks/useProject.js"],"names":["useCallback","useMemo","useDispatch","useSelector","onProjectAdd","onProjectCreate","onProjectEdit","onProjectLink","onProjectRemove","onProjectScreenshot","onUserAboutMore","onUserLink","setUserFolder","updateUser","getProjectLinkProps","useHelper","useMutate","queries","useProject","isManage","recall","mutate","user","folder","state","root","dispatch","canEditStatus","role","name","hasAdded","project","folders","find","projects","item","id","hasLiked","rating","email","onAdd","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","callback","result","onLike","LIKE_PROJECT","response","data","likeProject","onLink","owned","candidate","onRemove","mutation","REMOVE_USER_PROJECT","onAboutMore","onCompanyLink","company","auth","recipient","author","query","GET_USER_CHATS","SEND_MESSAGE","onScreenshotClick","key","screenshots","preview","onEdit","onAfter","UPDATE_PROJECT","GET_USERS","onCompanyInputChange","account","onCreate","CREATE_PROJECT"],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  onProjectAdd,\n  onProjectCreate,\n  onProjectEdit,\n  onProjectLink,\n  onProjectRemove,\n  onProjectScreenshot\n} from '../store/helpers/project'\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user'\nimport { setUserFolder, updateUser } from '../store/actions/user'\nimport { getProjectLinkProps } from './useEntityQuery'\nimport { useHelper } from './useHelper'\nimport { useMutate } from './useMutate'\nimport queries from '../graphql/queries'\n\nexport const useProject = ({ isManage } = {}) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder\n  }))\n  const dispatch = useDispatch()\n\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  const hasAdded = useCallback(\n    (project) =>\n      !!user?.folders?.find((folder) => !!folder?.projects.find((item) => item === project.id)),\n    [user]\n  )\n\n  const hasLiked = useCallback(\n    (project) => !!(project.rating || []).find((item) => item.email === user.email),\n    [user]\n  )\n\n  const onAdd = useCallback(\n    (project) =>\n      recall(onProjectAdd, {\n        id: project.id,\n        folders: user?.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        },\n        callback: (item) => {\n          const result = { ...item, projects: [...item.projects, project.id] }\n          dispatch(setUserFolder(result))\n        }\n      })(),\n    [user, recall, dispatch]\n  )\n\n  const onLike = useCallback(\n    (project) => {\n      if (user.email) {\n        mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n          dispatch(updateUser(response.data.likeProject))\n        )\n      }\n    },\n    [user, mutate, dispatch]\n  )\n\n  const onLink = useCallback(\n    (project) => {\n      const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n      recall(\n        onProjectLink,\n        getProjectLinkProps(project.id, user, owned, dispatch, mutate, recall, (item) => {\n          const result = { ...item, projects: [...item.projects, project.id] }\n          dispatch(setUserFolder(result))\n        })\n      )()\n    },\n    [user, dispatch, mutate, recall]\n  )\n\n  const onRemove = useCallback(\n    (project) =>\n      recall(onProjectRemove, {\n        id: project.id,\n        folder,\n        mutation: queries.REMOVE_USER_PROJECT\n      })(),\n    [user, recall]\n  )\n\n  const onAboutMore = useCallback(\n    (project) => {\n      recall(onUserAboutMore, { user: project })()\n    },\n    [recall]\n  )\n\n  const onCompanyLink = useCallback(\n    (project) => {\n      recall(onUserLink, {\n        id: project.company?.email,\n        auth: user?.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      })()\n    },\n    [user, recall]\n  )\n\n  const onScreenshotClick = useCallback(\n    (project, key) => {\n      recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    },\n    [recall]\n  )\n\n  const onEdit = (project, onAfter) =>\n    recall(onProjectEdit, {\n      id: project.id,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, { account: 'ENTITY' }),\n      onAfter\n    })()\n\n  const onCreate = (onAfter) =>\n    recall(onProjectCreate, {\n      canEditStatus,\n      mutation: queries.CREATE_PROJECT,\n      query: queries.GET_USERS,\n      onAfter\n    })()\n\n  return {\n    user,\n    hasAdded,\n    hasLiked,\n    onAdd,\n    onLike,\n    onLink,\n    onRemove,\n    onAboutMore,\n    onCompanyLink,\n    onScreenshotClick,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
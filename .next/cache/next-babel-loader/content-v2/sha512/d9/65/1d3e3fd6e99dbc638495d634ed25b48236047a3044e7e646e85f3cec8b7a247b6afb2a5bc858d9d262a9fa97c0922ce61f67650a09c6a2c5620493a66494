{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Column from '../atomic-ui/components/Column';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport { useHelper } from '../hooks/useHelper';\nimport { useMutate } from '../hooks/useMutate';\nimport DefaultLayout from '../layouts/default';\nimport ProjectCard from '../components/ProjectCard';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport { updateUser } from '../store/actions/user';\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserLink } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nimport { filters } from '../__mock__';\nconst TITLE = 'Проекты';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"projects__Wrap\",\n  componentId: \"sc-3yxn9c-0\"\n})([\"margin-top:120px;margin-bottom:80px;@media only screen and (max-width:480px){margin-top:0;}\"]);\n_c = Wrap;\nconst Container = styled.aside.withConfig({\n  displayName: \"projects__Container\",\n  componentId: \"sc-3yxn9c-1\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\n_c2 = Container;\n\nconst Projects = ({\n  store,\n  categories\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const projects = useMemo(() => documents || store.projects, [documents, store]);\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: filters\n  }), /*#__PURE__*/React.createElement(Container, null, projects.length > 0 ? projects.map(project => {\n    var _user$projects, _project$company;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    return /*#__PURE__*/React.createElement(ProjectCard, {\n      key: project.id,\n      project: project,\n      owned: owned,\n      liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user,\n        owned\n      }),\n      onLike: (user === null || user === void 0 ? void 0 : user.email) && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onAdd: (user === null || user === void 0 ? void 0 : user.email) && recall(onProjectAdd, {\n        id: project.id\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    });\n  }) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\"))));\n};\n\n_s(Projects, \"xvhPvZqI2G0+X8g4i9f2Q3czwhc=\", false, function () {\n  return [useHelper, useMutate, useSelector, useDispatch];\n});\n\n_c3 = Projects;\nexport var __N_SSP = true;\nexport default Projects;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Projects\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/projects.js"],"names":["React","useState","useMemo","styled","useSelector","useDispatch","Column","Alert","DatePicker","Select","useHelper","useMutate","DefaultLayout","ProjectCard","FilterBar","SearchBar","updateUser","onProjectLink","onProjectAdd","onProjectScreenshot","onUserLink","queries","filters","TITLE","Wrap","Container","aside","Projects","store","categories","recall","mutate","user","documents","state","dispatch","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","projects","item","length","map","project","owned","find","candidate","id","likedProjects","auth","email","LIKE_PROJECT","response","data","likeProject","company","recipient","author","query","GET_USER_CHATS","mutation","SEND_MESSAGE","_","key","screenshots","preview","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Column from '../atomic-ui/components/Column'\nimport Alert from '../atomic-ui/components/Alert'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Select from '../atomic-ui/components/Select'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport { useMutate } from '../hooks/useMutate'\nimport DefaultLayout from '../layouts/default'\nimport ProjectCard from '../components/ProjectCard'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport { updateUser } from '../store/actions/user'\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project'\nimport { onUserLink } from '../store/helpers/user'\nimport queries from '../graphql/queries'\nimport { filters } from '../__mock__'\n\nconst TITLE = 'Проекты'\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst Container = styled.aside`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nconst Projects = ({ store, categories }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    documents: state.documents\n  }))\n  const dispatch = useDispatch()\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n\n  const projects = useMemo(() => documents || store.projects, [documents, store])\n\n  return (\n    <DefaultLayout title={TITLE}>\n      <Wrap>\n        <SearchBar onChangeFilter={() => setVisibleFilter(!visibleFilter)} />\n\n        <FilterBar\n          isOpen={visibleFilter}\n          filters={[\n            <DatePicker\n              key={0}\n              value={date}\n              placeholder={'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />,\n            <Select\n              key={1}\n              options={categories}\n              placeholder={'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          ]}\n          options={filters}\n        />\n\n        <Container>\n          {projects.length > 0 ? (\n            projects.map((project) => {\n              const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n\n              return (\n                <ProjectCard\n                  key={project.id}\n                  project={project}\n                  owned={owned}\n                  liked={!!(user?.likedProjects || []).find((item) => item.id === project.id)}\n                  onLink={recall(onProjectLink, { id: project.id, auth: user, owned })}\n                  onLike={\n                    user?.email &&\n                    mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                      dispatch(updateUser(response.data.likeProject))\n                    )\n                  }\n                  onAdd={user?.email && recall(onProjectAdd, { id: project.id })}\n                  onCompanyLink={recall(onUserLink, {\n                    id: project.company?.email,\n                    auth: user?.email,\n                    recipient: project.author,\n                    query: queries.GET_USER_CHATS,\n                    mutation: queries.SEND_MESSAGE\n                  })}\n                  onScreenshotClick={(_, key) =>\n                    recall(onProjectScreenshot, {\n                      screenshots: [project.preview, ...project.screenshots],\n                      key\n                    })()\n                  }\n                />\n              )\n            })\n          ) : (\n            <Alert style={{ width: '100%', textAlign: 'center' }}>Проектов нет</Alert>\n          )}\n        </Container>\n      </Wrap>\n    </DefaultLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let projects = []\n  let categories = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_PROJECTS,\n      variables: {\n        status: 'PUBLISHED'\n      }\n    })\n\n    if (response && response.data) {\n      projects = response.data.getProjects\n      categories = response.data.getCategories\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { projects },\n      categories\n    }\n  }\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
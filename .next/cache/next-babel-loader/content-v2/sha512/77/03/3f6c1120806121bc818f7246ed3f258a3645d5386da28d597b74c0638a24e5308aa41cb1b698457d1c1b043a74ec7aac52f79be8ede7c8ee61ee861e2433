{"ast":null,"code":"import gql from 'graphql-tag';\nimport { ArticleFields, CommentFields } from '../../fragments';\nexport const GET_ARTICLE = gql`\n  query getArticle($id: ID!) {\n    getArticle(id: $id) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`;\nexport const GET_ARTICLES = gql`\n  query getArticles($offset: Int, $limit: Int, $search: String, $status: PostStatus) {\n    getArticles(offset: $offset, limit: $limit, search: $search, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`;\nexport const CREATE_ARTICLE = gql`\n  mutation createArticle($input: ArticleCreateInput!, $status: PostStatus) {\n    createArticle(input: $input, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`;\nexport const UPDATE_ARTICLE = gql`\n  mutation updateArticle($id: ID!, $input: ArticleUpdateInput!, $status: PostStatus) {\n    updateArticle(id: $id, input: $input, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`;\nexport const DELETE_ARTICLE = gql`\n  mutation deleteArticle($id: ID!, $status: PostStatus) {\n    deleteArticle(id: $id, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`;\nexport const SEND_COMMENT = gql`\n  mutation sendComment($article: ID!, $text: String!) {\n    sendComment(article: $article, text: $text) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`;\nexport const LIKE_COMMENT = gql`\n  mutation likeComment($comment: ID!, $author: String!, $like: Boolean!) {\n    likeComment(comment: $comment, author: $author, like: $like) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/graphql/queries/Article/index.js"],"names":["gql","ArticleFields","CommentFields","GET_ARTICLE","GET_ARTICLES","CREATE_ARTICLE","UPDATE_ARTICLE","DELETE_ARTICLE","SEND_COMMENT","LIKE_COMMENT"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,iBAA7C;AAEA,OAAO,MAAMC,WAAW,GAAGH,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAc;AAClB,CAPO;AASP,OAAO,MAAMG,YAAY,GAAGJ,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAc;AAClB,CAPO;AASP,OAAO,MAAMI,cAAc,GAAGL,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAc;AAClB,CAPO;AASP,OAAO,MAAMK,cAAc,GAAGN,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAc;AAClB,CAPO;AASP,OAAO,MAAMM,cAAc,GAAGP,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAc;AAClB,CAPO;AASP,OAAO,MAAMO,YAAY,GAAGR,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA,IAAIE,aAAc;AAClB,CAPO;AASP,OAAO,MAAMO,YAAY,GAAGT,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA,IAAIE,aAAc;AAClB,CAPO","sourcesContent":["import gql from 'graphql-tag'\nimport { ArticleFields, CommentFields } from '../../fragments'\n\nexport const GET_ARTICLE = gql`\n  query getArticle($id: ID!) {\n    getArticle(id: $id) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`\n\nexport const GET_ARTICLES = gql`\n  query getArticles($offset: Int, $limit: Int, $search: String, $status: PostStatus) {\n    getArticles(offset: $offset, limit: $limit, search: $search, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`\n\nexport const CREATE_ARTICLE = gql`\n  mutation createArticle($input: ArticleCreateInput!, $status: PostStatus) {\n    createArticle(input: $input, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`\n\nexport const UPDATE_ARTICLE = gql`\n  mutation updateArticle($id: ID!, $input: ArticleUpdateInput!, $status: PostStatus) {\n    updateArticle(id: $id, input: $input, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`\n\nexport const DELETE_ARTICLE = gql`\n  mutation deleteArticle($id: ID!, $status: PostStatus) {\n    deleteArticle(id: $id, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`\n\nexport const SEND_COMMENT = gql`\n  mutation sendComment($article: ID!, $text: String!) {\n    sendComment(article: $article, text: $text) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`\n\nexport const LIKE_COMMENT = gql`\n  mutation likeComment($comment: ID!, $author: String!, $like: Boolean!) {\n    likeComment(comment: $comment, author: $author, like: $like) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`\n"]},"metadata":{},"sourceType":"module"}
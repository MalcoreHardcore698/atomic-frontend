{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Text from '../Text';\nimport Icon from '../Icon';\nimport CountUp from 'react-countup';\nexport const Wrap = styled(Column)`\n  display: flex;\n  flex-direction: column;\n  grid-gap: 5px;\n  padding: var(--default-gap);\n  flex-grow: 1;\n\n  ${({\n  appearance\n}) => appearance === 'default' && css`\n      border: 1px solid var(--surface-border);\n      background: var(--surface-background);\n      box-shadow: 1px solid var(--surface-shadow);\n      border-radius: var(--surface-border-radius);\n    `}\n\n  ${({\n  appearance\n}) => appearance === 'clear' && css`\n      border: none;\n      background: none;\n      box-shadow: none;\n      border-radius: 0;\n      padding: 0;\n    `}\n`;\nexport const Label = styled(Text)`\n  font-size: var(--font-size-s);\n  font-weight: var(--font-weight-regular);\n  color: var(--ghost-color-text);\n`;\nexport const Value = styled(Row)`\n  grid-gap: 5px 10px;\n  align-items: flex-end;\n\n  p {\n    font-size: 36px;\n    font-weight: var(--font-weight-bold);\n    line-height: 1;\n    color: black;\n  }\n`;\nexport const Movement = styled(Row)`\n  grid-gap: 0 8px;\n\n  i {\n    transform: scale(1.85);\n  }\n\n  span {\n    font-size: inherit;\n    font-weight: inherit;\n    line-height: inherit;\n  }\n\n  p {\n    display: flex;\n    align-items: flex-end;\n    font-size: var(--font-size-l);\n    line-height: 1.45;\n\n    ${({\n  positive\n}) => positive ? css`\n            color: var(--default-color-green);\n          ` : css`\n            color: var(--default-color-red);\n          `}\n  }\n`;\nexport const Indicator = (_ref) => {\n  let {\n    label,\n    value,\n    movement,\n    positive,\n    negative,\n    appearance\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"value\", \"movement\", \"positive\", \"negative\", \"appearance\"]);\n\n  return __jsx(Wrap, _extends({}, props, {\n    appearance: appearance\n  }), label && __jsx(Label, null, label), (value || movement) && __jsx(Value, null, value ? __jsx(Text, null, __jsx(CountUp, {\n    end: value,\n    duration: 2.75\n  })) : null, movement ? __jsx(Movement, {\n    positive: positive,\n    negative: negative\n  }, positive && !negative && __jsx(Icon, {\n    icon: 'arrowUpCarret',\n    fill: 'var(--default-color-green)'\n  }), !positive && negative && __jsx(Icon, {\n    icon: 'arrowDownCarret',\n    fill: 'var(--default-color-red)'\n  }), __jsx(Text, null, __jsx(CountUp, {\n    end: movement,\n    duration: 3\n  }))) : null));\n};\nIndicator.defaultProps = {\n  appearance: 'default',\n  label: 'Пользователи',\n  value: 5621,\n  movement: 12\n};\nexport default Indicator;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useEffect } from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Row from '../../atomic-ui/components/Row';\nimport Container from '../../atomic-ui/components/Container';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Column from '../../atomic-ui/components/Column';\nimport Button from '../../atomic-ui/components/Button';\nimport Image from '../../atomic-ui/components/Image';\nimport Search from '../../atomic-ui/components/Search';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Icon from '../../atomic-ui/components/Icon';\nimport { useHelper } from '../../hooks/useHelper';\nimport MainLayout from '../main';\nimport { FixedLoader } from '../../components/Styled';\nimport BaseSideBar from '../../components/SideBar';\nimport { onMenu } from '../../store/helpers';\nimport { setUser } from '../../store/actions/user';\nimport getLinks from './links';\nimport queries from '../../graphql/queries';\nimport config from '../../config';\nconst Main = styled.main.withConfig({\n  displayName: \"dashboard__Main\",\n  componentId: \"sc-9r28sr-0\"\n})([\"display:flex;grid-gap:var(--default-gap);width:100%;\"]);\nconst Header = styled.header.withConfig({\n  displayName: \"dashboard__Header\",\n  componentId: \"sc-9r28sr-1\"\n})([\"position:fixed;top:0;left:0;z-index:var(--z-15);display:flex;grid-gap:var(--default-gap);background:var(--surface-background);border:var(--surface-border);box-shadow:var(--surface-shadow);padding:var(--default-gap);width:100%;flex-grow:100;\"]);\nconst SideBar = styled(BaseSideBar).withConfig({\n  displayName: \"dashboard__SideBar\",\n  componentId: \"sc-9r28sr-2\"\n})([\"position:fixed;top:70px;left:0;height:calc(100vh - 70px);z-index:var(--z-12);@media only screen and (max-width:480px){display:none;}\"]);\nconst MenuButton = styled(Button).withConfig({\n  displayName: \"dashboard__MenuButton\",\n  componentId: \"sc-9r28sr-3\"\n})([\"display:none;@media only screen and (max-width:768px){display:flex;justify-content:center;align-items:center;}\"]);\nconst LogoZone = styled(Row).withConfig({\n  displayName: \"dashboard__LogoZone\",\n  componentId: \"sc-9r28sr-4\"\n})([\"justify-content:space-between;@media only screen and (max-width:996px){width:auto;}\"]);\nconst Logotype = styled.div.withConfig({\n  displayName: \"dashboard__Logotype\",\n  componentId: \"sc-9r28sr-5\"\n})([\"display:flex;justify-content:flex-start;align-items:center;img{height:30px;object-fit:contain;}@media only screen and (max-width:996px){min-width:auto;}@media only screen and (max-width:480px){display:none;}\"]);\nconst Content = styled(Container).withConfig({\n  displayName: \"dashboard__Content\",\n  componentId: \"sc-9r28sr-6\"\n})([\"padding:70px 15px 15px 255px;flex-grow:1;@media only screen and (max-width:996px){padding:70px 15px 15px 80px;}@media only screen and (max-width:480px){padding:70px 15px 15px 15px;}\"]);\nexport const DashboardLayout = ({\n  children,\n  title = 'Панель администрирования'\n}) => {\n  var _root$settings$genera, _user$avatar;\n\n  const recall = useHelper();\n  const router = useRouter();\n  const {\n    root,\n    user\n  } = useSelector(state => state);\n  const [getUser, {\n    data,\n    loading\n  }] = useLazyQuery(queries.GET_USER);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (false) {\n      const token = localStorage.getItem(config.get('secret'));\n      if (token) getUser();else router.push('/');\n    }\n  }, []);\n  useEffect(() => {\n    if (data && data.getUser) {\n      var _data$getUser$role;\n\n      const isAccept = (_data$getUser$role = data.getUser.role) === null || _data$getUser$role === void 0 ? void 0 : _data$getUser$role.permissions.find(permission => permission === 'ACCESS_DASHBOARD');\n\n      if (isAccept) {\n        dispatch(setUser(data.getUser));\n      } else {\n        router.push('/');\n      }\n    }\n  }, [data, dispatch]);\n\n  if (loading || !user.authenticated) {\n    return /*#__PURE__*/React.createElement(FixedLoader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(MainLayout, null, /*#__PURE__*/React.createElement(Head, null, /*#__PURE__*/React.createElement(\"meta\", {\n    name: \"keywords\",\n    content: \"next,javascript,nextjs,react\"\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: \"description\",\n    content: root.settings.meta.description\n  }), /*#__PURE__*/React.createElement(\"title\", null, title)), /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(MenuButton, {\n    kind: 'icon',\n    appearance: 'clear',\n    onClick: recall(onMenu, {\n      links: getLinks((user === null || user === void 0 ? void 0 : user.role.permissions) || []).map((link, index) => ({\n        id: index,\n        text: link.component,\n        onClick: () => router.push(`/dashboard${link.path}`)\n      }))\n    })\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'menu'\n  })), /*#__PURE__*/React.createElement(LogoZone, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: root.settings.meta.description,\n    offset: {\n      bottom: 5\n    },\n    place: 'bottom',\n    maxWidth: 256,\n    multiline: true\n  }, /*#__PURE__*/React.createElement(Logotype, null, /*#__PURE__*/React.createElement(Link, {\n    href: '/'\n  }, /*#__PURE__*/React.createElement(\"a\", null, /*#__PURE__*/React.createElement(Image, {\n    src: (_root$settings$genera = root.settings.general.logotype) === null || _root$settings$genera === void 0 ? void 0 : _root$settings$genera.path,\n    alt: 'Logotype'\n  })))))), /*#__PURE__*/React.createElement(Search, {\n    appearance: 'ghost'\n  })), /*#__PURE__*/React.createElement(Main, null, /*#__PURE__*/React.createElement(SideBar, {\n    user: {\n      name: user.name,\n      role: user.role.name,\n      avatar: (user === null || user === void 0 ? void 0 : (_user$avatar = user.avatar) === null || _user$avatar === void 0 ? void 0 : _user$avatar.path) || '/images/avatar-default.png'\n    },\n    link: Link,\n    links: getLinks((user === null || user === void 0 ? void 0 : user.role.permissions) || []).map((link, index) => {\n      const path = `/dashboard${link.path.length > 1 ? link.path : ''}`;\n      return { ...link,\n        path,\n        component: /*#__PURE__*/React.createElement(\"a\", {\n          key: index,\n          className: router.pathname === path ? 'active' : ''\n        }, React.cloneElement(link.component, {\n          active: router.pathname === path\n        }))\n      };\n    })\n  }), /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Column, null, children))));\n};\nexport default DashboardLayout;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/layouts/dashboard/index.js"],"names":["React","useEffect","Head","Link","useRouter","styled","useLazyQuery","useDispatch","useSelector","Row","Container","Spinner","Column","Button","Image","Search","Tooltip","Icon","useHelper","MainLayout","FixedLoader","BaseSideBar","onMenu","setUser","getLinks","queries","config","Main","main","Header","header","SideBar","MenuButton","LogoZone","Logotype","div","Content","DashboardLayout","children","title","recall","router","root","user","state","getUser","data","loading","GET_USER","dispatch","token","localStorage","getItem","get","push","isAccept","role","permissions","find","permission","authenticated","settings","meta","description","links","map","link","index","id","text","component","onClick","path","bottom","general","logotype","name","avatar","length","pathname","cloneElement","active"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAOC,UAAP,MAAuB,SAAvB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,OAAOC,QAAP,MAAqB,SAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,MAAMC,IAAI,GAAGtB,MAAM,CAACuB,IAAV;AAAA;AAAA;AAAA,4DAAV;AAMA,MAAMC,MAAM,GAAGxB,MAAM,CAACyB,MAAV;AAAA;AAAA;AAAA,wPAAZ;AAkBA,MAAMC,OAAO,GAAG1B,MAAM,CAACgB,WAAD,CAAT;AAAA;AAAA;AAAA,4IAAb;AAYA,MAAMW,UAAU,GAAG3B,MAAM,CAACQ,MAAD,CAAT;AAAA;AAAA;AAAA,sHAAhB;AAUA,MAAMoB,QAAQ,GAAG5B,MAAM,CAACI,GAAD,CAAT;AAAA;AAAA;AAAA,2FAAd;AAQA,MAAMyB,QAAQ,GAAG7B,MAAM,CAAC8B,GAAV;AAAA;AAAA;AAAA,uNAAd;AAmBA,MAAMC,OAAO,GAAG/B,MAAM,CAACK,SAAD,CAAT;AAAA;AAAA;AAAA,6LAAb;AAaA,OAAO,MAAM2B,eAAe,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAK,GAAG;AAApB,CAAD,KAAsD;AAAA;;AACnF,QAAMC,MAAM,GAAGtB,SAAS,EAAxB;AACA,QAAMuB,MAAM,GAAGrC,SAAS,EAAxB;AACA,QAAM;AAAEsC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAiBnC,WAAW,CAAEoC,KAAD,IAAWA,KAAZ,CAAlC;AACA,QAAM,CAACC,OAAD,EAAU;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAV,IAA+BzC,YAAY,CAACmB,OAAO,CAACuB,QAAT,CAAjD;AACA,QAAMC,QAAQ,GAAG1C,WAAW,EAA5B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,eAAmC;AACjC,YAAMiD,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB1B,MAAM,CAAC2B,GAAP,CAAW,QAAX,CAArB,CAAd;AACA,UAAIH,KAAJ,EAAWL,OAAO,GAAlB,KACKJ,MAAM,CAACa,IAAP,CAAY,GAAZ;AACN;AACF,GANQ,EAMN,EANM,CAAT;AAQArD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6C,IAAI,IAAIA,IAAI,CAACD,OAAjB,EAA0B;AAAA;;AACxB,YAAMU,QAAQ,yBAAGT,IAAI,CAACD,OAAL,CAAaW,IAAhB,uDAAG,mBAAmBC,WAAnB,CAA+BC,IAA/B,CACdC,UAAD,IAAgBA,UAAU,KAAK,kBADhB,CAAjB;;AAGA,UAAIJ,QAAJ,EAAc;AACZN,QAAAA,QAAQ,CAAC1B,OAAO,CAACuB,IAAI,CAACD,OAAN,CAAR,CAAR;AACD,OAFD,MAEO;AACLJ,QAAAA,MAAM,CAACa,IAAP,CAAY,GAAZ;AACD;AACF;AACF,GAXQ,EAWN,CAACR,IAAD,EAAOG,QAAP,CAXM,CAAT;;AAaA,MAAIF,OAAO,IAAI,CAACJ,IAAI,CAACiB,aAArB,EAAoC;AAClC,wBACE,oBAAC,WAAD,qBACE,oBAAC,OAAD,OADF,CADF;AAKD;;AAED,sBACE,oBAAC,UAAD,qBACE,oBAAC,IAAD,qBACE;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAC;AAA9B,IADF,eAEE;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAElB,IAAI,CAACmB,QAAL,CAAcC,IAAd,CAAmBC;AAArD,IAFF,eAGE,mCAAQxB,KAAR,CAHF,CADF,eAOE,oBAAC,MAAD,qBACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAE,MADR;AAEE,IAAA,UAAU,EAAE,OAFd;AAGE,IAAA,OAAO,EAAEC,MAAM,CAAClB,MAAD,EAAS;AACtB0C,MAAAA,KAAK,EAAExC,QAAQ,CAAC,CAAAmB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEa,IAAN,CAAWC,WAAX,KAA0B,EAA3B,CAAR,CAAuCQ,GAAvC,CAA2C,CAACC,IAAD,EAAOC,KAAP,MAAkB;AAClEC,QAAAA,EAAE,EAAED,KAD8D;AAElEE,QAAAA,IAAI,EAAEH,IAAI,CAACI,SAFuD;AAGlEC,QAAAA,OAAO,EAAE,MAAM9B,MAAM,CAACa,IAAP,CAAa,aAAYY,IAAI,CAACM,IAAK,EAAnC;AAHmD,OAAlB,CAA3C;AADe,KAAT;AAHjB,kBAUE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,IAVF,CADF,eAaE,oBAAC,QAAD,qBACE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAE9B,IAAI,CAACmB,QAAL,CAAcC,IAAd,CAAmBC,WAD3B;AAEE,IAAA,MAAM,EAAE;AAAEU,MAAAA,MAAM,EAAE;AAAV,KAFV;AAGE,IAAA,KAAK,EAAE,QAHT;AAIE,IAAA,QAAQ,EAAE,GAJZ;AAKE,IAAA,SAAS;AALX,kBAME,oBAAC,QAAD,qBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE;AAAZ,kBACE,4CACE,oBAAC,KAAD;AAAO,IAAA,GAAG,2BAAE/B,IAAI,CAACmB,QAAL,CAAca,OAAd,CAAsBC,QAAxB,0DAAE,sBAAgCH,IAA5C;AAAkD,IAAA,GAAG,EAAE;AAAvD,IADF,CADF,CADF,CANF,CADF,CAbF,eA6BE,oBAAC,MAAD;AAAQ,IAAA,UAAU,EAAE;AAApB,IA7BF,CAPF,eAuCE,oBAAC,IAAD,qBACE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAE;AACJI,MAAAA,IAAI,EAAEjC,IAAI,CAACiC,IADP;AAEJpB,MAAAA,IAAI,EAAEb,IAAI,CAACa,IAAL,CAAUoB,IAFZ;AAGJC,MAAAA,MAAM,EAAE,CAAAlC,IAAI,SAAJ,IAAAA,IAAI,WAAJ,4BAAAA,IAAI,CAAEkC,MAAN,8DAAcL,IAAd,KAAsB;AAH1B,KADR;AAME,IAAA,IAAI,EAAErE,IANR;AAOE,IAAA,KAAK,EAAEqB,QAAQ,CAAC,CAAAmB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEa,IAAN,CAAWC,WAAX,KAA0B,EAA3B,CAAR,CAAuCQ,GAAvC,CAA2C,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjE,YAAMK,IAAI,GAAI,aAAYN,IAAI,CAACM,IAAL,CAAUM,MAAV,GAAmB,CAAnB,GAAuBZ,IAAI,CAACM,IAA5B,GAAmC,EAAG,EAAhE;AACA,aAAO,EACL,GAAGN,IADE;AAELM,QAAAA,IAFK;AAGLF,QAAAA,SAAS,eACP;AAAG,UAAA,GAAG,EAAEH,KAAR;AAAe,UAAA,SAAS,EAAE1B,MAAM,CAACsC,QAAP,KAAoBP,IAApB,GAA2B,QAA3B,GAAsC;AAAhE,WACGxE,KAAK,CAACgF,YAAN,CAAmBd,IAAI,CAACI,SAAxB,EAAmC;AAAEW,UAAAA,MAAM,EAAExC,MAAM,CAACsC,QAAP,KAAoBP;AAA9B,SAAnC,CADH;AAJG,OAAP;AASD,KAXM;AAPT,IADF,eAsBE,oBAAC,OAAD,qBACE,oBAAC,MAAD,QAASlC,QAAT,CADF,CAtBF,CAvCF,CADF;AAoED,CAxGM;AA0GP,eAAeD,eAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport Head from 'next/head'\nimport Link from 'next/link'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\nimport { useLazyQuery } from '@apollo/react-hooks'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Container from '../../atomic-ui/components/Container'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Column from '../../atomic-ui/components/Column'\nimport Button from '../../atomic-ui/components/Button'\nimport Image from '../../atomic-ui/components/Image'\nimport Search from '../../atomic-ui/components/Search'\nimport Tooltip from '../../atomic-ui/components/Tooltip'\nimport Icon from '../../atomic-ui/components/Icon'\n\nimport { useHelper } from '../../hooks/useHelper'\nimport MainLayout from '../main'\nimport { FixedLoader } from '../../components/Styled'\nimport BaseSideBar from '../../components/SideBar'\nimport { onMenu } from '../../store/helpers'\nimport { setUser } from '../../store/actions/user'\nimport getLinks from './links'\nimport queries from '../../graphql/queries'\nimport config from '../../config'\n\nconst Main = styled.main`\n  display: flex;\n  grid-gap: var(--default-gap);\n  width: 100%;\n`\n\nconst Header = styled.header`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: var(--z-15);\n\n  display: flex;\n  grid-gap: var(--default-gap);\n\n  background: var(--surface-background);\n  border: var(--surface-border);\n  box-shadow: var(--surface-shadow);\n  padding: var(--default-gap);\n\n  width: 100%;\n  flex-grow: 100;\n`\n\nconst SideBar = styled(BaseSideBar)`\n  position: fixed;\n  top: 70px;\n  left: 0;\n  height: calc(100vh - 70px);\n  z-index: var(--z-12);\n\n  @media only screen and (max-width: 480px) {\n    display: none;\n  }\n`\n\nconst MenuButton = styled(Button)`\n  display: none;\n\n  @media only screen and (max-width: 768px) {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n`\n\nconst LogoZone = styled(Row)`\n  justify-content: space-between;\n\n  @media only screen and (max-width: 996px) {\n    width: auto;\n  }\n`\n\nconst Logotype = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n\n  img {\n    height: 30px;\n    object-fit: contain;\n  }\n\n  @media only screen and (max-width: 996px) {\n    min-width: auto;\n  }\n\n  @media only screen and (max-width: 480px) {\n    display: none;\n  }\n`\n\nconst Content = styled(Container)`\n  padding: 70px 15px 15px 255px;\n  flex-grow: 1;\n\n  @media only screen and (max-width: 996px) {\n    padding: 70px 15px 15px 80px;\n  }\n\n  @media only screen and (max-width: 480px) {\n    padding: 70px 15px 15px 15px;\n  }\n`\n\nexport const DashboardLayout = ({ children, title = 'Панель администрирования' }) => {\n  const recall = useHelper()\n  const router = useRouter()\n  const { root, user } = useSelector((state) => state)\n  const [getUser, { data, loading }] = useLazyQuery(queries.GET_USER)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const token = localStorage.getItem(config.get('secret'))\n      if (token) getUser()\n      else router.push('/')\n    }\n  }, [])\n\n  useEffect(() => {\n    if (data && data.getUser) {\n      const isAccept = data.getUser.role?.permissions.find(\n        (permission) => permission === 'ACCESS_DASHBOARD'\n      )\n      if (isAccept) {\n        dispatch(setUser(data.getUser))\n      } else {\n        router.push('/')\n      }\n    }\n  }, [data, dispatch])\n\n  if (loading || !user.authenticated) {\n    return (\n      <FixedLoader>\n        <Spinner />\n      </FixedLoader>\n    )\n  }\n\n  return (\n    <MainLayout>\n      <Head>\n        <meta name=\"keywords\" content=\"next,javascript,nextjs,react\" />\n        <meta name=\"description\" content={root.settings.meta.description} />\n        <title>{title}</title>\n      </Head>\n\n      <Header>\n        <MenuButton\n          kind={'icon'}\n          appearance={'clear'}\n          onClick={recall(onMenu, {\n            links: getLinks(user?.role.permissions || []).map((link, index) => ({\n              id: index,\n              text: link.component,\n              onClick: () => router.push(`/dashboard${link.path}`)\n            }))\n          })}>\n          <Icon icon={'menu'} />\n        </MenuButton>\n        <LogoZone>\n          <Tooltip\n            text={root.settings.meta.description}\n            offset={{ bottom: 5 }}\n            place={'bottom'}\n            maxWidth={256}\n            multiline>\n            <Logotype>\n              <Link href={'/'}>\n                <a>\n                  <Image src={root.settings.general.logotype?.path} alt={'Logotype'} />\n                </a>\n              </Link>\n            </Logotype>\n          </Tooltip>\n        </LogoZone>\n        <Search appearance={'ghost'} />\n      </Header>\n\n      <Main>\n        <SideBar\n          user={{\n            name: user.name,\n            role: user.role.name,\n            avatar: user?.avatar?.path || '/images/avatar-default.png'\n          }}\n          link={Link}\n          links={getLinks(user?.role.permissions || []).map((link, index) => {\n            const path = `/dashboard${link.path.length > 1 ? link.path : ''}`\n            return {\n              ...link,\n              path,\n              component: (\n                <a key={index} className={router.pathname === path ? 'active' : ''}>\n                  {React.cloneElement(link.component, { active: router.pathname === path })}\n                </a>\n              )\n            }\n          })}\n        />\n\n        <Content>\n          <Column>{children}</Column>\n        </Content>\n      </Main>\n    </MainLayout>\n  )\n}\n\nexport default DashboardLayout\n"]},"metadata":{},"sourceType":"module"}
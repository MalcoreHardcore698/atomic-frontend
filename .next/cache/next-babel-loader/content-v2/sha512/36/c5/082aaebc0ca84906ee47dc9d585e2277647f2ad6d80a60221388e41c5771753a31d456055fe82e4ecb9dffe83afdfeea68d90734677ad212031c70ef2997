{"ast":null,"code":"var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport gql from 'graphql-tag';\nimport { CommentFields } from '../../fragments';\nexport var GET_COMMENTS = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query getComments($id: ID!) {\\n    getComments(id: $id) {\\n      ...CommentFields\\n    }\\n  }\\n  \", \"\\n\"])), CommentFields);\nexport var SEND_COMMENT = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  mutation sendComment($article: ID!, $text: String!) {\\n    sendComment(article: $article, text: $text) {\\n      ...CommentFields\\n    }\\n  }\\n  \", \"\\n\"])), CommentFields);\nexport var LIKE_COMMENT = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  mutation likeComment($comment: ID!, $likedUser: String, $liked: Boolean!) {\\n    likeComment(comment: $comment, likedUser: $likedUser, liked: $liked) {\\n      ...CommentFields\\n    }\\n  }\\n  \", \"\\n\"])), CommentFields);\nexport var CREATE_COMMENT = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  mutation createComment($input: CommentCreateInput!) {\\n    createComment(input: $input) {\\n      ...CommentFields\\n    }\\n  }\\n  \", \"\\n\"])), CommentFields);\nexport var UPDATE_COMMENT = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n  mutation updateComment($id: ID!, $input: CommentUpdateInput!) {\\n    updateComment(id: $id, input: $input) {\\n      ...CommentFields\\n    }\\n  }\\n  \", \"\\n\"])), CommentFields);\nexport var DELETE_COMMENT = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n  mutation deleteComment($id: ID!) {\\n    deleteComment(id: $id) {\\n      ...CommentFields\\n    }\\n  }\\n  \", \"\\n\"])), CommentFields);","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/graphql/queries/Comment/index.js"],"names":["gql","CommentFields","GET_COMMENTS","SEND_COMMENT","LIKE_COMMENT","CREATE_COMMENT","UPDATE_COMMENT","DELETE_COMMENT"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,IAAMC,YAAY,GAAGF,GAAH,iLAMrBC,aANqB,CAAlB;AASP,OAAO,IAAME,YAAY,GAAGH,GAAH,kOAMrBC,aANqB,CAAlB;AASP,OAAO,IAAMG,YAAY,GAAGJ,GAAH,iRAMrBC,aANqB,CAAlB;AASP,OAAO,IAAMI,cAAc,GAAGL,GAAH,mNAMvBC,aANuB,CAApB;AASP,OAAO,IAAMK,cAAc,GAAGN,GAAH,sOAMvBC,aANuB,CAApB;AASP,OAAO,IAAMM,cAAc,GAAGP,GAAH,0LAMvBC,aANuB,CAApB","sourcesContent":["import gql from 'graphql-tag'\nimport { CommentFields } from '../../fragments'\n\nexport const GET_COMMENTS = gql`\n  query getComments($id: ID!) {\n    getComments(id: $id) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`\n\nexport const SEND_COMMENT = gql`\n  mutation sendComment($article: ID!, $text: String!) {\n    sendComment(article: $article, text: $text) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`\n\nexport const LIKE_COMMENT = gql`\n  mutation likeComment($comment: ID!, $likedUser: String, $liked: Boolean!) {\n    likeComment(comment: $comment, likedUser: $likedUser, liked: $liked) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`\n\nexport const CREATE_COMMENT = gql`\n  mutation createComment($input: CommentCreateInput!) {\n    createComment(input: $input) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`\n\nexport const UPDATE_COMMENT = gql`\n  mutation updateComment($id: ID!, $input: CommentUpdateInput!) {\n    updateComment(id: $id, input: $input) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`\n\nexport const DELETE_COMMENT = gql`\n  mutation deleteComment($id: ID!) {\n    deleteComment(id: $id) {\n      ...CommentFields\n    }\n  }\n  ${CommentFields}\n`\n"]},"metadata":{},"sourceType":"module"}
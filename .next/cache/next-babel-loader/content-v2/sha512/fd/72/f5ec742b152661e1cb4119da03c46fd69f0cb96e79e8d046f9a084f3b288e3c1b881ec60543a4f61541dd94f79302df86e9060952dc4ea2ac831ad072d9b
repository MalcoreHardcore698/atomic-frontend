{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport styled from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Notice from '../../atomic-ui/components/Notice';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { useMutationEffect } from '../../hooks/useMutationEffect';\nimport { useUpdateEffect } from '../../hooks/useUpdateEffect';\nimport queries from '../../graphql/queries';\nimport { Loader } from '../Styled';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"Notifications__Wrap\",\n  componentId: \"sc-1luuv3g-0\"\n})([\"\"]);\nexport const Notifications = ({\n  user,\n  appearance\n}) => {\n  const [notifications, setNotifications] = useState([]);\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_NOTIFICATIONS, {\n    variables: {\n      author: user\n    }\n  });\n  const [apply, {\n    loading: loadingApply,\n    error: errorApply\n  }] = useMutationEffect(queries.APPLY_INVITE_USER_MEMBER, 'applyInviteUserMember', setNotifications);\n  const [reject, {\n    loading: loadingReject,\n    error: errorReject\n  }] = useMutationEffect(queries.REJECT_INVITE_USER_MEMBER, 'rejectInviteUserMember', setNotifications);\n\n  const onApply = notice => {\n    var _notice$company;\n\n    return apply({\n      variables: {\n        id: notice.id,\n        email: (_notice$company = notice.company) === null || _notice$company === void 0 ? void 0 : _notice$company.email\n      }\n    });\n  };\n\n  const onReject = notice => {\n    var _notice$company2;\n\n    return reject({\n      variables: {\n        id: notice.id,\n        email: (_notice$company2 = notice.company) === null || _notice$company2 === void 0 ? void 0 : _notice$company2.email\n      }\n    });\n  };\n\n  useUpdateEffect(data, loading, 'getNotifications', setNotifications);\n  return /*#__PURE__*/React.createElement(Wrap, null, notifications && notifications.length > 0 ? notifications.map(notice => {\n    var _notice$author, _notice$author$avatar;\n\n    return /*#__PURE__*/React.createElement(Notice, _extends({\n      key: notice.id\n    }, notice.author ? {\n      img: ((_notice$author = notice.author) === null || _notice$author === void 0 ? void 0 : (_notice$author$avatar = _notice$author.avatar) === null || _notice$author$avatar === void 0 ? void 0 : _notice$author$avatar.path) || '/images/avatar-default.png'\n    } : {\n      icon: 'infoCircle'\n    }, {\n      title: notice.title,\n      message: notice.message,\n      date: notice.createdAt,\n      appearance: appearance,\n      onApply: notice.type === 'INVITE' && (() => onApply(notice)),\n      onReject: notice.type === 'INVITE' && (() => onReject(notice))\n    }));\n  }) : loading || loadingApply || loadingReject ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : error || errorApply || errorReject ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0443\\u0447\\u0430\\u0441\\u0442\\u043D\\u0438\\u043A\\u0430\\u0445\") : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      textAlign: 'center'\n    },\n    width: '100%'\n  }, \"\\u0423\\u0432\\u0435\\u0434\\u043E\\u043C\\u043B\\u0435\\u043D\\u0438\\u0439 \\u043D\\u0435\\u0442\"));\n};\nNotifications.defaultProps = {\n  appearance: 'default'\n};\nexport default Notifications;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Avatar from '../Avatar';\nimport Title from '../Title';\nimport Text from '../Text';\nimport Icon from '../Icon';\nimport Button from '../Button';\nimport Tooltip from '../Tooltip';\nimport DateText from '../DateText';\nimport Checkbox from '../Checkbox';\nimport TextArea from '../TextArea';\nexport const dispatchDateStyles = css([\"position:absolute;left:0;bottom:5px;font-size:var(--font-size-xs);\"]);\nexport const Wrap = styled.div.withConfig({\n  displayName: \"Message__Wrap\",\n  componentId: \"sc-1x5w1wb-0\"\n})([\"display:grid;grid-template-columns:64px 1fr;grid-template-areas:'avatar opinion';margin:0;transition:opacity 150ms ease;& > span{grid-area:avatar;align-self:end;justify-self:start;cursor:pointer;transition:opacity 150ms ease;}\", \" \", \" \", \" \", \"\"], ({\n  onClick\n}) => onClick && css([\"& > span{cursor:pointer;&:hover{opacity:0.65;}}\"]), ({\n  side\n}) => side === 'owner' && css([\"grid-template-columns:1fr 64px;grid-template-areas:'opinion avatar';& > span{justify-self:end;}\"]), ({\n  compact\n}) => compact && css([\"display:flex;\"]), ({\n  checked\n}) => checked && css([\"opacity:0.45;\"]));\nexport const MiniAvatar = styled(Avatar).withConfig({\n  displayName: \"Message__MiniAvatar\",\n  componentId: \"sc-1x5w1wb-1\"\n})([\"width:var(--input-height-xs);height:var(--input-height-xs);min-width:var(--input-height-xs);min-height:var(--input-height-xs);border-radius:var(--surface-border-radius);\"]);\nexport const OpinionAvatar = styled(Avatar).withConfig({\n  displayName: \"Message__OpinionAvatar\",\n  componentId: \"sc-1x5w1wb-2\"\n})([\"grid-area:avatar;align-self:end;transition:opacity 150ms ease;\", \" \", \"\"], ({\n  side\n}) => side === 'owner' && css([\"justify-self:end;\"]), ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.65;}\"]));\nexport const Opinion = styled.div.withConfig({\n  displayName: \"Message__Opinion\",\n  componentId: \"sc-1x5w1wb-3\"\n})([\"position:relative;padding:10px var(--default-gap) 25px var(--default-gap);border-radius:var(--surface-border-radius);color:white;width:fit-content;grid-area:opinion;\", \" \", \" \", \"\"], ({\n  side\n}) => side === 'observer' && css([\"background:var(--ghost-color-background);color:var(--ghost-color-text);\"]), ({\n  side\n}) => side === 'owner' && css([\"justify-self:end;background:var(--default-color-accent);color:white;\"]), ({\n  compact\n}) => compact && css([\"padding:0 0 25px 0;background:none;color:black;width:100%;\"]));\nexport const OpinionName = styled(Title).withConfig({\n  displayName: \"Message__OpinionName\",\n  componentId: \"sc-1x5w1wb-4\"\n})([\"color:inherit;transition:opacity 150ms ease;\", \" \", \"\"], ({\n  compact\n}) => compact && css([\"display:flex;align-items:center;grid-gap:10px;\"]), ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.65;}\"]));\nexport const OpinionTextArea = styled(TextArea).withConfig({\n  displayName: \"Message__OpinionTextArea\",\n  componentId: \"sc-1x5w1wb-5\"\n})([\"margin-top:10px;height:128px;\", \"\"], ({\n  height\n}) => height && css([\"height:\", \"px;\"], height));\nexport const OpinionText = styled(Text).withConfig({\n  displayName: \"Message__OpinionText\",\n  componentId: \"sc-1x5w1wb-6\"\n})([\"color:inherit;\", \"\"], ({\n  compact\n}) => compact && css([\"margin-top:10px;\"]));\nexport const OpinionTail = styled.span.withConfig({\n  displayName: \"Message__OpinionTail\",\n  componentId: \"sc-1x5w1wb-7\"\n})([\"position:absolute;bottom:-6px;background-size:contain;background-repeat:no-repeat;width:25px;height:20px;\", \" \", \"\"], ({\n  side,\n  tails\n}) => side === 'observer' && css([\"left:-12px;background-image:url('\", \"');\"], tails.default), ({\n  side,\n  tails\n}) => side === 'owner' && css([\"right:-12px;background-image:url('\", \"');transform:scaleX(-1);\"], tails.owner));\nexport const DispatchTime = styled(DateText).withConfig({\n  displayName: \"Message__DispatchTime\",\n  componentId: \"sc-1x5w1wb-8\"\n})([\"position:absolute;right:10px;bottom:5px;font-size:var(--font-size-xs);\", \"\"], ({\n  compact\n}) => compact && css([\"right:0;font-size:var(--font-size-s);color:var(--default-color-text);\"]));\nexport const DispatchDate = styled(DateText).withConfig({\n  displayName: \"Message__DispatchDate\",\n  componentId: \"sc-1x5w1wb-9\"\n})([\"\", \" font-size:var(--font-size-s);color:var(--default-color-text);\"], dispatchDateStyles);\nexport const DispatchUpdatedDate = styled.div.withConfig({\n  displayName: \"Message__DispatchUpdatedDate\",\n  componentId: \"sc-1x5w1wb-10\"\n})([\"\", \" font-size:var(--font-size-s);color:var(--default-color-text);\"], dispatchDateStyles);\nexport const Actions = styled(Row).withConfig({\n  displayName: \"Message__Actions\",\n  componentId: \"sc-1x5w1wb-11\"\n})([\"position:absolute;top:0;right:0;grid-gap:10px;\"]);\nexport const Message = ({\n  avatar,\n  side,\n  name,\n  text,\n  time,\n  tails,\n  style,\n  compact,\n  className,\n  isUpdated,\n  isChecked,\n  onEdit,\n  onChecked,\n  onDelete,\n  onLink\n}) => {\n  const [updatedAt, setUpdatedAt] = useState(isUpdated ? time : null);\n  const [checked, setChecked] = useState(isChecked);\n  const [isEdit, setEdit] = useState(false);\n  const [message, setMessage] = useState(text);\n  const textRef = useRef(null);\n\n  const handleToggleEdit = () => setEdit(prev => !prev);\n\n  const handleChecked = e => {\n    const value = e.target.checked;\n    if (onChecked) onChecked(value);\n    setChecked(value);\n  };\n\n  const handleApplyChanges = () => {\n    var _textRef$current;\n\n    const value = textRef === null || textRef === void 0 ? void 0 : (_textRef$current = textRef.current) === null || _textRef$current === void 0 ? void 0 : _textRef$current.value;\n\n    if (value) {\n      if (onEdit) onEdit(value);\n      setUpdatedAt(new Date());\n      setMessage(value);\n    }\n\n    handleToggleEdit();\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    side: side,\n    compact: compact,\n    checked: checked,\n    style: style,\n    className: className\n  }, !compact && /*#__PURE__*/React.createElement(OpinionAvatar, {\n    side: side,\n    src: avatar,\n    onClick: onLink\n  }), /*#__PURE__*/React.createElement(Opinion, {\n    side: side,\n    compact: compact\n  }, /*#__PURE__*/React.createElement(OpinionName, {\n    tag: 'h5',\n    compact: compact,\n    onClick: onLink\n  }, compact && /*#__PURE__*/React.createElement(MiniAvatar, {\n    side: side,\n    src: avatar,\n    onClick: onLink\n  }), name), !compact && /*#__PURE__*/React.createElement(OpinionTail, {\n    side: side,\n    tails: tails\n  }), isEdit ? /*#__PURE__*/React.createElement(OpinionTextArea, {\n    ref: textRef,\n    defaultValue: message,\n    appearance: 'ghost'\n  }) : /*#__PURE__*/React.createElement(OpinionText, {\n    compact: compact\n  }, message), /*#__PURE__*/React.createElement(DispatchTime, {\n    text: updatedAt || time,\n    compact: compact\n  }), compact && updatedAt && /*#__PURE__*/React.createElement(DispatchUpdatedDate, null, \"\\u041E\\u0442\\u0440\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u043E\", ' ', new Date(updatedAt).toLocaleString('ru-RU', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric'\n  })), compact && !updatedAt && /*#__PURE__*/React.createElement(DispatchDate, {\n    text: time,\n    options: {\n      day: 'numeric',\n      month: 'long',\n      year: 'numeric'\n    }\n  }), compact && onEdit && onDelete && /*#__PURE__*/React.createElement(Actions, null, !isEdit ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить сообщение'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: onDelete\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактировать сообщение'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    onClick: handleToggleEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отметить сообщение',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    checked: checked,\n    onChange: handleChecked\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Применить изменения',\n    self: true\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'green',\n    onClick: handleApplyChanges\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'check',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отменить изменения',\n    self: true\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    disabled: checked,\n    appearance: 'red',\n    onClick: handleToggleEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'closeSquare',\n    size: 'xs',\n    stroke: 'white'\n  })))))));\n};\nMessage.defaultProps = {\n  side: 'observer',\n  text: 'Some Message',\n  time: '15:00'\n};\nexport default Message;","map":null,"metadata":{},"sourceType":"module"}
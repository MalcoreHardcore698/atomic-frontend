{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Column from '../../atomic-ui/components/Column';\nimport Grid from '../../atomic-ui/components/Grid';\nimport DashboardLayout from '../dashboard';\nimport List from '../../components/List';\nimport FilterBar from '../../components/FilterBar';\nimport HandleBar from '../../components/HandleBar';\nimport DeleteForm from '../../components/FormDelete';\nimport { setDisplayMethod, setVisibleFilters } from '../../store/actions/root';\nimport { setDrawer } from '../../store/actions/drawer';\nimport { setItem } from '../../store/actions/snacks';\nimport { useAccess } from '../../hooks/useAccess';\n\nconst getIsAdmin = document => {\n  var _document$name;\n\n  return (document === null || document === void 0 ? void 0 : (_document$name = document.name) === null || _document$name === void 0 ? void 0 : _document$name.toUpperCase()) !== 'ADMIN';\n};\n\nconst Delete = ({\n  item,\n  query,\n  component,\n  entityMultiText,\n  entitySingleText,\n  onSubmit\n}) => {\n  const isArray = useMemo(() => Array.isArray(item), [item]);\n  const dispatch = useDispatch();\n  const Component = component;\n  return /*#__PURE__*/React.createElement(DeleteForm, {\n    mutation: query,\n    appearance: 'clear',\n    onCancel: () => dispatch(setDrawer(null)),\n    onSubmit: async (_, action) => {\n      try {\n        var _item$;\n\n        await action({\n          variables: { ...(isArray && (_item$ = item[0]) !== null && _item$ !== void 0 && _item$.email || item.email ? {\n              email: isArray ? item.map(doc => doc.email) : [item.email]\n            } : {\n              id: isArray ? item.map(doc => doc.id) : [item.id]\n            })\n          }\n        });\n        dispatch(setItem({\n          type: 'success',\n          message: isArray ? `${entityMultiText} успешно удалены` : `${entitySingleText} успешно удален`\n        }));\n      } catch (err) {\n        if (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Что-то пошло не так'\n          }));\n        }\n      } finally {\n        dispatch(setDrawer(null));\n        if (onSubmit) onSubmit();\n      }\n    }\n  }, isArray ? /*#__PURE__*/React.createElement(Grid, {\n    length: 'auto-fit'\n  }, item.map(document => /*#__PURE__*/React.createElement(Component, {\n    key: document.id,\n    item: document\n  }))) : /*#__PURE__*/React.createElement(Component, {\n    item: item\n  }));\n};\n\nexport const Card = ({\n  item,\n  checked,\n  appearance,\n  component,\n  withoutActions,\n  withoutChecked,\n  onChecked,\n  onLink,\n  onEdit,\n  onDelete\n}) => React.cloneElement(component, {\n  checked,\n  appearance,\n  onLink: onLink && (() => onLink(item)),\n  onEdit: !withoutActions && onEdit && (() => onEdit(item)),\n  onChecked: !withoutChecked && onChecked && (checked => onChecked({ ...item,\n    checked\n  })),\n  onDelete: !withoutActions && onDelete && (() => onDelete(item))\n});\n\nconst ContentLayout = ({\n  render,\n  title,\n  icon,\n  field,\n  template,\n  limit = 6,\n  startOffset = 6,\n  buttonCreateText,\n  filterConfig,\n  variables,\n  getType,\n  getQuery,\n  entityType,\n  deleteQuery,\n  deleteEntityMultiText,\n  deleteEntitySingleText,\n  onLink,\n  onEdit,\n  onCreate,\n  emptyMessage,\n  withoutChecked\n}) => {\n  const {\n    displayMethod,\n    visibleFilters\n  } = useSelector(state => ({\n    displayMethod: state.root.displayMethod,\n    visibleFilters: state.root.visibleFilters\n  }));\n  const {\n    isAccessibleForView,\n    isAccessibleForAdd,\n    isAccessibleForEdit,\n    isAccessibleForDelete\n  } = useAccess(entityType);\n  const dispatch = useDispatch();\n  const [isAllChecked, setIsAllChecked] = useState(false);\n  const [checkedList, setCheckedList] = useState([]);\n  const [updated, setUpdated] = useState('list');\n  const getIsAnyChecked = useCallback(item => {\n    var _checkedList$find;\n\n    return (_checkedList$find = checkedList.find(document => document[field] === item[field])) === null || _checkedList$find === void 0 ? void 0 : _checkedList$find.checked;\n  }, [checkedList]);\n\n  const onAfter = () => setUpdated(v4());\n\n  const onChecked = document => {\n    setCheckedList(prev => {\n      const isExists = item => item[field] === document[field];\n\n      const candidate = prev.find(isExists);\n\n      if (candidate) {\n        return prev.map(item => isExists(item) ? { ...document,\n          checked: !item.checked\n        } : { ...item,\n          checked: isAllChecked || item.checked\n        });\n      } else {\n        return [...prev, { ...document,\n          checked: true\n        }];\n      }\n    });\n    setIsAllChecked(false);\n  };\n\n  const onAllChecked = () => {\n    const value = !isAllChecked;\n    setCheckedList(prev => prev.map(item => ({ ...item,\n      checked: getIsAdmin(item) ? value : false\n    })));\n    setIsAllChecked(value);\n  };\n\n  const onDelete = item => dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление',\n    content: /*#__PURE__*/React.createElement(Delete, {\n      item: item,\n      query: deleteQuery,\n      component: props => React.cloneElement(render(props.item), {\n        appearance: 'clear',\n        onEdit: null,\n        onDelete: null\n      }),\n      entityMultiText: deleteEntityMultiText,\n      entitySingleText: deleteEntitySingleText,\n      onSubmit: () => setUpdated(v4())\n    })\n  }));\n\n  const onDeleteAll = () => onDelete(checkedList.filter(document => document.checked));\n\n  useEffect(() => {\n    const countChecked = checkedList.reduce((acc, curr) => acc + (curr.checked ? 1 : 0), 0);\n\n    if (checkedList.length > 0 && countChecked === checkedList.length) {\n      setIsAllChecked(true);\n    }\n  }, [checkedList]);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: title\n  }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: icon,\n    checked: isAllChecked,\n    defaultDisplayMethod: displayMethod,\n    defaultVisibleFilters: visibleFilters,\n    buttonDeleteDisabled: !checkedList.find(item => item.checked),\n    buttonCreateText: buttonCreateText,\n    onCreate: isAccessibleForAdd && (() => onCreate && onCreate(onAfter)),\n    onChecked: isAccessibleForDelete && (() => displayMethod === 'grid' && onAllChecked && onAllChecked()),\n    onChangeVisibleFilter: () => dispatch(setVisibleFilters(!visibleFilters)),\n    onChangeDisplayMethod: item => dispatch(setDisplayMethod(item.value)),\n    onDeleteAll: isAccessibleForDelete && onDeleteAll,\n    withoutFooter: !isAccessibleForDelete || displayMethod === 'list',\n    withFilters: filterConfig\n  }), /*#__PURE__*/React.createElement(FilterBar, _extends({}, filterConfig || {}, {\n    isOpen: visibleFilters,\n    withoutDivider: true\n  })), /*#__PURE__*/React.createElement(List, {\n    key: updated,\n    limit: limit,\n    type: getType,\n    query: getQuery,\n    template: template,\n    variables: variables,\n    startOffset: startOffset,\n    emptyMessage: emptyMessage,\n    setCheckedList: setCheckedList,\n    component: item => /*#__PURE__*/React.createElement(Card, {\n      item: item,\n      component: render(item),\n      withoutChecked: !isAccessibleForDelete && withoutChecked,\n      withoutActions: !isAccessibleForEdit && !isAccessibleForDelete,\n      checked: getIsAdmin(item) && (isAllChecked || getIsAnyChecked(item)),\n      onLink: onLink && isAccessibleForView && (item => onLink(item)),\n      onEdit: onEdit && isAccessibleForEdit && (item => onEdit(item, onAfter)),\n      onChecked: isAccessibleForDelete && onChecked,\n      onDelete: isAccessibleForDelete && onDelete\n    }),\n    onClick: onLink && isAccessibleForView && (item => onLink(item)),\n    onEdit: onEdit && isAccessibleForEdit && (item => onEdit(item, onAfter)),\n    onChecked: isAccessibleForDelete && onChecked,\n    onDelete: isAccessibleForDelete && onDelete\n  })));\n};\n\nContentLayout.defaultProps = {\n  field: 'id'\n};\nexport default ContentLayout;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/layouts/dashboard/content.js"],"names":["React","useState","useEffect","useCallback","useMemo","useDispatch","useSelector","v4","Column","Grid","DashboardLayout","List","FilterBar","HandleBar","DeleteForm","setDisplayMethod","setVisibleFilters","setDrawer","setItem","useAccess","getIsAdmin","document","name","toUpperCase","Delete","item","query","component","entityMultiText","entitySingleText","onSubmit","isArray","Array","dispatch","Component","_","action","variables","email","map","doc","id","type","message","err","Card","checked","appearance","withoutActions","withoutChecked","onChecked","onLink","onEdit","onDelete","cloneElement","ContentLayout","render","title","icon","field","template","limit","startOffset","buttonCreateText","filterConfig","getType","getQuery","entityType","deleteQuery","deleteEntityMultiText","deleteEntitySingleText","onCreate","emptyMessage","displayMethod","visibleFilters","state","root","isAccessibleForView","isAccessibleForAdd","isAccessibleForEdit","isAccessibleForDelete","isAllChecked","setIsAllChecked","checkedList","setCheckedList","updated","setUpdated","getIsAnyChecked","find","onAfter","prev","isExists","candidate","onAllChecked","value","color","content","props","onDeleteAll","filter","countChecked","reduce","acc","curr","length","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { v4 } from 'uuid'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Grid from '../../atomic-ui/components/Grid'\n\nimport DashboardLayout from '../dashboard'\nimport List from '../../components/List'\nimport FilterBar from '../../components/FilterBar'\nimport HandleBar from '../../components/HandleBar'\nimport DeleteForm from '../../components/FormDelete'\nimport { setDisplayMethod, setVisibleFilters } from '../../store/actions/root'\nimport { setDrawer } from '../../store/actions/drawer'\nimport { setItem } from '../../store/actions/snacks'\nimport { useAccess } from '../../hooks/useAccess'\n\nconst getIsAdmin = (document) => document?.name?.toUpperCase() !== 'ADMIN'\n\nconst Delete = ({ item, query, component, entityMultiText, entitySingleText, onSubmit }) => {\n  const isArray = useMemo(() => Array.isArray(item), [item])\n  const dispatch = useDispatch()\n  const Component = component\n\n  return (\n    <DeleteForm\n      mutation={query}\n      appearance={'clear'}\n      onCancel={() => dispatch(setDrawer(null))}\n      onSubmit={async (_, action) => {\n        try {\n          await action({\n            variables: {\n              ...((isArray && item[0]?.email) || item.email\n                ? {\n                    email: isArray ? item.map((doc) => doc.email) : [item.email]\n                  }\n                : { id: isArray ? item.map((doc) => doc.id) : [item.id] })\n            }\n          })\n          dispatch(\n            setItem({\n              type: 'success',\n              message: isArray\n                ? `${entityMultiText} успешно удалены`\n                : `${entitySingleText} успешно удален`\n            })\n          )\n        } catch (err) {\n          if (err) {\n            dispatch(\n              setItem({\n                type: 'error',\n                message: 'Что-то пошло не так'\n              })\n            )\n          }\n        } finally {\n          dispatch(setDrawer(null))\n          if (onSubmit) onSubmit()\n        }\n      }}>\n      {isArray ? (\n        <Grid length={'auto-fit'}>\n          {item.map((document) => (\n            <Component key={document.id} item={document} />\n          ))}\n        </Grid>\n      ) : (\n        <Component item={item} />\n      )}\n    </DeleteForm>\n  )\n}\n\nexport const Card = ({\n  item,\n  checked,\n  appearance,\n  component,\n  withoutActions,\n  withoutChecked,\n  onChecked,\n  onLink,\n  onEdit,\n  onDelete\n}) =>\n  React.cloneElement(component, {\n    checked,\n    appearance,\n    onLink: onLink && (() => onLink(item)),\n    onEdit: !withoutActions && onEdit && (() => onEdit(item)),\n    onChecked: !withoutChecked && onChecked && ((checked) => onChecked({ ...item, checked })),\n    onDelete: !withoutActions && onDelete && (() => onDelete(item))\n  })\n\nconst ContentLayout = ({\n  render,\n  title,\n  icon,\n  field,\n  template,\n  limit = 6,\n  startOffset = 6,\n  buttonCreateText,\n  filterConfig,\n  variables,\n  getType,\n  getQuery,\n  entityType,\n  deleteQuery,\n  deleteEntityMultiText,\n  deleteEntitySingleText,\n  onLink,\n  onEdit,\n  onCreate,\n  emptyMessage,\n  withoutChecked\n}) => {\n  const { displayMethod, visibleFilters } = useSelector((state) => ({\n    displayMethod: state.root.displayMethod,\n    visibleFilters: state.root.visibleFilters\n  }))\n  const {\n    isAccessibleForView,\n    isAccessibleForAdd,\n    isAccessibleForEdit,\n    isAccessibleForDelete\n  } = useAccess(entityType)\n  const dispatch = useDispatch()\n\n  const [isAllChecked, setIsAllChecked] = useState(false)\n  const [checkedList, setCheckedList] = useState([])\n  const [updated, setUpdated] = useState('list')\n\n  const getIsAnyChecked = useCallback(\n    (item) => checkedList.find((document) => document[field] === item[field])?.checked,\n    [checkedList]\n  )\n\n  const onAfter = () => setUpdated(v4())\n\n  const onChecked = (document) => {\n    setCheckedList((prev) => {\n      const isExists = (item) => item[field] === document[field]\n      const candidate = prev.find(isExists)\n      if (candidate) {\n        return prev.map((item) =>\n          isExists(item)\n            ? {\n                ...document,\n                checked: !item.checked\n              }\n            : {\n                ...item,\n                checked: isAllChecked || item.checked\n              }\n        )\n      } else {\n        return [...prev, { ...document, checked: true }]\n      }\n    })\n    setIsAllChecked(false)\n  }\n\n  const onAllChecked = () => {\n    const value = !isAllChecked\n    setCheckedList((prev) =>\n      prev.map((item) => ({\n        ...item,\n        checked: getIsAdmin(item) ? value : false\n      }))\n    )\n    setIsAllChecked(value)\n  }\n\n  const onDelete = (item) =>\n    dispatch(\n      setDrawer({\n        icon: 'delete',\n        color: 'red',\n        title: 'Удаление',\n        content: (\n          <Delete\n            item={item}\n            query={deleteQuery}\n            component={(props) =>\n              React.cloneElement(render(props.item), {\n                appearance: 'clear',\n                onEdit: null,\n                onDelete: null\n              })\n            }\n            entityMultiText={deleteEntityMultiText}\n            entitySingleText={deleteEntitySingleText}\n            onSubmit={() => setUpdated(v4())}\n          />\n        )\n      })\n    )\n\n  const onDeleteAll = () => onDelete(checkedList.filter((document) => document.checked))\n\n  useEffect(() => {\n    const countChecked = checkedList.reduce((acc, curr) => acc + (curr.checked ? 1 : 0), 0)\n    if (checkedList.length > 0 && countChecked === checkedList.length) {\n      setIsAllChecked(true)\n    }\n  }, [checkedList])\n\n  return (\n    <DashboardLayout title={title}>\n      <Column>\n        <HandleBar\n          title={title}\n          icon={icon}\n          checked={isAllChecked}\n          defaultDisplayMethod={displayMethod}\n          defaultVisibleFilters={visibleFilters}\n          buttonDeleteDisabled={!checkedList.find((item) => item.checked)}\n          buttonCreateText={buttonCreateText}\n          onCreate={isAccessibleForAdd && (() => onCreate && onCreate(onAfter))}\n          onChecked={\n            isAccessibleForDelete &&\n            (() => displayMethod === 'grid' && onAllChecked && onAllChecked())\n          }\n          onChangeVisibleFilter={() => dispatch(setVisibleFilters(!visibleFilters))}\n          onChangeDisplayMethod={(item) => dispatch(setDisplayMethod(item.value))}\n          onDeleteAll={isAccessibleForDelete && onDeleteAll}\n          withoutFooter={!isAccessibleForDelete || displayMethod === 'list'}\n          withFilters={filterConfig}\n        />\n\n        <FilterBar {...(filterConfig || {})} isOpen={visibleFilters} withoutDivider />\n\n        <List\n          key={updated}\n          limit={limit}\n          type={getType}\n          query={getQuery}\n          template={template}\n          variables={variables}\n          startOffset={startOffset}\n          emptyMessage={emptyMessage}\n          setCheckedList={setCheckedList}\n          component={(item) => (\n            <Card\n              item={item}\n              component={render(item)}\n              withoutChecked={!isAccessibleForDelete && withoutChecked}\n              withoutActions={!isAccessibleForEdit && !isAccessibleForDelete}\n              checked={getIsAdmin(item) && (isAllChecked || getIsAnyChecked(item))}\n              onLink={onLink && isAccessibleForView && ((item) => onLink(item))}\n              onEdit={onEdit && isAccessibleForEdit && ((item) => onEdit(item, onAfter))}\n              onChecked={isAccessibleForDelete && onChecked}\n              onDelete={isAccessibleForDelete && onDelete}\n            />\n          )}\n          onClick={onLink && isAccessibleForView && ((item) => onLink(item))}\n          onEdit={onEdit && isAccessibleForEdit && ((item) => onEdit(item, onAfter))}\n          onChecked={isAccessibleForDelete && onChecked}\n          onDelete={isAccessibleForDelete && onDelete}\n        />\n      </Column>\n    </DashboardLayout>\n  )\n}\n\nContentLayout.defaultProps = {\n  field: 'id'\n}\n\nexport default ContentLayout\n"]},"metadata":{},"sourceType":"module"}
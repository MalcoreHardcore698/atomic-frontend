{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport UserCard from '../UserCard';\nimport { useHelper } from '../../hooks/useHelper';\nimport { onChat } from '../../store/helpers';\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../../store/helpers/user';\nimport { useUser } from '../../hooks/useUser';\nimport queries from '../../graphql/queries';\nexport const UserList = ({\n  variables,\n  initialList\n}) => {\n  _s();\n\n  const methods = useUser();\n  return !loading && data || users.length > 0 ? users.map(author => {\n    var _user, _user2, _user3, _user4, _author$company, _user5;\n\n    const owned = author.name === ((_user = user) === null || _user === void 0 ? void 0 : _user.name);\n    return /*#__PURE__*/React.createElement(LazyLoad, {\n      key: author.email\n    }, /*#__PURE__*/React.createElement(UserCard, {\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        sender: (_user2 = user) === null || _user2 === void 0 ? void 0 : _user2.email,\n        recipient: author.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: (_user3 = user) === null || _user3 === void 0 ? void 0 : _user3.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: author\n      }),\n      onMembers: recall(onUserMembers, {\n        id: author === null || author === void 0 ? void 0 : author.email,\n        auth: (_user4 = user) === null || _user4 === void 0 ? void 0 : _user4.email\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: (_user5 = user) === null || _user5 === void 0 ? void 0 : _user5.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })\n    }));\n  }) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\") : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432 \\u043D\\u0435\\u0442\");\n};\n\n_s(UserList, \"K002/Vx8YamxKoArU49Th8Cl/FQ=\", false, function () {\n  return [useUser];\n});\n\n_c = UserList;\nexport default UserList;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/UserList/index.js"],"names":["React","useState","useEffect","useQuery","useSelector","Alert","Spinner","Loader","LazyLoad","UserCard","useHelper","onChat","onUserAboutMore","onUserLink","onUserMembers","useUser","queries","UserList","variables","initialList","methods","loading","data","users","length","map","author","owned","name","user","email","recall","sender","recipient","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","id","auth","company","error","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\n\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\nimport UserCard from '../UserCard'\nimport { useHelper } from '../../hooks/useHelper'\nimport { onChat } from '../../store/helpers'\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../../store/helpers/user'\nimport { useUser } from '../../hooks/useUser'\nimport queries from '../../graphql/queries'\n\nexport const UserList = ({ variables, initialList }) => {\n  const methods = useUser()\n\n  return (!loading && data) || users.length > 0 ? (\n    users.map((author) => {\n      const owned = author.name === user?.name\n\n      return (\n        <LazyLoad key={author.email}>\n          <UserCard\n            user={author}\n            owned={owned}\n            onChat={\n              user.email &&\n              recall(onChat, {\n                sender: user?.email,\n                recipient: author.email,\n                queries: {\n                  userChats: queries.GET_USER_CHATS,\n                  chat: queries.GET_CHAT\n                },\n                mutations: {\n                  addUserChat: queries.ADD_USER_CHAT,\n                  sendMessage: queries.SEND_MESSAGE\n                }\n              })\n            }\n            onLink={recall(onUserLink, {\n              id: author.email,\n              auth: user?.email,\n              owned,\n              queries: {\n                userChats: queries.GET_USER_CHATS,\n                chat: queries.GET_CHAT\n              },\n              mutations: {\n                addUserChat: queries.ADD_USER_CHAT,\n                sendMessage: queries.SEND_MESSAGE\n              }\n            })}\n            onAboutMore={recall(onUserAboutMore, { user: author })}\n            onMembers={recall(onUserMembers, { id: author?.email, auth: user?.email })}\n            onCompanyLink={recall(onUserLink, {\n              id: author.company?.email,\n              auth: user?.email,\n              queries: {\n                userChats: queries.GET_USER_CHATS,\n                chat: queries.GET_CHAT\n              },\n              mutations: {\n                addUserChat: queries.ADD_USER_CHAT,\n                sendMessage: queries.SEND_MESSAGE\n              }\n            })}\n          />\n        </LazyLoad>\n      )\n    })\n  ) : error ? (\n    <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n      Не удалось загрузить данные\n    </Alert>\n  ) : loading ? (\n    <Loader>\n      <Spinner />\n    </Loader>\n  ) : (\n    <Alert style={{ width: '100%', textAlign: 'center' }}>Авторов нет</Alert>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}
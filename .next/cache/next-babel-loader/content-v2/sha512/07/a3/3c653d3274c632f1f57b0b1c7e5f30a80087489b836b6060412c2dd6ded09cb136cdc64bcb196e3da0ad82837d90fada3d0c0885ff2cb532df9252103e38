{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nexport const Wrap = styled.div`\n  display: grid;\n  grid-gap: var(--default-gap);\n\n  ${({\n  length,\n  percentage\n}) => css`\n    grid-template-columns: repeat(${length}, ${percentage});\n  `}\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  }\n\n  @media only screen and (max-width: 480px) {\n    grid-template-columns: repeat(auto-fill, minmax(285px, 1fr));\n  }\n`;\nexport const Grid = (_ref) => {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return __jsx(Wrap, props, children);\n};\nGrid.defaultProps = {\n  length: 'auto-fill',\n  percentage: 'minmax(445px, 1fr)'\n};\nexport default Grid;","map":null,"metadata":{},"sourceType":"module"}
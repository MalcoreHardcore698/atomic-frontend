{"ast":null,"code":"import gql from 'graphql-tag';\nimport { ProjectFields, UserFields, DashboardSettingsFields } from '../../fragments';\nexport const GET_STATUS_TICKET_TYPES = gql`\n  query getStatusTicketTypes {\n    getStatusTicketTypes\n  }\n`;\nexport const GET_STATUS_CHAT_TYPES = gql`\n  query getStatusChatTypes {\n    getStatusChatTypes\n  }\n`;\nexport const GET_GENDER_TYPES = gql`\n  query getGenderTypes {\n    getGenderTypes\n  }\n`;\nexport const GET_ACCOUNT_TYPES = gql`\n  query getAccountTypes {\n    getAccountTypes\n  }\n`;\nexport const GET_NOTICE_TYPES = gql`\n  query getNoticeTypes {\n    getNoticeTypes\n  }\n`;\nexport const GET_CATEGORY_TYPES = gql`\n  query getCategoryTypes {\n    getCategoryTypes\n  }\n`;\nexport const GET_PERMISSIONS = gql`\n  query getPermissions {\n    getPermissions\n  }\n`;\nexport const GET_POST_STATUSES = gql`\n  query getPostStatus {\n    getPostStatus\n  }\n`;\nexport const GET_META = gql`\n  query getDashboardSettings {\n    getDashboardSettings {\n      general {\n        logotype {\n          path\n        }\n      }\n      meta {\n        title\n        description\n      }\n    }\n  }\n`;\nexport const GET_META_SCAFFOLD = gql`\n  query getDashboardSettings {\n    getDashboardSettings {\n      scaffold {\n        title\n        primary {\n          ...ProjectFields\n        }\n        residues {\n          ...ProjectFields\n        }\n        background {\n          id\n          filename\n          size\n          path\n        }\n      }\n    }\n  }\n  ${ProjectFields}\n`;\nexport const GET_META_AUTHORS = gql`\n  query getMetaAuthors($offset: Int, $limit: Int, $search: String, $role: String) {\n    getUsers(offset: $offset, limit: $limit, search: $search, role: $role) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const GET_META_SETTINGS_PROJECTS = gql`\n  query getProjects(\n    $offset: Int\n    $limit: Int\n    $search: String\n    $category: ID\n    $status: [PostStatus]\n  ) {\n    getProjects(\n      offset: $offset\n      limit: $limit\n      search: $search\n      category: $category\n      status: $status\n    ) {\n      id\n      title\n      status\n    }\n  }\n`;\nexport const GET_META_DASHBOARD_STATISTICS = gql`\n  query getDashboardStatistics {\n    getDashboardStatistics {\n      title\n      total\n      graph {\n        count\n        createdAt\n      }\n    }\n  }\n`;\nexport const GET_META_DASHBOARD_ACTIVITIES = gql`\n  query getDashboardActivities {\n    getDashboardActivities {\n      id\n      user {\n        name\n        email\n        avatar {\n          path\n        }\n      }\n      message\n      entityType\n      identityString\n      createdAt\n    }\n  }\n`;\nexport const GET_META_DASHBOARD_SETTINGS = gql`\n  query getDashboardSettings {\n    getDashboardSettings {\n      ...DashboardSettingsFields\n    }\n  }\n  ${DashboardSettingsFields}\n`;\nexport const GET_META_DASHBOARD_PREVIEW_ARTICLES = gql`\n  query getMetaDashboardPreviewArticles($offset: Int, $limit: Int, $status: [PostStatus]) {\n    getArticles(offset: $offset, limit: $limit, status: $status) {\n      id\n      author {\n        name\n        avatar {\n          path\n        }\n      }\n      title\n      body\n      category {\n        id\n        name\n      }\n      status\n    }\n  }\n`;\nexport const GET_META_DASHBOARD_PREVIEW_PROJECTS = gql`\n  query getMetaDashboardPreviewProjects($offset: Int, $limit: Int, $status: [PostStatus]) {\n    getProjects(offset: $offset, limit: $limit, status: $status) {\n      id\n      title\n      description\n      company {\n        name\n        email\n        avatar {\n          path\n        }\n      }\n      category {\n        id\n        name\n      }\n      status\n    }\n  }\n`;\nexport const UPDATE_META_DASHBOARD_SETTINGS = gql`\n  mutation updateMetaDashboardSettings($input: DashboardSettingsInput!) {\n    updateDashboardSettings(input: $input) {\n      ...DashboardSettingsFields\n    }\n  }\n  ${DashboardSettingsFields}\n`;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/graphql/queries/Meta/index.js"],"names":["gql","ProjectFields","UserFields","DashboardSettingsFields","GET_STATUS_TICKET_TYPES","GET_STATUS_CHAT_TYPES","GET_GENDER_TYPES","GET_ACCOUNT_TYPES","GET_NOTICE_TYPES","GET_CATEGORY_TYPES","GET_PERMISSIONS","GET_POST_STATUSES","GET_META","GET_META_SCAFFOLD","GET_META_AUTHORS","GET_META_SETTINGS_PROJECTS","GET_META_DASHBOARD_STATISTICS","GET_META_DASHBOARD_ACTIVITIES","GET_META_DASHBOARD_SETTINGS","GET_META_DASHBOARD_PREVIEW_ARTICLES","GET_META_DASHBOARD_PREVIEW_PROJECTS","UPDATE_META_DASHBOARD_SETTINGS"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,uBAApC,QAAmE,iBAAnE;AAEA,OAAO,MAAMC,uBAAuB,GAAGJ,GAAI;AAC3C;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMK,qBAAqB,GAAGL,GAAI;AACzC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMM,gBAAgB,GAAGN,GAAI;AACpC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMO,iBAAiB,GAAGP,GAAI;AACrC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMQ,gBAAgB,GAAGR,GAAI;AACpC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMS,kBAAkB,GAAGT,GAAI;AACtC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMU,eAAe,GAAGV,GAAI;AACnC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMW,iBAAiB,GAAGX,GAAI;AACrC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMY,QAAQ,GAAGZ,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdO;AAgBP,OAAO,MAAMa,iBAAiB,GAAGb,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,aAAc;AAClB,CArBO;AAuBP,OAAO,MAAMa,gBAAgB,GAAGd,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA,IAAIE,UAAW;AACf,CAPO;AASP,OAAO,MAAMa,0BAA0B,GAAGf,GAAI;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBO;AAsBP,OAAO,MAAMgB,6BAA6B,GAAGhB,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO;AAaP,OAAO,MAAMiB,6BAA6B,GAAGjB,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBO;AAmBP,OAAO,MAAMkB,2BAA2B,GAAGlB,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA,IAAIG,uBAAwB;AAC5B,CAPO;AASP,OAAO,MAAMgB,mCAAmC,GAAGnB,GAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBO;AAqBP,OAAO,MAAMoB,mCAAmC,GAAGpB,GAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBO;AAsBP,OAAO,MAAMqB,8BAA8B,GAAGrB,GAAI;AAClD;AACA;AACA;AACA;AACA;AACA,IAAIG,uBAAwB;AAC5B,CAPO","sourcesContent":["import gql from 'graphql-tag'\nimport { ProjectFields, UserFields, DashboardSettingsFields } from '../../fragments'\n\nexport const GET_STATUS_TICKET_TYPES = gql`\n  query getStatusTicketTypes {\n    getStatusTicketTypes\n  }\n`\n\nexport const GET_STATUS_CHAT_TYPES = gql`\n  query getStatusChatTypes {\n    getStatusChatTypes\n  }\n`\n\nexport const GET_GENDER_TYPES = gql`\n  query getGenderTypes {\n    getGenderTypes\n  }\n`\n\nexport const GET_ACCOUNT_TYPES = gql`\n  query getAccountTypes {\n    getAccountTypes\n  }\n`\n\nexport const GET_NOTICE_TYPES = gql`\n  query getNoticeTypes {\n    getNoticeTypes\n  }\n`\n\nexport const GET_CATEGORY_TYPES = gql`\n  query getCategoryTypes {\n    getCategoryTypes\n  }\n`\n\nexport const GET_PERMISSIONS = gql`\n  query getPermissions {\n    getPermissions\n  }\n`\n\nexport const GET_POST_STATUSES = gql`\n  query getPostStatus {\n    getPostStatus\n  }\n`\n\nexport const GET_META = gql`\n  query getDashboardSettings {\n    getDashboardSettings {\n      general {\n        logotype {\n          path\n        }\n      }\n      meta {\n        title\n        description\n      }\n    }\n  }\n`\n\nexport const GET_META_SCAFFOLD = gql`\n  query getDashboardSettings {\n    getDashboardSettings {\n      scaffold {\n        title\n        primary {\n          ...ProjectFields\n        }\n        residues {\n          ...ProjectFields\n        }\n        background {\n          id\n          filename\n          size\n          path\n        }\n      }\n    }\n  }\n  ${ProjectFields}\n`\n\nexport const GET_META_AUTHORS = gql`\n  query getMetaAuthors($offset: Int, $limit: Int, $search: String, $role: String) {\n    getUsers(offset: $offset, limit: $limit, search: $search, role: $role) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const GET_META_SETTINGS_PROJECTS = gql`\n  query getProjects(\n    $offset: Int\n    $limit: Int\n    $search: String\n    $category: ID\n    $status: [PostStatus]\n  ) {\n    getProjects(\n      offset: $offset\n      limit: $limit\n      search: $search\n      category: $category\n      status: $status\n    ) {\n      id\n      title\n      status\n    }\n  }\n`\n\nexport const GET_META_DASHBOARD_STATISTICS = gql`\n  query getDashboardStatistics {\n    getDashboardStatistics {\n      title\n      total\n      graph {\n        count\n        createdAt\n      }\n    }\n  }\n`\n\nexport const GET_META_DASHBOARD_ACTIVITIES = gql`\n  query getDashboardActivities {\n    getDashboardActivities {\n      id\n      user {\n        name\n        email\n        avatar {\n          path\n        }\n      }\n      message\n      entityType\n      identityString\n      createdAt\n    }\n  }\n`\n\nexport const GET_META_DASHBOARD_SETTINGS = gql`\n  query getDashboardSettings {\n    getDashboardSettings {\n      ...DashboardSettingsFields\n    }\n  }\n  ${DashboardSettingsFields}\n`\n\nexport const GET_META_DASHBOARD_PREVIEW_ARTICLES = gql`\n  query getMetaDashboardPreviewArticles($offset: Int, $limit: Int, $status: [PostStatus]) {\n    getArticles(offset: $offset, limit: $limit, status: $status) {\n      id\n      author {\n        name\n        avatar {\n          path\n        }\n      }\n      title\n      body\n      category {\n        id\n        name\n      }\n      status\n    }\n  }\n`\n\nexport const GET_META_DASHBOARD_PREVIEW_PROJECTS = gql`\n  query getMetaDashboardPreviewProjects($offset: Int, $limit: Int, $status: [PostStatus]) {\n    getProjects(offset: $offset, limit: $limit, status: $status) {\n      id\n      title\n      description\n      company {\n        name\n        email\n        avatar {\n          path\n        }\n      }\n      category {\n        id\n        name\n      }\n      status\n    }\n  }\n`\n\nexport const UPDATE_META_DASHBOARD_SETTINGS = gql`\n  mutation updateMetaDashboardSettings($input: DashboardSettingsInput!) {\n    updateDashboardSettings(input: $input) {\n      ...DashboardSettingsFields\n    }\n  }\n  ${DashboardSettingsFields}\n`\n"]},"metadata":{},"sourceType":"module"}
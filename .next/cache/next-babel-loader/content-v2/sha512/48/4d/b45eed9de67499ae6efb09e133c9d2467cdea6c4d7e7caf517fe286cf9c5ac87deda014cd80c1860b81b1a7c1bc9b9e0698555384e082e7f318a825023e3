{"ast":null,"code":"import React from 'react';\nimport styled from 'styled-components';\nimport YouTube from 'react-youtube';\nimport Column from '../../atomic-ui/components/Column';\nimport Dash from '../../atomic-ui/components/Menu/Dash';\nimport TicketForm from '../../components/FormTicket';\nimport Notifications from '../../components/Notifications';\nimport Messenger from '../../components/Messenger';\nimport { setDrawer } from '../actions/drawer';\nimport { setModal } from '../actions/modal';\nimport { setItem } from '../actions/snacks';\nimport { onUserLink } from './user';\nexport const Presentation = styled(YouTube).withConfig({\n  displayName: \"helpers__Presentation\",\n  componentId: \"t5pxc3-0\"\n})([\"display:flex;flex-grow:1;width:100%;height:80vh;border-radius:var(--surface-border-radius);overflow:hidden;iframe{width:100%;height:100%;}\"]);\n_c = Presentation;\nexport function onMenu(dispatch, props) {\n  const {\n    links\n  } = props;\n  dispatch(setDrawer({\n    side: 'left',\n    half: true,\n    content: /*#__PURE__*/React.createElement(Dash, {\n      links: links\n    })\n  }));\n}\nexport function onHelp(dispatch, props) {\n  const {\n    mutation\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'Поддержка',\n    component: () => /*#__PURE__*/React.createElement(Column, {\n      style: {\n        padding: '15px'\n      }\n    }, /*#__PURE__*/React.createElement(TicketForm, {\n      title: false,\n      mutation: mutation,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          var _form$category;\n\n          await action({\n            variables: {\n              input: {\n                title: form.title,\n                message: form.message,\n                category: (_form$category = form.category) === null || _form$category === void 0 ? void 0 : _form$category.value\n              }\n            }\n          });\n          dispatch(setItem({\n            type: 'success',\n            message: 'Вопрос успешно отправлен'\n          }));\n        } catch (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отправить вопрос'\n          }));\n        } finally {\n          dispatch(setModal(null));\n        }\n      },\n      isClient: true\n    }))\n  }]));\n}\nexport function onNotification(dispatch, props) {\n  const {\n    user\n  } = props;\n  dispatch(setDrawer({\n    icon: 'notification',\n    title: 'Уведомления',\n    content: /*#__PURE__*/React.createElement(Notifications, {\n      user: user,\n      appearance: 'clear'\n    })\n  }));\n}\nexport function onChat(dispatch, props) {\n  const {\n    sender,\n    recipient\n  } = props;\n  dispatch(setDrawer({\n    icon: 'chat',\n    title: 'Мессенджер',\n    content: /*#__PURE__*/React.createElement(Messenger, {\n      sender: sender,\n      recipient: recipient,\n      appearance: 'clear',\n      onMemberLink: () => onUserLink(dispatch, props),\n      onSubmit: async (form, action, recipient) => {\n        try {\n          const response = await action({\n            variables: {\n              recipient: recipient.email,\n              text: form.text\n            }\n          });\n          return response.data.sendMessage;\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    })\n  }));\n}\nexport function onIndexVideoLink(dispatch, props) {\n  const {\n    video\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: '',\n    component: () => /*#__PURE__*/React.createElement(Presentation, {\n      videoId: video\n    })\n  }], 'l'));\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Presentation\");","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/store/helpers/index.js"],"names":["React","styled","YouTube","Column","Dash","TicketForm","Notifications","Messenger","setDrawer","setModal","setItem","onUserLink","Presentation","onMenu","dispatch","props","links","side","half","content","onHelp","mutation","path","title","component","padding","form","action","variables","input","message","category","value","type","err","onNotification","user","icon","onChat","sender","recipient","response","email","text","data","sendMessage","console","log","onIndexVideoLink","video"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport YouTube from 'react-youtube'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Dash from '../../atomic-ui/components/Menu/Dash'\n\nimport TicketForm from '../../components/FormTicket'\nimport Notifications from '../../components/Notifications'\nimport Messenger from '../../components/Messenger'\nimport { setDrawer } from '../actions/drawer'\nimport { setModal } from '../actions/modal'\nimport { setItem } from '../actions/snacks'\nimport { onUserLink } from './user'\n\nexport const Presentation = styled(YouTube)`\n  display: flex;\n  flex-grow: 1;\n  width: 100%;\n  height: 80vh;\n  border-radius: var(--surface-border-radius);\n  overflow: hidden;\n\n  iframe {\n    width: 100%;\n    height: 100%;\n  }\n`\n\nexport function onMenu(dispatch, props) {\n  const { links } = props\n\n  dispatch(\n    setDrawer({\n      side: 'left',\n      half: true,\n      content: <Dash links={links} />\n    })\n  )\n}\n\nexport function onHelp(dispatch, props) {\n  const { mutation } = props\n\n  dispatch(\n    setModal([\n      {\n        path: '/',\n        title: 'Поддержка',\n        component: () => (\n          <Column style={{ padding: '15px' }}>\n            <TicketForm\n              title={false}\n              mutation={mutation}\n              appearance={'clear'}\n              onSubmit={async (form, action) => {\n                try {\n                  await action({\n                    variables: {\n                      input: {\n                        title: form.title,\n                        message: form.message,\n                        category: form.category?.value\n                      }\n                    }\n                  })\n                  dispatch(\n                    setItem({\n                      type: 'success',\n                      message: 'Вопрос успешно отправлен'\n                    })\n                  )\n                } catch (err) {\n                  dispatch(\n                    setItem({\n                      type: 'error',\n                      message: 'Не удалось отправить вопрос'\n                    })\n                  )\n                } finally {\n                  dispatch(setModal(null))\n                }\n              }}\n              isClient\n            />\n          </Column>\n        )\n      }\n    ])\n  )\n}\n\nexport function onNotification(dispatch, props) {\n  const { user } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'notification',\n      title: 'Уведомления',\n      content: <Notifications user={user} appearance={'clear'} />\n    })\n  )\n}\n\nexport function onChat(dispatch, props) {\n  const { sender, recipient } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'chat',\n      title: 'Мессенджер',\n      content: (\n        <Messenger\n          sender={sender}\n          recipient={recipient}\n          appearance={'clear'}\n          onMemberLink={() => onUserLink(dispatch, props)}\n          onSubmit={async (form, action, recipient) => {\n            try {\n              const response = await action({\n                variables: {\n                  recipient: recipient.email,\n                  text: form.text\n                }\n              })\n              return response.data.sendMessage\n            } catch (err) {\n              console.log(err)\n            }\n          }}\n        />\n      )\n    })\n  )\n}\n\nexport function onIndexVideoLink(dispatch, props) {\n  const { video } = props\n\n  dispatch(\n    setModal(\n      [\n        {\n          path: '/',\n          title: '',\n          component: () => <Presentation videoId={video} />\n        }\n      ],\n      'l'\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
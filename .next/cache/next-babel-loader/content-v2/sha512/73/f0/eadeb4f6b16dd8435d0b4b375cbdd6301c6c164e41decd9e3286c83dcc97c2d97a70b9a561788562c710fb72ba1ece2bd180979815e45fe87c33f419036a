{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onUserAboutMore, onUserLink, onUserMembers, onUserEdit, onUserCreate } from '../store/helpers/user';\nimport { onChat as onUserChat } from '../store/helpers';\nimport { useHelper } from './useHelper';\nimport { useMutate } from './useMutate';\nimport queries from '../graphql/queries';\nexport const useUser = ({\n  isManage\n} = {}) => {\n  var _user$members;\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const canEditAccount = useMemo(() => (user === null || user === void 0 ? void 0 : user.account) !== 'ADMIN', [user]);\n  const canEditRole = useMemo(() => {\n    var _user$role;\n\n    return user && (user === null || user === void 0 ? void 0 : (_user$role = user.role) === null || _user$role === void 0 ? void 0 : _user$role.name) === 'ADMIN';\n  }, [user]);\n  const hasOwned = useCallback(author => (author === null || author === void 0 ? void 0 : author.name) === (user === null || user === void 0 ? void 0 : user.name), [user]);\n  const onLink = useCallback(author => {\n    const owned = (author === null || author === void 0 ? void 0 : author.name) === (user === null || user === void 0 ? void 0 : user.name);\n    recall(onUserLink, {\n      id: author === null || author === void 0 ? void 0 : author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      owned,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, dispatch, mutate, recall]);\n  const onChat = useCallback(author => {\n    recall(onUserChat, {\n      sender: user,\n      recipient: author,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, mutate, dispatch]);\n  const onMembers = useCallback(author => {\n    recall(onUserMembers, {\n      id: author === null || author === void 0 ? void 0 : author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    })();\n  }, [user, recall]);\n  const onAboutMore = useCallback(author => {\n    recall(onUserAboutMore, {\n      user: author\n    })();\n  }, [recall]);\n  const onCompanyLink = useCallback(author => {\n    var _author$company;\n\n    recall(onUserLink, {\n      id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    })();\n  }, [user, recall]);\n\n  const onEdit = (author, onAfter) => recall(onUserEdit, {\n    user: author.email,\n    auth: user === null || user === void 0 ? void 0 : user.email,\n    canEditAccount,\n    canEditRole,\n    mutations: {\n      del: queries.DELETE_USER,\n      update: queries.UPDATE_USER\n    },\n    onAfter\n  })();\n\n  const onCreate = onAfter => recall(onUserCreate, {\n    canEditRole,\n    mutation: queries.CREATE_USER,\n    onAfter\n  })();\n\n  return {\n    user,\n    hasOwned,\n    onLink,\n    onChat,\n    onAboutMore,\n    onMembers: (user === null || user === void 0 ? void 0 : (_user$members = user.members) === null || _user$members === void 0 ? void 0 : _user$members.length) > 0 && onMembers,\n    onCompanyLink: (user === null || user === void 0 ? void 0 : user.company) && onCompanyLink,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  };\n};","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/hooks/useUser.js"],"names":["useCallback","useMemo","useDispatch","useSelector","onUserAboutMore","onUserLink","onUserMembers","onUserEdit","onUserCreate","onChat","onUserChat","useHelper","useMutate","queries","useUser","isManage","recall","mutate","user","state","dispatch","canEditAccount","account","canEditRole","role","name","hasOwned","author","onLink","owned","id","email","auth","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","sender","recipient","onMembers","onAboutMore","onCompanyLink","company","onEdit","onAfter","del","DELETE_USER","update","UPDATE_USER","onCreate","mutation","CREATE_USER","members","length"],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport {\n  onUserAboutMore,\n  onUserLink,\n  onUserMembers,\n  onUserEdit,\n  onUserCreate\n} from '../store/helpers/user'\nimport { onChat as onUserChat } from '../store/helpers'\nimport { useHelper } from './useHelper'\nimport { useMutate } from './useMutate'\nimport queries from '../graphql/queries'\n\nexport const useUser = ({ isManage } = {}) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  const canEditAccount = useMemo(() => user?.account !== 'ADMIN', [user])\n\n  const canEditRole = useMemo(() => user && user?.role?.name === 'ADMIN', [user])\n\n  const hasOwned = useCallback((author) => author?.name === user?.name, [user])\n\n  const onLink = useCallback(\n    (author) => {\n      const owned = author?.name === user?.name\n      recall(onUserLink, {\n        id: author?.email,\n        auth: user?.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })()\n    },\n    [user, dispatch, mutate, recall]\n  )\n\n  const onChat = useCallback(\n    (author) => {\n      recall(onUserChat, {\n        sender: user,\n        recipient: author,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })()\n    },\n    [user, mutate, dispatch]\n  )\n\n  const onMembers = useCallback(\n    (author) => {\n      recall(onUserMembers, { id: author?.email, auth: user?.email })()\n    },\n    [user, recall]\n  )\n\n  const onAboutMore = useCallback(\n    (author) => {\n      recall(onUserAboutMore, { user: author })()\n    },\n    [recall]\n  )\n\n  const onCompanyLink = useCallback(\n    (author) => {\n      recall(onUserLink, {\n        id: author.company?.email,\n        auth: user?.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })()\n    },\n    [user, recall]\n  )\n\n  const onEdit = (author, onAfter) =>\n    recall(onUserEdit, {\n      user: author.email,\n      auth: user?.email,\n      canEditAccount,\n      canEditRole,\n      mutations: {\n        del: queries.DELETE_USER,\n        update: queries.UPDATE_USER\n      },\n      onAfter\n    })()\n\n  const onCreate = (onAfter) =>\n    recall(onUserCreate, {\n      canEditRole,\n      mutation: queries.CREATE_USER,\n      onAfter\n    })()\n\n  return {\n    user,\n    hasOwned,\n    onLink,\n    onChat,\n    onAboutMore,\n    onMembers: user?.members?.length > 0 && onMembers,\n    onCompanyLink: user?.company && onCompanyLink,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Image from '../atomic-ui/components/Image';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport MainLayout from './main';\nimport { useMutate } from '../hooks/useMutate';\nimport { useHelper } from '../hooks/useHelper';\nimport Scaffold from '../components/Scaffold';\nimport AppBar from '../components/AppBar';\nimport Footer from '../components/Footer';\nimport { FixedLoader } from '../components/Styled';\nimport { setLogout } from '../store/actions/user';\nimport { setDrawer } from '../store/actions/drawer';\nimport { getSupportLinks, socials, contacts } from '../__mock__';\nimport { onMenu, onHelp, onNotification, onChat } from '../store/helpers';\nimport { onUserClientEdit } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nconst Wrap = styled.div.withConfig({\n  displayName: \"default__Wrap\",\n  componentId: \"sc-2byuzg-0\"\n})([\"position:relative;top:-20px;display:flex;flex-direction:column;justify-content:space-between;height:100vh;z-index:2;\"]);\nconst Background = styled(Image).withConfig({\n  displayName: \"default__Background\",\n  componentId: \"sc-2byuzg-1\"\n})([\"position:absolute;top:0;left:0;width:100%;height:auto;object-fit:contain;z-index:1;\"]);\nconst Main = styled.main.withConfig({\n  displayName: \"default__Main\",\n  componentId: \"sc-2byuzg-2\"\n})([\"padding:50px var(--main-offset-l);flex-grow:100;@media only screen and (max-width:996px){padding:25px var(--main-offset-m);}@media only screen and (max-width:768px){padding:25px var(--main-offset-s);}@media only screen and (max-width:480px){padding:25px var(--main-offset-xs);}\"]);\nconst Anchor = styled.a.withConfig({\n  displayName: \"default__Anchor\",\n  componentId: \"sc-2byuzg-3\"\n})([\"border-radius:25rem;padding:5px 15px;background:transparent;color:black;transition:all 150ms ease;\", \" \", \"\"], ({\n  link\n}) => link && css([\"&:hover{opacity:0.65;}\"]), ({\n  active,\n  link\n}) => active && link && css([\"background:var(--default-color-accent-dim);color:var(--default-color-accent-link);&:hover{opacity:1;}\"]));\nexport const DefaultLayout = ({\n  children,\n  title = 'Атомик',\n  scaffold,\n  background\n}) => {\n  var _root$settings$genera;\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const router = useRouter();\n  const {\n    data,\n    loading\n  } = useQuery(queries.GET_CATEGORIES);\n  const {\n    root,\n    user\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const categories = useMemo(() => (data === null || data === void 0 ? void 0 : data.getCategories) || [], [data]);\n  const isProjects = router.pathname.includes('projects');\n  const categoryId = router.query.c;\n  const onSupport = recall(onHelp, {\n    mutation: queries.CREATE_USER_TICKET\n  });\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(FixedLoader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(MainLayout, null, /*#__PURE__*/React.createElement(Head, null, /*#__PURE__*/React.createElement(\"meta\", {\n    name: \"keywords\",\n    content: \"next,javascript,nextjs,react\"\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: \"description\",\n    content: \"atomic project description\"\n  }), /*#__PURE__*/React.createElement(\"title\", null, title)), /*#__PURE__*/React.createElement(Background, {\n    src: background,\n    alt: 'Background'\n  }), /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(AppBar, {\n    user: user.authenticated ? user : null,\n    logotype: (_root$settings$genera = root.settings.general.logotype) === null || _root$settings$genera === void 0 ? void 0 : _root$settings$genera.path,\n    link: ({\n      children,\n      href,\n      ...props\n    }) => /*#__PURE__*/React.createElement(Link, _extends({}, props, {\n      href: href\n    }), /*#__PURE__*/React.createElement(Anchor, {\n      active: router.pathname === href,\n      link: children.type.target === 'span'\n    }, children)),\n    links: [{\n      label: 'Проекты',\n      props: {\n        sublinks: categories.filter(category => category.type === 'DIVISION').map(category => ({\n          label: category.name,\n          props: {\n            active: categoryId === category.id,\n            onClick: () => router.push(`/projects?c=${category.id}`)\n          }\n        }))\n      },\n      active: isProjects\n    }, {\n      label: 'Авторы',\n      props: {\n        href: '/creators'\n      }\n    }, {\n      label: 'Новости',\n      props: {\n        href: '/articles'\n      }\n    }, {\n      label: 'О ресурсе',\n      props: {\n        href: '/about'\n      }\n    }],\n    onMenu: recall(onMenu, {\n      links: [{\n        text: 'Проекты',\n        onClick: () => {\n          dispatch(setDrawer(null));\n          router.push('/projects');\n        }\n      }, {\n        text: 'Авторы',\n        onClick: () => {\n          dispatch(setDrawer(null));\n          router.push('/creators');\n        }\n      }, {\n        text: 'Новости',\n        onClick: () => {\n          dispatch(setDrawer(null));\n          router.push('/articles');\n        }\n      }, {\n        text: 'О ресурсе',\n        onClick: () => {\n          dispatch(setDrawer(null));\n          router.push('/about');\n        }\n      }]\n    }),\n    onHelp: onSupport,\n    onChat: recall(onChat, {\n      sender: user,\n      queries: {\n        userChats: queries.GET_USER_CHATS,\n        chat: queries.GET_CHAT\n      },\n      mutations: {\n        addUserChat: queries.ADD_USER_CHAT,\n        sendMessage: queries.SEND_MESSAGE\n      }\n    }),\n    onSettings: recall(onUserClientEdit, {\n      user: user === null || user === void 0 ? void 0 : user.email,\n      mutations: {\n        del: queries.DELETE_USER,\n        forgotEmail: queries.LOGIN,\n        forgotPassword: queries.RESET,\n        changePassword: queries.UPDATE_CLIENT_USER,\n        checkResetToken: queries.CHECK_RESET_TOKEN,\n        update: queries.UPDATE_CLIENT_USER\n      }\n    }),\n    onNotification: recall(onNotification, {\n      user: user.email\n    }),\n    onProfile: () => router.push('/profile'),\n    onLogin: () => router.push('/auth'),\n    onLogout: mutate(queries.LOGOUT, {}, () => dispatch(setLogout()))\n  }), scaffold && /*#__PURE__*/React.createElement(Scaffold, scaffold), /*#__PURE__*/React.createElement(Main, {\n    id: 'main'\n  }, children), /*#__PURE__*/React.createElement(Footer, {\n    contacts: contacts,\n    socials: socials,\n    catalog: {\n      title: 'Каталог',\n      links: categories.filter(category => category.type === 'DIVISION').map(link => /*#__PURE__*/React.createElement(Link, {\n        key: v4(),\n        href: `/projects?c=${link.id}`\n      }, /*#__PURE__*/React.createElement(\"a\", null, link.name)))\n    },\n    support: {\n      title: 'О компании',\n      links: getSupportLinks(onSupport).map(link => ({ ...link,\n        render: () => link.path ? /*#__PURE__*/React.createElement(Link, {\n          key: v4(),\n          href: link.path\n        }, /*#__PURE__*/React.createElement(\"a\", null, link.label)) : link.label\n      }))\n    }\n  })));\n};\nexport default DefaultLayout;","map":null,"metadata":{},"sourceType":"module"}
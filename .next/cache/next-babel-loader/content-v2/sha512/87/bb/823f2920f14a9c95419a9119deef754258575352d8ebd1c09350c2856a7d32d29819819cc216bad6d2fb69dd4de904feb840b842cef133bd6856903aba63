{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/category';\nimport UserCard from '../../components/UserCard';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { onUserCreate, onUserEdit, onUserLink, onUserAboutMore } from '../../store/helpers/user';\nimport { setDocuments } from '../../store/actions/documents';\nimport { useHelper } from '../../hooks/useHelper';\nimport { onChat } from '../../store/helpers';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Пользователи';\nconst START_OFFSET = 0;\nconst LIMIT = 12;\n\nconst Users = () => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    icon: 'user2',\n    field: 'email',\n    template: template,\n    startOffset: START_OFFSET,\n    emptyMessage: 'Пользователей нет',\n    buttonCreateText: 'Создать пользователя',\n    getType: 'getUsers',\n    getQuery: queries.GET_USERS,\n    deleteQuery: queries.DELETE_USER,\n    deleteEntityMultiText: 'пользователи',\n    deleteEntitySingleText: 'пользователь',\n    onLink: author => {\n      const owned = author.name === user.name;\n      recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      });\n    },\n    onEdit: author => recall(onUserEdit, {\n      user: author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      }\n    })(),\n    onCreate: recall(onUserCreate, {\n      canEditRole,\n      mutation: queries.CREATE_USER\n    }),\n    render: document => /*#__PURE__*/React.createElement(UserCard, {\n      user: document,\n      onChat: user.email && recall(onChat, {\n        id: document.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: document\n      }),\n      preview: true\n    })\n  });\n};\n\nexport default Users;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/users.js"],"names":["React","useEffect","useMemo","useDispatch","useSelector","template","UserCard","ContentLayout","onUserCreate","onUserEdit","onUserLink","onUserAboutMore","setDocuments","useHelper","onChat","queries","TITLE","START_OFFSET","LIMIT","Users","recall","user","state","dispatch","canEditRole","role","name","GET_USERS","DELETE_USER","author","owned","id","email","auth","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","update","UPDATE_USER","del","changePassword","mutation","CREATE_USER","document"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport template from '../../atomic-ui/components/Table/templates/category'\n\nimport UserCard from '../../components/UserCard'\nimport ContentLayout from '../../layouts/dashboard/content'\nimport { onUserCreate, onUserEdit, onUserLink, onUserAboutMore } from '../../store/helpers/user'\nimport { setDocuments } from '../../store/actions/documents'\nimport { useHelper } from '../../hooks/useHelper'\nimport { onChat } from '../../store/helpers'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Пользователи'\nconst START_OFFSET = 0\nconst LIMIT = 12\n\nconst Users = () => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      limit={LIMIT}\n      icon={'user2'}\n      field={'email'}\n      template={template}\n      startOffset={START_OFFSET}\n      emptyMessage={'Пользователей нет'}\n      buttonCreateText={'Создать пользователя'}\n      getType={'getUsers'}\n      getQuery={queries.GET_USERS}\n      deleteQuery={queries.DELETE_USER}\n      deleteEntityMultiText={'пользователи'}\n      deleteEntitySingleText={'пользователь'}\n      onLink={(author) => {\n        const owned = author.name === user.name\n        recall(onUserLink, {\n          id: author.email,\n          auth: user?.email,\n          owned,\n          queries: {\n            userChats: queries.GET_USER_CHATS,\n            chat: queries.GET_CHAT\n          },\n          mutations: {\n            addUserChat: queries.ADD_USER_CHAT,\n            sendMessage: queries.SEND_MESSAGE\n          }\n        })\n      }}\n      onEdit={(author) =>\n        recall(onUserEdit, {\n          user: author.email,\n          auth: user?.email,\n          canEditRole,\n          mutations: {\n            update: queries.UPDATE_USER,\n            del: queries.DELETE_USER,\n            changePassword: queries.UPDATE_USER\n          }\n        })()\n      }\n      onCreate={recall(onUserCreate, {\n        canEditRole,\n        mutation: queries.CREATE_USER\n      })}\n      render={(document) => (\n        <UserCard\n          user={document}\n          onChat={\n            user.email &&\n            recall(onChat, {\n              id: document.email,\n              auth: user?.email,\n              queries: {\n                userChats: queries.GET_USER_CHATS,\n                chat: queries.GET_CHAT\n              },\n              mutations: {\n                addUserChat: queries.ADD_USER_CHAT,\n                sendMessage: queries.SEND_MESSAGE\n              }\n            })\n          }\n          onAboutMore={recall(onUserAboutMore, { user: document })}\n          preview\n        />\n      )}\n    />\n  )\n}\n\nexport default Users\n"]},"metadata":{},"sourceType":"module"}
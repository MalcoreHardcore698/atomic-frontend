{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useLazyQuery, useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Table, { Wrap as WrapTable } from '../../atomic-ui/components/Table';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { GridAside as Container, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"\", \"{width:calc(100vw - 280px);}\"], WrapTable);\n_c = Wrap;\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const Loader = () => /*#__PURE__*/React.createElement(LowerLoader, {\n  key: 'loader'\n}, /*#__PURE__*/React.createElement(Spinner, null));\n_c2 = Loader;\nexport const Content = ({\n  type,\n  query,\n  refetch,\n  loading,\n  template,\n  component,\n  limit = 6,\n  initialList,\n  initialDisplayMethod,\n  variables: initialVariables,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  _s();\n\n  var _router$query;\n\n  const router = useRouter();\n  const {\n    search,\n    displayMethod\n  } = useSelector(state => ({\n    search: state.root.search,\n    displayMethod: state.root.displayMethod\n  }));\n  const [items, setItems] = useState(initialList || []);\n  const [page, setPage] = useState(Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n  const variables = useMemo(() => ({ ...initialVariables,\n    offset: limit * page,\n    search,\n    limit\n  }), [initialVariables, limit, page, search]);\n  const [loadSearch, {\n    data: dataSearch,\n    loading: searching,\n    refetch: research\n  }] = useLazyQuery(query);\n\n  const loadMore = async () => {\n    if (!isEnd && !loading && (research || refetch)) {\n      setIsLoading(true);\n      const response = await (research || refetch)(variables);\n\n      if (response !== null && response !== void 0 && response.data) {\n        const list = response.data[type];\n        if (list.length === 0) setIsEnd(true);\n        if (list.length > 0) setItems(prev => [...prev, ...list]);\n        setPage(prev => prev + 1);\n      }\n\n      setIsLoading(false);\n    }\n  }; // Necessary for determination checkList outside [content]\n\n\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) setCheckedList(items);\n  }, [items, setCheckedList]);\n  useEffect(() => {\n    if (!searching && dataSearch) setItems(dataSearch[type]);\n  }, [searching, dataSearch]);\n  useEffect(() => {\n    if (search) loadSearch({\n      variables\n    });\n  }, [search, variables, loadSearch]);\n  if (searching) return /*#__PURE__*/React.createElement(Loader, null);\n  return /*#__PURE__*/React.createElement(Wrap, null, (initialDisplayMethod || displayMethod) === 'grid' && /*#__PURE__*/React.createElement(Container, null, items.map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n    key: item.id || item.email\n  }, component(item)))), (initialDisplayMethod || displayMethod) === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: items,\n    template: template,\n    onChecked: onChecked,\n    onClick: onClick,\n    onEdit: onEdit,\n    onDelete: onDelete\n  }), (loading || isLoading) && /*#__PURE__*/React.createElement(Loader, null), !isEnd && !loading && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      justifyContent: 'center'\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    disabled: isLoading,\n    style: {\n      width: 245\n    },\n    onClick: loadMore\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435\"))));\n};\n\n_s(Content, \"YhzqT3qFSK7UZvOeGKYKULHilJY=\", false, function () {\n  return [useRouter, useSelector, useLazyQuery];\n});\n\n_c3 = Content;\nexport const List = ({\n  type,\n  query,\n  limit,\n  template,\n  component,\n  variables,\n  startOffset,\n  initialDisplayMethod,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  _s2();\n\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(query, {\n    variables: { ...variables,\n      offset: startOffset,\n      limit\n    }\n  });\n  if (loading) return /*#__PURE__*/React.createElement(Loader, null);\n  return /*#__PURE__*/React.createElement(Content, {\n    type: type,\n    limit: limit,\n    query: query,\n    refetch: refetch,\n    template: template,\n    component: component,\n    initialList: type && data && data[type],\n    initialDisplayMethod: initialDisplayMethod,\n    setCheckedList: setCheckedList,\n    onChecked: onChecked,\n    onDelete: onDelete,\n    onClick: onClick,\n    onEdit: onEdit\n  });\n};\n\n_s2(List, \"fWmgXHxMhhEYHOqccxelYXaWMm0=\", false, function () {\n  return [useQuery];\n});\n\n_c4 = List;\nList.defaultProps = {\n  startOffset: 0\n};\nexport default List;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Loader\");\n$RefreshReg$(_c3, \"Content\");\n$RefreshReg$(_c4, \"List\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/List/index.js"],"names":["React","useState","useEffect","useMemo","useLazyQuery","useQuery","useSelector","useRouter","styled","Row","Spinner","Divider","Button","Table","Wrap","WrapTable","Alert","GridAside","Container","LowerLoader","LazyLoad","div","CenterAlert","Loader","Content","type","query","refetch","loading","template","component","limit","initialList","initialDisplayMethod","variables","initialVariables","setCheckedList","onChecked","onClick","onEdit","onDelete","router","search","displayMethod","state","root","items","setItems","page","setPage","Number","isLoading","setIsLoading","isEnd","setIsEnd","offset","loadSearch","data","dataSearch","searching","research","loadMore","response","list","length","prev","map","item","id","email","justifyContent","width","List","startOffset","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useLazyQuery, useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Button from '../../atomic-ui/components/Button'\nimport Table, { Wrap as WrapTable } from '../../atomic-ui/components/Table'\nimport Alert from '../../atomic-ui/components/Alert'\n\nimport { GridAside as Container, LowerLoader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\n\nexport const Wrap = styled.div`\n  ${WrapTable} {\n    width: calc(100vw - 280px);\n  }\n`\n\nexport const CenterAlert = styled(Alert)`\n  width: 100%;\n  text-align: center;\n`\n\nexport const Loader = () => (\n  <LowerLoader key={'loader'}>\n    <Spinner />\n  </LowerLoader>\n)\n\nexport const Content = ({\n  type,\n  query,\n  refetch,\n  loading,\n  template,\n  component,\n  limit = 6,\n  initialList,\n  initialDisplayMethod,\n  variables: initialVariables,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const router = useRouter()\n  const { search, displayMethod } = useSelector((state) => ({\n    search: state.root.search,\n    displayMethod: state.root.displayMethod\n  }))\n\n  const [items, setItems] = useState(initialList || [])\n  const [page, setPage] = useState(Number(router.query?.page) || 1)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isEnd, setIsEnd] = useState(false)\n\n  const variables = useMemo(\n    () => ({\n      ...initialVariables,\n      offset: limit * page,\n      search,\n      limit\n    }),\n    [initialVariables, limit, page, search]\n  )\n\n  const [loadSearch, { data: dataSearch, loading: searching, refetch: research }] = useLazyQuery(\n    query\n  )\n\n  const loadMore = async () => {\n    if (!isEnd && !loading && (research || refetch)) {\n      setIsLoading(true)\n\n      const response = await (research || refetch)(variables)\n\n      if (response?.data) {\n        const list = response.data[type]\n        if (list.length === 0) setIsEnd(true)\n        if (list.length > 0) setItems((prev) => [...prev, ...list])\n        setPage((prev) => prev + 1)\n      }\n\n      setIsLoading(false)\n    }\n  }\n\n  // Necessary for determination checkList outside [content]\n  useEffect(() => {\n    if (items?.length > 0 && setCheckedList) setCheckedList(items)\n  }, [items, setCheckedList])\n\n  useEffect(() => {\n    if (!searching && dataSearch) setItems(dataSearch[type])\n  }, [searching, dataSearch])\n\n  useEffect(() => {\n    if (search) loadSearch({ variables })\n  }, [search, variables, loadSearch])\n\n  if (searching) return <Loader />\n\n  return (\n    <Wrap>\n      {(initialDisplayMethod || displayMethod) === 'grid' && (\n        <Container>\n          {items.map((item) => (\n            <LazyLoad key={item.id || item.email}>{component(item)}</LazyLoad>\n          ))}\n        </Container>\n      )}\n\n      {(initialDisplayMethod || displayMethod) === 'list' && (\n        <Table\n          data={items}\n          template={template}\n          onChecked={onChecked}\n          onClick={onClick}\n          onEdit={onEdit}\n          onDelete={onDelete}\n        />\n      )}\n\n      {(loading || isLoading) && <Loader />}\n\n      {!isEnd && !loading && (\n        <React.Fragment>\n          <Divider />\n          <Row style={{ justifyContent: 'center' }}>\n            <Button type={'button'} disabled={isLoading} style={{ width: 245 }} onClick={loadMore}>\n              Загрузить еще\n            </Button>\n          </Row>\n        </React.Fragment>\n      )}\n    </Wrap>\n  )\n}\n\nexport const List = ({\n  type,\n  query,\n  limit,\n  template,\n  component,\n  variables,\n  startOffset,\n  initialDisplayMethod,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const { data, loading, refetch } = useQuery(query, {\n    variables: {\n      ...variables,\n      offset: startOffset,\n      limit\n    }\n  })\n\n  if (loading) return <Loader />\n\n  return (\n    <Content\n      type={type}\n      limit={limit}\n      query={query}\n      refetch={refetch}\n      template={template}\n      component={component}\n      initialList={type && data && data[type]}\n      initialDisplayMethod={initialDisplayMethod}\n      setCheckedList={setCheckedList}\n      onChecked={onChecked}\n      onDelete={onDelete}\n      onClick={onClick}\n      onEdit={onEdit}\n    />\n  )\n}\n\nList.defaultProps = {\n  startOffset: 0\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport gql from 'graphql-tag';\nimport { CategoryFields } from '../../fragments';\nexport var GET_CATEGORY = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query getCategory($id: ID!) {\\n    getCategory(id: $id) {\\n      ...CategoryFields\\n    }\\n  }\\n  \", \"\\n\"])), CategoryFields);\nexport var GET_CATEGORIES = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  query getCategories($offset: Int, $limit: Int, $type: CategoryType, $search: String) {\\n    getCategories(offset: $offset, limit: $limit, type: $type, search: $search) {\\n      ...CategoryFields\\n    }\\n  }\\n  \", \"\\n\"])), CategoryFields);\nexport var CREATE_CATEGORY = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  mutation createCategory($input: CategoryCreateInput!) {\\n    createCategory(input: $input) {\\n      ...CategoryFields\\n    }\\n  }\\n  \", \"\\n\"])), CategoryFields);\nexport var UPDATE_CATEGORY = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  mutation updateCategory($id: ID!, $input: CategoryUpdateInput!) {\\n    updateCategory(id: $id, input: $input) {\\n      ...CategoryFields\\n    }\\n  }\\n  \", \"\\n\"])), CategoryFields);\nexport var DELETE_CATEGORY = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n  mutation deleteCategory($id: ID!) {\\n    deleteCategory(id: $id) {\\n      ...CategoryFields\\n    }\\n  }\\n  \", \"\\n\"])), CategoryFields);","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/graphql/queries/Category/index.js"],"names":["gql","CategoryFields","GET_CATEGORY","GET_CATEGORIES","CREATE_CATEGORY","UPDATE_CATEGORY","DELETE_CATEGORY"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,OAAO,IAAMC,YAAY,GAAGF,GAAH,kLAMrBC,cANqB,CAAlB;AASP,OAAO,IAAME,cAAc,GAAGH,GAAH,oSAMvBC,cANuB,CAApB;AASP,OAAO,IAAMG,eAAe,GAAGJ,GAAH,uNAMxBC,cANwB,CAArB;AASP,OAAO,IAAMI,eAAe,GAAGL,GAAH,0OAMxBC,cANwB,CAArB;AASP,OAAO,IAAMK,eAAe,GAAGN,GAAH,6LAMxBC,cANwB,CAArB","sourcesContent":["import gql from 'graphql-tag'\nimport { CategoryFields } from '../../fragments'\n\nexport const GET_CATEGORY = gql`\n  query getCategory($id: ID!) {\n    getCategory(id: $id) {\n      ...CategoryFields\n    }\n  }\n  ${CategoryFields}\n`\n\nexport const GET_CATEGORIES = gql`\n  query getCategories($offset: Int, $limit: Int, $type: CategoryType, $search: String) {\n    getCategories(offset: $offset, limit: $limit, type: $type, search: $search) {\n      ...CategoryFields\n    }\n  }\n  ${CategoryFields}\n`\n\nexport const CREATE_CATEGORY = gql`\n  mutation createCategory($input: CategoryCreateInput!) {\n    createCategory(input: $input) {\n      ...CategoryFields\n    }\n  }\n  ${CategoryFields}\n`\n\nexport const UPDATE_CATEGORY = gql`\n  mutation updateCategory($id: ID!, $input: CategoryUpdateInput!) {\n    updateCategory(id: $id, input: $input) {\n      ...CategoryFields\n    }\n  }\n  ${CategoryFields}\n`\n\nexport const DELETE_CATEGORY = gql`\n  mutation deleteCategory($id: ID!) {\n    deleteCategory(id: $id) {\n      ...CategoryFields\n    }\n  }\n  ${CategoryFields}\n`\n"]},"metadata":{},"sourceType":"module"}
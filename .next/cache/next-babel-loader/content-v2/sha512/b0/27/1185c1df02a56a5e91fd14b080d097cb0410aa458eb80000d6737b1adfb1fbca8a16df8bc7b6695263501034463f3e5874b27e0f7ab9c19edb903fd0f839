{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { memo } from 'react';\nimport { useRouter } from 'next/router';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch';\nimport { b64EncodeUnicode } from '../../atomic-ui/utils/functions';\nimport { Card } from '../../layouts/dashboard/content';\nexport const Query = memo(_c = _s(({\n  data,\n  loading,\n  search,\n  entity,\n  entities,\n  onHide,\n  onJump,\n  onChange,\n  onSubmit\n}) => {\n  _s();\n\n  const router = useRouter();\n\n  const redirectById = (item, path) => router.push(`${path}/${b64EncodeUnicode(item.id)}`);\n\n  const onClick = async (item, path, singlePath) => {\n    if (onHide) onHide();\n    await redirectById(item, `${path}/${singlePath}`);\n  };\n\n  const onEdit = async (item, path) => {\n    if (onHide) onHide();\n    await redirectById(item, `${path}/edit`);\n  };\n\n  return /*#__PURE__*/React.createElement(GlobalSearch, {\n    search: search,\n    loading: loading,\n    initialEntity: entity,\n    result: search && data && entity && data[entity === null || entity === void 0 ? void 0 : entity.value],\n    entities: (entities || []).map(elem => ({ ...elem,\n      render: item => /*#__PURE__*/React.createElement(Card, {\n        key: item.id || item.email,\n        item: item,\n        appearance: 'clear',\n        component: elem.render(item) // onLink={(document) =>\n        //   onClick(document, elem?.originPath || '', elem?.singlePath || '')\n        // }\n        // onEdit={(document) => onEdit(document, elem?.originPath || '')}\n        // onDelete={(document) => onJump('/delete', { item: document, entity: elem })}\n        ,\n        withoutChecked: true\n      })\n    })),\n    onSubmit: onSubmit,\n    onChange: onChange\n  });\n}, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n}));\n_c2 = Query;\nexport const QuerySearch = memo(_c3 = _s2(({\n  search,\n  entity,\n  entities,\n  setSearch,\n  onHide,\n  onJump,\n  onChange\n}) => {\n  _s2();\n\n  const initialResult = [null, {\n    data: null,\n    loading: false,\n    refetch: null\n  }];\n  const [load, {\n    data,\n    loading,\n    refetch\n  }] = entity ? useLazyQuery(entity.query) : initialResult;\n\n  const onSubmit = value => {\n    const variables = {\n      search: value\n    };\n    if (setSearch) setSearch(value);\n\n    if (value) {\n      if (refetch) {\n        refetch(variables);\n      }\n\n      if (load) {\n        load({\n          variables\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Query, {\n    data: data,\n    entity: entity,\n    search: search,\n    loading: loading,\n    entities: entities,\n    onHide: onHide,\n    onJump: onJump,\n    onChange: onChange,\n    onSubmit: onSubmit\n  });\n}, \"On+3mFuZjiEOS3MQLgFXtHkppJ4=\", false, function () {\n  return [useLazyQuery];\n}));\n_c4 = QuerySearch;\nexport default QuerySearch;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Query$memo\");\n$RefreshReg$(_c2, \"Query\");\n$RefreshReg$(_c3, \"QuerySearch$memo\");\n$RefreshReg$(_c4, \"QuerySearch\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/QuerySearch/index.js"],"names":["React","memo","useRouter","useLazyQuery","GlobalSearch","b64EncodeUnicode","Card","Query","data","loading","search","entity","entities","onHide","onJump","onChange","onSubmit","router","redirectById","item","path","push","id","onClick","singlePath","onEdit","value","map","elem","render","email","QuerySearch","setSearch","initialResult","refetch","load","query","variables"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport { useRouter } from 'next/router'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch'\nimport { b64EncodeUnicode } from '../../atomic-ui/utils/functions'\n\nimport { Card } from '../../layouts/dashboard/content'\n\nexport const Query = memo(\n  ({ data, loading, search, entity, entities, onHide, onJump, onChange, onSubmit }) => {\n    const router = useRouter()\n\n    const redirectById = (item, path) => router.push(`${path}/${b64EncodeUnicode(item.id)}`)\n\n    const onClick = async (item, path, singlePath) => {\n      if (onHide) onHide()\n      await redirectById(item, `${path}/${singlePath}`)\n    }\n\n    const onEdit = async (item, path) => {\n      if (onHide) onHide()\n      await redirectById(item, `${path}/edit`)\n    }\n\n    return (\n      <GlobalSearch\n        search={search}\n        loading={loading}\n        initialEntity={entity}\n        result={search && data && entity && data[entity?.value]}\n        entities={(entities || []).map((elem) => ({\n          ...elem,\n          render: (item) => (\n            <Card\n              key={item.id || item.email}\n              item={item}\n              appearance={'clear'}\n              component={elem.render(item)}\n              // onLink={(document) =>\n              //   onClick(document, elem?.originPath || '', elem?.singlePath || '')\n              // }\n              // onEdit={(document) => onEdit(document, elem?.originPath || '')}\n              // onDelete={(document) => onJump('/delete', { item: document, entity: elem })}\n              withoutChecked\n            />\n          )\n        }))}\n        onSubmit={onSubmit}\n        onChange={onChange}\n      />\n    )\n  }\n)\n\nexport const QuerySearch = memo(\n  ({ search, entity, entities, setSearch, onHide, onJump, onChange }) => {\n    const initialResult = [null, { data: null, loading: false, refetch: null }]\n    const [load, { data, loading, refetch }] = entity ? useLazyQuery(entity.query) : initialResult\n\n    const onSubmit = (value) => {\n      const variables = { search: value }\n\n      if (setSearch) setSearch(value)\n\n      if (value) {\n        if (refetch) {\n          refetch(variables)\n        }\n        if (load) {\n          load({ variables })\n        }\n      }\n    }\n\n    return (\n      <Query\n        data={data}\n        entity={entity}\n        search={search}\n        loading={loading}\n        entities={entities}\n        onHide={onHide}\n        onJump={onJump}\n        onChange={onChange}\n        onSubmit={onSubmit}\n      />\n    )\n  }\n)\n\nexport default QuerySearch\n"]},"metadata":{},"sourceType":"module"}
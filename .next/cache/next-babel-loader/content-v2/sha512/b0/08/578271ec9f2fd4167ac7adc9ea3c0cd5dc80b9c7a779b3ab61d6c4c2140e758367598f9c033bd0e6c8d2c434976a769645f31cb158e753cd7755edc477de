{"ast":null,"code":"import React, { useState, useEffect, useMemo, memo } from 'react';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Table, { Wrap as WrapTable } from '../../atomic-ui/components/Table';\nimport { CentralAlert, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nconst statuses = ['PUBLISHED', 'MODERATION'];\nexport const Wrap = styled.div.withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"width:100%;\", \"{width:calc(100vw - 280px);}\"], WrapTable);\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const Loader = () => /*#__PURE__*/React.createElement(LowerLoader, {\n  key: 'loader'\n}, /*#__PURE__*/React.createElement(Spinner, null));\nexport const useSelectQueryString = withoutSearch => {\n  const {\n    search,\n    params\n  } = useSelector(state => ({\n    search: withoutSearch ? '' : state.root.search,\n    params: withoutSearch ? {} : state.root.params\n  }));\n  return {\n    search,\n    params\n  };\n};\nexport const useCustomQuery = (query, {\n  startOffset,\n  limit,\n  variables,\n  withoutSearch\n}) => {\n  const [pull, result] = useLazyQuery(query);\n  const {\n    search,\n    params\n  } = useSelectQueryString(withoutSearch);\n  useEffect(() => {\n    console.log(search, params);\n    pull({\n      variables: {\n        status: statuses,\n        ...variables,\n        ...params,\n        offset: startOffset,\n        search,\n        limit\n      }\n    });\n  }, [search, limit, variables, params]);\n  return result;\n};\nexport const Content = memo(({\n  type,\n  refetch,\n  loading,\n  template,\n  component,\n  variables,\n  limit = 6,\n  emptyMessage,\n  initialList,\n  initialDisplayMethod,\n  withoutSearch,\n  setCheckedList,\n  gridOptions,\n  itemProps,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  var _router$query;\n\n  const router = useRouter();\n  const displayMethod = useSelector(state => state.root.displayMethod);\n  const {\n    search,\n    params\n  } = useSelectQueryString(withoutSearch);\n  const [items, setItems] = useState(initialList || []);\n  const [page, setPage] = useState(Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n  const withoutMore = useMemo(() => !search, [search]);\n\n  const loadMore = async () => {\n    if (!isEnd && !loading && refetch) {\n      setIsLoading(true);\n      const response = await refetch({ ...variables,\n        ...params,\n        offset: limit * page,\n        search,\n        limit\n      });\n\n      if (response !== null && response !== void 0 && response.data) {\n        const list = response.data[type];\n        if (list.length === 0) setIsEnd(true);\n        if (list.length > 0) setItems(prev => [...prev, ...list]);\n        setPage(prev => prev + 1);\n      }\n\n      setIsLoading(false);\n    }\n  }; // Necessary for determination checkList outside [content]\n\n\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) setCheckedList(items);\n  }, [items, setCheckedList]);\n  return /*#__PURE__*/React.createElement(Wrap, null, (initialDisplayMethod || displayMethod) === 'grid' && /*#__PURE__*/React.createElement(Grid, gridOptions, items.map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n    key: item.id || item.email\n  }, component(item, itemProps)))), (initialDisplayMethod || displayMethod) === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: items,\n    template: template,\n    onChecked: onChecked,\n    onClick: onClick,\n    onEdit: onEdit,\n    onDelete: onDelete\n  }), (loading || isLoading) && !withoutMore && /*#__PURE__*/React.createElement(Loader, null), !loading && !isLoading && items.length === 0 && /*#__PURE__*/React.createElement(CentralAlert, null, emptyMessage), items.length > 0 && !isEnd && !loading && !withoutMore && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      justifyContent: 'center'\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    disabled: isLoading,\n    style: {\n      width: 245\n    },\n    onClick: loadMore\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435\"))));\n});\nexport const List = memo(({\n  type,\n  query,\n  limit,\n  template,\n  component,\n  variables,\n  startOffset,\n  emptyMessage,\n  initialDisplayMethod,\n  setCheckedList,\n  withoutSearch,\n  itemProps,\n  gridOptions,\n  onChecked,\n  onDelete,\n  onClick,\n  onEdit\n}) => {\n  const {\n    data,\n    loading,\n    refetch\n  } = useCustomQuery(query, {\n    startOffset,\n    limit,\n    variables,\n    withoutSearch\n  });\n  if (loading) return /*#__PURE__*/React.createElement(Loader, null);\n  return /*#__PURE__*/React.createElement(Content, {\n    type: type,\n    limit: limit,\n    query: query,\n    refetch: refetch,\n    template: template,\n    component: component,\n    itemProps: itemProps,\n    emptyMessage: emptyMessage,\n    initialList: type && data && data[type],\n    initialDisplayMethod: initialDisplayMethod,\n    setCheckedList: setCheckedList,\n    withoutSearch: withoutSearch,\n    gridOptions: gridOptions,\n    onChecked: onChecked,\n    onDelete: onDelete,\n    onClick: onClick,\n    onEdit: onEdit\n  });\n});\nList.defaultProps = {\n  startOffset: 0\n};\nexport default List;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/List/index.js"],"names":["React","useState","useEffect","useMemo","memo","useLazyQuery","useSelector","useRouter","styled","Row","Grid","Alert","Spinner","Divider","Button","Table","Wrap","WrapTable","CentralAlert","LowerLoader","LazyLoad","statuses","div","CenterAlert","Loader","useSelectQueryString","withoutSearch","search","params","state","root","useCustomQuery","query","startOffset","limit","variables","pull","result","console","log","status","offset","Content","type","refetch","loading","template","component","emptyMessage","initialList","initialDisplayMethod","setCheckedList","gridOptions","itemProps","onChecked","onClick","onEdit","onDelete","router","displayMethod","items","setItems","page","setPage","Number","isLoading","setIsLoading","isEnd","setIsEnd","withoutMore","loadMore","response","data","list","length","prev","map","item","id","email","justifyContent","width","List","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,IAA9C,QAA0D,OAA1D;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,IAAgBC,IAAI,IAAIC,SAAxB,QAAyC,kCAAzC;AAEA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,WAA1C;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,MAAMC,QAAQ,GAAG,CAAC,WAAD,EAAc,YAAd,CAAjB;AAEA,OAAO,MAAML,IAAI,GAAGR,MAAM,CAACc,GAAV;AAAA;AAAA;AAAA,oDAGbL,SAHa,CAAV;AAQP,OAAO,MAAMM,WAAW,GAAGf,MAAM,CAACG,KAAD,CAAT;AAAA;AAAA;AAAA,qCAAjB;AAKP,OAAO,MAAMa,MAAM,GAAG,mBACpB,oBAAC,WAAD;AAAa,EAAA,GAAG,EAAE;AAAlB,gBACE,oBAAC,OAAD,OADF,CADK;AAMP,OAAO,MAAMC,oBAAoB,GAAIC,aAAD,IAAmB;AACrD,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBtB,WAAW,CAAEuB,KAAD,KAAY;AACjDF,IAAAA,MAAM,EAAED,aAAa,GAAG,EAAH,GAAQG,KAAK,CAACC,IAAN,CAAWH,MADS;AAEjDC,IAAAA,MAAM,EAAEF,aAAa,GAAG,EAAH,GAAQG,KAAK,CAACC,IAAN,CAAWF;AAFS,GAAZ,CAAD,CAAtC;AAKA,SAAO;AAAED,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAP;AACD,CAPM;AASP,OAAO,MAAMG,cAAc,GAAG,CAACC,KAAD,EAAQ;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,KAAf;AAAsBC,EAAAA,SAAtB;AAAiCT,EAAAA;AAAjC,CAAR,KAA6D;AACzF,QAAM,CAACU,IAAD,EAAOC,MAAP,IAAiBhC,YAAY,CAAC2B,KAAD,CAAnC;AACA,QAAM;AAAEL,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBH,oBAAoB,CAACC,aAAD,CAA/C;AAEAxB,EAAAA,SAAS,CAAC,MAAM;AACdoC,IAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAZ,EAAoBC,MAApB;AACAQ,IAAAA,IAAI,CAAC;AACHD,MAAAA,SAAS,EAAE;AACTK,QAAAA,MAAM,EAAEnB,QADC;AAET,WAAGc,SAFM;AAGT,WAAGP,MAHM;AAITa,QAAAA,MAAM,EAAER,WAJC;AAKTN,QAAAA,MALS;AAMTO,QAAAA;AANS;AADR,KAAD,CAAJ;AAUD,GAZQ,EAYN,CAACP,MAAD,EAASO,KAAT,EAAgBC,SAAhB,EAA2BP,MAA3B,CAZM,CAAT;AAcA,SAAOS,MAAP;AACD,CAnBM;AAqBP,OAAO,MAAMK,OAAO,GAAGtC,IAAI,CACzB,CAAC;AACCuC,EAAAA,IADD;AAECC,EAAAA,OAFD;AAGCC,EAAAA,OAHD;AAICC,EAAAA,QAJD;AAKCC,EAAAA,SALD;AAMCZ,EAAAA,SAND;AAOCD,EAAAA,KAAK,GAAG,CAPT;AAQCc,EAAAA,YARD;AASCC,EAAAA,WATD;AAUCC,EAAAA,oBAVD;AAWCxB,EAAAA,aAXD;AAYCyB,EAAAA,cAZD;AAaCC,EAAAA,WAbD;AAcCC,EAAAA,SAdD;AAeCC,EAAAA,SAfD;AAgBCC,EAAAA,OAhBD;AAiBCC,EAAAA,MAjBD;AAkBCC,EAAAA;AAlBD,CAAD,KAmBM;AAAA;;AACJ,QAAMC,MAAM,GAAGnD,SAAS,EAAxB;AACA,QAAMoD,aAAa,GAAGrD,WAAW,CAAEuB,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAW6B,aAAvB,CAAjC;AACA,QAAM;AAAEhC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBH,oBAAoB,CAACC,aAAD,CAA/C;AAEA,QAAM,CAACkC,KAAD,EAAQC,QAAR,IAAoB5D,QAAQ,CAACgD,WAAW,IAAI,EAAhB,CAAlC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkB9D,QAAQ,CAAC+D,MAAM,kBAACN,MAAM,CAAC1B,KAAR,kDAAC,cAAc8B,IAAf,CAAN,IAA8B,CAA/B,CAAhC;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BjE,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACkE,KAAD,EAAQC,QAAR,IAAoBnE,QAAQ,CAAC,KAAD,CAAlC;AAEA,QAAMoE,WAAW,GAAGlE,OAAO,CAAC,MAAM,CAACwB,MAAR,EAAgB,CAACA,MAAD,CAAhB,CAA3B;;AAEA,QAAM2C,QAAQ,GAAG,YAAY;AAC3B,QAAI,CAACH,KAAD,IAAU,CAACtB,OAAX,IAAsBD,OAA1B,EAAmC;AACjCsB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AAEA,YAAMK,QAAQ,GAAG,MAAM3B,OAAO,CAAC,EAC7B,GAAGT,SAD0B;AAE7B,WAAGP,MAF0B;AAG7Ba,QAAAA,MAAM,EAAEP,KAAK,GAAG4B,IAHa;AAI7BnC,QAAAA,MAJ6B;AAK7BO,QAAAA;AAL6B,OAAD,CAA9B;;AAQA,UAAIqC,QAAJ,aAAIA,QAAJ,eAAIA,QAAQ,CAAEC,IAAd,EAAoB;AAClB,cAAMC,IAAI,GAAGF,QAAQ,CAACC,IAAT,CAAc7B,IAAd,CAAb;AACA,YAAI8B,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuBN,QAAQ,CAAC,IAAD,CAAR;AACvB,YAAIK,IAAI,CAACC,MAAL,GAAc,CAAlB,EAAqBb,QAAQ,CAAEc,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAU,GAAGF,IAAb,CAAX,CAAR;AACrBV,QAAAA,OAAO,CAAEY,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAP;AACD;;AAEDT,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GArBD,CAZI,CAmCJ;;;AACAhE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAA0D,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEc,MAAP,IAAgB,CAAhB,IAAqBvB,cAAzB,EAAyCA,cAAc,CAACS,KAAD,CAAd;AAC1C,GAFQ,EAEN,CAACA,KAAD,EAAQT,cAAR,CAFM,CAAT;AAIA,sBACE,oBAAC,IAAD,QACG,CAACD,oBAAoB,IAAIS,aAAzB,MAA4C,MAA5C,iBACC,oBAAC,IAAD,EAAUP,WAAV,EACGQ,KAAK,CAACgB,GAAN,CAAWC,IAAD,iBACT,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAL,IAAWD,IAAI,CAACE;AAA/B,KAAuChC,SAAS,CAAC8B,IAAD,EAAOxB,SAAP,CAAhD,CADD,CADH,CAFJ,EASG,CAACH,oBAAoB,IAAIS,aAAzB,MAA4C,MAA5C,iBACC,oBAAC,KAAD;AACE,IAAA,IAAI,EAAEC,KADR;AAEE,IAAA,QAAQ,EAAEd,QAFZ;AAGE,IAAA,SAAS,EAAEQ,SAHb;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,MAAM,EAAEC,MALV;AAME,IAAA,QAAQ,EAAEC;AANZ,IAVJ,EAoBG,CAACZ,OAAO,IAAIoB,SAAZ,KAA0B,CAACI,WAA3B,iBAA0C,oBAAC,MAAD,OApB7C,EAsBG,CAACxB,OAAD,IAAY,CAACoB,SAAb,IAA0BL,KAAK,CAACc,MAAN,KAAiB,CAA3C,iBACC,oBAAC,YAAD,QAAe1B,YAAf,CAvBJ,EA0BGY,KAAK,CAACc,MAAN,GAAe,CAAf,IAAoB,CAACP,KAArB,IAA8B,CAACtB,OAA/B,IAA0C,CAACwB,WAA3C,iBACC,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,OAAD,OADF,eAEE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAE;AAAEW,MAAAA,cAAc,EAAE;AAAlB;AAAZ,kBACE,oBAAC,MAAD;AACE,IAAA,IAAI,EAAE,QADR;AAEE,IAAA,QAAQ,EAAEf,SAFZ;AAGE,IAAA,KAAK,EAAE;AAAEgB,MAAAA,KAAK,EAAE;AAAT,KAHT;AAIE,IAAA,OAAO,EAAEX;AAJX,iFADF,CAFF,CA3BJ,CADF;AA2CD,CAvGwB,CAApB;AA0GP,OAAO,MAAMY,IAAI,GAAG9E,IAAI,CACtB,CAAC;AACCuC,EAAAA,IADD;AAECX,EAAAA,KAFD;AAGCE,EAAAA,KAHD;AAICY,EAAAA,QAJD;AAKCC,EAAAA,SALD;AAMCZ,EAAAA,SAND;AAOCF,EAAAA,WAPD;AAQCe,EAAAA,YARD;AASCE,EAAAA,oBATD;AAUCC,EAAAA,cAVD;AAWCzB,EAAAA,aAXD;AAYC2B,EAAAA,SAZD;AAaCD,EAAAA,WAbD;AAcCE,EAAAA,SAdD;AAeCG,EAAAA,QAfD;AAgBCF,EAAAA,OAhBD;AAiBCC,EAAAA;AAjBD,CAAD,KAkBM;AACJ,QAAM;AAAEgB,IAAAA,IAAF;AAAQ3B,IAAAA,OAAR;AAAiBD,IAAAA;AAAjB,MAA6Bb,cAAc,CAACC,KAAD,EAAQ;AACvDC,IAAAA,WADuD;AAEvDC,IAAAA,KAFuD;AAGvDC,IAAAA,SAHuD;AAIvDT,IAAAA;AAJuD,GAAR,CAAjD;AAOA,MAAImB,OAAJ,EAAa,oBAAO,oBAAC,MAAD,OAAP;AAEb,sBACE,oBAAC,OAAD;AACE,IAAA,IAAI,EAAEF,IADR;AAEE,IAAA,KAAK,EAAET,KAFT;AAGE,IAAA,KAAK,EAAEF,KAHT;AAIE,IAAA,OAAO,EAAEY,OAJX;AAKE,IAAA,QAAQ,EAAEE,QALZ;AAME,IAAA,SAAS,EAAEC,SANb;AAOE,IAAA,SAAS,EAAEM,SAPb;AAQE,IAAA,YAAY,EAAEL,YARhB;AASE,IAAA,WAAW,EAAEL,IAAI,IAAI6B,IAAR,IAAgBA,IAAI,CAAC7B,IAAD,CATnC;AAUE,IAAA,oBAAoB,EAAEO,oBAVxB;AAWE,IAAA,cAAc,EAAEC,cAXlB;AAYE,IAAA,aAAa,EAAEzB,aAZjB;AAaE,IAAA,WAAW,EAAE0B,WAbf;AAcE,IAAA,SAAS,EAAEE,SAdb;AAeE,IAAA,QAAQ,EAAEG,QAfZ;AAgBE,IAAA,OAAO,EAAEF,OAhBX;AAiBE,IAAA,MAAM,EAAEC;AAjBV,IADF;AAqBD,CAlDqB,CAAjB;AAqDP0B,IAAI,CAACC,YAAL,GAAoB;AAClBlD,EAAAA,WAAW,EAAE;AADK,CAApB;AAIA,eAAeiD,IAAf","sourcesContent":["import React, { useState, useEffect, useMemo, memo } from 'react'\nimport { useLazyQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Grid from '../../atomic-ui/components/Grid'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Button from '../../atomic-ui/components/Button'\nimport Table, { Wrap as WrapTable } from '../../atomic-ui/components/Table'\n\nimport { CentralAlert, LowerLoader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\n\nconst statuses = ['PUBLISHED', 'MODERATION']\n\nexport const Wrap = styled.div`\n  width: 100%;\n\n  ${WrapTable} {\n    width: calc(100vw - 280px);\n  }\n`\n\nexport const CenterAlert = styled(Alert)`\n  width: 100%;\n  text-align: center;\n`\n\nexport const Loader = () => (\n  <LowerLoader key={'loader'}>\n    <Spinner />\n  </LowerLoader>\n)\n\nexport const useSelectQueryString = (withoutSearch) => {\n  const { search, params } = useSelector((state) => ({\n    search: withoutSearch ? '' : state.root.search,\n    params: withoutSearch ? {} : state.root.params\n  }))\n\n  return { search, params }\n}\n\nexport const useCustomQuery = (query, { startOffset, limit, variables, withoutSearch }) => {\n  const [pull, result] = useLazyQuery(query)\n  const { search, params } = useSelectQueryString(withoutSearch)\n\n  useEffect(() => {\n    console.log(search, params)\n    pull({\n      variables: {\n        status: statuses,\n        ...variables,\n        ...params,\n        offset: startOffset,\n        search,\n        limit\n      }\n    })\n  }, [search, limit, variables, params])\n\n  return result\n}\n\nexport const Content = memo(\n  ({\n    type,\n    refetch,\n    loading,\n    template,\n    component,\n    variables,\n    limit = 6,\n    emptyMessage,\n    initialList,\n    initialDisplayMethod,\n    withoutSearch,\n    setCheckedList,\n    gridOptions,\n    itemProps,\n    onChecked,\n    onClick,\n    onEdit,\n    onDelete\n  }) => {\n    const router = useRouter()\n    const displayMethod = useSelector((state) => state.root.displayMethod)\n    const { search, params } = useSelectQueryString(withoutSearch)\n\n    const [items, setItems] = useState(initialList || [])\n    const [page, setPage] = useState(Number(router.query?.page) || 1)\n    const [isLoading, setIsLoading] = useState(false)\n    const [isEnd, setIsEnd] = useState(false)\n\n    const withoutMore = useMemo(() => !search, [search])\n\n    const loadMore = async () => {\n      if (!isEnd && !loading && refetch) {\n        setIsLoading(true)\n\n        const response = await refetch({\n          ...variables,\n          ...params,\n          offset: limit * page,\n          search,\n          limit\n        })\n\n        if (response?.data) {\n          const list = response.data[type]\n          if (list.length === 0) setIsEnd(true)\n          if (list.length > 0) setItems((prev) => [...prev, ...list])\n          setPage((prev) => prev + 1)\n        }\n\n        setIsLoading(false)\n      }\n    }\n\n    // Necessary for determination checkList outside [content]\n    useEffect(() => {\n      if (items?.length > 0 && setCheckedList) setCheckedList(items)\n    }, [items, setCheckedList])\n\n    return (\n      <Wrap>\n        {(initialDisplayMethod || displayMethod) === 'grid' && (\n          <Grid {...gridOptions}>\n            {items.map((item) => (\n              <LazyLoad key={item.id || item.email}>{component(item, itemProps)}</LazyLoad>\n            ))}\n          </Grid>\n        )}\n\n        {(initialDisplayMethod || displayMethod) === 'list' && (\n          <Table\n            data={items}\n            template={template}\n            onChecked={onChecked}\n            onClick={onClick}\n            onEdit={onEdit}\n            onDelete={onDelete}\n          />\n        )}\n\n        {(loading || isLoading) && !withoutMore && <Loader />}\n\n        {!loading && !isLoading && items.length === 0 && (\n          <CentralAlert>{emptyMessage}</CentralAlert>\n        )}\n\n        {items.length > 0 && !isEnd && !loading && !withoutMore && (\n          <React.Fragment>\n            <Divider />\n            <Row style={{ justifyContent: 'center' }}>\n              <Button\n                type={'button'}\n                disabled={isLoading}\n                style={{ width: 245 }}\n                onClick={loadMore}>\n                Загрузить еще\n              </Button>\n            </Row>\n          </React.Fragment>\n        )}\n      </Wrap>\n    )\n  }\n)\n\nexport const List = memo(\n  ({\n    type,\n    query,\n    limit,\n    template,\n    component,\n    variables,\n    startOffset,\n    emptyMessage,\n    initialDisplayMethod,\n    setCheckedList,\n    withoutSearch,\n    itemProps,\n    gridOptions,\n    onChecked,\n    onDelete,\n    onClick,\n    onEdit\n  }) => {\n    const { data, loading, refetch } = useCustomQuery(query, {\n      startOffset,\n      limit,\n      variables,\n      withoutSearch\n    })\n\n    if (loading) return <Loader />\n\n    return (\n      <Content\n        type={type}\n        limit={limit}\n        query={query}\n        refetch={refetch}\n        template={template}\n        component={component}\n        itemProps={itemProps}\n        emptyMessage={emptyMessage}\n        initialList={type && data && data[type]}\n        initialDisplayMethod={initialDisplayMethod}\n        setCheckedList={setCheckedList}\n        withoutSearch={withoutSearch}\n        gridOptions={gridOptions}\n        onChecked={onChecked}\n        onDelete={onDelete}\n        onClick={onClick}\n        onEdit={onEdit}\n      />\n    )\n  }\n)\n\nList.defaultProps = {\n  startOffset: 0\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Column from '../../atomic-ui/components/Column';\nimport Table from '../../atomic-ui/components/Table';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { GridAside as Container, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { useRouter } from 'next/router';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"\"]);\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const List = ({\n  type,\n  query,\n  template,\n  variables,\n  component,\n  limit = 6,\n  startOffset = 6,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  _s();\n\n  const router = useRouter();\n  const displayMethod = useSelector(state => state.root.displayMethod);\n  const pageStart = useMemo(() => {\n    var _router$query;\n\n    return Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1;\n  }, [router]);\n  const [offset, setOffset] = useState(startOffset + 1);\n  const [items, setItems] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const [loadItems, {\n    data,\n    loading,\n    refetch\n  }] = useLazyQuery(query, {\n    variables\n  });\n\n  const loadMore = async () => {\n    const updateOffset = () => setOffset(prev => prev + limit);\n\n    const result = { ...variables,\n      offset,\n      limit\n    };\n\n    if (refetch) {\n      await refetch(result);\n    } else {\n      await loadItems({\n        variables: result\n      });\n    }\n\n    updateOffset();\n  };\n\n  const renderContent = useCallback(() => {\n    if (displayMethod === 'grid') {\n      return /*#__PURE__*/React.createElement(Container, null, (items || []).map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n        key: item.id || item.email\n      }, component(item))));\n    }\n\n    return /*#__PURE__*/React.createElement(Table, {\n      data: items,\n      template: template,\n      onChecked: onChecked,\n      onClick: onClick,\n      onEdit: onEdit,\n      onDelete: onDelete\n    });\n  }, [items, displayMethod, onChecked, onClick, onEdit, onDelete]);\n\n  const renderLoader = () => /*#__PURE__*/React.createElement(LowerLoader, {\n    key: 'loader'\n  }, /*#__PURE__*/React.createElement(Spinner, null));\n\n  useEffect(() => {\n    if (!loading && data) {\n      const list = data[type];\n      if (list.length > 0) setItems(prev => [...prev, ...list]);\n      if (list.length === 0) setIsEnd(true);\n    }\n  }, [data, loading, setIsEnd]);\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) {\n      setCheckedList(items);\n    }\n  }, [items, setCheckedList]);\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: pageStart || 0,\n    loadMore: loadMore,\n    hasMore: !isEnd,\n    loader: renderLoader()\n  }, renderContent());\n};\n\n_s(List, \"chS/1NgFAO/NdjMgZNIf+s3OAsA=\", false, function () {\n  return [useRouter, useSelector, useLazyQuery];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/List/index.js"],"names":["React","useState","useEffect","useCallback","useMemo","styled","useLazyQuery","useSelector","Column","Table","Alert","Spinner","GridAside","Container","LowerLoader","LazyLoad","InfiniteScroll","useRouter","Wrap","CenterAlert","List","type","query","template","variables","component","limit","startOffset","setCheckedList","onChecked","onClick","onEdit","onDelete","router","displayMethod","state","root","pageStart","Number","page","offset","setOffset","items","setItems","isEnd","setIsEnd","loadItems","data","loading","refetch","loadMore","updateOffset","prev","result","renderContent","map","item","id","email","renderLoader","list","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useLazyQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Table from '../../atomic-ui/components/Table'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { GridAside as Container, LowerLoader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport { useRouter } from 'next/router'\n\nexport const Wrap = styled(Column)``\n\nexport const CenterAlert = styled(Alert)`\n  width: 100%;\n  text-align: center;\n`\n\nexport const List = ({\n  type,\n  query,\n  template,\n  variables,\n  component,\n  limit = 6,\n  startOffset = 6,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const router = useRouter()\n  const displayMethod = useSelector((state) => state.root.displayMethod)\n\n  const pageStart = useMemo(() => Number(router.query?.page) || 1, [router])\n\n  const [offset, setOffset] = useState(startOffset + 1)\n  const [items, setItems] = useState([])\n  const [isEnd, setIsEnd] = useState(false)\n\n  const [loadItems, { data, loading, refetch }] = useLazyQuery(query, { variables })\n\n  const loadMore = async () => {\n    const updateOffset = () => setOffset((prev) => prev + limit)\n\n    const result = { ...variables, offset, limit }\n\n    if (refetch) {\n      await refetch(result)\n    } else {\n      await loadItems({ variables: result })\n    }\n    updateOffset()\n  }\n\n  const renderContent = useCallback(() => {\n    if (displayMethod === 'grid') {\n      return (\n        <Container>\n          {(items || []).map((item) => (\n            <LazyLoad key={item.id || item.email}>{component(item)}</LazyLoad>\n          ))}\n        </Container>\n      )\n    }\n    return (\n      <Table\n        data={items}\n        template={template}\n        onChecked={onChecked}\n        onClick={onClick}\n        onEdit={onEdit}\n        onDelete={onDelete}\n      />\n    )\n  }, [items, displayMethod, onChecked, onClick, onEdit, onDelete])\n\n  const renderLoader = () => (\n    <LowerLoader key={'loader'}>\n      <Spinner />\n    </LowerLoader>\n  )\n\n  useEffect(() => {\n    if (!loading && data) {\n      const list = data[type]\n      if (list.length > 0) setItems((prev) => [...prev, ...list])\n      if (list.length === 0) setIsEnd(true)\n    }\n  }, [data, loading, setIsEnd])\n\n  useEffect(() => {\n    if (items?.length > 0 && setCheckedList) {\n      setCheckedList(items)\n    }\n  }, [items, setCheckedList])\n\n  return (\n    <InfiniteScroll\n      pageStart={pageStart || 0}\n      loadMore={loadMore}\n      hasMore={!isEnd}\n      loader={renderLoader()}>\n      {renderContent()}\n    </InfiniteScroll>\n  )\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}
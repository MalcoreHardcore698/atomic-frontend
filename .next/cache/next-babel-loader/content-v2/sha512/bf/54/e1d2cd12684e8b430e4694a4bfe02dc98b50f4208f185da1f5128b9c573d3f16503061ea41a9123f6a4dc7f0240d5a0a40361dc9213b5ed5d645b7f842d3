{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport { getLabelCategory } from '../atomic-ui/utils/functions';\nimport ContentLayout from '../layouts/content';\nimport { GridAside as Container } from '../components/Styled';\nimport ProjectList from '../components/ProjectList';\nimport queries from '../graphql/queries';\nconst TITLE = 'Проекты';\n\nconst Projects = ({\n  store\n}) => {\n  _s();\n\n  const router = useRouter();\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER'\n    }, {\n      type: 'SELECT',\n      options: store === null || store === void 0 ? void 0 : store.categories.map(category => ({\n        value: category.id,\n        label: getLabelCategory(category.name)\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    query: queries.GET_PROJECTS,\n    variables: {\n      category: router.query.category,\n      status: 'PUBLISHED'\n    },\n    store: {\n      documents: store === null || store === void 0 ? void 0 : store.projects\n    }\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(ProjectList, {\n    initialList: documents\n  })));\n};\n\n_s(Projects, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Projects;\nexport var __N_SSP = true;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/projects.js"],"names":["React","useRouter","getLabelCategory","ContentLayout","GridAside","Container","ProjectList","queries","TITLE","Projects","store","router","type","options","categories","map","category","value","id","label","name","GET_PROJECTS","query","status","documents","projects"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,gBAAT,QAAiC,8BAAjC;AAGA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,SAAS,IAAIC,SAAtB,QAAuC,sBAAvC;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,KAAK,GAAG,SAAd;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC9B,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AAEA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEO,KADT;AAEE,IAAA,OAAO,EAAE,CACP;AAAEI,MAAAA,IAAI,EAAE;AAAR,KADO,EAEP;AACEA,MAAAA,IAAI,EAAE,QADR;AAEEC,MAAAA,OAAO,EAAEH,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEI,UAAP,CAAkBC,GAAlB,CAAuBC,QAAD,KAAe;AAC5CC,QAAAA,KAAK,EAAED,QAAQ,CAACE,EAD4B;AAE5CC,QAAAA,KAAK,EAAEjB,gBAAgB,CAACc,QAAQ,CAACI,IAAV;AAFqB,OAAf,CAAtB;AAFX,KAFO,CAFX;AAYE,IAAA,OAAO,EAAE,CACP;AAAED,MAAAA,KAAK,EAAE,UAAT;AAAqBF,MAAAA,KAAK,EAAE;AAA5B,KADO,EAEP;AAAEE,MAAAA,KAAK,EAAE,WAAT;AAAsBF,MAAAA,KAAK,EAAE;AAA7B,KAFO,EAGP;AAAEE,MAAAA,KAAK,EAAE,iBAAT;AAA4BF,MAAAA,KAAK,EAAE;AAAnC,KAHO,CAZX;AAiBE,IAAA,KAAK,EAAEV,OAAO,CAACc,YAjBjB;AAkBE,IAAA,SAAS,EAAE;AAAEL,MAAAA,QAAQ,EAAEL,MAAM,CAACW,KAAP,CAAaN,QAAzB;AAAmCO,MAAAA,MAAM,EAAE;AAA3C,KAlBb;AAmBE,IAAA,KAAK,EAAE;AAAEC,MAAAA,SAAS,EAAEd,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEe;AAApB;AAnBT,KAoBG,CAAC;AAAED,IAAAA;AAAF,GAAD,kBACC,oBAAC,SAAD,qBACE,oBAAC,WAAD;AAAa,IAAA,WAAW,EAAEA;AAA1B,IADF,CArBJ,CADF;AA4BD,CA/BD;;GAAMf,Q;UACWR,S;;;KADXQ,Q;;AAoEN,eAAeA,QAAf","sourcesContent":["import React from 'react'\nimport { useRouter } from 'next/router'\n\nimport { getLabelCategory } from '../atomic-ui/utils/functions'\n\nimport { initializeApollo } from '../apollo'\nimport ContentLayout from '../layouts/content'\nimport { GridAside as Container } from '../components/Styled'\nimport ProjectList from '../components/ProjectList'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Проекты'\nconst START_OFFSET = 6\n\nconst Projects = ({ store }) => {\n  const router = useRouter()\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      filters={[\n        { type: 'DATEPICKER' },\n        {\n          type: 'SELECT',\n          options: store?.categories.map((category) => ({\n            value: category.id,\n            label: getLabelCategory(category.name)\n          }))\n        }\n      ]}\n      options={[\n        { label: 'Компания', value: 'company' },\n        { label: 'Участники', value: 'members' },\n        { label: 'Дата публикации', value: 'createdAt' }\n      ]}\n      query={queries.GET_PROJECTS}\n      variables={{ category: router.query.category, status: 'PUBLISHED' }}\n      store={{ documents: store?.projects }}>\n      {({ documents }) => (\n        <Container>\n          <ProjectList initialList={documents} />\n        </Container>\n      )}\n    </ContentLayout>\n  )\n}\n\nexport async function getServerSideProps({ query }) {\n  const client = initializeApollo()\n\n  let projects = []\n  let categories = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_PROJECTS,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET,\n        status: 'PUBLISHED',\n        category: query.category\n      }\n    })\n\n    if (response && response.data) {\n      projects = response.data.getProjects\n      categories = response.data.getCategories\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        projects,\n        categories\n      }\n    }\n  }\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
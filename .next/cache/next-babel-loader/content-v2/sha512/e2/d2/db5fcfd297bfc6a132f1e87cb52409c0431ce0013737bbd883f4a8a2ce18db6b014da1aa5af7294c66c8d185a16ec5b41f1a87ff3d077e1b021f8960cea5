{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../../apollo';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport ContentLayout from '../../layouts/content';\nimport ProjectCard from '../../components/ProjectCard';\nimport { onProjectCreate, onProjectEdit, onProjectDelete, onProjectLink, onProjectScreenshot } from '../../store/helpers/project';\nimport { setDocuments } from '../../store/actions/documents';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport { onUserAboutMore } from '../../store/helpers/user';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\nconst START_OFFSET = 12;\nconst LIMIT = 12;\n\nconst Projects = ({\n  store\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER'\n    }, {\n      type: 'SELECT',\n      options: store === null || store === void 0 ? void 0 : store.categories.map(category => ({\n        value: category.id,\n        label: getLabelCategory(category.name)\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    handle: {\n      icon: 'work',\n      buttonCreateText: 'Создать проект',\n      onCreate: recall(onProjectCreate, {\n        companies: store.companies,\n        categories: store.categories,\n        statuses: store.statuses,\n        canEditStatus,\n        mutation: queries.CREATE_PROJECT,\n        query: queries.GET_USERS\n      }),\n      onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n    },\n    limit: LIMIT,\n    startOffset: START_OFFSET,\n    bottomScrollOffset: 0,\n    query: queries.GET_PROJECTS,\n    variables: {\n      status: 'PUBLISHED'\n    },\n    store: {\n      documents: documents || store.projects\n    },\n    dashboard: true\n  }, ({\n    documents\n  }) => displayMethod === 'list' ? /*#__PURE__*/React.createElement(Table, {\n    data: documents,\n    template: templates.project,\n    onChecked: () => {},\n    onClick: project => recall(onProjectLink, {\n      id: project.id,\n      auth: user\n    })(),\n    onDelete: project => recall(onProjectDelete, {\n      id: project.id,\n      project,\n      auth: user,\n      mutation: queries.DELETE_PROJECT\n    })(),\n    onEdit: project => recall(onProjectEdit, {\n      id: project.id,\n      companies: store.companies,\n      categories: store.categories,\n      statuses: store.statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      })\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }) : /*#__PURE__*/React.createElement(Grid, null, documents.map(project => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: project.id,\n    project: project,\n    onChecked: () => {},\n    onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n      screenshots: [project.preview, ...project.screenshots],\n      key\n    })(),\n    onLink: recall(onProjectLink, {\n      id: project.id,\n      user\n    }),\n    onAboutMore: recall(onUserAboutMore, {\n      user: project\n    }),\n    onDelete: recall(onProjectDelete, {\n      id: project.id,\n      project,\n      auth: user,\n      mutation: queries.DELETE_PROJECT\n    }),\n    onEdit: recall(onProjectEdit, {\n      id: project.id,\n      companies: store.companies,\n      categories: store.categories,\n      statuses: store.statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      })\n    }),\n    preview: true\n  }))));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let projects = [];\n  let companies = [];\n  let categories = [];\n  let statuses = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_PROJECTS,\n      variables: {\n        offset: 0,\n        limit: LIMIT,\n        account: ['ENTITY']\n      }\n    });\n\n    if (response && response.data) {\n      projects = response.data.getProjects;\n      companies = response.data.getUsers;\n      categories = response.data.getCategories;\n      statuses = response.data.getPostStatus;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        projects,\n        companies,\n        categories,\n        statuses\n      }\n    }\n  };\n}\nexport default Projects;","map":null,"metadata":{},"sourceType":"module"}
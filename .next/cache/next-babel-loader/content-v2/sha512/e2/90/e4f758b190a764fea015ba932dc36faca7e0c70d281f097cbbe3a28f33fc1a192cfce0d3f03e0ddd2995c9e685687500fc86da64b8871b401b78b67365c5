{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Controller } from 'react-hook-form';\nimport { useQuery } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Title from '../../atomic-ui/components/Title';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Select from '../../atomic-ui/components/Select';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport TextArea from '../../atomic-ui/components/TextArea';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport Message from '../../atomic-ui/components/Message';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nimport { Loader } from '../Styled';\nimport queries from '../../graphql/queries';\nexport var LIMIT_USERS = 15;\nexport var Messages = styled(Column).withConfig({\n  displayName: \"FormTicket__Messages\",\n  componentId: \"n5aw2g-0\"\n})([\"grid-gap:5px;\"]);\n_c = Messages;\nexport var Header = styled(Row).withConfig({\n  displayName: \"FormTicket__Header\",\n  componentId: \"n5aw2g-1\"\n})([\"justify-content:space-between;@media only screen and (max-width:480px){flex-direction:column;align-items:end;grid-gap:var(--default-gap);}\"]);\n_c2 = Header;\nexport var Ticket = function Ticket(_ref) {\n  _s2();\n\n  var title = _ref.title,\n      ticket = _ref.ticket,\n      appearance = _ref.appearance,\n      mutation = _ref.mutation,\n      className = _ref.className,\n      isClient = _ref.isClient,\n      _onSubmit = _ref.onSubmit;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      checkedAll = _useState2[0],\n      setCheckedAll = _useState2[1]; // const [offsetUsers, setOffsetUsers] = useState(0)\n  // const [usersSelectInput, setUsersSelectInput] = useState('')\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      users = _useState6[0],\n      setUsers = _useState6[1];\n\n  var _ref2 = ticket ? useQuery(queries.GET_TICKET, {\n    variables: {\n      id: ticket\n    },\n    fetchPolicy: 'no-cache'\n  }) : {\n    data: {\n      getTicket: {}\n    },\n    loading: false,\n    error: false\n  },\n      data = _ref2.data,\n      loadingTicket = _ref2.loading,\n      errorTicket = _ref2.error;\n\n  var _useQuery = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      // offset: offsetUsers,\n      account: ['INDIVIDUAL', 'OFICIAL']\n    }\n  }),\n      dataUsers = _useQuery.data,\n      loadingUsers = _useQuery.loading;\n\n  var _useQuery2 = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      account: ['INDIVIDUAL', 'ADMIN']\n    }\n  }),\n      dataCounsellors = _useQuery2.data,\n      loadingCounsellors = _useQuery2.loading;\n\n  var _useQuery3 = useQuery(queries.GET_CATEGORIES, {\n    variables: {\n      type: 'TICKET'\n    }\n  }),\n      dataCategories = _useQuery3.data,\n      loadingCategories = _useQuery3.loading;\n\n  var handleCheckedMessages = function handleCheckedMessages(e) {\n    setCheckedAll(e.target.checked);\n  };\n\n  var handleCheckedMessage = function handleCheckedMessage(message, value) {\n    setMessages(function (prev) {\n      return prev.map(function (item) {\n        return item.id === message.id ? _objectSpread(_objectSpread({}, item), {}, {\n          checked: value\n        }) : item;\n      });\n    });\n  };\n\n  var handleDeleteChecked = function handleDeleteChecked() {\n    setMessages(function (prev) {\n      return prev.filter(function (message) {\n        return !message.checked;\n      });\n    });\n  };\n\n  var handleMessageEdit = function handleMessageEdit(message, text) {\n    setMessages(function (prev) {\n      return prev.map(function (item) {\n        return item.id === message.id ? _objectSpread(_objectSpread({}, item), {}, {\n          updatedAt: new Date(),\n          text: text\n        }) : item;\n      });\n    });\n  };\n\n  var handleMessageDelete = function handleMessageDelete(message) {\n    setMessages(function (prev) {\n      return prev.filter(function (item) {\n        return item.id !== message.id;\n      });\n    });\n  };\n\n  useEffect(function () {\n    if (ticket && !loadingTicket && data) {\n      setMessages(data.getTicket.messages.map(function (message) {\n        return _objectSpread(_objectSpread({}, message), {}, {\n          checked: false\n        });\n      }));\n    }\n  }, [ticket, data, loadingTicket]);\n  useEffect(function () {\n    if (!loadingUsers && dataUsers) {\n      setUsers(function (prev) {\n        return [].concat(_toConsumableArray(prev), _toConsumableArray(dataUsers.getUsers));\n      });\n    }\n  }, [dataUsers, loadingUsers]);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: function onSubmit(form, action) {\n      return _onSubmit(_objectSpread(_objectSpread({}, form), {}, {\n        messages: messages\n      }), action);\n    }\n  }, function (_ref3) {\n    var _data$getTicket, _data$getTicket2, _data$getTicket2$mess, _data$getTicket3, _data$getTicket4, _data$getTicket5;\n\n    var register = _ref3.register,\n        loading = _ref3.loading,\n        errors = _ref3.errors,\n        control = _ref3.control,\n        getValues = _ref3.getValues;\n    return !loadingTicket && data ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, title && /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.title && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'title',\n      ref: register({\n        required: true\n      }),\n      defaultValue: getValues('title') || ((_data$getTicket = data.getTicket) === null || _data$getTicket === void 0 ? void 0 : _data$getTicket.title),\n      placeholder: 'Краткое описание вашего вопроса',\n      appearance: 'ghost',\n      disabled: loading\n    }), (!ticket || ((_data$getTicket2 = data.getTicket) === null || _data$getTicket2 === void 0 ? void 0 : (_data$getTicket2$mess = _data$getTicket2.messages) === null || _data$getTicket2$mess === void 0 ? void 0 : _data$getTicket2$mess.length) === 0) && /*#__PURE__*/React.createElement(TextArea, {\n      type: 'text',\n      name: 'message',\n      ref: register(),\n      defaultValue: getValues('message') || '',\n      placeholder: 'Расскройте все подробности вашего вопроса',\n      disabled: loading,\n      appearance: 'ghost'\n    }), !isClient && /*#__PURE__*/React.createElement(Controller, {\n      name: 'author',\n      control: control,\n      defaultValue: (_data$getTicket3 = data.getTicket) !== null && _data$getTicket3 !== void 0 && _data$getTicket3.author ? {\n        value: data.getTicket.author.id,\n        label: data.getTicket.author.name\n      } : null,\n      render: function render(_ref4) {\n        var value = _ref4.value,\n            onChange = _ref4.onChange;\n        return /*#__PURE__*/React.createElement(Select, {\n          options: users.map(function (user) {\n            return {\n              value: user,\n              label: user.name\n            };\n          }),\n          appearance: 'ghost',\n          defaultValue: value // inputValue={usersSelectInput}\n          ,\n          placeholder: 'Выберите автора обращения',\n          onChange: onChange // onInputChange={(input) => setUsersSelectInput(input)}\n          // onKeyDown={(e) => {\n          //   // Pressed ENTER\n          //   if (e.keyCode === 13) {\n          //     searchUsers({\n          //       search: usersSelectInput\n          //     })\n          //   }\n          // }}\n          // onMenuScrollToBottom={async () => {\n          //   await updateUsers({\n          //     variables: {\n          //       offset: offsetUsers,\n          //       limit: LIMIT_USERS\n          //     },\n          //     updateQuery: (...props) => props\n          //   })\n          //   setOffsetUsers((prev) => prev + LIMIT_USERS)\n          // }}\n          ,\n          isLoading: loadingUsers,\n          isSearchable: true\n        });\n      }\n    }), !isClient && /*#__PURE__*/React.createElement(Controller, {\n      name: 'counsellor',\n      control: control,\n      defaultValue: (_data$getTicket4 = data.getTicket) !== null && _data$getTicket4 !== void 0 && _data$getTicket4.counsellor ? {\n        value: data.getTicket.counsellor.id,\n        label: data.getTicket.counsellor.name\n      } : null,\n      render: function render(_ref5) {\n        var value = _ref5.value,\n            onChange = _ref5.onChange;\n        return /*#__PURE__*/React.createElement(Select, {\n          options: !loadingCounsellors && dataCounsellors ? dataCounsellors.getUsers.map(function (user) {\n            return {\n              value: user,\n              label: user.name\n            };\n          }) : [],\n          appearance: 'ghost',\n          defaultValue: value,\n          placeholder: 'Выберите советника',\n          onChange: onChange,\n          isLoading: loadingCounsellors,\n          isSearchable: true\n        });\n      }\n    }), /*#__PURE__*/React.createElement(Controller, {\n      name: 'category',\n      control: control,\n      defaultValue: (_data$getTicket5 = data.getTicket) !== null && _data$getTicket5 !== void 0 && _data$getTicket5.category ? {\n        value: data.getTicket.category.id,\n        label: getLabelCategory(data.getTicket.category.name)\n      } : null,\n      render: function render(_ref6) {\n        var value = _ref6.value,\n            onChange = _ref6.onChange;\n        return /*#__PURE__*/React.createElement(Select, {\n          appearance: 'ghost',\n          placeholder: 'Выберите раздел',\n          options: !loadingCategories && dataCategories ? dataCategories.getCategories.filter(function (item) {\n            return item.type === 'TICKET';\n          }).map(function (item) {\n            return {\n              value: item.id,\n              label: getLabelCategory(item.name)\n            };\n          }) : [],\n          onChange: onChange,\n          defaultValue: value,\n          isLoading: loadingCategories,\n          isClearable: true\n        });\n      }\n    })), !isClient && ticket && messages.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u0418\\u0441\\u0442\\u043E\\u0440\\u0438\\u044F \\u0441\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u0439\"), /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Checkbox, {\n      label: 'Выделить все',\n      checked: checkedAll,\n      onChange: handleCheckedMessages\n    }), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        color: 'var(--default-color-red)'\n      },\n      appearance: 'clear',\n      onClick: handleDeleteChecked\n    }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0432\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u043E\\u0435\")), /*#__PURE__*/React.createElement(Messages, null, messages.map(function (message) {\n      var _message$user, _message$user$avatar, _message$user2;\n\n      return /*#__PURE__*/React.createElement(Message, {\n        key: message.id,\n        avatar: (_message$user = message.user) === null || _message$user === void 0 ? void 0 : (_message$user$avatar = _message$user.avatar) === null || _message$user$avatar === void 0 ? void 0 : _message$user$avatar.path,\n        name: (_message$user2 = message.user) === null || _message$user2 === void 0 ? void 0 : _message$user2.name,\n        text: message.text,\n        time: message.createdAt !== message.updatedAt ? message.updatedAt : message.createdAt,\n        isChecked: message.checked,\n        isUpdated: message.createdAt !== message.updatedAt,\n        onChecked: function onChecked(value) {\n          return handleCheckedMessage(message, value);\n        },\n        onEdit: function onEdit(text) {\n          return handleMessageEdit(message, text);\n        },\n        onDelete: function onDelete() {\n          return handleMessageDelete(message);\n        },\n        compact: true\n      });\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: loading\n    }, ticket ? 'Сохранить' : 'Создать'))) : errorTicket ? /*#__PURE__*/React.createElement(Alert, {\n      appearance: 'error',\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      }\n    }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E\\u0431 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0438\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  });\n};\n\n_s2(Ticket, \"632WdxOfiklFF7qC/zuwA7W1jIQ=\", false, function () {\n  return [useQuery, useQuery, useQuery, useQuery];\n});\n\n_c3 = Ticket;\nTicket.defaultProps = {\n  title: true\n};\nexport default Ticket;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Messages\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Ticket\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormTicket/index.js"],"names":["React","useState","useEffect","styled","Controller","useQuery","Row","Column","Input","Button","Title","Alert","Select","Divider","Spinner","TextArea","Checkbox","Message","getLabelCategory","Form","Loader","queries","LIMIT_USERS","Messages","Header","Ticket","title","ticket","appearance","mutation","className","isClient","onSubmit","checkedAll","setCheckedAll","messages","setMessages","users","setUsers","GET_TICKET","variables","id","fetchPolicy","data","getTicket","loading","error","loadingTicket","errorTicket","GET_USERS_FOR_TICKET","account","dataUsers","loadingUsers","dataCounsellors","loadingCounsellors","GET_CATEGORIES","type","dataCategories","loadingCategories","handleCheckedMessages","e","target","checked","handleCheckedMessage","message","value","prev","map","item","handleDeleteChecked","filter","handleMessageEdit","text","updatedAt","Date","handleMessageDelete","getUsers","form","action","register","errors","control","getValues","width","required","length","author","label","name","onChange","user","counsellor","category","getCategories","color","avatar","path","createdAt","flexGrow","textAlign","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Controller } from 'react-hook-form'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Title from '../../atomic-ui/components/Title'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Select from '../../atomic-ui/components/Select'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport TextArea from '../../atomic-ui/components/TextArea'\nimport Checkbox from '../../atomic-ui/components/Checkbox'\nimport Message from '../../atomic-ui/components/Message'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\n\nimport Form from '../Form'\nimport { Loader } from '../Styled'\nimport queries from '../../graphql/queries'\n\nexport const LIMIT_USERS = 15\n\nexport const Messages = styled(Column)`\n  grid-gap: 5px;\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n\n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n    align-items: end;\n    grid-gap: var(--default-gap);\n  }\n`\n\nexport const Ticket = ({ title, ticket, appearance, mutation, className, isClient, onSubmit }) => {\n  const [checkedAll, setCheckedAll] = useState(false)\n  // const [offsetUsers, setOffsetUsers] = useState(0)\n  // const [usersSelectInput, setUsersSelectInput] = useState('')\n  const [messages, setMessages] = useState([])\n  const [users, setUsers] = useState([])\n\n  const { data, loading: loadingTicket, error: errorTicket } = ticket\n    ? useQuery(queries.GET_TICKET, {\n        variables: {\n          id: ticket\n        },\n        fetchPolicy: 'no-cache'\n      })\n    : { data: { getTicket: {} }, loading: false, error: false }\n\n  const {\n    data: dataUsers,\n    loading: loadingUsers\n    // refetch: searchUsers,\n    // fetchMore: updateUsers\n  } = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      // offset: offsetUsers,\n      account: ['INDIVIDUAL', 'OFICIAL']\n    }\n  })\n\n  const { data: dataCounsellors, loading: loadingCounsellors } = useQuery(\n    queries.GET_USERS_FOR_TICKET,\n    {\n      variables: {\n        account: ['INDIVIDUAL', 'ADMIN']\n      }\n    }\n  )\n\n  const { data: dataCategories, loading: loadingCategories } = useQuery(queries.GET_CATEGORIES, {\n    variables: {\n      type: 'TICKET'\n    }\n  })\n\n  const handleCheckedMessages = (e) => {\n    setCheckedAll(e.target.checked)\n  }\n\n  const handleCheckedMessage = (message, value) => {\n    setMessages((prev) =>\n      prev.map((item) =>\n        item.id === message.id\n          ? {\n              ...item,\n              checked: value\n            }\n          : item\n      )\n    )\n  }\n\n  const handleDeleteChecked = () => {\n    setMessages((prev) => prev.filter((message) => !message.checked))\n  }\n\n  const handleMessageEdit = (message, text) => {\n    setMessages((prev) =>\n      prev.map((item) =>\n        item.id === message.id\n          ? {\n              ...item,\n              updatedAt: new Date(),\n              text\n            }\n          : item\n      )\n    )\n  }\n\n  const handleMessageDelete = (message) => {\n    setMessages((prev) => prev.filter((item) => item.id !== message.id))\n  }\n\n  useEffect(() => {\n    if (ticket && !loadingTicket && data) {\n      setMessages(\n        data.getTicket.messages.map((message) => ({\n          ...message,\n          checked: false\n        }))\n      )\n    }\n  }, [ticket, data, loadingTicket])\n\n  useEffect(() => {\n    if (!loadingUsers && dataUsers) {\n      setUsers((prev) => [...prev, ...dataUsers.getUsers])\n    }\n  }, [dataUsers, loadingUsers])\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) => onSubmit({ ...form, messages }, action)}>\n      {({ register, loading, errors, control, getValues }) =>\n        !loadingTicket && data ? (\n          <React.Fragment>\n            <Column>\n              {title && <Title tag={'h4'}>Основное</Title>}\n\n              {errors && errors.title && (\n                <Alert style={{ width: '100%' }} appearance={'error'}>\n                  Введите название обращение\n                </Alert>\n              )}\n              <Input\n                type={'text'}\n                name={'title'}\n                ref={register({ required: true })}\n                defaultValue={getValues('title') || data.getTicket?.title}\n                placeholder={'Краткое описание вашего вопроса'}\n                appearance={'ghost'}\n                disabled={loading}\n              />\n              {(!ticket || data.getTicket?.messages?.length === 0) && (\n                <TextArea\n                  type={'text'}\n                  name={'message'}\n                  ref={register()}\n                  defaultValue={getValues('message') || ''}\n                  placeholder={'Расскройте все подробности вашего вопроса'}\n                  disabled={loading}\n                  appearance={'ghost'}\n                />\n              )}\n\n              {!isClient && (\n                <Controller\n                  name={'author'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.author\n                      ? {\n                          value: data.getTicket.author.id,\n                          label: data.getTicket.author.name\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      options={users.map((user) => ({\n                        value: user,\n                        label: user.name\n                      }))}\n                      appearance={'ghost'}\n                      defaultValue={value}\n                      // inputValue={usersSelectInput}\n                      placeholder={'Выберите автора обращения'}\n                      onChange={onChange}\n                      // onInputChange={(input) => setUsersSelectInput(input)}\n                      // onKeyDown={(e) => {\n                      //   // Pressed ENTER\n                      //   if (e.keyCode === 13) {\n                      //     searchUsers({\n                      //       search: usersSelectInput\n                      //     })\n                      //   }\n                      // }}\n                      // onMenuScrollToBottom={async () => {\n                      //   await updateUsers({\n                      //     variables: {\n                      //       offset: offsetUsers,\n                      //       limit: LIMIT_USERS\n                      //     },\n                      //     updateQuery: (...props) => props\n                      //   })\n                      //   setOffsetUsers((prev) => prev + LIMIT_USERS)\n                      // }}\n                      isLoading={loadingUsers}\n                      isSearchable\n                    />\n                  )}\n                />\n              )}\n\n              {!isClient && (\n                <Controller\n                  name={'counsellor'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.counsellor\n                      ? {\n                          value: data.getTicket.counsellor.id,\n                          label: data.getTicket.counsellor.name\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      options={\n                        !loadingCounsellors && dataCounsellors\n                          ? dataCounsellors.getUsers.map((user) => ({\n                              value: user,\n                              label: user.name\n                            }))\n                          : []\n                      }\n                      appearance={'ghost'}\n                      defaultValue={value}\n                      placeholder={'Выберите советника'}\n                      onChange={onChange}\n                      isLoading={loadingCounsellors}\n                      isSearchable\n                    />\n                  )}\n                />\n              )}\n\n              <Controller\n                name={'category'}\n                control={control}\n                defaultValue={\n                  data.getTicket?.category\n                    ? {\n                        value: data.getTicket.category.id,\n                        label: getLabelCategory(data.getTicket.category.name)\n                      }\n                    : null\n                }\n                render={({ value, onChange }) => (\n                  <Select\n                    appearance={'ghost'}\n                    placeholder={'Выберите раздел'}\n                    options={\n                      !loadingCategories && dataCategories\n                        ? dataCategories.getCategories\n                            .filter((item) => item.type === 'TICKET')\n                            .map((item) => ({\n                              value: item.id,\n                              label: getLabelCategory(item.name)\n                            }))\n                        : []\n                    }\n                    onChange={onChange}\n                    defaultValue={value}\n                    isLoading={loadingCategories}\n                    isClearable\n                  />\n                )}\n              />\n            </Column>\n\n            {!isClient && ticket && messages.length > 0 && (\n              <React.Fragment>\n                <Divider clear />\n\n                <Title tag={'h4'}>История сообщений</Title>\n\n                <Header>\n                  <Checkbox\n                    label={'Выделить все'}\n                    checked={checkedAll}\n                    onChange={handleCheckedMessages}\n                  />\n                  <Button\n                    style={{ color: 'var(--default-color-red)' }}\n                    appearance={'clear'}\n                    onClick={handleDeleteChecked}>\n                    Удалить выделенное\n                  </Button>\n                </Header>\n\n                <Messages>\n                  {messages.map((message) => (\n                    <Message\n                      key={message.id}\n                      avatar={message.user?.avatar?.path}\n                      name={message.user?.name}\n                      text={message.text}\n                      time={\n                        message.createdAt !== message.updatedAt\n                          ? message.updatedAt\n                          : message.createdAt\n                      }\n                      isChecked={message.checked}\n                      isUpdated={message.createdAt !== message.updatedAt}\n                      onChecked={(value) => handleCheckedMessage(message, value)}\n                      onEdit={(text) => handleMessageEdit(message, text)}\n                      onDelete={() => handleMessageDelete(message)}\n                      compact\n                    />\n                  ))}\n                </Messages>\n              </React.Fragment>\n            )}\n\n            <Divider clear />\n\n            <Row>\n              <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n                {ticket ? 'Сохранить' : 'Создать'}\n              </Button>\n            </Row>\n          </React.Fragment>\n        ) : errorTicket ? (\n          <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n            Упс! Не удалось загрузить информацию об обращении\n          </Alert>\n        ) : (\n          <Loader>\n            <Spinner />\n          </Loader>\n        )\n      }\n    </Form>\n  )\n}\n\nTicket.defaultProps = {\n  title: true\n}\n\nexport default Ticket\n"]},"metadata":{},"sourceType":"module"}
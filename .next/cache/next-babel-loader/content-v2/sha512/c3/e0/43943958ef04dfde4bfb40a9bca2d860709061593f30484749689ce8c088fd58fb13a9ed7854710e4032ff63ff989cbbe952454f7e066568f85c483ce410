{"ast":null,"code":"var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport gql from 'graphql-tag';\nimport { ArticleFields } from '../../fragments';\nexport var GET_ARTICLE = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query getArticle($id: ID!) {\\n    getArticle(id: $id) {\\n      ...ArticleFields\\n    }\\n  }\\n  \", \"\\n\"])), ArticleFields);\nexport var GET_ARTICLES = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  query getArticles($offset: Int, $limit: Int, $search: String, $status: PostStatus) {\\n    getArticles(offset: $offset, limit: $limit, search: $search, status: $status) {\\n      id\\n      author {\\n        name\\n        avatar {\\n          path\\n        }\\n      }\\n      title\\n      body\\n      preview {\\n        path\\n      }\\n      category {\\n        id\\n        name\\n      }\\n    }\\n  }\\n\"])));\nexport var CREATE_ARTICLE = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  mutation createArticle($input: ArticleCreateInput!, $status: PostStatus) {\\n    createArticle(input: $input, status: $status) {\\n      ...ArticleFields\\n    }\\n  }\\n  \", \"\\n\"])), ArticleFields);\nexport var UPDATE_ARTICLE = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  mutation updateArticle($id: ID!, $input: ArticleUpdateInput!, $status: PostStatus) {\\n    updateArticle(id: $id, input: $input, status: $status) {\\n      ...ArticleFields\\n    }\\n  }\\n  \", \"\\n\"])), ArticleFields);\nexport var DELETE_ARTICLE = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n  mutation deleteArticle($id: ID!, $status: PostStatus) {\\n    deleteArticle(id: $id, status: $status) {\\n      ...ArticleFields\\n    }\\n  }\\n  \", \"\\n\"])), ArticleFields);","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/graphql/queries/Article/index.js"],"names":["gql","ArticleFields","GET_ARTICLE","GET_ARTICLES","CREATE_ARTICLE","UPDATE_ARTICLE","DELETE_ARTICLE"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,IAAMC,WAAW,GAAGF,GAAH,+KAMpBC,aANoB,CAAjB;AASP,OAAO,IAAME,YAAY,GAAGH,GAAH,sdAAlB;AAuBP,OAAO,IAAMI,cAAc,GAAGJ,GAAH,yPAMvBC,aANuB,CAApB;AASP,OAAO,IAAMI,cAAc,GAAGL,GAAH,4QAMvBC,aANuB,CAApB;AASP,OAAO,IAAMK,cAAc,GAAGN,GAAH,gOAMvBC,aANuB,CAApB","sourcesContent":["import gql from 'graphql-tag'\nimport { ArticleFields } from '../../fragments'\n\nexport const GET_ARTICLE = gql`\n  query getArticle($id: ID!) {\n    getArticle(id: $id) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`\n\nexport const GET_ARTICLES = gql`\n  query getArticles($offset: Int, $limit: Int, $search: String, $status: PostStatus) {\n    getArticles(offset: $offset, limit: $limit, search: $search, status: $status) {\n      id\n      author {\n        name\n        avatar {\n          path\n        }\n      }\n      title\n      body\n      preview {\n        path\n      }\n      category {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const CREATE_ARTICLE = gql`\n  mutation createArticle($input: ArticleCreateInput!, $status: PostStatus) {\n    createArticle(input: $input, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`\n\nexport const UPDATE_ARTICLE = gql`\n  mutation updateArticle($id: ID!, $input: ArticleUpdateInput!, $status: PostStatus) {\n    updateArticle(id: $id, input: $input, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`\n\nexport const DELETE_ARTICLE = gql`\n  mutation deleteArticle($id: ID!, $status: PostStatus) {\n    deleteArticle(id: $id, status: $status) {\n      ...ArticleFields\n    }\n  }\n  ${ArticleFields}\n`\n"]},"metadata":{},"sourceType":"module"}
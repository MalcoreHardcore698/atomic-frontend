{"ast":null,"code":"import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Column from '../atomic-ui/components/Column';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport DashboardLayout from './dashboard';\nimport DefaultLayout from '../layouts/default';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport HandleBar from '../components/HandleBar';\nimport { Card } from './dashboard/content';\nimport List from '../components/List';\nexport const INITIAL_DISPLAY_METHOD = 'grid';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"content__Wrap\",\n  componentId: \"sc-1afm75p-0\"\n})([\"margin-top:120px;margin-bottom:80px;\", \" @media only screen and (max-width:480px){margin-top:0;}\"], ({\n  clear\n}) => clear && css([\"margin:0;\"]));\nconst Container = styled.div.withConfig({\n  displayName: \"content__Container\",\n  componentId: \"sc-1afm75p-1\"\n})([\"display:grid;grid-template-columns:1fr min-content;grid-gap:var(--default-gap);margin-bottom:80px;\", \" @media only screen and (max-width:1196px){grid-template-columns:1fr;}\"], ({\n  stretch\n}) => stretch && css([\"grid-template-columns:1fr;\"]));\n\nconst ContentLayout = ({\n  limit,\n  title,\n  aside,\n  store,\n  handle,\n  render,\n  filters,\n  getType,\n  getQuery,\n  dashboard,\n  variables,\n  emptyMessage,\n  startOffset,\n  onLink\n}) => {\n  const search = useSelector(state => state.root.search);\n  const Layout = dashboard ? DashboardLayout : DefaultLayout;\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [select, onChangeSelect] = useState();\n  const [date, onChangeDate] = useState();\n\n  const getFilters = () => {\n    return (filters || []).map(filter => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return /*#__PURE__*/React.createElement(DatePicker, {\n            key: v4(),\n            value: date,\n            placeholder: filter.placeholder || 'Дата публикации',\n            onChange: onChangeDate,\n            withNavigate: true\n          });\n\n        case 'SELECT':\n          return /*#__PURE__*/React.createElement(Select, {\n            key: v4(),\n            options: filter.options,\n            placeholder: filter.placeholder || 'Раздел',\n            selected: select,\n            onChange: item => onChangeSelect(item)\n          });\n\n        default:\n          return null;\n      }\n    });\n  };\n\n  const getOptions = () => [];\n\n  const renderCard = item => /*#__PURE__*/React.createElement(Card, {\n    item: item,\n    component: render(item),\n    onLink: onLink && (item => onLink(item)),\n    withoutChecked: true\n  });\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: title,\n    scaffold: store === null || store === void 0 ? void 0 : store.scaffold\n  }, /*#__PURE__*/React.createElement(Wrap, {\n    clear: (store === null || store === void 0 ? void 0 : store.scaffold) || dashboard\n  }, !(store !== null && store !== void 0 && store.scaffold) && !dashboard && /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter)\n  }), dashboard && handle && /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: handle.icon,\n    onCreate: handle.onCreate,\n    buttonCreateText: handle.buttonCreateText,\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: handle.onChangeDisplayMethod\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: getFilters(),\n    options: getOptions()\n  }), /*#__PURE__*/React.createElement(Container, {\n    stretch: search && !aside || !aside\n  }, /*#__PURE__*/React.createElement(List, {\n    limit: limit,\n    type: getType,\n    query: getQuery,\n    variables: variables,\n    startOffset: startOffset,\n    emptyMessage: emptyMessage,\n    component: item => renderCard(item),\n    initialDisplayMethod: INITIAL_DISPLAY_METHOD,\n    onClick: onLink && (item => onLink(item))\n  }), aside)));\n};\n\nexport default ContentLayout;","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/layouts/content.js"],"names":["React","useState","useSelector","styled","css","v4","Column","DatePicker","Select","DashboardLayout","DefaultLayout","FilterBar","SearchBar","HandleBar","Card","List","INITIAL_DISPLAY_METHOD","Wrap","clear","Container","div","stretch","ContentLayout","limit","title","aside","store","handle","render","filters","getType","getQuery","dashboard","variables","emptyMessage","startOffset","onLink","search","state","root","Layout","visibleFilter","setVisibleFilter","select","onChangeSelect","date","onChangeDate","getFilters","map","filter","type","placeholder","options","item","getOptions","renderCard","scaffold","icon","onCreate","buttonCreateText","onChangeDisplayMethod"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,EAAT,QAAmB,MAAnB;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AAEA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,IAAT,QAAqB,qBAArB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,OAAO,MAAMC,sBAAsB,GAAG,MAA/B;AAEP,MAAMC,IAAI,GAAGd,MAAM,CAACG,MAAD,CAAT;AAAA;AAAA;AAAA,yGAIN,CAAC;AAAEY,EAAAA;AAAF,CAAD,KACAA,KAAK,IACLd,GADK,eALC,CAAV;AAeA,MAAMe,SAAS,GAAGhB,MAAM,CAACiB,GAAV;AAAA;AAAA;AAAA,qLAMX,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACAA,OAAO,IACPjB,GADO,gCAPI,CAAf;;AAiBA,MAAMkB,aAAa,GAAG,CAAC;AACrBC,EAAAA,KADqB;AAErBC,EAAAA,KAFqB;AAGrBC,EAAAA,KAHqB;AAIrBC,EAAAA,KAJqB;AAKrBC,EAAAA,MALqB;AAMrBC,EAAAA,MANqB;AAOrBC,EAAAA,OAPqB;AAQrBC,EAAAA,OARqB;AASrBC,EAAAA,QATqB;AAUrBC,EAAAA,SAVqB;AAWrBC,EAAAA,SAXqB;AAYrBC,EAAAA,YAZqB;AAarBC,EAAAA,WAbqB;AAcrBC,EAAAA;AAdqB,CAAD,KAehB;AACJ,QAAMC,MAAM,GAAGnC,WAAW,CAAEoC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,MAAvB,CAA1B;AACA,QAAMG,MAAM,GAAGR,SAAS,GAAGvB,eAAH,GAAqBC,aAA7C;AACA,QAAM,CAAC+B,aAAD,EAAgBC,gBAAhB,IAAoCzC,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAAC0C,MAAD,EAASC,cAAT,IAA2B3C,QAAQ,EAAzC;AACA,QAAM,CAAC4C,IAAD,EAAOC,YAAP,IAAuB7C,QAAQ,EAArC;;AAEA,QAAM8C,UAAU,GAAG,MAAM;AACvB,WAAO,CAAClB,OAAO,IAAI,EAAZ,EAAgBmB,GAAhB,CAAqBC,MAAD,IAAY;AACrC,cAAQA,MAAM,CAACC,IAAf;AACE,aAAK,YAAL;AACE,8BACE,oBAAC,UAAD;AACE,YAAA,GAAG,EAAE7C,EAAE,EADT;AAEE,YAAA,KAAK,EAAEwC,IAFT;AAGE,YAAA,WAAW,EAAEI,MAAM,CAACE,WAAP,IAAsB,iBAHrC;AAIE,YAAA,QAAQ,EAAEL,YAJZ;AAKE,YAAA,YAAY;AALd,YADF;;AASF,aAAK,QAAL;AACE,8BACE,oBAAC,MAAD;AACE,YAAA,GAAG,EAAEzC,EAAE,EADT;AAEE,YAAA,OAAO,EAAE4C,MAAM,CAACG,OAFlB;AAGE,YAAA,WAAW,EAAEH,MAAM,CAACE,WAAP,IAAsB,QAHrC;AAIE,YAAA,QAAQ,EAAER,MAJZ;AAKE,YAAA,QAAQ,EAAGU,IAAD,IAAUT,cAAc,CAACS,IAAD;AALpC,YADF;;AASF;AACE,iBAAO,IAAP;AAtBJ;AAwBD,KAzBM,CAAP;AA0BD,GA3BD;;AA6BA,QAAMC,UAAU,GAAG,MAAM,EAAzB;;AAEA,QAAMC,UAAU,GAAIF,IAAD,iBACjB,oBAAC,IAAD;AACE,IAAA,IAAI,EAAEA,IADR;AAEE,IAAA,SAAS,EAAEzB,MAAM,CAACyB,IAAD,CAFnB;AAGE,IAAA,MAAM,EAAEjB,MAAM,KAAMiB,IAAD,IAAUjB,MAAM,CAACiB,IAAD,CAArB,CAHhB;AAIE,IAAA,cAAc;AAJhB,IADF;;AASA,sBACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE7B,KAAf;AAAsB,IAAA,QAAQ,EAAEE,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAE8B;AAAvC,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAAA9B,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAE8B,QAAP,KAAmBxB;AAAhC,KACG,EAACN,KAAD,aAACA,KAAD,eAACA,KAAK,CAAE8B,QAAR,KAAoB,CAACxB,SAArB,iBACC,oBAAC,SAAD;AACE,IAAA,cAAc,EAAE,MAAMU,gBAAgB,CAAC,CAACD,aAAF;AADxC,IAFJ,EAOGT,SAAS,IAAIL,MAAb,iBACC,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEH,KADT;AAEE,IAAA,IAAI,EAAEG,MAAM,CAAC8B,IAFf;AAGE,IAAA,QAAQ,EAAE9B,MAAM,CAAC+B,QAHnB;AAIE,IAAA,gBAAgB,EAAE/B,MAAM,CAACgC,gBAJ3B;AAKE,IAAA,qBAAqB,EAAE,MAAMjB,gBAAgB,CAAC,CAACD,aAAF,CAL/C;AAME,IAAA,qBAAqB,EAAEd,MAAM,CAACiC;AANhC,IARJ,eAkBE,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAEnB,aAAnB;AAAkC,IAAA,OAAO,EAAEM,UAAU,EAArD;AAAyD,IAAA,OAAO,EAAEO,UAAU;AAA5E,IAlBF,eAoBE,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAGjB,MAAM,IAAI,CAACZ,KAAZ,IAAsB,CAACA;AAA3C,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEF,KADT;AAEE,IAAA,IAAI,EAAEO,OAFR;AAGE,IAAA,KAAK,EAAEC,QAHT;AAIE,IAAA,SAAS,EAAEE,SAJb;AAKE,IAAA,WAAW,EAAEE,WALf;AAME,IAAA,YAAY,EAAED,YANhB;AAOE,IAAA,SAAS,EAAGmB,IAAD,IAAUE,UAAU,CAACF,IAAD,CAPjC;AAQE,IAAA,oBAAoB,EAAErC,sBARxB;AASE,IAAA,OAAO,EAAEoB,MAAM,KAAMiB,IAAD,IAAUjB,MAAM,CAACiB,IAAD,CAArB;AATjB,IADF,EAYG5B,KAZH,CApBF,CADF,CADF;AAuCD,CArGD;;AAuGA,eAAeH,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled, { css } from 'styled-components'\nimport { v4 } from 'uuid'\n\nimport Column from '../atomic-ui/components/Column'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Select from '../atomic-ui/components/Select'\n\nimport DashboardLayout from './dashboard'\nimport DefaultLayout from '../layouts/default'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport HandleBar from '../components/HandleBar'\nimport { Card } from './dashboard/content'\nimport List from '../components/List'\n\nexport const INITIAL_DISPLAY_METHOD = 'grid'\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  ${({ clear }) =>\n    clear &&\n    css`\n      margin: 0;\n    `}\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  grid-gap: var(--default-gap);\n  margin-bottom: 80px;\n\n  ${({ stretch }) =>\n    stretch &&\n    css`\n      grid-template-columns: 1fr;\n    `}\n\n  @media only screen and (max-width: 1196px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst ContentLayout = ({\n  limit,\n  title,\n  aside,\n  store,\n  handle,\n  render,\n  filters,\n  getType,\n  getQuery,\n  dashboard,\n  variables,\n  emptyMessage,\n  startOffset,\n  onLink\n}) => {\n  const search = useSelector((state) => state.root.search)\n  const Layout = dashboard ? DashboardLayout : DefaultLayout\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [select, onChangeSelect] = useState()\n  const [date, onChangeDate] = useState()\n\n  const getFilters = () => {\n    return (filters || []).map((filter) => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return (\n            <DatePicker\n              key={v4()}\n              value={date}\n              placeholder={filter.placeholder || 'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />\n          )\n        case 'SELECT':\n          return (\n            <Select\n              key={v4()}\n              options={filter.options}\n              placeholder={filter.placeholder || 'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          )\n        default:\n          return null\n      }\n    })\n  }\n\n  const getOptions = () => []\n\n  const renderCard = (item) => (\n    <Card\n      item={item}\n      component={render(item)}\n      onLink={onLink && ((item) => onLink(item))}\n      withoutChecked\n    />\n  )\n\n  return (\n    <Layout title={title} scaffold={store?.scaffold}>\n      <Wrap clear={store?.scaffold || dashboard}>\n        {!store?.scaffold && !dashboard && (\n          <SearchBar\n            onChangeFilter={() => setVisibleFilter(!visibleFilter)}\n          />\n        )}\n\n        {dashboard && handle && (\n          <HandleBar\n            title={title}\n            icon={handle.icon}\n            onCreate={handle.onCreate}\n            buttonCreateText={handle.buttonCreateText}\n            onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n            onChangeDisplayMethod={handle.onChangeDisplayMethod}\n          />\n        )}\n\n        <FilterBar isOpen={visibleFilter} filters={getFilters()} options={getOptions()} />\n\n        <Container stretch={(search && !aside) || !aside}>\n          <List\n            limit={limit}\n            type={getType}\n            query={getQuery}\n            variables={variables}\n            startOffset={startOffset}\n            emptyMessage={emptyMessage}\n            component={(item) => renderCard(item)}\n            initialDisplayMethod={INITIAL_DISPLAY_METHOD}\n            onClick={onLink && ((item) => onLink(item))}\n          />\n          {aside}\n        </Container>\n      </Wrap>\n    </Layout>\n  )\n}\n\nexport default ContentLayout\n"]},"metadata":{},"sourceType":"module"}
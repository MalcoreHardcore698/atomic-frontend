{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/user';\nimport UserSuit from '../../components/UserSuit';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { setDocuments } from '../../store/actions/documents';\nimport { COMMON_START_OFFSET, DASHBOARD_LOAD_LIMIT } from '../../constants';\nimport { useUser } from '../../hooks/useUser';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Пользователи';\n\nconst Users = () => {\n  const {\n    onCreate,\n    onEdit,\n    ...methods\n  } = useUser({\n    isManage: true\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    icon: 'user2',\n    field: 'email',\n    template: template,\n    entityType: 'user',\n    getType: 'getUsers',\n    limit: DASHBOARD_LOAD_LIMIT,\n    getQuery: queries.GET_USERS,\n    startOffset: COMMON_START_OFFSET,\n    deleteQuery: queries.DELETE_USER,\n    emptyMessage: 'Пользователей нет',\n    deleteEntityMultiText: 'пользователи',\n    deleteEntitySingleText: 'пользователь',\n    buttonCreateText: 'Создать пользователя',\n    render: document => /*#__PURE__*/React.createElement(UserSuit, _extends({}, methods, {\n      user: document,\n      withSocials: false,\n      preview: true\n    })),\n    onCreate: onCreate,\n    onEdit: onEdit\n  });\n};\n\nexport default Users;","map":null,"metadata":{},"sourceType":"module"}
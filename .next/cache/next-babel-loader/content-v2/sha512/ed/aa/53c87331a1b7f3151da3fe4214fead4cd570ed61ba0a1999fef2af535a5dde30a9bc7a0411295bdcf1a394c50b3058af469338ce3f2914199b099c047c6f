{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport ContentLayout from '../../layouts/content';\nimport ProjectCard from '../../components/ProjectCard';\nimport LazyLoad from '../../components/LazyLoad';\nimport FadeLoad from '../../components/FadeLoad';\nimport { onProjectCreate, onProjectEdit, onProjectDelete, onProjectLink, onProjectAdd, onProjectScreenshot } from '../../store/helpers/project';\nimport { setDocuments } from '../../store/actions/documents';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport { setUserFolder, updateUser } from '../../store/actions/user';\nimport { onUserAboutMore } from '../../store/helpers/user';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\nconst START_OFFSET = 12;\nconst LIMIT = 12;\n\nconst Projects = ({\n  store\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER'\n    }, {\n      type: 'SELECT',\n      options: [].map(category => ({\n        value: category.id,\n        label: getLabelCategory(category.name)\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    handle: {\n      icon: 'work',\n      buttonCreateText: 'Создать проект',\n      onCreate: recall(onProjectCreate, {\n        canEditStatus,\n        mutation: queries.CREATE_PROJECT,\n        query: queries.GET_USERS\n      }),\n      onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n    },\n    limit: LIMIT,\n    startOffset: START_OFFSET,\n    bottomScrollOffset: 0,\n    query: queries.GET_PROJECTS,\n    variables: {\n      status: 'PUBLISHED'\n    },\n    store: {\n      documents: documents || store.projects\n    },\n    dashboard: true\n  }, ({\n    documents\n  }) => displayMethod === 'list' ? /*#__PURE__*/React.createElement(Table, {\n    data: documents,\n    template: templates.project,\n    onChecked: () => {},\n    onClick: project => recall(onProjectLink, {\n      id: project.id,\n      auth: user\n    })(),\n    onDelete: project => recall(onProjectDelete, {\n      id: project.id,\n      project,\n      auth: user,\n      mutation: queries.DELETE_PROJECT\n    })(),\n    onEdit: project => recall(onProjectEdit, {\n      id: project.id,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      })\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }) : /*#__PURE__*/React.createElement(Grid, null, documents.map(project => {\n    var _user$folders;\n\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: project.id\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(ProjectCard, {\n      project: project,\n      onChecked: () => {},\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })(),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        added: !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === project.id)))),\n        liked: !!(project.rating || []).find(item => item.email === (user === null || user === void 0 ? void 0 : user.email)),\n        onLike: user.email && mutate(queries.LIKE_PROJECT, {\n          id: project.id\n        }, response => dispatch(updateUser(response.data.likeProject))),\n        onAdd: user.email && recall(onProjectAdd, {\n          id: project.id,\n          folders: user === null || user === void 0 ? void 0 : user.folders,\n          mutations: {\n            addProject: queries.ADD_USER_PROJECT,\n            createFolder: queries.ADD_USER_FOLDER\n          },\n          callback: item => {\n            const result = { ...item,\n              projects: [...item.projects, project.id]\n            };\n            dispatch(setUserFolder(result));\n          }\n        })\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onDelete: recall(onProjectDelete, {\n        id: project.id,\n        project,\n        auth: user,\n        mutation: queries.DELETE_PROJECT\n      }),\n      onEdit: recall(onProjectEdit, {\n        id: project.id,\n        canEditStatus,\n        mutation: queries.UPDATE_PROJECT,\n        query: queries.GET_USERS,\n        onCompanyInputChange: mutate(queries.GET_USERS, {\n          account: 'ENTITY'\n        })\n      }),\n      withSocials: true,\n      preview: true\n    })));\n  })));\n};\n\n_s(Projects, \"rg1fjeEZnKoSgUaBgdOxxrHT1+I=\", false, function () {\n  return [useHelper, useMutate, useSelector, useDispatch];\n});\n\n_c = Projects;\nexport var __N_SSP = true;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/projects.js"],"names":["React","useState","useEffect","useMemo","useSelector","useDispatch","Grid","Table","templates","useHelper","useMutate","ContentLayout","ProjectCard","LazyLoad","FadeLoad","onProjectCreate","onProjectEdit","onProjectDelete","onProjectLink","onProjectAdd","onProjectScreenshot","setDocuments","getLabelCategory","setUserFolder","updateUser","onUserAboutMore","queries","TITLE","START_OFFSET","LIMIT","Projects","store","recall","mutate","user","documents","state","dispatch","displayMethod","onChangeDisplayMethod","canEditStatus","role","name","type","options","map","category","value","id","label","icon","buttonCreateText","onCreate","mutation","CREATE_PROJECT","query","GET_USERS","item","GET_PROJECTS","status","projects","project","auth","DELETE_PROJECT","UPDATE_PROJECT","onCompanyInputChange","account","overflowX","width","_","key","screenshots","preview","email","added","folders","find","folder","liked","rating","onLike","LIKE_PROJECT","response","data","likeProject","onAdd","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","callback","result"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Grid from '../../atomic-ui/components/Grid'\nimport Table from '../../atomic-ui/components/Table'\nimport templates from '../../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\nimport ContentLayout from '../../layouts/content'\nimport ProjectCard from '../../components/ProjectCard'\nimport LazyLoad from '../../components/LazyLoad'\nimport FadeLoad from '../../components/FadeLoad'\nimport {\n  onProjectCreate,\n  onProjectEdit,\n  onProjectDelete,\n  onProjectLink,\n  onProjectAdd,\n  onProjectScreenshot\n} from '../../store/helpers/project'\nimport { setDocuments } from '../../store/actions/documents'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\nimport { setUserFolder, updateUser } from '../../store/actions/user'\nimport { onUserAboutMore } from '../../store/helpers/user'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Проекты'\nconst START_OFFSET = 12\nconst LIMIT = 12\n\nconst Projects = ({ store }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    documents: state.documents\n  }))\n  const dispatch = useDispatch()\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      filters={[\n        { type: 'DATEPICKER' },\n        {\n          type: 'SELECT',\n          options: [].map((category) => ({\n            value: category.id,\n            label: getLabelCategory(category.name)\n          }))\n        }\n      ]}\n      options={[\n        { label: 'Компания', value: 'company' },\n        { label: 'Участники', value: 'members' },\n        { label: 'Дата публикации', value: 'createdAt' }\n      ]}\n      handle={{\n        icon: 'work',\n        buttonCreateText: 'Создать проект',\n        onCreate: recall(onProjectCreate, {\n          canEditStatus,\n          mutation: queries.CREATE_PROJECT,\n          query: queries.GET_USERS\n        }),\n        onChangeDisplayMethod: (item) => onChangeDisplayMethod(item.value)\n      }}\n      limit={LIMIT}\n      startOffset={START_OFFSET}\n      bottomScrollOffset={0}\n      query={queries.GET_PROJECTS}\n      variables={{ status: 'PUBLISHED' }}\n      store={{ documents: documents || store.projects }}\n      dashboard>\n      {({ documents }) =>\n        displayMethod === 'list' ? (\n          <Table\n            data={documents}\n            template={templates.project}\n            onChecked={() => {}}\n            onClick={(project) => recall(onProjectLink, { id: project.id, auth: user })()}\n            onDelete={(project) =>\n              recall(onProjectDelete, {\n                id: project.id,\n                project,\n                auth: user,\n                mutation: queries.DELETE_PROJECT\n              })()\n            }\n            onEdit={(project) =>\n              recall(onProjectEdit, {\n                id: project.id,\n                canEditStatus,\n                mutation: queries.UPDATE_PROJECT,\n                query: queries.GET_USERS,\n                onCompanyInputChange: mutate(queries.GET_USERS, { account: 'ENTITY' })\n              })()\n            }\n            style={{ overflowX: 'auto', width: 'calc(100vw - 290px)' }}\n          />\n        ) : (\n          <Grid>\n            {documents.map((project) => (\n              <FadeLoad key={project.id}>\n                <LazyLoad>\n                  <ProjectCard\n                    project={project}\n                    onChecked={() => {}}\n                    onScreenshotClick={(_, key) =>\n                      recall(onProjectScreenshot, {\n                        screenshots: [project.preview, ...project.screenshots],\n                        key\n                      })()\n                    }\n                    onLink={recall(onProjectLink, {\n                      id: project.id,\n                      auth: user?.email,\n                      added: !!user?.folders?.find(\n                        (folder) => !!folder?.projects.find((item) => item === project.id)\n                      ),\n                      liked: !!(project.rating || []).find((item) => item.email === user?.email),\n                      onLike:\n                        user.email &&\n                        mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                          dispatch(updateUser(response.data.likeProject))\n                        ),\n                      onAdd:\n                        user.email &&\n                        recall(onProjectAdd, {\n                          id: project.id,\n                          folders: user?.folders,\n                          mutations: {\n                            addProject: queries.ADD_USER_PROJECT,\n                            createFolder: queries.ADD_USER_FOLDER\n                          },\n                          callback: (item) => {\n                            const result = { ...item, projects: [...item.projects, project.id] }\n                            dispatch(setUserFolder(result))\n                          }\n                        })\n                    })}\n                    onAboutMore={recall(onUserAboutMore, { user: project })}\n                    onDelete={recall(onProjectDelete, {\n                      id: project.id,\n                      project,\n                      auth: user,\n                      mutation: queries.DELETE_PROJECT\n                    })}\n                    onEdit={recall(onProjectEdit, {\n                      id: project.id,\n                      canEditStatus,\n                      mutation: queries.UPDATE_PROJECT,\n                      query: queries.GET_USERS,\n                      onCompanyInputChange: mutate(queries.GET_USERS, { account: 'ENTITY' })\n                    })}\n                    withSocials\n                    preview\n                  />\n                </LazyLoad>\n              </FadeLoad>\n            ))}\n          </Grid>\n        )\n      }\n    </ContentLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let projects = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_PROJECTS,\n      variables: {\n        offset: 0,\n        limit: LIMIT\n      }\n    })\n\n    if (response && response.data) {\n      projects = response.data.getProjects\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        projects\n      }\n    }\n  }\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
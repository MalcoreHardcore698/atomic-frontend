{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Children, isValidElement, useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nexport const Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\nexport const TabList = styled.ul`\n  position: relative;\n  display: flex;\n  flex-flow: row nowrap;\n  background: linear-gradient(to top, rgba(0, 0, 0, 15%) 1px, transparent 1px) 0 100% no-repeat;\n  margin-bottom: 20px;\n`;\nexport const TabListItem = styled.li`\n  position: relative;\n  display: inline-flex;\n  margin-right: 40px;\n  padding-bottom: 12px;\n  font-family: var(--default-font-family);\n  font-weight: 500;\n  font-size: 0.875rem;\n  line-height: 1;\n  color: rgba(0, 0, 0, 75%);\n  border-bottom: 2px solid transparent;\n  cursor: pointer;\n  transition: color 0.2s;\n\n  &:last-child {\n    margin-right: 0;\n  }\n\n  &:hover {\n    color: black;\n  }\n\n  ${({\n  isActive\n}) => isActive && css`\n      color: var(--default-color-accent);\n      border-color: var(--default-color-accent);\n\n      &:hover {\n        color: var(--default-color-accent);\n      }\n    `}\n`;\nexport const TabPanel = styled.div`\n  flex: 1;\n  flex-direction: column;\n  display: ${({\n  isActive\n}) => isActive ? 'flex' : 'none'};\n`;\nexport const getKey = key => {\n  if (key === 'Right' || key === 'ArrowRight') {\n    return 'ArrowRight';\n  } else if (key === 'Left' || key === 'ArrowLeft') {\n    return 'ArrowLeft';\n  } else {\n    return key;\n  }\n};\nexport const direction = {\n  ArrowLeft: -1,\n  ArrowRight: 1\n};\nexport const Tab = ({\n  children\n}) => __jsx(React.Fragment, null, children);\nexport const Tabs = (_ref) => {\n  let {\n    active,\n    onActivate,\n    label: ariaLabel,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"active\", \"onActivate\", \"label\", \"children\"]);\n\n  const {\n    0: activeTab,\n    1: setActiveTab\n  } = useState(0);\n  const tabsCount = Children.count(children);\n  const tabs = [...new Array(tabsCount)].map(() => /*#__PURE__*/React.createRef());\n  const {\n    0: isFocus,\n    1: setFocus\n  } = useState(false);\n\n  const activateTab = (index, focus = true) => {\n    if (activeTab === index) return;\n    if (onActivate) onActivate(index);\n    setActiveTab(index);\n    setFocus(focus);\n  };\n\n  const activateFirstTab = () => {\n    activateTab(0);\n  };\n\n  const activateLastTab = () => {\n    activateTab(tabs.length - 1);\n  };\n\n  const switchTab = (index, e) => {\n    const key = getKey(e.key);\n\n    if (tabs[index + direction[key]]) {\n      activateTab(index + direction[key]);\n    } else if (key === 'ArrowLeft') {\n      activateLastTab();\n    } else if (key === 'ArrowRight') {\n      activateFirstTab();\n    }\n  };\n\n  const handleClick = index => () => {\n    activateTab(index);\n  };\n\n  const handleKeyDown = index => e => {\n    const key = getKey(e.key);\n\n    if (key === 'ArrowLeft' || key === 'ArrowRight') {\n      switchTab(index, e);\n    } else if (key === 'Home') {\n      e.preventDefault();\n      activateFirstTab();\n    } else if (key === 'End') {\n      e.preventDefault();\n      activateLastTab();\n    }\n  };\n\n  useEffect(() => {\n    if (active === undefined) return;\n\n    if (active !== activeTab) {\n      activateTab(active, false);\n    }\n  }, [active]);\n  useEffect(() => {\n    if (isFocus) {\n      tabs[activeTab].current.focus();\n      setFocus(false);\n    }\n  }, [isFocus]);\n  return __jsx(Container, props, __jsx(TabList, {\n    role: 'tablist',\n    \"aria-label\": ariaLabel\n  }, Children.map(children, (child, index) => {\n    const isActive = index === activeTab;\n\n    if ( /*#__PURE__*/isValidElement(child)) {\n      const {\n        label,\n        count\n      } = child.props;\n      return __jsx(TabListItem, {\n        ref: tabs[index],\n        key: `tab-${v4()}`,\n        id: `tab-${v4()}`,\n        role: \"tab\",\n        \"aria-controls\": `panel-${v4()}`,\n        \"aria-selected\": isActive,\n        tabIndex: isActive ? 0 : undefined,\n        isActive: isActive,\n        onClick: handleClick(index),\n        onKeyDown: handleKeyDown(index)\n      }, label, count !== undefined && count > 0 && ` (${count})`);\n    }\n\n    return null;\n  })), Children.map(children, (child, index) => {\n    const isActive = index === activeTab;\n\n    if ( /*#__PURE__*/isValidElement(child)) {\n      return __jsx(TabPanel, {\n        key: `tabpanel-${v4()}`,\n        id: `tabpanel-${v4()}`,\n        role: \"tabpanel\",\n        \"aria-labelledby\": `tab-${v4()}`,\n        isActive: isActive\n      }, child);\n    }\n\n    return null;\n  }));\n};\nexport default Tabs;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { Controller } from 'react-hook-form';\nimport { useSelector } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport TextEditor from '../../atomic-ui/components/TextEditor';\nimport Dropzone from '../../atomic-ui/components/Dropzone';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Comment from '../../atomic-ui/components/Comment';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport { getLabelStatus, getLabelCategory } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nimport { Loader } from '../Styled';\nimport queries from '../../graphql/queries';\nimport config from '../../config';\nexport const Header = styled(Row).withConfig({\n  displayName: \"FormArticle__Header\",\n  componentId: \"sc-1ftxonu-0\"\n})([\"justify-content:space-between;@media only screen and (max-width:480px){flex-direction:column;align-items:end;grid-gap:var(--default-gap);}\"]);\nexport const Comments = ({\n  article,\n  setValue\n}) => {\n  const [comments, setComments] = useState([]);\n  const user = useSelector(state => state.user);\n  const [checkedAll, setCheckedAll] = useState(false);\n  const {\n    data: dataComments,\n    loading: loadingComments\n  } = article ? useQuery(queries.GET_COMMENTS, {\n    variables: {\n      id: article\n    }\n  }) : {\n    data: [],\n    loading: false\n  };\n\n  const handleCheckedComments = e => {\n    setCheckedAll(e.target.checked);\n    setComments(prev => prev.map(item => ({ ...item,\n      checked: !item.checked\n    })));\n  };\n\n  const handleCheckedComment = (message, value) => {\n    setComments(prev => prev.map(item => item.id === message.id ? { ...item,\n      checked: value\n    } : item));\n  };\n\n  const handleDeleteChecked = () => {\n    setComments(prev => prev.filter(message => !message.checked));\n  };\n\n  const handleCommentEdit = (message, text) => {\n    setComments(prev => prev.map(item => item.id === message.id ? { ...item,\n      updatedAt: new Date(),\n      text\n    } : item));\n  };\n\n  const handleCommentDelete = message => {\n    setComments(prev => prev.filter(item => item.id !== message.id));\n  };\n\n  useEffect(() => {\n    if (article && !loadingComments && dataComments) {\n      setComments(dataComments.getComments.map(comment => ({ ...comment,\n        checked: false\n      })));\n    }\n  }, [article, dataComments, loadingComments]);\n  useEffect(() => {\n    setValue('comments', comments);\n  }, [comments]);\n\n  if (!article || comments.length === 0) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Checkbox, {\n    label: 'Выделить все',\n    checked: checkedAll,\n    onChange: handleCheckedComments\n  }), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      color: 'var(--default-color-red)'\n    },\n    appearance: 'clear',\n    onClick: handleDeleteChecked\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0432\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u043E\\u0435\")), /*#__PURE__*/React.createElement(Column, {\n    style: {\n      gridGap: 5\n    }\n  }, comments.map(comment => {\n    var _comment$likes;\n\n    return /*#__PURE__*/React.createElement(Comment, {\n      key: `${comment.id}_${comment.checked}`,\n      user: comment.author,\n      message: comment.text,\n      likes: (_comment$likes = comment.likes) === null || _comment$likes === void 0 ? void 0 : _comment$likes.length,\n      time: comment.createdAt !== comment.updatedAt ? comment.updatedAt : comment.createdAt,\n      isLiked: comment.likes.find(likedUser => likedUser.email === user.email),\n      isChecked: comment.checked,\n      isUpdated: comment.createdAt !== comment.updatedAt,\n      onChecked: value => handleCheckedComment(comment, value),\n      onEdit: text => handleCommentEdit(comment, text),\n      onDelete: () => handleCommentDelete(comment),\n      compact: true\n    });\n  })));\n};\nexport const Article = ({\n  article,\n  mutation,\n  appearance,\n  className,\n  canEditStatus,\n  onSubmit,\n  isPurpose\n}) => {\n  const {\n    data,\n    loading: loadingArticle,\n    error: errorArticle\n  } = article ? useQuery(queries.GET_ARTICLE, {\n    variables: {\n      id: article\n    }\n  }) : {\n    data: {\n      getArticle: {}\n    },\n    loading: false,\n    error: false\n  };\n  const {\n    data: dataCategories,\n    loading: loadingCategories\n  } = useQuery(queries.GET_CATEGORIES);\n  const {\n    data: dataStatuses,\n    loading: loadingStatuses\n  } = useQuery(queries.GET_POST_STATUSES);\n  const [categories, setCategories] = useState([]);\n  const [statuses, setStatuses] = useState([]);\n  useEffect(() => {\n    if (!loadingCategories && dataCategories) {\n      setCategories(dataCategories.getCategories);\n    }\n  }, [loadingCategories, dataCategories]);\n  useEffect(() => {\n    if (!loadingStatuses && dataStatuses) {\n      setStatuses(dataStatuses.getPostStatus);\n    }\n  }, [loadingStatuses, dataStatuses]);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: onSubmit\n  }, ({\n    register,\n    loading,\n    errors,\n    control,\n    getValues,\n    setValue\n  }) => {\n    var _data$getArticle, _data$getArticle2, _data$getArticle3, _data$getArticle4, _data$getArticle5;\n\n    return !loadingArticle && data ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.preview && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043F\\u0440\\u0435\\u0432\\u044C\\u044E\"), /*#__PURE__*/React.createElement(Controller, {\n      name: 'preview',\n      control: control,\n      rules: {\n        required: true\n      },\n      defaultValue: ((_data$getArticle = data.getArticle) === null || _data$getArticle === void 0 ? void 0 : _data$getArticle.preview) || null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Dropzone, {\n        accept: 'image/*',\n        defaultValue: value,\n        onChange: onChange,\n        placeholder: 'Перетащите сюда изображение для превью',\n        tooltip: 'Разрешение: 960x480px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB'\n      })\n    }), errors && errors.title && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0437\\u0430\\u0433\\u043E\\u043B\\u043E\\u0432\\u043E\\u043A \\u0441\\u0442\\u0430\\u0442\\u044C\\u0438\"), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'title',\n      ref: register({\n        required: true\n      }),\n      defaultValue: getValues('title') || ((_data$getArticle2 = data.getArticle) === null || _data$getArticle2 === void 0 ? void 0 : _data$getArticle2.title),\n      placeholder: 'Название',\n      appearance: 'ghost',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Controller, {\n      name: 'category',\n      control: control,\n      defaultValue: (_data$getArticle3 = data.getArticle) !== null && _data$getArticle3 !== void 0 && _data$getArticle3.category ? {\n        value: data.getArticle.category.id,\n        label: getLabelCategory(data.getArticle.category.name)\n      } : null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        appearance: 'ghost',\n        placeholder: 'Выберите раздел',\n        options: categories.filter(item => item.type === 'DIVISION').map(item => ({\n          value: item.id,\n          label: getLabelCategory(item.name)\n        })),\n        onChange: onChange,\n        defaultValue: value,\n        isLoading: loading || loadingCategories,\n        isClearable: true\n      })\n    }), errors && errors.body && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u043D\\u0438\\u0435 \\u0441\\u0442\\u0430\\u0442\\u044C\\u0438\"), /*#__PURE__*/React.createElement(Controller, {\n      name: 'body',\n      control: control,\n      defaultValue: getValues('body') || ((_data$getArticle4 = data.getArticle) === null || _data$getArticle4 === void 0 ? void 0 : _data$getArticle4.body) || null,\n      rules: {\n        required: true\n      },\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(TextEditor, {\n        apiKey: config.get('tiny-key'),\n        appearance: 'ghost',\n        defaultValue: value,\n        onChange: onChange\n      })\n    }), /*#__PURE__*/React.createElement(Comments, {\n      article: article,\n      setValue: setValue\n    }), canEditStatus && /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), canEditStatus && /*#__PURE__*/React.createElement(Controller, {\n      name: 'status',\n      control: control,\n      defaultValue: (_data$getArticle5 = data.getArticle) !== null && _data$getArticle5 !== void 0 && _data$getArticle5.status ? {\n        value: data.getArticle.status,\n        label: getLabelStatus(data.getArticle.status)\n      } : null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        appearance: 'ghost',\n        placeholder: 'Выберите статус',\n        options: statuses.map(item => ({\n          value: item,\n          label: getLabelStatus(item)\n        })),\n        onChange: onChange,\n        defaultValue: value,\n        menuPlacement: 'top',\n        isLoading: loading || loadingStatuses,\n        isClearable: true\n      })\n    })), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: loading\n    }, isPurpose ? 'Предложить' : article ? 'Сохранить' : 'Создать'))) : errorArticle ? /*#__PURE__*/React.createElement(Alert, {\n      appearance: 'error',\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      }\n    }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0441\\u0442\\u0430\\u0442\\u044C\\u0435\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  });\n};\nexport default Article;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport ProjectCard from '../../components/ProjectCard';\nimport { onProjectCreate, onProjectEdit, onProjectDelete, onProjectLink, onProjectScreenshot } from '../../store/helpers/project';\nimport { setDocuments } from '../../store/actions/documents';\nimport { onUserAboutMore } from '../../store/helpers/user';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\n\nconst Projects = ({\n  store,\n  companies,\n  categories,\n  statuses\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    members: state.root.members,\n    files: state.root.files,\n    screenshots: state.root.screenshots,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  const projects = useMemo(() => documents || store.projects, [documents, store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'work',\n    title: TITLE,\n    buttonCreateText: 'Создать проект',\n    onCreate: recall(onProjectCreate, {\n      companies,\n      categories,\n      statuses,\n      canEditStatus,\n      mutation: queries.CREATE_PROJECT,\n      query: queries.GET_USERS\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: displayMethod === 'list' ? [] : templates.project.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), projects.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: projects,\n    template: templates.project,\n    onChecked: () => {},\n    onClick: project => recall(onProjectLink, {\n      id: project.id,\n      auth: user\n    })(),\n    onDelete: project => recall(onProjectDelete, {\n      id: project.id,\n      project,\n      auth: user,\n      mutation: queries.DELETE_PROJECT\n    })(),\n    onEdit: project => recall(onProjectEdit, {\n      id: project.id,\n      companies,\n      categories,\n      statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      })\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, projects.map(project => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: project.id,\n    project: project,\n    onChecked: () => {},\n    onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n      screenshots: [project.preview, ...project.screenshots],\n      key\n    })(),\n    onLink: recall(onProjectLink, {\n      id: project.id,\n      user\n    }),\n    onAboutMore: recall(onUserAboutMore, {\n      user: project\n    }),\n    onDelete: recall(onProjectDelete, {\n      id: project.id,\n      project,\n      auth: user,\n      mutation: queries.DELETE_PROJECT\n    }),\n    onEdit: recall(onProjectEdit, {\n      id: project.id,\n      companies,\n      categories,\n      statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      })\n    }),\n    preview: true\n  }))));\n};\n\n_s(Projects, \"Bmxswaq+jB1vQlYmjGsn8lQ7904=\", false, function () {\n  return [useHelper, useMutate, useSelector, useDispatch];\n});\n\n_c = Projects;\nexport var __N_SSP = true;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/projects.js"],"names":["React","useState","useEffect","useMemo","useSelector","useDispatch","Grid","Alert","DatePicker","Select","Table","templates","useHelper","useMutate","DashboardLayout","HandleBar","FilterBar","ProjectCard","onProjectCreate","onProjectEdit","onProjectDelete","onProjectLink","onProjectScreenshot","setDocuments","onUserAboutMore","queries","TITLE","Projects","store","companies","categories","statuses","recall","mutate","user","documents","state","members","root","files","screenshots","dispatch","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","displayMethod","onChangeDisplayMethod","canEditStatus","role","name","projects","mutation","CREATE_PROJECT","query","GET_USERS","item","value","project","map","index","label","header","length","width","textAlign","id","auth","DELETE_PROJECT","UPDATE_PROJECT","onCompanyInputChange","account","overflowX","_","key","preview"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Grid from '../../atomic-ui/components/Grid'\nimport Alert from '../../atomic-ui/components/Alert'\nimport DatePicker from '../../atomic-ui/components/DatePicker'\nimport Select from '../../atomic-ui/components/Select'\nimport Table from '../../atomic-ui/components/Table'\nimport templates from '../../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\nimport DashboardLayout from '../../layouts/dashboard'\nimport HandleBar from '../../components/HandleBar'\nimport FilterBar from '../../components/FilterBar'\nimport ProjectCard from '../../components/ProjectCard'\nimport {\n  onProjectCreate,\n  onProjectEdit,\n  onProjectDelete,\n  onProjectLink,\n  onProjectScreenshot\n} from '../../store/helpers/project'\nimport { setDocuments } from '../../store/actions/documents'\nimport { onUserAboutMore } from '../../store/helpers/user'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Проекты'\n\nconst Projects = ({ store, companies, categories, statuses }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    members: state.root.members,\n    files: state.root.files,\n    screenshots: state.root.screenshots,\n    documents: state.documents\n  }))\n  const dispatch = useDispatch()\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  const projects = useMemo(() => documents || store.projects, [documents, store])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <HandleBar\n        icon={'work'}\n        title={TITLE}\n        buttonCreateText={'Создать проект'}\n        onCreate={recall(onProjectCreate, {\n          companies,\n          categories,\n          statuses,\n          canEditStatus,\n          mutation: queries.CREATE_PROJECT,\n          query: queries.GET_USERS\n        })}\n        onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n        onChangeDisplayMethod={(item) => onChangeDisplayMethod(item.value)}\n      />\n\n      <FilterBar\n        isOpen={visibleFilter}\n        filters={[\n          <DatePicker\n            key={0}\n            value={date}\n            placeholder={'Дата публикации'}\n            onChange={onChangeDate}\n            withNavigate\n          />,\n          <Select\n            key={1}\n            options={categories}\n            placeholder={'Раздел'}\n            selected={select}\n            onChange={(item) => onChangeSelect(item)}\n          />\n        ]}\n        options={\n          displayMethod === 'list'\n            ? []\n            : templates.project.map((item, index) => ({\n                label: item.header,\n                value: index\n              }))\n        }\n      />\n\n      {projects.length === 0 && (\n        <Alert style={{ width: '100%', textAlign: 'center' }}>Проектов нет</Alert>\n      )}\n\n      {displayMethod === 'list' && (\n        <Table\n          data={projects}\n          template={templates.project}\n          onChecked={() => {}}\n          onClick={(project) => recall(onProjectLink, { id: project.id, auth: user })()}\n          onDelete={(project) =>\n            recall(onProjectDelete, {\n              id: project.id,\n              project,\n              auth: user,\n              mutation: queries.DELETE_PROJECT\n            })()\n          }\n          onEdit={(project) =>\n            recall(onProjectEdit, {\n              id: project.id,\n              companies,\n              categories,\n              statuses,\n              canEditStatus,\n              mutation: queries.UPDATE_PROJECT,\n              query: queries.GET_USERS,\n              onCompanyInputChange: mutate(queries.GET_USERS, { account: 'ENTITY' })\n            })()\n          }\n          style={{ overflowX: 'auto', width: 'calc(100vw - 290px)' }}\n        />\n      )}\n\n      {displayMethod === 'grid' && (\n        <Grid>\n          {projects.map((project) => (\n            <ProjectCard\n              key={project.id}\n              project={project}\n              onChecked={() => {}}\n              onScreenshotClick={(_, key) =>\n                recall(onProjectScreenshot, {\n                  screenshots: [project.preview, ...project.screenshots],\n                  key\n                })()\n              }\n              onLink={recall(onProjectLink, { id: project.id, user })}\n              onAboutMore={recall(onUserAboutMore, { user: project })}\n              onDelete={recall(onProjectDelete, {\n                id: project.id,\n                project,\n                auth: user,\n                mutation: queries.DELETE_PROJECT\n              })}\n              onEdit={recall(onProjectEdit, {\n                id: project.id,\n                companies,\n                categories,\n                statuses,\n                canEditStatus,\n                mutation: queries.UPDATE_PROJECT,\n                query: queries.GET_USERS,\n                onCompanyInputChange: mutate(queries.GET_USERS, { account: 'ENTITY' })\n              })}\n              preview\n            />\n          ))}\n        </Grid>\n      )}\n    </DashboardLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let projects = []\n  let companies = []\n  let categories = []\n  let statuses = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_PROJECTS,\n      variables: {\n        account: ['ENTITY']\n      }\n    })\n\n    if (response && response.data) {\n      projects = response.data.getProjects\n      companies = response.data.getUsers\n      categories = response.data.getCategories\n      statuses = response.data.getPostStatus\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { projects },\n      companies,\n      categories,\n      statuses\n    }\n  }\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
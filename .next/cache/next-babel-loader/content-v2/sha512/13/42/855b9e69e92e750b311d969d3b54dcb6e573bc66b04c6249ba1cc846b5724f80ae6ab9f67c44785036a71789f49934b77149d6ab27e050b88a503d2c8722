{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport AsyncSelect, { components } from 'react-select';\nexport const Wrap = styled.div`\n  min-width: 128px;\n`;\nconst surface = {\n  background: 'white',\n  border: 'var(--surface-border)',\n  boxShadow: 'var(--surface-shadow)',\n  borderRadius: 'var(--surface-border-radius)'\n};\nconst ghost = {\n  background: 'var(--input-background)',\n  border: 'none',\n  boxShadow: 'none',\n  borderRadius: 'var(--surface-border-radius)'\n};\nconst font = {\n  fontSize: 'var(--font-size-m)',\n  fontWeight: 'var(--font-weight-regular)',\n  fontFamily: 'var(--font-family)'\n};\nexport const Menu = props => {\n  return __jsx(\"div\", {\n    className: \"ui-select-menu\"\n  }, __jsx(components.Menu, props, props.children));\n};\nexport const Select = (_ref) => {\n  let {\n    appearance,\n    className,\n    style\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"appearance\", \"className\", \"style\"]);\n\n  return __jsx(Wrap, {\n    className: className,\n    style: style\n  }, __jsx(AsyncSelect, _extends({}, props, {\n    styles: {\n      control: (provided, state) => _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, provided), appearance === 'ghost' ? ghost : surface), font), {}, {\n        minHeight: '38px',\n        padding: '0 5px',\n        color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-color)' : 'var(--ghost-color-text)',\n        cursor: 'pointer',\n        transition: 'all 150ms ease'\n      }),\n      valueContainer: provided => _objectSpread(_objectSpread({}, provided), {}, {\n        padding: '5px'\n      }),\n      singleValue: (provided, state) => _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, provided), appearance === 'ghost' ? ghost : surface), font), {}, {\n        color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-color)' : 'var(--ghost-color-text)',\n        transition: 'all 150ms ease'\n      }),\n      placeholder: (provided, state) => _objectSpread(_objectSpread({}, provided), {}, {\n        color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-placeholder-color)' : 'var(--ghost-color-text)',\n        transition: 'all 150ms ease'\n      }),\n      menu: provided => _objectSpread(_objectSpread(_objectSpread({}, provided), surface), {}, {\n        boxShadow: 'var(--default-shadow)',\n        zIndex: 'var(--z-102)'\n      }, font),\n      option: (provided, state) => _objectSpread(_objectSpread(_objectSpread({}, provided), font), {}, {\n        color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-color)' : 'rgba(0, 0, 0, 75%)',\n        background: 'none !important',\n        cursor: 'pointer',\n        transition: 'all 150ms ease'\n      }),\n      multiValue: provided => _objectSpread(_objectSpread({}, provided), {}, {\n        borderRadius: '5px',\n        background: 'var(--default-color-accent)',\n        color: 'white'\n      }),\n      multiValueLabel: provided => _objectSpread(_objectSpread(_objectSpread({}, provided), font), {}, {\n        color: 'white',\n        fontSize: 'var(--font-size-xs)'\n      })\n    },\n    components: {\n      Menu\n    }\n  })));\n};\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}
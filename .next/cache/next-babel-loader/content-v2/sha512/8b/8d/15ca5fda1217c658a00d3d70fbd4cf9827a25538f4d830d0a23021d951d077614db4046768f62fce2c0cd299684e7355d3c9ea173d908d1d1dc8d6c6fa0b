{"ast":null,"code":"import React from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Alert from '../atomic-ui/components/Alert';\nimport Title from '../atomic-ui/components/Title';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport { useMutate } from '../hooks/useMutate';\nimport DefaultLayout from '../layouts/default';\nimport ProjectCard from '../components/ProjectCard';\nimport ArticleCard from '../components/ArticleCard';\nimport UserCard from '../components/UserCard';\nimport { updateUser } from '../store/actions/user';\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project';\nimport { onArticleLink } from '../store/helpers/article';\nimport { onUserLink } from '../store/helpers/user';\nimport { onChat } from '../store/helpers';\nimport queries from '../graphql/queries';\nconst TITLE = 'Атомик';\nconst Container = styled.div.withConfig({\n  displayName: \"pages__Container\",\n  componentId: \"sc-1kp8388-0\"\n})([\"display:grid;grid-template-columns:1fr min-content;grid-gap:var(--default-gap);margin-bottom:80px;@media only screen and (max-width:1196px){grid-template-columns:1fr;}\"]);\nconst Projects = styled.aside.withConfig({\n  displayName: \"pages__Projects\",\n  componentId: \"sc-1kp8388-1\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);grid-auto-rows:max-content;@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\nconst Aside = styled.aside.withConfig({\n  displayName: \"pages__Aside\",\n  componentId: \"sc-1kp8388-2\"\n})([\"display:flex;flex-direction:column;grid-gap:var(--default-gap);width:394px;@media only screen and (max-width:1196px){width:auto;}\"]);\n\nconst Home = ({\n  store\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    projects,\n    articles,\n    users\n  } = store;\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: TITLE,\n    scaffold: {\n      title: 'Создавай школу будущего с нами',\n      background: '/images/main-background.png',\n      primary: projects.length > 0 && projects[0],\n      residue: projects.length > 4 && projects.slice(1, 3),\n      onLink: (project, owned) => recall(onProjectLink, {\n        id: project.id,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        project,\n        liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n        onLike: user.email && mutate(queries.LIKE_PROJECT, {\n          id: project.id\n        }, response => dispatch(updateUser(response.data.likeProject))),\n        onAdd: user.email && recall(onProjectAdd, {\n          id: project.id,\n          project,\n          folders: user === null || user === void 0 ? void 0 : user.folders,\n          mutations: {\n            addProject: queries.ADD_USER_PROJECT,\n            createFolder: queries.ADD_USER_FOLDER\n          }\n        }),\n        owned\n      })(),\n      onLike: user.email && (project => mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject)))()),\n      onAdd: user.email && (project => recall(onProjectAdd, {\n        id: project.id,\n        project,\n        folders: user === null || user === void 0 ? void 0 : user.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        }\n      })()),\n      onCompanyLink: project => {\n        var _project$company;\n\n        return recall(onUserLink, {\n          id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n          auth: user\n        })();\n      },\n      onScreenshotClick: (project, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    }\n  }, /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Projects, null, projects.length > 0 ? projects.map(project => {\n    var _user$projects, _user$folders, _project$company2;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    return /*#__PURE__*/React.createElement(ProjectCard, {\n      key: project.id,\n      project: project,\n      owned: owned,\n      added: !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item.id === project.id)))),\n      liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n        onLike: user.email && mutate(queries.LIKE_PROJECT, {\n          id: project.id\n        }, response => dispatch(updateUser(response.data.likeProject))),\n        onAdd: user.email && recall(onProjectAdd, {\n          id: project.id,\n          project,\n          folders: user === null || user === void 0 ? void 0 : user.folders,\n          mutations: {\n            addProject: queries.ADD_USER_PROJECT,\n            createFolder: queries.ADD_USER_FOLDER\n          }\n        }),\n        owned\n      }),\n      onLike: user.email && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onAdd: user.email && recall(onProjectAdd, {\n        id: project.id,\n        project,\n        folders: user === null || user === void 0 ? void 0 : user.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        }\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company2 = project.company) === null || _project$company2 === void 0 ? void 0 : _project$company2.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    });\n  }) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\")), /*#__PURE__*/React.createElement(Aside, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u044B\"), users.length > 0 ? users.slice(0, 3).map(author => {\n    var _author$company;\n\n    const owned = author.name === (user === null || user === void 0 ? void 0 : user.name);\n    return /*#__PURE__*/React.createElement(UserCard, {\n      key: author.email,\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        email: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })\n    });\n  }) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432 \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0438\"), articles.length > 0 ? articles.slice(0, 2).map(article => {\n    var _user$articles;\n\n    return /*#__PURE__*/React.createElement(ArticleCard, {\n      key: article.id,\n      layout: 'column',\n      article: article,\n      owned: user === null || user === void 0 ? void 0 : (_user$articles = user.articles) === null || _user$articles === void 0 ? void 0 : _user$articles.find(candidate => candidate.id === article.id),\n      onLink: recall(onArticleLink, {\n        id: article.id,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      })\n    });\n  }) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0435\\u0439 \\u043D\\u0435\\u0442\"))));\n};\n\nexport const getServerSideProps = async () => {\n  const client = initializeApollo();\n  let projects = [];\n  let articles = [];\n  let users = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_INDEX,\n      variables: {\n        status: 'PUBLISHED'\n      }\n    });\n\n    if (response && response.data) {\n      projects = response.data.getProjects;\n      articles = response.data.getArticles;\n      users = response.data.getUsers;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        projects,\n        articles,\n        users\n      }\n    }\n  };\n};\nexport default Home;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/index.js"],"names":["React","styled","useSelector","useDispatch","Alert","Title","initializeApollo","useHelper","useMutate","DefaultLayout","ProjectCard","ArticleCard","UserCard","updateUser","onProjectLink","onProjectAdd","onProjectScreenshot","onArticleLink","onUserLink","onChat","queries","TITLE","Container","div","Projects","aside","Aside","Home","store","recall","mutate","user","state","dispatch","projects","articles","users","title","background","primary","length","residue","slice","onLink","project","owned","id","auth","email","liked","likedProjects","find","item","onLike","LIKE_PROJECT","response","data","likeProject","onAdd","folders","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","onCompanyLink","company","onScreenshotClick","key","screenshots","preview","map","candidate","folder","recipient","author","query","GET_USER_CHATS","mutation","SEND_MESSAGE","_","width","textAlign","name","userChats","chat","GET_CHAT","addUserChat","ADD_USER_CHAT","sendMessage","article","getServerSideProps","client","GET_META_INDEX","variables","status","getProjects","getArticles","getUsers","err","console","log","props"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Alert from '../atomic-ui/components/Alert'\nimport Title from '../atomic-ui/components/Title'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport { useMutate } from '../hooks/useMutate'\nimport DefaultLayout from '../layouts/default'\nimport ProjectCard from '../components/ProjectCard'\nimport ArticleCard from '../components/ArticleCard'\nimport UserCard from '../components/UserCard'\nimport { updateUser } from '../store/actions/user'\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project'\nimport { onArticleLink } from '../store/helpers/article'\nimport { onUserLink } from '../store/helpers/user'\nimport { onChat } from '../store/helpers'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Атомик'\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr min-content;\n  grid-gap: var(--default-gap);\n  margin-bottom: 80px;\n\n  @media only screen and (max-width: 1196px) {\n    grid-template-columns: 1fr;\n  }\n`\n\nconst Projects = styled.aside`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n  grid-auto-rows: max-content;\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nconst Aside = styled.aside`\n  display: flex;\n  flex-direction: column;\n  grid-gap: var(--default-gap);\n  width: 394px;\n\n  @media only screen and (max-width: 1196px) {\n    width: auto;\n  }\n`\n\nconst Home = ({ store }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n  const { projects, articles, users } = store\n\n  return (\n    <DefaultLayout\n      title={TITLE}\n      scaffold={{\n        title: 'Создавай школу будущего с нами',\n        background: '/images/main-background.png',\n        primary: projects.length > 0 && projects[0],\n        residue: projects.length > 4 && projects.slice(1, 3),\n        onLink: (project, owned) =>\n          recall(onProjectLink, {\n            id: project.id,\n            auth: user?.email,\n            project,\n            liked: !!(user?.likedProjects || []).find((item) => item.id === project.id),\n            onLike:\n              user.email &&\n              mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                dispatch(updateUser(response.data.likeProject))\n              ),\n            onAdd:\n              user.email &&\n              recall(onProjectAdd, {\n                id: project.id,\n                project,\n                folders: user?.folders,\n                mutations: {\n                  addProject: queries.ADD_USER_PROJECT,\n                  createFolder: queries.ADD_USER_FOLDER\n                }\n              }),\n            owned\n          })(),\n        onLike:\n          user.email &&\n          ((project) =>\n            mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n              dispatch(updateUser(response.data.likeProject))\n            )()),\n        onAdd:\n          user.email &&\n          ((project) =>\n            recall(onProjectAdd, {\n              id: project.id,\n              project,\n              folders: user?.folders,\n              mutations: {\n                addProject: queries.ADD_USER_PROJECT,\n                createFolder: queries.ADD_USER_FOLDER\n              }\n            })()),\n        onCompanyLink: (project) =>\n          recall(onUserLink, { id: project.company?.email, auth: user })(),\n        onScreenshotClick: (project, key) =>\n          recall(onProjectScreenshot, {\n            screenshots: [project.preview, ...project.screenshots],\n            key\n          })()\n      }}>\n      <Container>\n        <Projects>\n          {projects.length > 0 ? (\n            projects.map((project) => {\n              const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n\n              return (\n                <ProjectCard\n                  key={project.id}\n                  project={project}\n                  owned={owned}\n                  added={\n                    !!user?.folders?.find(\n                      (folder) => !!folder?.projects.find((item) => item.id === project.id)\n                    )\n                  }\n                  liked={!!(user?.likedProjects || []).find((item) => item.id === project.id)}\n                  onLink={recall(onProjectLink, {\n                    id: project.id,\n                    auth: user?.email,\n                    liked: !!(user?.likedProjects || []).find((item) => item.id === project.id),\n                    onLike:\n                      user.email &&\n                      mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                        dispatch(updateUser(response.data.likeProject))\n                      ),\n                    onAdd:\n                      user.email &&\n                      recall(onProjectAdd, {\n                        id: project.id,\n                        project,\n                        folders: user?.folders,\n                        mutations: {\n                          addProject: queries.ADD_USER_PROJECT,\n                          createFolder: queries.ADD_USER_FOLDER\n                        }\n                      }),\n                    owned\n                  })}\n                  onLike={\n                    user.email &&\n                    mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                      dispatch(updateUser(response.data.likeProject))\n                    )\n                  }\n                  onAdd={\n                    user.email &&\n                    recall(onProjectAdd, {\n                      id: project.id,\n                      project,\n                      folders: user?.folders,\n                      mutations: {\n                        addProject: queries.ADD_USER_PROJECT,\n                        createFolder: queries.ADD_USER_FOLDER\n                      }\n                    })\n                  }\n                  onCompanyLink={recall(onUserLink, {\n                    id: project.company?.email,\n                    auth: user?.email,\n                    recipient: project.author,\n                    query: queries.GET_USER_CHATS,\n                    mutation: queries.SEND_MESSAGE\n                  })}\n                  onScreenshotClick={(_, key) =>\n                    recall(onProjectScreenshot, {\n                      screenshots: [project.preview, ...project.screenshots],\n                      key\n                    })()\n                  }\n                />\n              )\n            })\n          ) : (\n            <Alert style={{ width: '100%', textAlign: 'center' }}>Проектов нет</Alert>\n          )}\n        </Projects>\n\n        <Aside>\n          <Title tag={'h4'}>Авторы</Title>\n          {users.length > 0 ? (\n            users.slice(0, 3).map((author) => {\n              const owned = author.name === user?.name\n\n              return (\n                <UserCard\n                  key={author.email}\n                  user={author}\n                  owned={owned}\n                  onChat={\n                    user.email &&\n                    recall(onChat, {\n                      email: author.email,\n                      auth: user?.email,\n                      queries: {\n                        userChats: queries.GET_USER_CHATS,\n                        chat: queries.GET_CHAT\n                      },\n                      mutations: {\n                        addUserChat: queries.ADD_USER_CHAT,\n                        sendMessage: queries.SEND_MESSAGE\n                      }\n                    })\n                  }\n                  onLink={recall(onUserLink, {\n                    id: author.email,\n                    auth: user?.email,\n                    owned,\n                    queries: {\n                      userChats: queries.GET_USER_CHATS,\n                      chat: queries.GET_CHAT\n                    },\n                    mutations: {\n                      addUserChat: queries.ADD_USER_CHAT,\n                      sendMessage: queries.SEND_MESSAGE\n                    }\n                  })}\n                  onCompanyLink={recall(onUserLink, {\n                    id: author.company?.email,\n                    auth: user?.email,\n                    queries: {\n                      userChats: queries.GET_USER_CHATS,\n                      chat: queries.GET_CHAT\n                    },\n                    mutations: {\n                      addUserChat: queries.ADD_USER_CHAT,\n                      sendMessage: queries.SEND_MESSAGE\n                    }\n                  })}\n                />\n              )\n            })\n          ) : (\n            <Alert style={{ width: '100%', textAlign: 'center' }}>Авторов нет</Alert>\n          )}\n\n          <Title tag={'h4'}>Новости</Title>\n          {articles.length > 0 ? (\n            articles\n              .slice(0, 2)\n              .map((article) => (\n                <ArticleCard\n                  key={article.id}\n                  layout={'column'}\n                  article={article}\n                  owned={user?.articles?.find((candidate) => candidate.id === article.id)}\n                  onLink={recall(onArticleLink, { id: article.id, auth: user?.email })}\n                />\n              ))\n          ) : (\n            <Alert style={{ width: '100%', textAlign: 'center' }}>Новостей нет</Alert>\n          )}\n        </Aside>\n      </Container>\n    </DefaultLayout>\n  )\n}\n\nexport const getServerSideProps = async () => {\n  const client = initializeApollo()\n\n  let projects = []\n  let articles = []\n  let users = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_INDEX,\n      variables: {\n        status: 'PUBLISHED'\n      }\n    })\n\n    if (response && response.data) {\n      projects = response.data.getProjects\n      articles = response.data.getArticles\n      users = response.data.getUsers\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        projects,\n        articles,\n        users\n      }\n    }\n  }\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport Column from '../atomic-ui/components/Column';\nimport DashboardLayout from './dashboard';\nimport DefaultLayout from '../layouts/default';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport HandleBar from '../components/HandleBar';\nimport { Card } from './dashboard/content';\nimport List from '../components/List';\nexport const INITIAL_DISPLAY_METHOD = 'grid';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"content__Wrap\",\n  componentId: \"sc-1afm75p-0\"\n})([\"margin-top:120px;margin-bottom:80px;\", \" @media only screen and (max-width:480px){margin-top:0;}\"], ({\n  clear\n}) => clear && css([\"margin:0;\"]));\nconst Container = styled.div.withConfig({\n  displayName: \"content__Container\",\n  componentId: \"sc-1afm75p-1\"\n})([\"display:grid;grid-template-columns:1fr min-content;grid-gap:var(--default-gap);margin-bottom:80px;\", \" @media only screen and (max-width:1196px){grid-template-columns:1fr;}\"], ({\n  stretch\n}) => stretch && css([\"grid-template-columns:1fr;\"]));\n\nconst ContentLayout = ({\n  limit,\n  title,\n  aside,\n  store,\n  handle,\n  render,\n  getType,\n  getQuery,\n  dashboard,\n  variables,\n  filterConfig,\n  emptyMessage,\n  startOffset,\n  onLink\n}) => {\n  const search = useSelector(state => state.root.search);\n  const Layout = dashboard ? DashboardLayout : DefaultLayout;\n  const [visibleFilter, setVisibleFilter] = useState(false);\n\n  const renderCard = item => /*#__PURE__*/React.createElement(Card, {\n    item: item,\n    component: render(item),\n    onLink: onLink && (item => onLink(item)),\n    withoutChecked: true\n  });\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: title,\n    scaffold: store === null || store === void 0 ? void 0 : store.scaffold\n  }, /*#__PURE__*/React.createElement(Wrap, {\n    clear: (store === null || store === void 0 ? void 0 : store.scaffold) || dashboard\n  }, !(store !== null && store !== void 0 && store.scaffold) && !dashboard && /*#__PURE__*/React.createElement(SearchBar, null), dashboard && handle && /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: handle.icon,\n    onCreate: handle.onCreate,\n    buttonCreateText: handle.buttonCreateText,\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: handle.onChangeDisplayMethod\n  }), /*#__PURE__*/React.createElement(FilterBar, _extends({}, filterConfig || {}, {\n    isOpen: visibleFilter\n  })), /*#__PURE__*/React.createElement(Container, {\n    stretch: search && !aside || !aside\n  }, /*#__PURE__*/React.createElement(List, {\n    limit: limit,\n    type: getType,\n    query: getQuery,\n    variables: variables,\n    startOffset: startOffset,\n    emptyMessage: emptyMessage,\n    component: item => renderCard(item),\n    initialDisplayMethod: INITIAL_DISPLAY_METHOD,\n    onClick: onLink && (item => onLink(item))\n  }), aside)));\n};\n\nexport default ContentLayout;","map":null,"metadata":{},"sourceType":"module"}
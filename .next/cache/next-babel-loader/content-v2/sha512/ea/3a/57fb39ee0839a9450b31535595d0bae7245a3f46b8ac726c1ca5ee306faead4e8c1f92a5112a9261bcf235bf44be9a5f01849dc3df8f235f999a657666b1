{"ast":null,"code":"import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { motion } from 'framer-motion';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport ContentLayout from '../layouts/content';\nimport UserCard from '../components/UserCard';\nimport { GridAside as Container } from '../components/Styled';\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../store/helpers/user';\nimport { onChat } from '../store/helpers';\nimport queries from '../graphql/queries';\nconst TITLE = 'Авторы';\nconst START_OFFSET = 6;\n\nconst Creators = ({\n  store\n}) => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER',\n      placeholder: 'Дата регистарции'\n    }, {\n      type: 'SELECT',\n      placeholder: 'Компания',\n      options: store === null || store === void 0 ? void 0 : store.companies.map(company => ({\n        value: company.email,\n        label: company.name\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата регистарции',\n      value: 'createdAt'\n    }],\n    query: queries.GET_USERS,\n    store: {\n      documents: store === null || store === void 0 ? void 0 : store.users\n    }\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, documents.map(author => {\n    var _author$company;\n\n    const owned = author.name === user.name;\n    return /*#__PURE__*/React.createElement(motion.div, {\n      key: author.email,\n      initial: 'pageInitial',\n      animate: 'pageAnimate',\n      variants: {\n        pageInitial: {\n          opacity: 0\n        },\n        pageAnimate: {\n          opacity: 1\n        }\n      }\n    }, /*#__PURE__*/React.createElement(UserCard, {\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        sender: user,\n        recipient: author\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: author\n      }),\n      onMembers: recall(onUserMembers, {\n        id: author === null || author === void 0 ? void 0 : author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      })\n    }));\n  })));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let users = [];\n  let companies = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET\n      }\n    });\n\n    if (response && response.data) {\n      users = response.data.getUsers;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        users,\n        companies\n      }\n    }\n  };\n}\nexport default Creators;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/creators.js"],"names":["React","useSelector","motion","initializeApollo","useHelper","ContentLayout","UserCard","GridAside","Container","onUserAboutMore","onUserLink","onUserMembers","onChat","queries","TITLE","START_OFFSET","Creators","store","recall","user","state","type","placeholder","options","companies","map","company","value","email","label","name","GET_USERS","documents","users","author","owned","pageInitial","opacity","pageAnimate","sender","recipient","id","auth","getServerSideProps","client","response","query","GET_META_AUTHORS","variables","offset","limit","data","getUsers","err","console","log","props"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { motion } from 'framer-motion'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport ContentLayout from '../layouts/content'\nimport UserCard from '../components/UserCard'\nimport { GridAside as Container } from '../components/Styled'\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../store/helpers/user'\nimport { onChat } from '../store/helpers'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Авторы'\nconst START_OFFSET = 6\n\nconst Creators = ({ store }) => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      filters={[\n        { type: 'DATEPICKER', placeholder: 'Дата регистарции' },\n        {\n          type: 'SELECT',\n          placeholder: 'Компания',\n          options: store?.companies.map((company) => ({\n            value: company.email,\n            label: company.name\n          }))\n        }\n      ]}\n      options={[\n        { label: 'Компания', value: 'company' },\n        { label: 'Участники', value: 'members' },\n        { label: 'Дата регистарции', value: 'createdAt' }\n      ]}\n      query={queries.GET_USERS}\n      store={{ documents: store?.users }}>\n      {({ documents }) => (\n        <Container>\n          {documents.map((author) => {\n            const owned = author.name === user.name\n\n            return (\n              <motion.div\n                key={author.email}\n                initial={'pageInitial'}\n                animate={'pageAnimate'}\n                variants={{\n                  pageInitial: {\n                    opacity: 0\n                  },\n                  pageAnimate: {\n                    opacity: 1\n                  }\n                }}>\n                <UserCard\n                  user={author}\n                  owned={owned}\n                  onChat={\n                    user.email &&\n                    recall(onChat, {\n                      sender: user,\n                      recipient: author\n                    })\n                  }\n                  onAboutMore={recall(onUserAboutMore, { user: author })}\n                  onMembers={recall(onUserMembers, { id: author?.email, auth: user?.email })}\n                  onLink={recall(onUserLink, {\n                    id: author.email,\n                    auth: user?.email,\n                    owned\n                  })}\n                  onCompanyLink={recall(onUserLink, {\n                    id: author.company?.email,\n                    auth: user?.email\n                  })}\n                />\n              </motion.div>\n            )\n          })}\n        </Container>\n      )}\n    </ContentLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let users = []\n  let companies = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET\n      }\n    })\n\n    if (response && response.data) {\n      users = response.data.getUsers\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        users,\n        companies\n      }\n    }\n  }\n}\n\nexport default Creators\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { ApolloLink, Observable } from 'apollo-link';\nimport { onError } from 'apollo-link-error';\nimport config from '../../config';\nconst SSR = true;\nconst NODE_ENV = false;\nconst SERVER_URL = NODE_ENV ? config.get('server-local-url') : config.get('server-host-url');\nconst SECRET = config.get('secret');\n\nconst request = async operation => {\n  const token = !SSR && (await localStorage.getItem(SECRET));\n  operation.setContext({\n    headers: {\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  });\n};\n\nexport const errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    console.log('[graphQLErrors]', graphQLErrors);\n  }\n\n  if (networkError) {\n    console.log('[networkError]', networkError);\n  }\n});\nexport const requestLink = new ApolloLink((operation, forward) => new Observable(observer => {\n  let handle;\n  Promise.resolve(operation).then(result => request(result)).then(() => {\n    handle = forward(operation).subscribe({\n      next: observer.next.bind(observer),\n      error: observer.error.bind(observer),\n      complete: observer.complete.bind(observer)\n    });\n  }).catch(observer.error.bind(observer));\n  return () => {\n    if (handle) handle.unsubscribe();\n  };\n}));\nconst uploadLink = createUploadLink({\n  uri: `${SERVER_URL}/graphql`,\n  credentials: 'same-origin'\n});\nexport default function createApolloClient(cache = {}) {\n  return new ApolloClient({\n    ssrMode: SSR,\n    link: ApolloLink.from([errorLink, requestLink, uploadLink]),\n    cache: new InMemoryCache().restore(cache)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
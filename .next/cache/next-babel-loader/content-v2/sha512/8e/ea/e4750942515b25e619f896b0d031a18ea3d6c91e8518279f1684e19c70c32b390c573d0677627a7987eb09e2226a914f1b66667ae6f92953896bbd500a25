{"ast":null,"code":"import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch';\nimport { b64EncodeUnicode } from '../../atomic-ui/utils/functions';\nimport { Card } from '../../layouts/dashboard/content';\nexport const QuerySearch = ({\n  entity,\n  entities,\n  onHide,\n  onJump,\n  onChange\n}) => {\n  const router = useRouter();\n  const initialResult = [null, {\n    data: null,\n    loading: false,\n    refetch: null\n  }];\n  const [load, {\n    data,\n    loading,\n    refetch\n  }] = entity ? useLazyQuery(entity.query) : initialResult;\n  const [search, setSearch] = useState(null);\n  console.log(search);\n\n  const redirectById = (item, path) => router.push(`${path}/${b64EncodeUnicode(item.id)}`);\n\n  const onClick = async (item, path, singlePath) => {\n    if (onHide) onHide();\n    await redirectById(item, `${path}/${singlePath}`);\n  };\n\n  const onEdit = async (item, path) => {\n    if (onHide) onHide();\n    await redirectById(item, `${path}/edit`);\n  };\n\n  const onSubmit = value => {\n    const variables = {\n      search: value\n    };\n    if (setSearch) setSearch(value);\n\n    if (refetch) {\n      refetch(variables);\n    }\n\n    if (load) {\n      load({\n        variables\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(GlobalSearch, {\n    search: search,\n    loading: loading,\n    result: data && entity && data[entity === null || entity === void 0 ? void 0 : entity.value],\n    initialEntity: entity,\n    entities: (entities || []).map(elem => ({ ...elem,\n      render: item => /*#__PURE__*/React.createElement(Card, {\n        key: item.id || item.email,\n        item: item,\n        appearance: 'clear',\n        component: elem.render(item),\n        onLink: document => onClick(document, (elem === null || elem === void 0 ? void 0 : elem.originPath) || '', (elem === null || elem === void 0 ? void 0 : elem.singlePath) || ''),\n        onEdit: document => onEdit(document, (elem === null || elem === void 0 ? void 0 : elem.originPath) || ''),\n        onDelete: document => onJump('/delete', {\n          item: document,\n          entity: elem\n        }),\n        withoutChecked: true\n      })\n    })),\n    onSubmit: onSubmit,\n    onChange: onChange\n  });\n};\nexport default QuerySearch;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/QuerySearch/index.js"],"names":["React","useState","useRouter","useLazyQuery","GlobalSearch","b64EncodeUnicode","Card","QuerySearch","entity","entities","onHide","onJump","onChange","router","initialResult","data","loading","refetch","load","query","search","setSearch","console","log","redirectById","item","path","push","id","onClick","singlePath","onEdit","onSubmit","value","variables","map","elem","render","email","document","originPath"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useRouter } from 'next/router'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch'\nimport { b64EncodeUnicode } from '../../atomic-ui/utils/functions'\n\nimport { Card } from '../../layouts/dashboard/content'\n\nexport const QuerySearch = ({ entity, entities, onHide, onJump, onChange }) => {\n  const router = useRouter()\n  const initialResult = [null, { data: null, loading: false, refetch: null }]\n  const [load, { data, loading, refetch }] = entity ? useLazyQuery(entity.query) : initialResult\n  const [search, setSearch] = useState(null)\n  console.log(search)\n\n  const redirectById = (item, path) => router.push(`${path}/${b64EncodeUnicode(item.id)}`)\n\n  const onClick = async (item, path, singlePath) => {\n    if (onHide) onHide()\n    await redirectById(item, `${path}/${singlePath}`)\n  }\n\n  const onEdit = async (item, path) => {\n    if (onHide) onHide()\n    await redirectById(item, `${path}/edit`)\n  }\n\n  const onSubmit = (value) => {\n    const variables = { search: value }\n\n    if (setSearch) setSearch(value)\n\n    if (refetch) {\n      refetch(variables)\n    }\n    if (load) {\n      load({ variables })\n    }\n  }\n\n  return (\n    <GlobalSearch\n      search={search}\n      loading={loading}\n      result={data && entity && data[entity?.value]}\n      initialEntity={entity}\n      entities={(entities || []).map((elem) => ({\n        ...elem,\n        render: (item) => (\n          <Card\n            key={item.id || item.email}\n            item={item}\n            appearance={'clear'}\n            component={elem.render(item)}\n            onLink={(document) => onClick(document, elem?.originPath || '', elem?.singlePath || '')}\n            onEdit={(document) => onEdit(document, elem?.originPath || '')}\n            onDelete={(document) => onJump('/delete', { item: document, entity: elem })}\n            withoutChecked\n          />\n        )\n      }))}\n      onSubmit={onSubmit}\n      onChange={onChange}\n    />\n  )\n}\n\nexport default QuerySearch\n"]},"metadata":{},"sourceType":"module"}
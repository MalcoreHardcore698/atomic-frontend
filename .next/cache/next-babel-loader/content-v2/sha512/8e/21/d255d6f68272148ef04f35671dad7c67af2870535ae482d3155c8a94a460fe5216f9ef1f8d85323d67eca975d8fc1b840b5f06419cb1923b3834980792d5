{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport UserCard from '../UserCard';\nimport { useHelper } from '../../hooks/useHelper';\nimport { onChat } from '../../store/helpers';\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../../store/helpers/user';\nimport queries from '../../graphql/queries';\nexport const UserList = ({\n  variables,\n  initialList = []\n}) => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const [users, setUsers] = useState(initialList || []);\n  const {\n    data,\n    loading,\n    error\n  } = (initialList === null || initialList === void 0 ? void 0 : initialList.length) > 0 ? {\n    data: null,\n    loading: false,\n    error: false\n  } : useQuery(queries.GET_USERS, {\n    variables\n  });\n  useEffect(() => {\n    if (!loading && data) {\n      setUsers(data.getUsers);\n    }\n  }, [data, loading]);\n  useEffect(() => {\n    if ((initialList === null || initialList === void 0 ? void 0 : initialList.length) > 0) setUsers(initialList);\n  }, [initialList]);\n  return !loading && data || users.length > 0 ? users.map(author => {\n    var _author$company;\n\n    const owned = author.name === (user === null || user === void 0 ? void 0 : user.name);\n    return /*#__PURE__*/React.createElement(LazyLoad, {\n      key: author.email\n    }, /*#__PURE__*/React.createElement(UserCard, {\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        email: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: author\n      }),\n      onMembers: recall(onUserMembers, {\n        id: author === null || author === void 0 ? void 0 : author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })\n    }));\n  }) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\") : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432 \\u043D\\u0435\\u0442\");\n};\nexport default UserList;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/UserList/index.js"],"names":["React","useState","useEffect","useQuery","useSelector","Alert","Spinner","Loader","LazyLoad","UserCard","useHelper","onChat","onUserAboutMore","onUserLink","onUserMembers","queries","UserList","variables","initialList","recall","user","state","users","setUsers","data","loading","error","length","GET_USERS","getUsers","map","author","owned","name","email","auth","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","id","company","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\n\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\nimport UserCard from '../UserCard'\nimport { useHelper } from '../../hooks/useHelper'\nimport { onChat } from '../../store/helpers'\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../../store/helpers/user'\nimport queries from '../../graphql/queries'\n\nexport const UserList = ({ variables, initialList = [] }) => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n  const [users, setUsers] = useState(initialList || [])\n\n  const { data, loading, error } =\n    initialList?.length > 0\n      ? { data: null, loading: false, error: false }\n      : useQuery(queries.GET_USERS, { variables })\n\n  useEffect(() => {\n    if (!loading && data) {\n      setUsers(data.getUsers)\n    }\n  }, [data, loading])\n\n  useEffect(() => {\n    if (initialList?.length > 0) setUsers(initialList)\n  }, [initialList])\n\n  return (!loading && data) || users.length > 0 ? (\n    users.map((author) => {\n      const owned = author.name === user?.name\n\n      return (\n        <LazyLoad key={author.email}>\n          <UserCard\n            user={author}\n            owned={owned}\n            onChat={\n              user.email &&\n              recall(onChat, {\n                email: author.email,\n                auth: user?.email,\n                queries: {\n                  userChats: queries.GET_USER_CHATS,\n                  chat: queries.GET_CHAT\n                },\n                mutations: {\n                  addUserChat: queries.ADD_USER_CHAT,\n                  sendMessage: queries.SEND_MESSAGE\n                }\n              })\n            }\n            onLink={recall(onUserLink, {\n              id: author.email,\n              auth: user?.email,\n              owned,\n              queries: {\n                userChats: queries.GET_USER_CHATS,\n                chat: queries.GET_CHAT\n              },\n              mutations: {\n                addUserChat: queries.ADD_USER_CHAT,\n                sendMessage: queries.SEND_MESSAGE\n              }\n            })}\n            onAboutMore={recall(onUserAboutMore, { user: author })}\n            onMembers={recall(onUserMembers, { id: author?.email, auth: user?.email })}\n            onCompanyLink={recall(onUserLink, {\n              id: author.company?.email,\n              auth: user?.email,\n              queries: {\n                userChats: queries.GET_USER_CHATS,\n                chat: queries.GET_CHAT\n              },\n              mutations: {\n                addUserChat: queries.ADD_USER_CHAT,\n                sendMessage: queries.SEND_MESSAGE\n              }\n            })}\n          />\n        </LazyLoad>\n      )\n    })\n  ) : error ? (\n    <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n      Не удалось загрузить данные\n    </Alert>\n  ) : loading ? (\n    <Loader>\n      <Spinner />\n    </Loader>\n  ) : (\n    <Alert style={{ width: '100%', textAlign: 'center' }}>Авторов нет</Alert>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Column from '../../atomic-ui/components/Column';\nimport Grid from '../../atomic-ui/components/Grid';\nimport DashboardLayout from '../dashboard';\nimport List from '../../components/List';\nimport FilterBar from '../../components/FilterBar';\nimport HandleBar from '../../components/HandleBar';\nimport DeleteForm from '../../components/FormDelete';\nimport { setDisplayMethod, setVisibleFilters } from '../../store/actions/root';\nimport { setDrawer } from '../../store/actions/drawer';\nimport { setItem } from '../../store/actions/snacks';\nimport { useAccess } from '../../hooks/useAccess';\n\nconst getIsAdmin = document => {\n  var _document$name;\n\n  return (document === null || document === void 0 ? void 0 : (_document$name = document.name) === null || _document$name === void 0 ? void 0 : _document$name.toUpperCase()) !== 'ADMIN';\n};\n\nconst Delete = ({\n  item,\n  query,\n  component,\n  entityMultiText,\n  entitySingleText,\n  onSubmit\n}) => {\n  const isArray = useMemo(() => Array.isArray(item), [item]);\n  const dispatch = useDispatch();\n  const Component = component;\n  return /*#__PURE__*/React.createElement(DeleteForm, {\n    mutation: query,\n    appearance: 'clear',\n    onCancel: () => dispatch(setDrawer(null)),\n    onSubmit: async (_, action) => {\n      try {\n        await action({\n          variables: {\n            id: isArray ? item.map(doc => doc.id) : [item.id]\n          }\n        });\n        dispatch(setItem({\n          type: 'success',\n          message: isArray ? `${entityMultiText} успешно удалены` : `${entitySingleText} успешно удален`\n        }));\n      } catch (err) {\n        if (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Что-то пошло не так'\n          }));\n        }\n      } finally {\n        dispatch(setDrawer(null));\n        if (onSubmit) onSubmit();\n      }\n    }\n  }, isArray ? /*#__PURE__*/React.createElement(Grid, {\n    length: 'auto-fit'\n  }, item.map(document => /*#__PURE__*/React.createElement(Component, {\n    key: document.id,\n    item: document\n  }))) : /*#__PURE__*/React.createElement(Component, {\n    item: item\n  }));\n};\n\nexport const Card = ({\n  item,\n  checked,\n  appearance,\n  component,\n  withoutActions,\n  withoutChecked,\n  onChecked,\n  onLink,\n  onEdit,\n  onDelete\n}) => React.cloneElement(component, {\n  checked,\n  appearance,\n  onLink: onLink && (() => onLink(item)),\n  onEdit: !withoutActions && onEdit && (() => onEdit(item)),\n  onChecked: !withoutChecked && onChecked && (checked => onChecked({ ...item,\n    checked\n  })),\n  onDelete: !withoutActions && onDelete && (() => onDelete(item))\n});\n\nconst ContentLayout = ({\n  render,\n  title,\n  icon,\n  field,\n  filters,\n  options,\n  template,\n  limit = 6,\n  startOffset = 6,\n  buttonCreateText,\n  getType,\n  getQuery,\n  entityType,\n  deleteQuery,\n  deleteEntityMultiText,\n  deleteEntitySingleText,\n  onLink,\n  onEdit,\n  onCreate,\n  emptyMessage,\n  withoutChecked\n}) => {\n  const {\n    displayMethod,\n    visibleFilters\n  } = useSelector(state => ({\n    displayMethod: state.root.displayMethod,\n    visibleFilters: state.root.visibleFilters\n  }));\n  const {\n    isAccessibleForView,\n    isAccessibleForAdd,\n    isAccessibleForEdit,\n    isAccessibleForDelete\n  } = useAccess(entityType);\n  const dispatch = useDispatch();\n  const [isAllChecked, setIsAllChecked] = useState(false);\n  const [checkedList, setCheckedList] = useState([]);\n  const [updated, setUpdated] = useState('list');\n  const getIsAnyChecked = useCallback(item => {\n    var _checkedList$find;\n\n    return (_checkedList$find = checkedList.find(document => document[field] === item[field])) === null || _checkedList$find === void 0 ? void 0 : _checkedList$find.checked;\n  }, [checkedList]);\n\n  const onAfter = () => setUpdated(v4());\n\n  const onChecked = document => {\n    setCheckedList(prev => {\n      const isExists = item => item[field] === document[field];\n\n      const candidate = prev.find(isExists);\n\n      if (candidate) {\n        return prev.map(item => isExists(item) ? { ...document,\n          checked: !item.checked\n        } : { ...item,\n          checked: isAllChecked || item.checked\n        });\n      } else {\n        return [...prev, { ...document,\n          checked: true\n        }];\n      }\n    });\n    setIsAllChecked(false);\n  };\n\n  const onAllChecked = () => {\n    const value = !isAllChecked;\n    setCheckedList(prev => prev.map(item => ({ ...item,\n      checked: getIsAdmin(item) ? value : false\n    })));\n    setIsAllChecked(value);\n  };\n\n  const onDelete = item => dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление',\n    content: /*#__PURE__*/React.createElement(Delete, {\n      item: item,\n      query: deleteQuery,\n      component: props => React.cloneElement(render(props.item), {\n        appearance: 'clear',\n        onEdit: null,\n        onDelete: null\n      }),\n      entityMultiText: deleteEntityMultiText,\n      entitySingleText: deleteEntitySingleText,\n      onSubmit: () => setUpdated(v4())\n    })\n  }));\n\n  const onDeleteAll = () => onDelete(checkedList.filter(document => document.checked));\n\n  useEffect(() => {\n    const countChecked = checkedList.reduce((acc, curr) => acc + (curr.checked ? 1 : 0), 0);\n\n    if (checkedList.length > 0 && countChecked === checkedList.length) {\n      setIsAllChecked(true);\n    }\n  }, [checkedList]);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: title\n  }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: icon,\n    checked: isAllChecked,\n    defaultDisplayMethod: displayMethod,\n    defaultVisibleFilters: visibleFilters,\n    buttonDeleteDisabled: !checkedList.find(item => item.checked),\n    buttonCreateText: buttonCreateText,\n    onCreate: isAccessibleForAdd && (() => onCreate && onCreate(onAfter)),\n    onChecked: isAccessibleForDelete && (() => displayMethod === 'grid' && onAllChecked && onAllChecked()),\n    onChangeVisibleFilter: () => dispatch(setVisibleFilters(!visibleFilters)),\n    onChangeDisplayMethod: item => dispatch(setDisplayMethod(item.value)),\n    onDeleteAll: isAccessibleForDelete && onDeleteAll,\n    withoutFooter: !isAccessibleForDelete || displayMethod === 'list',\n    withFilters: filters && options\n  }), (filters || options) && /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilters,\n    filters: filters,\n    options: options\n  }), /*#__PURE__*/React.createElement(List, {\n    key: updated,\n    limit: limit,\n    type: getType,\n    query: getQuery,\n    template: template,\n    startOffset: startOffset,\n    emptyMessage: emptyMessage,\n    setCheckedList: setCheckedList,\n    component: item => /*#__PURE__*/React.createElement(Card, {\n      item: item,\n      component: render(item),\n      withoutChecked: !isAccessibleForDelete && withoutChecked,\n      withoutActions: !isAccessibleForEdit && !isAccessibleForDelete,\n      checked: getIsAdmin(item) && (isAllChecked || getIsAnyChecked(item)),\n      onLink: onLink && isAccessibleForView && (item => onLink(item)),\n      onEdit: onEdit && isAccessibleForEdit && (item => onEdit(item, onAfter)),\n      onChecked: isAccessibleForDelete && onChecked,\n      onDelete: isAccessibleForDelete && onDelete\n    }),\n    onClick: onLink && isAccessibleForView && (item => onLink(item)),\n    onEdit: onEdit && isAccessibleForEdit && (item => onEdit(item, onAfter)),\n    onChecked: isAccessibleForDelete && onChecked,\n    onDelete: isAccessibleForDelete && onDelete\n  })));\n};\n\nContentLayout.defaultProps = {\n  field: 'id'\n};\nexport default ContentLayout;","map":null,"metadata":{},"sourceType":"module"}
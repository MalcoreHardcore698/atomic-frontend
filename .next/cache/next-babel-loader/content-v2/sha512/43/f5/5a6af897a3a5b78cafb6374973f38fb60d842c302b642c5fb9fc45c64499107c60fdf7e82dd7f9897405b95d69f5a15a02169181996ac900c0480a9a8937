{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Column from '../Column';\nimport Select from '../Select';\nimport Search from '../Search';\nimport Spinner from '../Spinner';\nimport Alert from '../Alert';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"GlobalSearch__Wrap\",\n  componentId: \"sc-1i2qzsl-0\"\n})([\"padding:var(--default-gap);\"]);\n_c = Wrap;\nexport const Loader = styled.div.withConfig({\n  displayName: \"GlobalSearch__Loader\",\n  componentId: \"sc-1i2qzsl-1\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;flex-grow:1;\"]);\n/*\n * const entities: entity[]\n * type entity = {\n *  label: string;\n *  value: ObjectID | string;\n *  render: ReactNode | Element | string;\n * }\n */\n\n_c2 = Loader;\nexport const GlobalSearch = ({\n  result,\n  search,\n  loading,\n  entities,\n  initialEntity,\n  appearance,\n  style,\n  className,\n  onChange,\n  onSubmit\n}) => {\n  _s();\n\n  const [entity, setEntity] = useState(initialEntity);\n  const searchRef = useRef(null);\n\n  const handleChange = value => {\n    setEntity(value);\n\n    if (searchRef !== null && searchRef !== void 0 && searchRef.current) {\n      searchRef.current.value = '';\n      if (onSubmit) onSubmit('');\n    }\n  };\n\n  const renderContent = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Search, {\n    ref: searchRef,\n    appearance: 'ghost',\n    placeholder: 'Поиск',\n    defaultValue: search,\n    onSubmit: onSubmit\n  }), (result === null || result === void 0 ? void 0 : result.length) > 0 ? result.map(item => entity.render && /*#__PURE__*/React.createElement(React.Fragment, {\n    key: item.id || item.email\n  }, entity.render(item))) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center',\n      flexGrow: 1\n    }\n  }, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"));\n\n  useEffect(() => {\n    if (onChange) onChange(entity);\n  }, [entity, onChange]);\n  return /*#__PURE__*/React.createElement(Wrap, {\n    style: style,\n    className: className,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(Select, {\n    appearance: 'ghost',\n    defaultValue: entity,\n    placeholder: 'Где будем искать?',\n    label: 'Зона поиска',\n    options: entities,\n    onChange: handleChange,\n    isLoading: loading,\n    isSearchable: true,\n    isClearable: true\n  }), !loading && entity && renderContent(), loading && /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)));\n};\n\n_s(GlobalSearch, \"n+GBjXtYF0rSlQlVsh/loMI5v68=\");\n\n_c3 = GlobalSearch;\nGlobalSearch.defaultProps = {\n  appearance: 'clear'\n};\nexport default GlobalSearch;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Loader\");\n$RefreshReg$(_c3, \"GlobalSearch\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/GlobalSearch/index.js"],"names":["React","useState","useEffect","useRef","styled","Column","Select","Search","Spinner","Alert","Wrap","Loader","div","GlobalSearch","result","search","loading","entities","initialEntity","appearance","style","className","onChange","onSubmit","entity","setEntity","searchRef","handleChange","value","current","renderContent","length","map","item","render","id","email","width","textAlign","flexGrow","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport Column from '../Column'\nimport Select from '../Select'\nimport Search from '../Search'\nimport Spinner from '../Spinner'\nimport Alert from '../Alert'\n\nexport const Wrap = styled(Column)`\n  padding: var(--default-gap);\n`\n\nexport const Loader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n`\n\n/*\n * const entities: entity[]\n * type entity = {\n *  label: string;\n *  value: ObjectID | string;\n *  render: ReactNode | Element | string;\n * }\n */\n\nexport const GlobalSearch = ({\n  result,\n  search,\n  loading,\n  entities,\n  initialEntity,\n  appearance,\n  style,\n  className,\n  onChange,\n  onSubmit\n}) => {\n  const [entity, setEntity] = useState(initialEntity)\n  const searchRef = useRef(null)\n\n  const handleChange = (value) => {\n    setEntity(value)\n\n    if (searchRef?.current) {\n      searchRef.current.value = ''\n      if (onSubmit) onSubmit('')\n    }\n  }\n\n  const renderContent = () => (\n    <React.Fragment>\n      <Search\n        ref={searchRef}\n        appearance={'ghost'}\n        placeholder={'Поиск'}\n        defaultValue={search}\n        onSubmit={onSubmit}\n      />\n\n      {result?.length > 0 ?\n        result.map(\n          (item) =>\n            entity.render && (\n              <React.Fragment key={item.id || item.email}>{entity.render(item)}</React.Fragment>\n            )\n        ) : (\n          <Alert style={{ width: '100%', textAlign: 'center', flexGrow: 1 }}>\n            Ничего не найдено\n          </Alert>\n        )}\n    </React.Fragment>\n  )\n\n  useEffect(() => {\n    if (onChange) onChange(entity)\n  }, [entity, onChange])\n\n  return (\n    <Wrap style={style} className={className} appearance={appearance}>\n      <Select\n        appearance={'ghost'}\n        defaultValue={entity}\n        placeholder={'Где будем искать?'}\n        label={'Зона поиска'}\n        options={entities}\n        onChange={handleChange}\n        isLoading={loading}\n        isSearchable\n        isClearable\n      />\n\n      {!loading && entity && renderContent()}\n\n      {loading && (\n        <Loader>\n          <Spinner />\n        </Loader>\n      )}\n    </Wrap>\n  )\n}\n\nGlobalSearch.defaultProps = {\n  appearance: 'clear'\n}\n\nexport default GlobalSearch\n"]},"metadata":{},"sourceType":"module"}
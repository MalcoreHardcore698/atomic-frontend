{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport { Controller } from 'react-hook-form';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Title from '../../atomic-ui/components/Title';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Select from '../../atomic-ui/components/Select';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { getLabelCategory } from '../../utils/functions';\nimport { Loader } from '../Styled';\nimport Form from '../Form';\nimport TicketChat from '../TicketChat';\nimport queries from '../../graphql/queries';\nexport const LIMIT_USERS = 15;\nexport const Ticket = ({\n  ticket,\n  appearance,\n  mutation,\n  className,\n  onReport,\n  onLink,\n  onAttach,\n  onSubmit,\n  ...props\n}) => {\n  _s();\n\n  const [offsetUsers, setOffsetUsers] = useState(0); // const [usersSelectInput, setUsersSelectInput] = useState('')\n\n  const [users, setUsers] = useState([]);\n  const {\n    data,\n    loading: loadingTicket,\n    error: errorTicket\n  } = ticket ? useQuery(queries.GET_TICKET, {\n    variables: {\n      id: ticket\n    },\n    fetchPolicy: 'no-cache'\n  }) : {\n    data: {\n      getTicket: {}\n    },\n    loading: false,\n    error: false\n  };\n  const [closeTicket, {\n    data: dataCloseTicket,\n    loading: loadingCloseTicket,\n    error: errorCloseTicket\n  }] = useMutation(queries.CLOSE_TICKET);\n  const {\n    data: dataUsers,\n    loading: loadingUsers,\n    // refetch: searchUsers,\n    fetchMore: updateUsers\n  } = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      offset: offsetUsers,\n      limit: LIMIT_USERS\n    }\n  });\n  const {\n    data: dataCategories,\n    loading: loadingCategories\n  } = useQuery(queries.GET_CATEGORIES, {\n    variables: {\n      type: 'TICKET'\n    }\n  });\n  useEffect(() => {\n    if (!loadingUsers && dataUsers) {\n      setUsers(prev => [...prev, ...dataUsers.getUsers]);\n    }\n  }, [dataUsers, loadingUsers]);\n\n  if (!ticket) {\n    return /*#__PURE__*/React.createElement(Form, {\n      className: className,\n      appearance: appearance,\n      mutation: mutation,\n      onSubmit: onSubmit\n    }, ({\n      register,\n      loading,\n      errors,\n      control,\n      getValues\n    }) => {\n      var _data$getTicket, _data$getTicket2, _data$getTicket3, _data$getTicket4;\n\n      return !loadingTicket && !loadingCloseTicket && data ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n        tag: 'h4'\n      }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.title && /*#__PURE__*/React.createElement(Alert, {\n        style: {\n          width: '100%'\n        },\n        appearance: 'error'\n      }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(Input, {\n        type: 'text',\n        name: 'title',\n        ref: register({\n          required: true\n        }),\n        defaultValue: getValues('title') || ((_data$getTicket = data.getTicket) === null || _data$getTicket === void 0 ? void 0 : _data$getTicket.title),\n        placeholder: 'Название',\n        appearance: 'ghost',\n        disabled: loading\n      }), /*#__PURE__*/React.createElement(Controller, {\n        name: 'author',\n        control: control,\n        defaultValue: (_data$getTicket2 = data.getTicket) !== null && _data$getTicket2 !== void 0 && _data$getTicket2.author ? {\n          value: data.getTicket.author.id,\n          label: data.getTicket.author.name\n        } : null,\n        render: ({\n          value,\n          onChange\n        }) => /*#__PURE__*/React.createElement(Select, {\n          options: users.map(user => ({\n            value: user,\n            label: user.name\n          })),\n          appearance: 'ghost',\n          defaultValue: value // inputValue={usersSelectInput}\n          ,\n          placeholder: 'Выберите автора обращения',\n          onChange: onChange // onInputChange={(input) => setUsersSelectInput(input)}\n          // onKeyDown={(e) => {\n          //   // Pressed ENTER\n          //   if (e.keyCode === 13) {\n          //     searchUsers({\n          //       search: usersSelectInput\n          //     })\n          //   }\n          // }}\n          ,\n          onMenuScrollToBottom: async () => {\n            await updateUsers({\n              variables: {\n                offset: offsetUsers,\n                limit: LIMIT_USERS\n              },\n              updateQuery: (...props) => props\n            });\n            setOffsetUsers(prev => prev + LIMIT_USERS);\n          },\n          isLoading: loadingUsers // isSearchable\n\n        })\n      }), /*#__PURE__*/React.createElement(Controller, {\n        name: 'counsellor',\n        control: control,\n        defaultValue: (_data$getTicket3 = data.getTicket) !== null && _data$getTicket3 !== void 0 && _data$getTicket3.counsellor ? {\n          value: data.getTicket.counsellor.id,\n          label: data.getTicket.counsellor.name\n        } : null,\n        render: ({\n          value,\n          onChange\n        }) => /*#__PURE__*/React.createElement(Select, {\n          options: !loadingUsers && dataUsers ? dataUsers.getUsers.map(user => ({\n            value: user,\n            label: user.name\n          })) : [],\n          appearance: 'ghost',\n          defaultValue: value,\n          placeholder: 'Выберите советника',\n          onChange: onChange,\n          onMenuScrollToBottom: async () => {\n            await updateUsers({\n              variables: {\n                offset: offsetUsers,\n                limit: LIMIT_USERS\n              },\n              updateQuery: (...props) => props\n            });\n            setOffsetUsers(prev => prev + LIMIT_USERS);\n          },\n          isLoading: loadingUsers\n        })\n      }), /*#__PURE__*/React.createElement(Controller, {\n        name: 'category',\n        control: control,\n        defaultValue: (_data$getTicket4 = data.getTicket) !== null && _data$getTicket4 !== void 0 && _data$getTicket4.category ? {\n          value: data.getTicket.category.id,\n          label: getLabelCategory(data.getTicket.category.name)\n        } : null,\n        render: ({\n          value,\n          onChange\n        }) => /*#__PURE__*/React.createElement(Select, {\n          appearance: 'ghost',\n          placeholder: 'Выберите раздел',\n          options: !loadingCategories && dataCategories ? dataCategories.getCategories.filter(item => item.type === 'TICKET').map(item => ({\n            value: item.id,\n            label: getLabelCategory(item.name)\n          })) : [],\n          onChange: onChange,\n          defaultValue: value,\n          isLoading: loadingCategories,\n          isClearable: true\n        })\n      })), /*#__PURE__*/React.createElement(Divider, {\n        clear: true\n      }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          flexGrow: 1\n        },\n        type: 'submit',\n        disabled: loading\n      }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C\"))) : errorTicket || errorCloseTicket ? /*#__PURE__*/React.createElement(Alert, {\n        appearance: 'error',\n        style: {\n          width: '100%',\n          textAlign: 'center'\n        }\n      }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E\\u0431 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0438\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(TicketChat, _extends({}, props, {\n    ticket: (dataCloseTicket === null || dataCloseTicket === void 0 ? void 0 : dataCloseTicket.closeTicket) || (data === null || data === void 0 ? void 0 : data.getTicket),\n    loading: loadingTicket,\n    onLink: onLink,\n    onFinish: () => closeTicket({\n      variables: {\n        id: ticket\n      }\n    }),\n    onReport: onReport,\n    onAttach: onAttach,\n    onSubmit: onSubmit\n  }));\n};\n\n_s(Ticket, \"z2jXEVbsbEIrEepZ1JlIpVUWsKQ=\", false, function () {\n  return [useQuery, useMutation, useQuery, useQuery];\n});\n\n_c = Ticket;\nexport default Ticket;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ticket\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormTicket/index.js"],"names":["React","useState","useEffect","Controller","useQuery","useMutation","Row","Column","Input","Button","Title","Alert","Select","Divider","Spinner","getLabelCategory","Loader","Form","TicketChat","queries","LIMIT_USERS","Ticket","ticket","appearance","mutation","className","onReport","onLink","onAttach","onSubmit","props","offsetUsers","setOffsetUsers","users","setUsers","data","loading","loadingTicket","error","errorTicket","GET_TICKET","variables","id","fetchPolicy","getTicket","closeTicket","dataCloseTicket","loadingCloseTicket","errorCloseTicket","CLOSE_TICKET","dataUsers","loadingUsers","fetchMore","updateUsers","GET_USERS_FOR_TICKET","offset","limit","dataCategories","loadingCategories","GET_CATEGORIES","type","prev","getUsers","register","errors","control","getValues","title","width","required","author","value","label","name","onChange","map","user","updateQuery","counsellor","category","getCategories","filter","item","flexGrow","textAlign"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AAEA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AAEA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAO,MAAMC,WAAW,GAAG,EAApB;AAEP,OAAO,MAAMC,MAAM,GAAG,CAAC;AACrBC,EAAAA,MADqB;AAErBC,EAAAA,UAFqB;AAGrBC,EAAAA,QAHqB;AAIrBC,EAAAA,SAJqB;AAKrBC,EAAAA,QALqB;AAMrBC,EAAAA,MANqB;AAOrBC,EAAAA,QAPqB;AAQrBC,EAAAA,QARqB;AASrB,KAAGC;AATkB,CAAD,KAUhB;AAAA;;AACJ,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC/B,QAAQ,CAAC,CAAD,CAA9C,CADI,CAEJ;;AACA,QAAM,CAACgC,KAAD,EAAQC,QAAR,IAAoBjC,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM;AAAEkC,IAAAA,IAAF;AAAQC,IAAAA,OAAO,EAAEC,aAAjB;AAAgCC,IAAAA,KAAK,EAAEC;AAAvC,MAAuDjB,MAAM,GAC/DlB,QAAQ,CAACe,OAAO,CAACqB,UAAT,EAAqB;AAC3BC,IAAAA,SAAS,EAAE;AACTC,MAAAA,EAAE,EAAEpB;AADK,KADgB;AAI3BqB,IAAAA,WAAW,EAAE;AAJc,GAArB,CADuD,GAO/D;AAAER,IAAAA,IAAI,EAAE;AAAES,MAAAA,SAAS,EAAE;AAAb,KAAR;AAA2BR,IAAAA,OAAO,EAAE,KAApC;AAA2CE,IAAAA,KAAK,EAAE;AAAlD,GAPJ;AASA,QAAM,CACJO,WADI,EAEJ;AAAEV,IAAAA,IAAI,EAAEW,eAAR;AAAyBV,IAAAA,OAAO,EAAEW,kBAAlC;AAAsDT,IAAAA,KAAK,EAAEU;AAA7D,GAFI,IAGF3C,WAAW,CAACc,OAAO,CAAC8B,YAAT,CAHf;AAKA,QAAM;AACJd,IAAAA,IAAI,EAAEe,SADF;AAEJd,IAAAA,OAAO,EAAEe,YAFL;AAGJ;AACAC,IAAAA,SAAS,EAAEC;AAJP,MAKFjD,QAAQ,CAACe,OAAO,CAACmC,oBAAT,EAA+B;AACzCb,IAAAA,SAAS,EAAE;AACTc,MAAAA,MAAM,EAAExB,WADC;AAETyB,MAAAA,KAAK,EAAEpC;AAFE;AAD8B,GAA/B,CALZ;AAYA,QAAM;AAAEe,IAAAA,IAAI,EAAEsB,cAAR;AAAwBrB,IAAAA,OAAO,EAAEsB;AAAjC,MAAuDtD,QAAQ,CAACe,OAAO,CAACwC,cAAT,EAAyB;AAC5FlB,IAAAA,SAAS,EAAE;AACTmB,MAAAA,IAAI,EAAE;AADG;AADiF,GAAzB,CAArE;AAMA1D,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACiD,YAAD,IAAiBD,SAArB,EAAgC;AAC9BhB,MAAAA,QAAQ,CAAE2B,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAU,GAAGX,SAAS,CAACY,QAAvB,CAAX,CAAR;AACD;AACF,GAJQ,EAIN,CAACZ,SAAD,EAAYC,YAAZ,CAJM,CAAT;;AAMA,MAAI,CAAC7B,MAAL,EAAa;AACX,wBACE,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAEG,SAAjB;AAA4B,MAAA,UAAU,EAAEF,UAAxC;AAAoD,MAAA,QAAQ,EAAEC,QAA9D;AAAwE,MAAA,QAAQ,EAAEK;AAAlF,OACG,CAAC;AAAEkC,MAAAA,QAAF;AAAY3B,MAAAA,OAAZ;AAAqB4B,MAAAA,MAArB;AAA6BC,MAAAA,OAA7B;AAAsCC,MAAAA;AAAtC,KAAD;AAAA;;AAAA,aACC,CAAC7B,aAAD,IAAkB,CAACU,kBAAnB,IAAyCZ,IAAzC,gBACE,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,MAAD,qBACE,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAE;AAAZ,4DADF,EAGG6B,MAAM,IAAIA,MAAM,CAACG,KAAjB,iBACC,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAd;AAAiC,QAAA,UAAU,EAAE;AAA7C,8JAJJ,eAQE,oBAAC,KAAD;AACE,QAAA,IAAI,EAAE,MADR;AAEE,QAAA,IAAI,EAAE,OAFR;AAGE,QAAA,GAAG,EAAEL,QAAQ,CAAC;AAAEM,UAAAA,QAAQ,EAAE;AAAZ,SAAD,CAHf;AAIE,QAAA,YAAY,EAAEH,SAAS,CAAC,OAAD,CAAT,wBAAsB/B,IAAI,CAACS,SAA3B,oDAAsB,gBAAgBuB,KAAtC,CAJhB;AAKE,QAAA,WAAW,EAAE,UALf;AAME,QAAA,UAAU,EAAE,OANd;AAOE,QAAA,QAAQ,EAAE/B;AAPZ,QARF,eAkBE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,QADR;AAEE,QAAA,OAAO,EAAE6B,OAFX;AAGE,QAAA,YAAY,EACV,oBAAA9B,IAAI,CAACS,SAAL,8DAAgB0B,MAAhB,GACI;AACEC,UAAAA,KAAK,EAAEpC,IAAI,CAACS,SAAL,CAAe0B,MAAf,CAAsB5B,EAD/B;AAEE8B,UAAAA,KAAK,EAAErC,IAAI,CAACS,SAAL,CAAe0B,MAAf,CAAsBG;AAF/B,SADJ,GAKI,IATR;AAWE,QAAA,MAAM,EAAE,CAAC;AAAEF,UAAAA,KAAF;AAASG,UAAAA;AAAT,SAAD,kBACN,oBAAC,MAAD;AACE,UAAA,OAAO,EAAEzC,KAAK,CAAC0C,GAAN,CAAWC,IAAD,KAAW;AAC5BL,YAAAA,KAAK,EAAEK,IADqB;AAE5BJ,YAAAA,KAAK,EAAEI,IAAI,CAACH;AAFgB,WAAX,CAAV,CADX;AAKE,UAAA,UAAU,EAAE,OALd;AAME,UAAA,YAAY,EAAEF,KANhB,CAOE;AAPF;AAQE,UAAA,WAAW,EAAE,2BARf;AASE,UAAA,QAAQ,EAAEG,QATZ,CAUE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBF;AAmBE,UAAA,oBAAoB,EAAE,YAAY;AAChC,kBAAMrB,WAAW,CAAC;AAChBZ,cAAAA,SAAS,EAAE;AACTc,gBAAAA,MAAM,EAAExB,WADC;AAETyB,gBAAAA,KAAK,EAAEpC;AAFE,eADK;AAKhByD,cAAAA,WAAW,EAAE,CAAC,GAAG/C,KAAJ,KAAcA;AALX,aAAD,CAAjB;AAOAE,YAAAA,cAAc,CAAE6B,IAAD,IAAUA,IAAI,GAAGzC,WAAlB,CAAd;AACD,WA5BH;AA6BE,UAAA,SAAS,EAAE+B,YA7Bb,CA8BE;;AA9BF;AAZJ,QAlBF,eAiEE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,YADR;AAEE,QAAA,OAAO,EAAEc,OAFX;AAGE,QAAA,YAAY,EACV,oBAAA9B,IAAI,CAACS,SAAL,8DAAgBkC,UAAhB,GACI;AACEP,UAAAA,KAAK,EAAEpC,IAAI,CAACS,SAAL,CAAekC,UAAf,CAA0BpC,EADnC;AAEE8B,UAAAA,KAAK,EAAErC,IAAI,CAACS,SAAL,CAAekC,UAAf,CAA0BL;AAFnC,SADJ,GAKI,IATR;AAWE,QAAA,MAAM,EAAE,CAAC;AAAEF,UAAAA,KAAF;AAASG,UAAAA;AAAT,SAAD,kBACN,oBAAC,MAAD;AACE,UAAA,OAAO,EACL,CAACvB,YAAD,IAAiBD,SAAjB,GACIA,SAAS,CAACY,QAAV,CAAmBa,GAAnB,CAAwBC,IAAD,KAAW;AAChCL,YAAAA,KAAK,EAAEK,IADyB;AAEhCJ,YAAAA,KAAK,EAAEI,IAAI,CAACH;AAFoB,WAAX,CAAvB,CADJ,GAKI,EAPR;AASE,UAAA,UAAU,EAAE,OATd;AAUE,UAAA,YAAY,EAAEF,KAVhB;AAWE,UAAA,WAAW,EAAE,oBAXf;AAYE,UAAA,QAAQ,EAAEG,QAZZ;AAaE,UAAA,oBAAoB,EAAE,YAAY;AAChC,kBAAMrB,WAAW,CAAC;AAChBZ,cAAAA,SAAS,EAAE;AACTc,gBAAAA,MAAM,EAAExB,WADC;AAETyB,gBAAAA,KAAK,EAAEpC;AAFE,eADK;AAKhByD,cAAAA,WAAW,EAAE,CAAC,GAAG/C,KAAJ,KAAcA;AALX,aAAD,CAAjB;AAOAE,YAAAA,cAAc,CAAE6B,IAAD,IAAUA,IAAI,GAAGzC,WAAlB,CAAd;AACD,WAtBH;AAuBE,UAAA,SAAS,EAAE+B;AAvBb;AAZJ,QAjEF,eAyGE,oBAAC,UAAD;AACE,QAAA,IAAI,EAAE,UADR;AAEE,QAAA,OAAO,EAAEc,OAFX;AAGE,QAAA,YAAY,EACV,oBAAA9B,IAAI,CAACS,SAAL,8DAAgBmC,QAAhB,GACI;AACER,UAAAA,KAAK,EAAEpC,IAAI,CAACS,SAAL,CAAemC,QAAf,CAAwBrC,EADjC;AAEE8B,UAAAA,KAAK,EAAEzD,gBAAgB,CAACoB,IAAI,CAACS,SAAL,CAAemC,QAAf,CAAwBN,IAAzB;AAFzB,SADJ,GAKI,IATR;AAWE,QAAA,MAAM,EAAE,CAAC;AAAEF,UAAAA,KAAF;AAASG,UAAAA;AAAT,SAAD,kBACN,oBAAC,MAAD;AACE,UAAA,UAAU,EAAE,OADd;AAEE,UAAA,WAAW,EAAE,iBAFf;AAGE,UAAA,OAAO,EACL,CAAChB,iBAAD,IAAsBD,cAAtB,GACIA,cAAc,CAACuB,aAAf,CACGC,MADH,CACWC,IAAD,IAAUA,IAAI,CAACtB,IAAL,KAAc,QADlC,EAEGe,GAFH,CAEQO,IAAD,KAAW;AACdX,YAAAA,KAAK,EAAEW,IAAI,CAACxC,EADE;AAEd8B,YAAAA,KAAK,EAAEzD,gBAAgB,CAACmE,IAAI,CAACT,IAAN;AAFT,WAAX,CAFP,CADJ,GAOI,EAXR;AAaE,UAAA,QAAQ,EAAEC,QAbZ;AAcE,UAAA,YAAY,EAAEH,KAdhB;AAeE,UAAA,SAAS,EAAEb,iBAfb;AAgBE,UAAA,WAAW;AAhBb;AAZJ,QAzGF,CADF,eA4IE,oBAAC,OAAD;AAAS,QAAA,KAAK;AAAd,QA5IF,eA8IE,oBAAC,GAAD,qBACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AAAEyB,UAAAA,QAAQ,EAAE;AAAZ,SAAf;AAAgC,QAAA,IAAI,EAAE,QAAtC;AAAgD,QAAA,QAAQ,EAAE/C;AAA1D,sDADF,CA9IF,CADF,GAqJIG,WAAW,IAAIS,gBAAf,gBACF,oBAAC,KAAD;AAAO,QAAA,UAAU,EAAE,OAAnB;AAA4B,QAAA,KAAK,EAAE;AAAEoB,UAAAA,KAAK,EAAE,MAAT;AAAiBgB,UAAAA,SAAS,EAAE;AAA5B;AAAnC,+QADE,gBAKF,oBAAC,MAAD,qBACE,oBAAC,OAAD,OADF,CA3JH;AAAA,KADH,CADF;AAoKD;;AAED,sBACE,oBAAC,UAAD,eACMtD,KADN;AAEE,IAAA,MAAM,EAAE,CAAAgB,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAED,WAAjB,MAAgCV,IAAhC,aAAgCA,IAAhC,uBAAgCA,IAAI,CAAES,SAAtC,CAFV;AAGE,IAAA,OAAO,EAAEP,aAHX;AAIE,IAAA,MAAM,EAAEV,MAJV;AAKE,IAAA,QAAQ,EAAE,MACRkB,WAAW,CAAC;AACVJ,MAAAA,SAAS,EAAE;AACTC,QAAAA,EAAE,EAAEpB;AADK;AADD,KAAD,CANf;AAYE,IAAA,QAAQ,EAAEI,QAZZ;AAaE,IAAA,QAAQ,EAAEE,QAbZ;AAcE,IAAA,QAAQ,EAAEC;AAdZ,KADF;AAkBD,CA9OM;;GAAMR,M;UAgBPjB,Q,EAWAC,W,EAOAD,Q,EAOyDA,Q;;;KAzClDiB,M;AAgPb,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Controller } from 'react-hook-form'\nimport { useQuery, useMutation } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Title from '../../atomic-ui/components/Title'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Select from '../../atomic-ui/components/Select'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { getLabelCategory } from '../../utils/functions'\nimport { Loader } from '../Styled'\nimport Form from '../Form'\nimport TicketChat from '../TicketChat'\nimport queries from '../../graphql/queries'\n\nexport const LIMIT_USERS = 15\n\nexport const Ticket = ({\n  ticket,\n  appearance,\n  mutation,\n  className,\n  onReport,\n  onLink,\n  onAttach,\n  onSubmit,\n  ...props\n}) => {\n  const [offsetUsers, setOffsetUsers] = useState(0)\n  // const [usersSelectInput, setUsersSelectInput] = useState('')\n  const [users, setUsers] = useState([])\n\n  const { data, loading: loadingTicket, error: errorTicket } = ticket\n    ? useQuery(queries.GET_TICKET, {\n        variables: {\n          id: ticket\n        },\n        fetchPolicy: 'no-cache'\n      })\n    : { data: { getTicket: {} }, loading: false, error: false }\n\n  const [\n    closeTicket,\n    { data: dataCloseTicket, loading: loadingCloseTicket, error: errorCloseTicket }\n  ] = useMutation(queries.CLOSE_TICKET)\n\n  const {\n    data: dataUsers,\n    loading: loadingUsers,\n    // refetch: searchUsers,\n    fetchMore: updateUsers\n  } = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      offset: offsetUsers,\n      limit: LIMIT_USERS\n    }\n  })\n\n  const { data: dataCategories, loading: loadingCategories } = useQuery(queries.GET_CATEGORIES, {\n    variables: {\n      type: 'TICKET'\n    }\n  })\n\n  useEffect(() => {\n    if (!loadingUsers && dataUsers) {\n      setUsers((prev) => [...prev, ...dataUsers.getUsers])\n    }\n  }, [dataUsers, loadingUsers])\n\n  if (!ticket) {\n    return (\n      <Form className={className} appearance={appearance} mutation={mutation} onSubmit={onSubmit}>\n        {({ register, loading, errors, control, getValues }) =>\n          !loadingTicket && !loadingCloseTicket && data ? (\n            <React.Fragment>\n              <Column>\n                <Title tag={'h4'}>Основное</Title>\n\n                {errors && errors.title && (\n                  <Alert style={{ width: '100%' }} appearance={'error'}>\n                    Введите название обращение\n                  </Alert>\n                )}\n                <Input\n                  type={'text'}\n                  name={'title'}\n                  ref={register({ required: true })}\n                  defaultValue={getValues('title') || data.getTicket?.title}\n                  placeholder={'Название'}\n                  appearance={'ghost'}\n                  disabled={loading}\n                />\n\n                <Controller\n                  name={'author'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.author\n                      ? {\n                          value: data.getTicket.author.id,\n                          label: data.getTicket.author.name\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      options={users.map((user) => ({\n                        value: user,\n                        label: user.name\n                      }))}\n                      appearance={'ghost'}\n                      defaultValue={value}\n                      // inputValue={usersSelectInput}\n                      placeholder={'Выберите автора обращения'}\n                      onChange={onChange}\n                      // onInputChange={(input) => setUsersSelectInput(input)}\n                      // onKeyDown={(e) => {\n                      //   // Pressed ENTER\n                      //   if (e.keyCode === 13) {\n                      //     searchUsers({\n                      //       search: usersSelectInput\n                      //     })\n                      //   }\n                      // }}\n                      onMenuScrollToBottom={async () => {\n                        await updateUsers({\n                          variables: {\n                            offset: offsetUsers,\n                            limit: LIMIT_USERS\n                          },\n                          updateQuery: (...props) => props\n                        })\n                        setOffsetUsers((prev) => prev + LIMIT_USERS)\n                      }}\n                      isLoading={loadingUsers}\n                      // isSearchable\n                    />\n                  )}\n                />\n\n                <Controller\n                  name={'counsellor'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.counsellor\n                      ? {\n                          value: data.getTicket.counsellor.id,\n                          label: data.getTicket.counsellor.name\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      options={\n                        !loadingUsers && dataUsers\n                          ? dataUsers.getUsers.map((user) => ({\n                              value: user,\n                              label: user.name\n                            }))\n                          : []\n                      }\n                      appearance={'ghost'}\n                      defaultValue={value}\n                      placeholder={'Выберите советника'}\n                      onChange={onChange}\n                      onMenuScrollToBottom={async () => {\n                        await updateUsers({\n                          variables: {\n                            offset: offsetUsers,\n                            limit: LIMIT_USERS\n                          },\n                          updateQuery: (...props) => props\n                        })\n                        setOffsetUsers((prev) => prev + LIMIT_USERS)\n                      }}\n                      isLoading={loadingUsers}\n                    />\n                  )}\n                />\n\n                <Controller\n                  name={'category'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.category\n                      ? {\n                          value: data.getTicket.category.id,\n                          label: getLabelCategory(data.getTicket.category.name)\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      appearance={'ghost'}\n                      placeholder={'Выберите раздел'}\n                      options={\n                        !loadingCategories && dataCategories\n                          ? dataCategories.getCategories\n                              .filter((item) => item.type === 'TICKET')\n                              .map((item) => ({\n                                value: item.id,\n                                label: getLabelCategory(item.name)\n                              }))\n                          : []\n                      }\n                      onChange={onChange}\n                      defaultValue={value}\n                      isLoading={loadingCategories}\n                      isClearable\n                    />\n                  )}\n                />\n              </Column>\n\n              <Divider clear />\n\n              <Row>\n                <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n                  Создать\n                </Button>\n              </Row>\n            </React.Fragment>\n          ) : errorTicket || errorCloseTicket ? (\n            <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n              Упс! Не удалось загрузить информацию об обращении\n            </Alert>\n          ) : (\n            <Loader>\n              <Spinner />\n            </Loader>\n          )\n        }\n      </Form>\n    )\n  }\n\n  return (\n    <TicketChat\n      {...props}\n      ticket={dataCloseTicket?.closeTicket || data?.getTicket}\n      loading={loadingTicket}\n      onLink={onLink}\n      onFinish={() =>\n        closeTicket({\n          variables: {\n            id: ticket\n          }\n        })\n      }\n      onReport={onReport}\n      onAttach={onAttach}\n      onSubmit={onSubmit}\n    />\n  )\n}\n\nexport default Ticket\n"]},"metadata":{},"sourceType":"module"}
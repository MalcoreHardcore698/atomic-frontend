{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport DashboardLayout from '../../layouts/dashboard';\nimport FormSettings from '../../components/FormSettings';\nimport Processed from '../../components/Processed';\nimport { setItem } from '../../store/actions/snacks';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Настройки';\nconst Container = styled.div.withConfig({\n  displayName: \"settings__Container\",\n  componentId: \"mgp0x9-0\"\n})([\"width:100%;max-width:745px;@media only screen and (max-width:768px){max-width:100%;}\"]);\n_c = Container;\n\nconst Settings = () => {\n  _s();\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_META_DASHBOARD_SETTINGS);\n  const [settings, setSettings] = useState(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!loading && data) {\n      setSettings(data.getDashboardSettings);\n    }\n  }, [data, loading]);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'setting',\n    text: TITLE\n  }), /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Processed, {\n    data: data === null || data === void 0 ? void 0 : data.getDashboardSettings,\n    loading: loading,\n    error: error,\n    errorMessage: 'Упс! Не удалось получить настройки',\n    emptyMessage: 'Кажется настройки не были созданы'\n  }, /*#__PURE__*/React.createElement(FormSettings, {\n    settings: settings,\n    mutation: queries.UPDATE_META_DASHBOARD_SETTINGS,\n    onSubmit: async (form, action) => {\n      try {\n        var _form$general, _form$general$logotyp, _form$general2, _form$general2$logoty, _form$scaffold, _form$scaffold2, _form$scaffold2$prima, _form$scaffold3, _form$scaffold3$resid, _form$scaffold4, _form$scaffold4$backg, _form$scaffold5, _form$scaffold5$backg, _form$meta, _form$meta2;\n\n        const input = {\n          general: {\n            logotype: (_form$general = form.general) === null || _form$general === void 0 ? void 0 : (_form$general$logotyp = _form$general.logotype) === null || _form$general$logotyp === void 0 ? void 0 : _form$general$logotyp.file,\n            logotypeSize: (_form$general2 = form.general) === null || _form$general2 === void 0 ? void 0 : (_form$general2$logoty = _form$general2.logotype) === null || _form$general2$logoty === void 0 ? void 0 : _form$general2$logoty.size\n          },\n          scaffold: {\n            title: (_form$scaffold = form.scaffold) === null || _form$scaffold === void 0 ? void 0 : _form$scaffold.title,\n            primary: (_form$scaffold2 = form.scaffold) === null || _form$scaffold2 === void 0 ? void 0 : (_form$scaffold2$prima = _form$scaffold2.primary) === null || _form$scaffold2$prima === void 0 ? void 0 : _form$scaffold2$prima.value,\n            residues: (_form$scaffold3 = form.scaffold) === null || _form$scaffold3 === void 0 ? void 0 : (_form$scaffold3$resid = _form$scaffold3.residues) === null || _form$scaffold3$resid === void 0 ? void 0 : _form$scaffold3$resid.map(residue => residue.value),\n            background: (_form$scaffold4 = form.scaffold) === null || _form$scaffold4 === void 0 ? void 0 : (_form$scaffold4$backg = _form$scaffold4.background) === null || _form$scaffold4$backg === void 0 ? void 0 : _form$scaffold4$backg.file,\n            backgroundSize: (_form$scaffold5 = form.scaffold) === null || _form$scaffold5 === void 0 ? void 0 : (_form$scaffold5$backg = _form$scaffold5.background) === null || _form$scaffold5$backg === void 0 ? void 0 : _form$scaffold5$backg.size\n          },\n          meta: {\n            title: (_form$meta = form.meta) === null || _form$meta === void 0 ? void 0 : _form$meta.title,\n            description: (_form$meta2 = form.meta) === null || _form$meta2 === void 0 ? void 0 : _form$meta2.description\n          }\n        };\n        console.log(form, input);\n        const result = await action({\n          variables: {\n            input\n          }\n        });\n        setSettings(result.updateMetaDashboardSettings);\n        dispatch(setItem({\n          type: 'success',\n          message: 'Настройки успешно изменены'\n        }));\n      } catch (_unused) {\n        dispatch(setItem({\n          type: 'error',\n          message: 'Не удалось изменить настройки'\n        }));\n      }\n    }\n  }))));\n};\n\n_s(Settings, \"Xb4xrbuwlhq0Yy1Q0xN8Thsdj3Y=\", false, function () {\n  return [useQuery, useDispatch];\n});\n\n_c2 = Settings;\nexport default Settings;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Settings\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/settings.js"],"names":["React","useState","useEffect","styled","useDispatch","useQuery","Difinition","DashboardLayout","FormSettings","Processed","setItem","queries","TITLE","Container","div","Settings","data","loading","error","GET_META_DASHBOARD_SETTINGS","settings","setSettings","dispatch","getDashboardSettings","UPDATE_META_DASHBOARD_SETTINGS","form","action","input","general","logotype","file","logotypeSize","size","scaffold","title","primary","value","residues","map","residue","background","backgroundSize","meta","description","console","log","result","variables","updateMetaDashboardSettings","type","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useDispatch } from 'react-redux'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Difinition from '../../atomic-ui/components/Difinition'\n\nimport DashboardLayout from '../../layouts/dashboard'\nimport FormSettings from '../../components/FormSettings'\nimport Processed from '../../components/Processed'\nimport { setItem } from '../../store/actions/snacks'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Настройки'\n\nconst Container = styled.div`\n  width: 100%;\n  max-width: 745px;\n\n  @media only screen and (max-width: 768px) {\n    max-width: 100%;\n  }\n`\n\nconst Settings = () => {\n  const { data, loading, error } = useQuery(queries.GET_META_DASHBOARD_SETTINGS)\n  const [settings, setSettings] = useState(null)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (!loading && data) {\n      setSettings(data.getDashboardSettings)\n    }\n  }, [data, loading])\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <Difinition icon={'setting'} text={TITLE} />\n\n      <Container>\n        <Processed\n          data={data?.getDashboardSettings}\n          loading={loading}\n          error={error}\n          errorMessage={'Упс! Не удалось получить настройки'}\n          emptyMessage={'Кажется настройки не были созданы'}>\n          <FormSettings\n            settings={settings}\n            mutation={queries.UPDATE_META_DASHBOARD_SETTINGS}\n            onSubmit={async (form, action) => {\n              try {\n                const input = {\n                  general: {\n                    logotype: form.general?.logotype?.file,\n                    logotypeSize: form.general?.logotype?.size\n                  },\n                  scaffold: {\n                    title: form.scaffold?.title,\n                    primary: form.scaffold?.primary?.value,\n                    residues: form.scaffold?.residues?.map((residue) => residue.value),\n                    background: form.scaffold?.background?.file,\n                    backgroundSize: form.scaffold?.background?.size\n                  },\n                  meta: {\n                    title: form.meta?.title,\n                    description: form.meta?.description\n                  }\n                }\n                console.log(form, input)\n                const result = await action({\n                  variables: {\n                    input\n                  }\n                })\n                setSettings(result.updateMetaDashboardSettings)\n                dispatch(\n                  setItem({\n                    type: 'success',\n                    message: 'Настройки успешно изменены'\n                  })\n                )\n              } catch {\n                dispatch(\n                  setItem({\n                    type: 'error',\n                    message: 'Не удалось изменить настройки'\n                  })\n                )\n              }\n            }}\n          />\n        </Processed>\n      </Container>\n    </DashboardLayout>\n  )\n}\n\nexport default Settings\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row, { Wrap as WrapRow } from '../../atomic-ui/components/Row';\nimport Difinition, { Wrap as WrapDifinition } from '../../atomic-ui/components/Difinition';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Image from '../../atomic-ui/components/Image';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nexport const Poster = styled(Image).withConfig({\n  displayName: \"ProjectCard__Poster\",\n  componentId: \"g3ik0u-0\"\n})([\"position:relative;width:100%;height:100%;border-radius:var(--surface-border-radius);overflow:hidden;object-fit:cover;transition:opacity 150ms ease;\", \" \", \" @media only screen and (max-width:480px){min-height:128px;}\"], ({\n  layout\n}) => layout === 'column' && css([\"min-height:128px;\"]), ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.65;}\"]));\n_c = Poster;\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"ProjectCard__Wrap\",\n  componentId: \"g3ik0u-1\"\n})([\"grid-gap:var(--default-gap);height:100%;\", \" \", \" \", \" \", \"\"], ({\n  layout\n}) => layout === 'column' && css([\"display:flex;flex-wrap:wrap;\"]), ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\n_c2 = Wrap;\nexport const Content = styled(Row).withConfig({\n  displayName: \"ProjectCard__Content\",\n  componentId: \"g3ik0u-2\"\n})([\"display:grid;grid-template-columns:1fr 2fr;flex-grow:1000;width:100%;\", \" @media only screen and (max-width:480px){grid-template-columns:1fr;grid-gap:var(--default-gap);width:100%;}\"], ({\n  layout\n}) => layout && css([\"display:flex;flex-direction:column;grid-gap:var(--default-gap);\"]));\n_c3 = Content;\nexport const Screenshots = styled(Row).withConfig({\n  displayName: \"ProjectCard__Screenshots\",\n  componentId: \"g3ik0u-3\"\n})([\"justify-content:space-between;grid-gap:5px;\"]);\n_c4 = Screenshots;\nexport const Screenshot = styled.div.withConfig({\n  displayName: \"ProjectCard__Screenshot\",\n  componentId: \"g3ik0u-4\"\n})([\"position:relative;z-index:var(--z-12);width:auto;height:var(--input-height-s);min-width:var(--input-height-s);min-height:var(--input-height-s);border-radius:var(--surface-border-radius);overflow:hidden;flex-grow:1;transition:opacity 150ms ease;\", \" img{width:100%;height:100%;object-fit:cover;}\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.65;}\"]));\n_c5 = Screenshot;\nexport const ScreenshotsCounter = styled(Text).withConfig({\n  displayName: \"ProjectCard__ScreenshotsCounter\",\n  componentId: \"g3ik0u-5\"\n})([\"position:absolute;top:0;left:0;z-index:var(--z-10);display:flex;justify-content:center;align-items:center;width:100%;height:100%;span{position:relative;z-index:var(--z-12);color:white;}&::before{content:'';position:absolute;top:0;left:0;z-index:var(--z-10);display:flex;justify-content:center;align-items:center;width:100%;height:100%;background:var(--default-color-accent);border-radius:var(--surface-border-radius);opacity:0.65;}\"]);\n_c6 = ScreenshotsCounter;\nexport const Media = styled(Column).withConfig({\n  displayName: \"ProjectCard__Media\",\n  componentId: \"g3ik0u-6\"\n})([\"grid-gap:5px;\"]);\n_c7 = Media;\nexport const CentralAlert = styled(Alert).withConfig({\n  displayName: \"ProjectCard__CentralAlert\",\n  componentId: \"g3ik0u-7\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;text-align:center;\"]);\n_c8 = CentralAlert;\nexport const Header = styled(Row).withConfig({\n  displayName: \"ProjectCard__Header\",\n  componentId: \"g3ik0u-8\"\n})([\"justify-content:space-between;align-items:center;\"]);\n_c9 = Header;\nexport const Actions = styled(Row).withConfig({\n  displayName: \"ProjectCard__Actions\",\n  componentId: \"g3ik0u-9\"\n})([\"grid-gap:5px;\"]);\n_c10 = Actions;\nexport const Name = styled(Title).withConfig({\n  displayName: \"ProjectCard__Name\",\n  componentId: \"g3ik0u-10\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\n_c11 = Name;\nexport const ShortText = styled(Text).withConfig({\n  displayName: \"ProjectCard__ShortText\",\n  componentId: \"g3ik0u-11\"\n})([\"display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;text-overflow:ellipsis;\"]);\n_c12 = ShortText;\nexport const Company = styled(Difinition).withConfig({\n  displayName: \"ProjectCard__Company\",\n  componentId: \"g3ik0u-12\"\n})([\"h4{max-width:250px;white-space:nowrap;font-size:var(--font-size-m);font-weight:var(--font-weight-bold);text-overflow:ellipsis;line-height:1;overflow:hidden;}\"]);\n_c13 = Company;\nexport const Footer = styled(Row).withConfig({\n  displayName: \"ProjectCard__Footer\",\n  componentId: \"g3ik0u-13\"\n})([\"justify-content:space-between;align-items:center;grid-gap:var(--default-gap);flex-grow:1;@media only screen and (max-width:480px){flex-direction:column;\", \"{flex-grow:1;width:100%;}\", \"{flex-grow:1;width:100%;\", \"{flex-grow:1;button{width:100%;}}}}\"], WrapDifinition, WrapRow, WrapTooltip);\n_c14 = Footer;\nexport const Card = ({\n  layout,\n  project,\n  appearance,\n  className,\n  style,\n  preview,\n  slicedFactor = 4,\n  liked,\n  owned,\n  onAdd,\n  onLink,\n  onLike,\n  onScreenshotClick,\n  onCompanyLink,\n  onChecked,\n  onEdit,\n  onDelete\n}) => {\n  _s();\n\n  var _project$screenshots, _project$screenshots2, _project$screenshots3, _project$category, _project$category2, _project$company, _project$company$avat, _project$company2, _project$company3, _project$company4;\n\n  const [isLiked, setLike] = useState(liked);\n  const screenshots = (project === null || project === void 0 ? void 0 : (_project$screenshots = project.screenshots) === null || _project$screenshots === void 0 ? void 0 : _project$screenshots.slice(0, slicedFactor)) || [];\n  const residue = ((project === null || project === void 0 ? void 0 : (_project$screenshots2 = project.screenshots) === null || _project$screenshots2 === void 0 ? void 0 : _project$screenshots2.length) || slicedFactor) - slicedFactor;\n\n  const onClickLike = () => {\n    if (onLike) onLike();\n    setLike(!isLiked);\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance,\n    layout: layout\n  }, /*#__PURE__*/React.createElement(Content, {\n    layout: layout\n  }, /*#__PURE__*/React.createElement(Media, null, project.preview ? /*#__PURE__*/React.createElement(Poster, {\n    src: project.preview.path,\n    alt: project.title,\n    onClick: () => onScreenshotClick && onScreenshotClick(project.preview, project.preview.id),\n    magnify: true\n  }) : /*#__PURE__*/React.createElement(CentralAlert, null, \"\\u041F\\u0440\\u0435\\u0432\\u044C\\u044E \\u043D\\u0435\\u0442\"), project.screenshots && ((_project$screenshots3 = project.screenshots) === null || _project$screenshots3 === void 0 ? void 0 : _project$screenshots3.length) > 0 && /*#__PURE__*/React.createElement(Screenshots, null, screenshots.map((screenshot, index) => /*#__PURE__*/React.createElement(Screenshot, {\n    key: screenshot.id,\n    onClick: () => onScreenshotClick && onScreenshotClick(screenshot, screenshot.id)\n  }, /*#__PURE__*/React.createElement(Image, {\n    src: screenshot.path,\n    layout: 'fill',\n    alt: screenshot.name\n  }), index === (screenshots === null || screenshots === void 0 ? void 0 : screenshots.length) - 1 && residue > 0 && /*#__PURE__*/React.createElement(ScreenshotsCounter, null, /*#__PURE__*/React.createElement(\"span\", null, \"+\", residue)))))), /*#__PURE__*/React.createElement(Column, {\n    style: {\n      gridGap: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Tooltip, {\n    place: 'top',\n    text: (_project$category = project.category) === null || _project$category === void 0 ? void 0 : _project$category.name\n  }, /*#__PURE__*/React.createElement(Meta, {\n    category: (_project$category2 = project.category) === null || _project$category2 === void 0 ? void 0 : _project$category2.name,\n    short: true\n  })), (onChecked || onEdit || onDelete) && /*#__PURE__*/React.createElement(Actions, null, onDelete && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить проект'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    appearance: 'red',\n    onClick: onDelete\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), onEdit && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактировать проект'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    onClick: onEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), onChecked && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отметить проект',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, null)))), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: onLink\n  }, project.title), /*#__PURE__*/React.createElement(ShortText, null, project.description))), !preview && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Footer, null, /*#__PURE__*/React.createElement(Company, _extends({}, project.company ? {\n    img: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : (_project$company$avat = _project$company.avatar) === null || _project$company$avat === void 0 ? void 0 : _project$company$avat.path\n  } : {\n    icon: 'work'\n  }, {\n    label: 'Компания',\n    text: ((_project$company2 = project.company) === null || _project$company2 === void 0 ? void 0 : _project$company2.name) || '-',\n    tooltip: (_project$company3 = project.company) === null || _project$company3 === void 0 ? void 0 : _project$company3.name,\n    onLink: ((_project$company4 = project.company) === null || _project$company4 === void 0 ? void 0 : _project$company4.email) && onCompanyLink\n  })), !owned && (onLike || onAdd) && /*#__PURE__*/React.createElement(Row, null, onLike && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Мне нравится'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onClickLike,\n    revert: !isLiked\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'heart',\n    stroke: isLiked ? 'white' : 'var(--default-color-accent)'\n  }))), onAdd && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Добавить проект к себе'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onAdd,\n    revert: true\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'var(--default-color-accent)'\n  })))))));\n};\n\n_s(Card, \"wrhcKIxrj4V3vp2yIC1WMZmG2NU=\");\n\n_c15 = Card;\nCard.defaultProps = {\n  appearance: 'default'\n};\nexport default Card;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15;\n\n$RefreshReg$(_c, \"Poster\");\n$RefreshReg$(_c2, \"Wrap\");\n$RefreshReg$(_c3, \"Content\");\n$RefreshReg$(_c4, \"Screenshots\");\n$RefreshReg$(_c5, \"Screenshot\");\n$RefreshReg$(_c6, \"ScreenshotsCounter\");\n$RefreshReg$(_c7, \"Media\");\n$RefreshReg$(_c8, \"CentralAlert\");\n$RefreshReg$(_c9, \"Header\");\n$RefreshReg$(_c10, \"Actions\");\n$RefreshReg$(_c11, \"Name\");\n$RefreshReg$(_c12, \"ShortText\");\n$RefreshReg$(_c13, \"Company\");\n$RefreshReg$(_c14, \"Footer\");\n$RefreshReg$(_c15, \"Card\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/ProjectCard/index.js"],"names":["React","useState","styled","css","Row","Wrap","WrapRow","Difinition","WrapDifinition","Tooltip","WrapTooltip","Column","Title","Text","Icon","Image","Meta","Alert","Divider","Button","Checkbox","Poster","layout","onClick","appearance","Content","Screenshots","Screenshot","div","ScreenshotsCounter","Media","CentralAlert","Header","Actions","Name","ShortText","Company","Footer","Card","project","className","style","preview","slicedFactor","liked","owned","onAdd","onLink","onLike","onScreenshotClick","onCompanyLink","onChecked","onEdit","onDelete","isLiked","setLike","screenshots","slice","residue","length","onClickLike","path","title","id","map","screenshot","index","name","gridGap","category","description","company","img","avatar","icon","email","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Row, { Wrap as WrapRow } from '../../atomic-ui/components/Row'\nimport Difinition, { Wrap as WrapDifinition } from '../../atomic-ui/components/Difinition'\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Image from '../../atomic-ui/components/Image'\nimport Meta from '../../atomic-ui/components/Meta'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Button from '../../atomic-ui/components/Button'\nimport Checkbox from '../../atomic-ui/components/Checkbox'\n\nexport const Poster = styled(Image)`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border-radius: var(--surface-border-radius);\n  overflow: hidden;\n  object-fit: cover;\n  transition: opacity 150ms ease;\n\n  ${({ layout }) =>\n    layout === 'column' &&\n    css`\n      min-height: 128px;\n    `}\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n\n  @media only screen and (max-width: 480px) {\n    min-height: 128px;\n  }\n`\n\nexport const Wrap = styled(Column)`\n  grid-gap: var(--default-gap);\n  height: 100%;\n\n  ${({ layout }) =>\n    layout === 'column' &&\n    css`\n      display: flex;\n      flex-wrap: wrap;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const Content = styled(Row)`\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  flex-grow: 1000;\n  width: 100%;\n\n  ${({ layout }) =>\n    layout &&\n    css`\n      display: flex;\n      flex-direction: column;\n      grid-gap: var(--default-gap);\n    `}\n\n  @media only screen and (max-width: 480px) {\n    grid-template-columns: 1fr;\n    grid-gap: var(--default-gap);\n    width: 100%;\n  }\n`\n\nexport const Screenshots = styled(Row)`\n  justify-content: space-between;\n  grid-gap: 5px;\n`\n\nexport const Screenshot = styled.div`\n  position: relative;\n  z-index: var(--z-12);\n  width: auto;\n  height: var(--input-height-s);\n  min-width: var(--input-height-s);\n  min-height: var(--input-height-s);\n  border-radius: var(--surface-border-radius);\n  overflow: hidden;\n  flex-grow: 1;\n  transition: opacity 150ms ease;\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n\n  img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n  }\n`\n\nexport const ScreenshotsCounter = styled(Text)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: var(--z-10);\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n\n  span {\n    position: relative;\n    z-index: var(--z-12);\n    color: white;\n  }\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: var(--z-10);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    background: var(--default-color-accent);\n    border-radius: var(--surface-border-radius);\n    opacity: 0.65;\n  }\n`\n\nexport const Media = styled(Column)`\n  grid-gap: 5px;\n`\n\nexport const CentralAlert = styled(Alert)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const Actions = styled(Row)`\n  grid-gap: 5px;\n`\n\nexport const Name = styled(Title)`\n  transition: opacity 150ms ease;\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.45;\n      }\n    `}\n`\n\nexport const ShortText = styled(Text)`\n  display: -webkit-box;\n  -webkit-line-clamp: 3;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`\n\nexport const Company = styled(Difinition)`\n  h4 {\n    max-width: 250px;\n    white-space: nowrap;\n    font-size: var(--font-size-m);\n    font-weight: var(--font-weight-bold);\n    text-overflow: ellipsis;\n    line-height: 1;\n    overflow: hidden;\n  }\n`\n\nexport const Footer = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n  grid-gap: var(--default-gap);\n  flex-grow: 1;\n\n  @media only screen and (max-width: 480px) {\n    flex-direction: column;\n\n    ${WrapDifinition} {\n      flex-grow: 1;\n      width: 100%;\n    }\n\n    ${WrapRow} {\n      flex-grow: 1;\n      width: 100%;\n\n      ${WrapTooltip} {\n        flex-grow: 1;\n\n        button {\n          width: 100%;\n        }\n      }\n    }\n  }\n`\n\nexport const Card = ({\n  layout,\n  project,\n  appearance,\n  className,\n  style,\n  preview,\n  slicedFactor = 4,\n  liked,\n  owned,\n  onAdd,\n  onLink,\n  onLike,\n  onScreenshotClick,\n  onCompanyLink,\n  onChecked,\n  onEdit,\n  onDelete\n}) => {\n  const [isLiked, setLike] = useState(liked)\n  const screenshots = project?.screenshots?.slice(0, slicedFactor) || []\n  const residue = (project?.screenshots?.length || slicedFactor) - slicedFactor\n\n  const onClickLike = () => {\n    if (onLike) onLike()\n    setLike(!isLiked)\n  }\n\n  return (\n    <Wrap className={className} style={style} appearance={appearance} layout={layout}>\n      <Content layout={layout}>\n        <Media>\n          {project.preview ? (\n            <Poster\n              src={project.preview.path}\n              alt={project.title}\n              onClick={() =>\n                onScreenshotClick && onScreenshotClick(project.preview, project.preview.id)\n              }\n              magnify\n            />\n          ) : (\n            <CentralAlert>Превью нет</CentralAlert>\n          )}\n          {project.screenshots && project.screenshots?.length > 0 && (\n            <Screenshots>\n              {screenshots.map((screenshot, index) => (\n                <Screenshot\n                  key={screenshot.id}\n                  onClick={() => onScreenshotClick && onScreenshotClick(screenshot, screenshot.id)}>\n                  <Image src={screenshot.path} layout={'fill'} alt={screenshot.name} />\n                  {index === screenshots?.length - 1 && residue > 0 && (\n                    <ScreenshotsCounter>\n                      <span>+{residue}</span>\n                    </ScreenshotsCounter>\n                  )}\n                </Screenshot>\n              ))}\n            </Screenshots>\n          )}\n        </Media>\n\n        <Column style={{ gridGap: 5 }}>\n          <Header>\n            <Tooltip place={'top'} text={project.category?.name}>\n              <Meta category={project.category?.name} short />\n            </Tooltip>\n\n            {(onChecked || onEdit || onDelete) && (\n              <Actions>\n                {onDelete && (\n                  <Tooltip text={'Удалить проект'}>\n                    <Button kind={'icon'} size={'xs'} appearance={'red'} onClick={onDelete}>\n                      <Icon icon={'delete'} size={'xs'} stroke={'white'} />\n                    </Button>\n                  </Tooltip>\n                )}\n                {onEdit && (\n                  <Tooltip text={'Редактировать проект'}>\n                    <Button kind={'icon'} size={'xs'} onClick={onEdit}>\n                      <Icon icon={'edit'} size={'xs'} stroke={'white'} />\n                    </Button>\n                  </Tooltip>\n                )}\n                {onChecked && (\n                  <Tooltip text={'Отметить проект'} self>\n                    <Checkbox />\n                  </Tooltip>\n                )}\n              </Actions>\n            )}\n          </Header>\n\n          <Name tag={'h4'} onClick={onLink}>\n            {project.title}\n          </Name>\n\n          <ShortText>{project.description}</ShortText>\n        </Column>\n      </Content>\n\n      {!preview && (\n        <React.Fragment>\n          <Divider clear />\n\n          <Footer>\n            <Company\n              {...(project.company\n                ? {\n                    img: project.company?.avatar?.path\n                  }\n                : {\n                    icon: 'work'\n                  })}\n              label={'Компания'}\n              text={project.company?.name || '-'}\n              tooltip={project.company?.name}\n              onLink={project.company?.email && onCompanyLink}\n            />\n            {!owned && (onLike || onAdd) && (\n              <Row>\n                {onLike && (\n                  <Tooltip text={'Мне нравится'}>\n                    <Button type={'button'} kind={'icon'} onClick={onClickLike} revert={!isLiked}>\n                      <Icon\n                        icon={'heart'}\n                        stroke={isLiked ? 'white' : 'var(--default-color-accent)'}\n                      />\n                    </Button>\n                  </Tooltip>\n                )}\n                {onAdd && (\n                  <Tooltip text={'Добавить проект к себе'}>\n                    <Button type={'button'} kind={'icon'} onClick={onAdd} revert>\n                      <Icon icon={'add'} stroke={'var(--default-color-accent)'} />\n                    </Button>\n                  </Tooltip>\n                )}\n              </Row>\n            )}\n          </Footer>\n        </React.Fragment>\n      )}\n    </Wrap>\n  )\n}\n\nCard.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Card\n"]},"metadata":{},"sourceType":"module"}
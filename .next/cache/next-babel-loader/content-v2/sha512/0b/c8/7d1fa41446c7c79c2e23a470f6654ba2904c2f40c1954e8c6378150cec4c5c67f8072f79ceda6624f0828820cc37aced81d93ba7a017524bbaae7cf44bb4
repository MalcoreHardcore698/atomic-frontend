{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Member, { Content as MemberContent } from '../../atomic-ui/components/Member';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Search from '../../atomic-ui/components/Search';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport { Loader } from '../Styled';\nimport { Wrap as WrapForm } from '../Form';\nimport MessengerChat from '../MessengerChat';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Messenger__Wrap\",\n  componentId: \"sc-1hnkbvn-0\"\n})([\"height:100%;flex-grow:1;\", \"{width:100%;padding:0;}@media only screen and (max-width:568px){flex-direction:column;}\", \" \", \" \", \"\"], WrapForm, ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const ChatsSearch = styled(Search).withConfig({\n  displayName: \"Messenger__ChatsSearch\",\n  componentId: \"sc-1hnkbvn-1\"\n})([\"margin-bottom:10px;\"]);\nexport const Chats = styled(Column).withConfig({\n  displayName: \"Messenger__Chats\",\n  componentId: \"sc-1hnkbvn-2\"\n})([\"grid-gap:0;width:320px;@media only screen and (max-width:568px){width:100%;}\"]);\nexport const Chat = styled(Member).withConfig({\n  displayName: \"Messenger__Chat\",\n  componentId: \"sc-1hnkbvn-3\"\n})([\"margin:0;padding:10px 0;border-radius:var(--surface-border-radius);transition:all 150ms ease;\", \" \", \"\"], ({\n  noPaddingForPosition\n}) => noPaddingForPosition && css([\"\", \"{p{padding-right:0;}}\"], MemberContent), ({\n  active\n}) => active && css([\"background:var(--input-background);padding:10px;\"]));\nexport const getUnreadedMessages = (messages, sender) => (messages || []).reduce((acc, item) => {\n  var _item$user;\n\n  return acc + (item.type === 'UNREADED' && ((_item$user = item.user) === null || _item$user === void 0 ? void 0 : _item$user.email) !== sender ? 1 : 0);\n}, 0);\nexport const getLastMessage = (messages, sender) => {\n  var _message$user;\n\n  const list = messages || [];\n  const message = list[list.length - 1];\n  if (!message) return '';\n  return `${((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.email) === sender ? 'Вы: ' : ''}${message.text}`;\n};\nexport const getExtendMessages = (messages, sender) => messages.map(message => ({ ...message,\n  side: sender === message.user.email ? 'owner' : 'observer'\n}));\nexport const ChatOne = ({\n  sender,\n  chat,\n  currentChat,\n  setLoading,\n  setCurrentChat,\n  getChat,\n  getTicket,\n  refetchChat,\n  refetchTicket\n}) => {\n  var _chat$chat, _chat$chat2, _chat$chat2$members$f, _chat$chat3, _chat$chat4, _chat$chat5, _chat$chat6, _chat$category, _chat$chat9;\n\n  return /*#__PURE__*/React.createElement(Chat, {\n    name: ((_chat$chat = chat.chat) === null || _chat$chat === void 0 ? void 0 : _chat$chat.members.filter(member => member.email !== (sender === null || sender === void 0 ? void 0 : sender.email))[0].name) || chat.title,\n    avatar: ((_chat$chat2 = chat.chat) === null || _chat$chat2 === void 0 ? void 0 : (_chat$chat2$members$f = _chat$chat2.members.filter(member => member.email !== (sender === null || sender === void 0 ? void 0 : sender.email))[0].avatar) === null || _chat$chat2$members$f === void 0 ? void 0 : _chat$chat2$members$f.path) || (chat.chat ? '/images/avatar-default.png' : null),\n    budge: ((_chat$chat3 = chat.chat) === null || _chat$chat3 === void 0 ? void 0 : _chat$chat3.messages) && getUnreadedMessages((_chat$chat4 = chat.chat) === null || _chat$chat4 === void 0 ? void 0 : _chat$chat4.messages, sender === null || sender === void 0 ? void 0 : sender.email) || null,\n    position: ((_chat$chat5 = chat.chat) === null || _chat$chat5 === void 0 ? void 0 : _chat$chat5.messages) && getLastMessage((_chat$chat6 = chat.chat) === null || _chat$chat6 === void 0 ? void 0 : _chat$chat6.messages, sender === null || sender === void 0 ? void 0 : sender.email) || ((_chat$category = chat.category) === null || _chat$category === void 0 ? void 0 : _chat$category.name) || null,\n    onClick: async () => {\n      var _chat$chat7;\n\n      setLoading(true);\n\n      if ((_chat$chat7 = chat.chat) !== null && _chat$chat7 !== void 0 && _chat$chat7.id) {\n        var _chat$chat8;\n\n        const variables = {\n          id: (_chat$chat8 = chat.chat) === null || _chat$chat8 === void 0 ? void 0 : _chat$chat8.id\n        };\n        if (refetchChat) await refetchChat(variables);else await getChat({\n          variables\n        });\n        setCurrentChat(chat.chat);\n      } else {\n        const variables = {\n          id: chat.id\n        };\n        if (refetchTicket) await refetchTicket(variables);else await getTicket({\n          variables\n        });\n        setCurrentChat(chat);\n      }\n\n      setLoading(false);\n    },\n    active: currentChat && currentChat.id === (((_chat$chat9 = chat.chat) === null || _chat$chat9 === void 0 ? void 0 : _chat$chat9.id) || chat.id),\n    noPaddingForPosition: !chat.chat\n  });\n};\nexport const Messenger = ({\n  appearance,\n  recipient,\n  sender,\n  onAttach,\n  onMemberLink,\n  ...props\n}) => {\n  const [currentChat, setCurrentChat] = useState(null);\n  const [filteredUserChats, setFilteredUserChats] = useState(null);\n  const [filteredTicketChats, setFilteredTicketChats] = useState(null);\n  const [ticketChats, setTicketChats] = useState([]);\n  const [userChats, setUserChats] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [search, setSearch] = useState('');\n  const [getChat, {\n    data: chat,\n    loading: loadingChat,\n    error: errorChat,\n    refetch: refetchChat\n  }] = useLazyQuery(queries.GET_CHAT);\n  const [getTicket, {\n    data: ticket,\n    loading: loadingTicket,\n    error: errorTicket,\n    refetch: refetchTicket\n  }] = useLazyQuery(queries.GET_TICKET);\n  const {\n    data: dataUserChats,\n    loading: loadingUserChats,\n    error: errorUserChats,\n    refetch: getUserChats\n  } = useQuery(queries.GET_USER_CHATS);\n  const {\n    data: dataTicketChats,\n    loading: loadingTicketChats,\n    error: errorUserTickets,\n    refetch: getUserTickets\n  } = useQuery(queries.GET_USER_TICKETS);\n  const [sendMessage, {\n    data: dataSendMessage,\n    loading: loadingSendMessage,\n    error: errorSendMessage\n  }] = useMutation(queries.SEND_MESSAGE);\n  const [sendTicketMessage, {\n    data: dataUserSendMessage,\n    loading: loadingUserSendMessage,\n    error: errorUserSendMessage\n  }] = useMutation(queries.SEND_TICKET_MESSAGE);\n  const [readMessages, {\n    loading: loadingReadMessages\n  }] = useMutation(queries.READ_MESSAGES);\n  const [addUserChat, {\n    data: dataAddUserChat,\n    loading: loadingAddUserChat\n  }] = useMutation(queries.ADD_USER_CHAT);\n\n  const onSubmit = value => {\n    if (value) {\n      setFilteredUserChats(userChats.filter(userChat => {\n        var _userChat$chat;\n\n        return ((userChat === null || userChat === void 0 ? void 0 : (_userChat$chat = userChat.chat) === null || _userChat$chat === void 0 ? void 0 : _userChat$chat.members) || []).find(member => (member === null || member === void 0 ? void 0 : member.name.toUpperCase().includes(value.toUpperCase())) || (member === null || member === void 0 ? void 0 : member.email.toUpperCase().includes(value.toUpperCase())));\n      }));\n      setFilteredTicketChats(ticketChats.filter(ticketChat => {\n        var _ticketChat$category;\n\n        return (ticketChat === null || ticketChat === void 0 ? void 0 : ticketChat.title.toUpperCase().includes(value.toUpperCase())) || (ticketChat === null || ticketChat === void 0 ? void 0 : (_ticketChat$category = ticketChat.category) === null || _ticketChat$category === void 0 ? void 0 : _ticketChat$category.name.toUpperCase().includes(value.toUpperCase()));\n      }));\n    } else {\n      setFilteredUserChats(null);\n      setFilteredTicketChats(null);\n    }\n\n    setSearch(value);\n  };\n\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: {\n          recipient: recipient === null || recipient === void 0 ? void 0 : recipient.email\n        }\n      });\n    }\n  }, [recipient, addUserChat]);\n  useEffect(() => {\n    if (!loadingAddUserChat && dataAddUserChat) {\n      getUserChats();\n      getUserTickets();\n    }\n  }, [loadingAddUserChat, dataAddUserChat, getUserChats, getUserTickets]);\n  useEffect(() => {\n    if (recipient && !currentChat && !loadingUserChats && dataUserChats !== null && dataUserChats !== void 0 && dataUserChats.getUserChats) {\n      var _dataUserChats$getUse;\n\n      const id = (_dataUserChats$getUse = dataUserChats.getUserChats.find(userChat => userChat.chat.members.find(member => member.email === (recipient === null || recipient === void 0 ? void 0 : recipient.email)))) === null || _dataUserChats$getUse === void 0 ? void 0 : _dataUserChats$getUse.chat.id;\n      if (id) getChat({\n        variables: {\n          id\n        }\n      });\n    }\n  }, [recipient, dataUserChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingChat && chat !== null && chat !== void 0 && chat.getChat) {\n      setCurrentChat(chat.getChat);\n    }\n  }, [chat, loadingChat]);\n  useEffect(() => {\n    if (!loadingTicket && ticket !== null && ticket !== void 0 && ticket.getTicket) {\n      setCurrentChat(ticket.getTicket);\n    }\n  }, [ticket, loadingTicket]);\n  useEffect(() => {\n    if (!loadingSendMessage && dataSendMessage) {\n      setCurrentChat(prev => ({ ...prev,\n        messages: getExtendMessages(dataSendMessage.sendMessage, sender === null || sender === void 0 ? void 0 : sender.email)\n      }));\n    }\n  }, [sender, dataSendMessage, loadingSendMessage]);\n  useEffect(() => {\n    if (!loadingUserSendMessage && dataUserSendMessage) {\n      setCurrentChat(prev => ({ ...prev,\n        messages: getExtendMessages(dataUserSendMessage.sendTicketMessage, sender === null || sender === void 0 ? void 0 : sender.email)\n      }));\n    }\n  }, [sender, dataUserSendMessage, loadingUserSendMessage]);\n  useEffect(() => {\n    if (!loadingUserChats && dataUserChats !== null && dataUserChats !== void 0 && dataUserChats.getUserChats) {\n      setUserChats(dataUserChats.getUserChats);\n    }\n  }, [dataUserChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingTicketChats && dataTicketChats !== null && dataTicketChats !== void 0 && dataTicketChats.getUserTickets) {\n      setTicketChats(dataTicketChats.getUserTickets);\n    }\n  }, [dataTicketChats, loadingTicketChats]);\n  useEffect(() => {\n    var _currentChat$messages;\n\n    const unreadedMessages = getUnreadedMessages((_currentChat$messages = currentChat === null || currentChat === void 0 ? void 0 : currentChat.messages) !== null && _currentChat$messages !== void 0 ? _currentChat$messages : [], sender);\n\n    if (currentChat && unreadedMessages > 0) {\n      readMessages({\n        variables: {\n          id: currentChat.messages.filter(message => {\n            var _message$user2;\n\n            return ((_message$user2 = message.user) === null || _message$user2 === void 0 ? void 0 : _message$user2.email) !== (sender === null || sender === void 0 ? void 0 : sender.email);\n          }).map(message => message.id)\n        }\n      });\n    }\n  }, [sender, currentChat, readMessages]);\n  return /*#__PURE__*/React.createElement(Wrap, _extends({}, props, {\n    key: loadingReadMessages,\n    appearance: appearance\n  }), /*#__PURE__*/React.createElement(Chats, null, /*#__PURE__*/React.createElement(ChatsSearch, {\n    appearance: 'ghost',\n    onSubmit: onSubmit\n  }), !loadingChat && !loadingTicket && !loadingUserChats && !loadingTicketChats && !loadingSendMessage && !loadingAddUserChat && !loadingUserSendMessage && (userChats.length > 0 || ticketChats.length > 0) ? /*#__PURE__*/React.createElement(React.Fragment, null, search && filteredUserChats && filteredTicketChats && filteredUserChats.length === 0 && filteredTicketChats.length === 0 && /*#__PURE__*/React.createElement(Alert, null, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"), (search && filteredUserChats || !search && userChats || []).map(userChat => {\n    var _userChat$chat2;\n\n    return /*#__PURE__*/React.createElement(ChatOne, {\n      key: (_userChat$chat2 = userChat.chat) === null || _userChat$chat2 === void 0 ? void 0 : _userChat$chat2.id,\n      chat: userChat,\n      sender: sender,\n      currentChat: currentChat,\n      setLoading: setLoading,\n      setCurrentChat: setCurrentChat,\n      getChat: getChat,\n      getTicket: getTicket,\n      refetchChat: refetchChat,\n      refetchTicket: refetchTicket\n    });\n  }), (filteredUserChats || userChats.length > 0 && !filteredUserChats) && /*#__PURE__*/React.createElement(Divider, null), (search && filteredTicketChats || !search && ticketChats || []).map(ticketChat => /*#__PURE__*/React.createElement(ChatOne, {\n    key: ticketChat.id,\n    chat: ticketChat,\n    sender: sender,\n    currentChat: currentChat,\n    setLoading: setLoading,\n    setCurrentChat: setCurrentChat,\n    getChat: getChat,\n    getTicket: getTicket,\n    refetchChat: refetchChat,\n    refetchTicket: refetchTicket\n  }))) : loadingChat || loadingTicket || loadingUserChats || loadingTicketChats || loadingSendMessage || loadingAddUserChat || loadingUserSendMessage ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      marginTop: 15\n    }\n  }, \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0435 \\u0447\\u0430\\u0442\\u044B \\u043E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u044E\\u0442\")), /*#__PURE__*/React.createElement(MessengerChat, {\n    chat: currentChat && { ...currentChat,\n      messages: getExtendMessages(currentChat.messages, sender === null || sender === void 0 ? void 0 : sender.email)\n    },\n    appearance: 'ghost',\n    error: errorChat || errorTicket || errorUserChats || errorUserTickets || errorSendMessage || errorUserSendMessage,\n    loading: loading || loadingTicket || loadingChat || loadingUserChats || loadingTicketChats || loadingSendMessage || loadingAddUserChat || loadingUserSendMessage,\n    onLink: onMemberLink,\n    onAttach: onAttach,\n    onSubmit: value => {\n      if (currentChat.members) {\n        const candidate = currentChat.members.find(member => member.email !== (sender === null || sender === void 0 ? void 0 : sender.email));\n        sendMessage({\n          variables: {\n            sender: sender === null || sender === void 0 ? void 0 : sender.email,\n            recipient: (recipient === null || recipient === void 0 ? void 0 : recipient.email) || (candidate === null || candidate === void 0 ? void 0 : candidate.email),\n            text: value\n          }\n        });\n      } else {\n        var _currentChat$author;\n\n        sendTicketMessage({\n          variables: {\n            ticket: currentChat.id,\n            recipient: (_currentChat$author = currentChat.author) === null || _currentChat$author === void 0 ? void 0 : _currentChat$author.email,\n            text: value,\n            isClient: true\n          }\n        });\n      }\n    }\n  }));\n};\nMessenger.defaultProps = {\n  appearance: 'default'\n};\nexport default Messenger;","map":null,"metadata":{},"sourceType":"module"}
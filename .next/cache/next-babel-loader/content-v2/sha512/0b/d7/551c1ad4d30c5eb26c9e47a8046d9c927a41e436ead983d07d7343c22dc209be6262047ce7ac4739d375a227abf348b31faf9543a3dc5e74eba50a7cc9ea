{"ast":null,"code":"import React, { memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch';\nimport { Card } from '../../layouts/dashboard/content';\nimport { setModal } from '../../store/actions/modal';\nimport { useUser } from '../../hooks/useUser';\nconst hooks = {\n  getUsers: useUser\n};\n\nconst CardWrapper = ({\n  item,\n  elem\n}) => {\n  const props = hooks[elem.value] ? hooks[elem.value]() : {};\n  const dispatch = useDispatch();\n\n  const hideModal = () => dispatch(setModal(null));\n\n  return /*#__PURE__*/React.createElement(Card, {\n    key: item.id || item.email,\n    item: item,\n    appearance: 'clear',\n    component: elem.render(item, props),\n    onLink: hideModal,\n    onEdit: hideModal,\n    onDelete: hideModal,\n    withoutChecked: true\n  });\n};\n\nexport const Query = memo(({\n  data,\n  loading,\n  search,\n  entity,\n  entities,\n  onChange,\n  onSubmit\n}) => /*#__PURE__*/React.createElement(GlobalSearch, {\n  search: search,\n  loading: loading,\n  initialEntity: entity,\n  result: search && data && entity && data[entity === null || entity === void 0 ? void 0 : entity.value],\n  entities: (entities || []).map(elem => ({ ...elem,\n    render: item => /*#__PURE__*/React.createElement(CardWrapper, {\n      item: item,\n      elem: elem\n    })\n  })),\n  onSubmit: onSubmit,\n  onChange: onChange\n}));\nexport const QuerySearch = memo(({\n  search,\n  entity,\n  entities,\n  setSearch,\n  onHide,\n  onChange\n}) => {\n  const initialResult = [null, {\n    data: null,\n    loading: false,\n    refetch: null\n  }];\n  const [load, {\n    data,\n    loading,\n    refetch\n  }] = entity ? useLazyQuery(entity.query) : initialResult;\n\n  const onSubmit = value => {\n    const variables = {\n      search: value\n    };\n    if (setSearch) setSearch(value);\n\n    if (value) {\n      if (refetch) {\n        refetch(variables);\n      }\n\n      if (load) {\n        load({\n          variables\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Query, {\n    data: data,\n    entity: entity,\n    search: search,\n    loading: loading,\n    entities: entities,\n    onHide: onHide,\n    onChange: onChange,\n    onSubmit: onSubmit\n  });\n});\nexport default QuerySearch;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/QuerySearch/index.js"],"names":["React","memo","useDispatch","useLazyQuery","GlobalSearch","Card","setModal","useUser","hooks","getUsers","CardWrapper","item","elem","props","value","dispatch","hideModal","id","email","render","Query","data","loading","search","entity","entities","onChange","onSubmit","map","QuerySearch","setSearch","onHide","initialResult","refetch","load","query","variables"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch'\n\nimport { Card } from '../../layouts/dashboard/content'\nimport { setModal } from '../../store/actions/modal'\nimport { useUser } from '../../hooks/useUser'\n\nconst hooks = {\n  getUsers: useUser\n}\n\nconst CardWrapper = ({ item, elem }) => {\n  const props = hooks[elem.value] ? hooks[elem.value]() : {}\n  const dispatch = useDispatch()\n\n  const hideModal = () => dispatch(setModal(null))\n\n  return (\n    <Card\n      key={item.id || item.email}\n      item={item}\n      appearance={'clear'}\n      component={elem.render(item, props)}\n      onLink={hideModal}\n      onEdit={hideModal}\n      onDelete={hideModal}\n      withoutChecked\n    />\n  )\n}\n\nexport const Query = memo(({ data, loading, search, entity, entities, onChange, onSubmit }) => (\n  <GlobalSearch\n    search={search}\n    loading={loading}\n    initialEntity={entity}\n    result={search && data && entity && data[entity?.value]}\n    entities={(entities || []).map((elem) => ({\n      ...elem,\n      render: (item) => <CardWrapper item={item} elem={elem} />\n    }))}\n    onSubmit={onSubmit}\n    onChange={onChange}\n  />\n))\n\nexport const QuerySearch = memo(({ search, entity, entities, setSearch, onHide, onChange }) => {\n  const initialResult = [null, { data: null, loading: false, refetch: null }]\n  const [load, { data, loading, refetch }] = entity ? useLazyQuery(entity.query) : initialResult\n\n  const onSubmit = (value) => {\n    const variables = { search: value }\n\n    if (setSearch) setSearch(value)\n\n    if (value) {\n      if (refetch) {\n        refetch(variables)\n      }\n      if (load) {\n        load({ variables })\n      }\n    }\n  }\n\n  return (\n    <Query\n      data={data}\n      entity={entity}\n      search={search}\n      loading={loading}\n      entities={entities}\n      onHide={onHide}\n      onChange={onChange}\n      onSubmit={onSubmit}\n    />\n  )\n})\n\nexport default QuerySearch\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Text from '../../atomic-ui/components/Text';\nimport Notice from '../../atomic-ui/components/Notice';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport { useHelper } from '../../hooks/useHelper';\nimport DashboardLayout from '../../layouts/dashboard';\nimport Processed from '../../components/Processed';\nimport FadeLoad from '../../components/FadeLoad';\nimport LazyLoad from '../../components/LazyLoad';\nimport ProjectCard from '../../components/ProjectCard';\nimport ArticleCard from '../../components/ArticleCard';\nimport { onProjectLink } from '../../store/helpers/project';\nimport { onArticleLink } from '../../store/helpers/article';\nimport { onUserAboutMore } from '../../store/helpers/user';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Панель администратора';\n\nconst Dashboard = () => {\n  var _dataStatistics$getDa, _dataStatistics$getDa2, _dataStatistics$getDa3, _dataStatistics$getDa4;\n\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const {\n    data: dataStatistics,\n    loading: loadingStatistics,\n    error: errorStatistics\n  } = useQuery(queries.GET_META_DASHBOARD_STATISTICS);\n  const {\n    data: dataActivities,\n    loading: loadingActivities,\n    error: errorActivities\n  } = useQuery(queries.GET_META_DASHBOARD_ACTIVITIES);\n  const {\n    data: dataProjects,\n    loading: loadingProjects,\n    error: errorProjects\n  } = useQuery(queries.GET_PROJECTS, {\n    variables: {\n      offset: 0,\n      limit: 4\n    }\n  });\n  const {\n    data: dataArticles,\n    loading: loadingArticles,\n    error: errorArticles\n  } = useQuery(queries.GET_ARTICLES, {\n    variables: {\n      offset: 0,\n      limit: 4\n    }\n  });\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'activity',\n    text: TITLE\n  }), /*#__PURE__*/React.createElement(Processed, {\n    data: dataStatistics,\n    loading: loadingStatistics,\n    error: errorStatistics\n  }, /*#__PURE__*/React.createElement(Text, null, \"Users: \", dataStatistics === null || dataStatistics === void 0 ? void 0 : (_dataStatistics$getDa = dataStatistics.getDashboardStatistics) === null || _dataStatistics$getDa === void 0 ? void 0 : _dataStatistics$getDa.usersCount), /*#__PURE__*/React.createElement(Text, null, \"Projects: \", dataStatistics === null || dataStatistics === void 0 ? void 0 : (_dataStatistics$getDa2 = dataStatistics.getDashboardStatistics) === null || _dataStatistics$getDa2 === void 0 ? void 0 : _dataStatistics$getDa2.projectsCount), /*#__PURE__*/React.createElement(Text, null, \"Articles: \", dataStatistics === null || dataStatistics === void 0 ? void 0 : (_dataStatistics$getDa3 = dataStatistics.getDashboardStatistics) === null || _dataStatistics$getDa3 === void 0 ? void 0 : _dataStatistics$getDa3.articlesCount), /*#__PURE__*/React.createElement(Text, null, \"Categories: \", dataStatistics === null || dataStatistics === void 0 ? void 0 : (_dataStatistics$getDa4 = dataStatistics.getDashboardStatistics) === null || _dataStatistics$getDa4 === void 0 ? void 0 : _dataStatistics$getDa4.categoriesCount)), /*#__PURE__*/React.createElement(Processed, {\n    data: dataActivities,\n    loading: loadingActivities,\n    error: errorActivities\n  }, ((dataActivities === null || dataActivities === void 0 ? void 0 : dataActivities.getDashboardActivities) || []).map(activity => {\n    var _activity$user, _activity$user$avatar;\n\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: activity.id\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(Notice, {\n      key: activity.id,\n      img: (_activity$user = activity.user) === null || _activity$user === void 0 ? void 0 : (_activity$user$avatar = _activity$user.avatar) === null || _activity$user$avatar === void 0 ? void 0 : _activity$user$avatar.path,\n      title: activity.user.name,\n      message: activity.message,\n      date: activity.createdAt,\n      appearance: 'clear'\n    })));\n  })), /*#__PURE__*/React.createElement(Documents, null, /*#__PURE__*/React.createElement(LastProjects, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h3'\n  }, \"\\u041F\\u043E\\u0441\\u043B\\u0435\\u0434\\u043D\\u0438\\u0435 \\u043F\\u0440\\u0435\\u043E\\u043A\\u0442\\u044B\"), /*#__PURE__*/React.createElement(Link, {\n    to: '/dashboard/projects'\n  }, /*#__PURE__*/React.createElement(\"a\", null, \"\\u0412\\u0441\\u0435 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u044B\"))), /*#__PURE__*/React.createElement(Processed, {\n    data: dataProjects,\n    loading: loadingProjects,\n    error: errorProjects\n  }, ((dataProjects === null || dataProjects === void 0 ? void 0 : dataProjects.getProjects) || []).map(project => /*#__PURE__*/React.createElement(FadeLoad, {\n    key: project.id\n  }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(ProjectCard, {\n    project: project,\n    onLink: recall(onProjectLink, {\n      id: project.id,\n      user\n    }),\n    onAboutMore: recall(onUserAboutMore, {\n      user: project\n    }),\n    preview: true\n  })))))), /*#__PURE__*/React.createElement(Processed, {\n    data: dataArticles,\n    loading: loadingArticles,\n    error: errorArticles\n  }, ((dataArticles === null || dataArticles === void 0 ? void 0 : dataArticles.getArticles) || []).map(article => /*#__PURE__*/React.createElement(FadeLoad, {\n    key: article.id\n  }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(ArticleCard, {\n    layout: 'column',\n    article: article,\n    onLink: recall(onArticleLink, {\n      id: article.id\n    })\n  })))))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/index.js"],"names":["React","useQuery","useSelector","Text","Notice","Difinition","useHelper","DashboardLayout","Processed","FadeLoad","LazyLoad","ProjectCard","ArticleCard","onProjectLink","onArticleLink","onUserAboutMore","queries","TITLE","Dashboard","recall","user","state","data","dataStatistics","loading","loadingStatistics","error","errorStatistics","GET_META_DASHBOARD_STATISTICS","dataActivities","loadingActivities","errorActivities","GET_META_DASHBOARD_ACTIVITIES","dataProjects","loadingProjects","errorProjects","GET_PROJECTS","variables","offset","limit","dataArticles","loadingArticles","errorArticles","GET_ARTICLES","getDashboardStatistics","usersCount","projectsCount","articlesCount","categoriesCount","getDashboardActivities","map","activity","id","avatar","path","name","message","createdAt","getProjects","project","getArticles","article"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,MAAMC,KAAK,GAAG,uBAAd;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAMC,MAAM,GAAGb,SAAS,EAAxB;AACA,QAAMc,IAAI,GAAGlB,WAAW,CAAEmB,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AAEA,QAAM;AAAEE,IAAAA,IAAI,EAAEC,cAAR;AAAwBC,IAAAA,OAAO,EAAEC,iBAAjC;AAAoDC,IAAAA,KAAK,EAAEC;AAA3D,MAA+E1B,QAAQ,CAC3Fe,OAAO,CAACY,6BADmF,CAA7F;AAIA,QAAM;AAAEN,IAAAA,IAAI,EAAEO,cAAR;AAAwBL,IAAAA,OAAO,EAAEM,iBAAjC;AAAoDJ,IAAAA,KAAK,EAAEK;AAA3D,MAA+E9B,QAAQ,CAC3Fe,OAAO,CAACgB,6BADmF,CAA7F;AAIA,QAAM;AAAEV,IAAAA,IAAI,EAAEW,YAAR;AAAsBT,IAAAA,OAAO,EAAEU,eAA/B;AAAgDR,IAAAA,KAAK,EAAES;AAAvD,MAAyElC,QAAQ,CACrFe,OAAO,CAACoB,YAD6E,EAErF;AACEC,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE,CADC;AAETC,MAAAA,KAAK,EAAE;AAFE;AADb,GAFqF,CAAvF;AAUA,QAAM;AAAEjB,IAAAA,IAAI,EAAEkB,YAAR;AAAsBhB,IAAAA,OAAO,EAAEiB,eAA/B;AAAgDf,IAAAA,KAAK,EAAEgB;AAAvD,MAAyEzC,QAAQ,CACrFe,OAAO,CAAC2B,YAD6E,EAErF;AACEN,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAE,CADC;AAETC,MAAAA,KAAK,EAAE;AAFE;AADb,GAFqF,CAAvF;AAUA,sBACE,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAEtB;AAAxB,kBACE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAE,UAAlB;AAA8B,IAAA,IAAI,EAAEA;AAApC,IADF,eAGE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEM,cAAjB;AAAiC,IAAA,OAAO,EAAEE,iBAA1C;AAA6D,IAAA,KAAK,EAAEE;AAApE,kBACE,oBAAC,IAAD,mBAAcJ,cAAd,aAAcA,cAAd,gDAAcA,cAAc,CAAEqB,sBAA9B,0DAAc,sBAAwCC,UAAtD,CADF,eAEE,oBAAC,IAAD,sBAAiBtB,cAAjB,aAAiBA,cAAjB,iDAAiBA,cAAc,CAAEqB,sBAAjC,2DAAiB,uBAAwCE,aAAzD,CAFF,eAGE,oBAAC,IAAD,sBAAiBvB,cAAjB,aAAiBA,cAAjB,iDAAiBA,cAAc,CAAEqB,sBAAjC,2DAAiB,uBAAwCG,aAAzD,CAHF,eAIE,oBAAC,IAAD,wBAAmBxB,cAAnB,aAAmBA,cAAnB,iDAAmBA,cAAc,CAAEqB,sBAAnC,2DAAmB,uBAAwCI,eAA3D,CAJF,CAHF,eAUE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEnB,cAAjB;AAAiC,IAAA,OAAO,EAAEC,iBAA1C;AAA6D,IAAA,KAAK,EAAEC;AAApE,KACG,CAAC,CAAAF,cAAc,SAAd,IAAAA,cAAc,WAAd,YAAAA,cAAc,CAAEoB,sBAAhB,KAA0C,EAA3C,EAA+CC,GAA/C,CAAoDC,QAAD;AAAA;;AAAA,wBAClD,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,QAAQ,CAACC;AAAxB,oBACE,oBAAC,QAAD,qBACE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAED,QAAQ,CAACC,EADhB;AAEE,MAAA,GAAG,oBAAED,QAAQ,CAAC/B,IAAX,4EAAE,eAAeiC,MAAjB,0DAAE,sBAAuBC,IAF9B;AAGE,MAAA,KAAK,EAAEH,QAAQ,CAAC/B,IAAT,CAAcmC,IAHvB;AAIE,MAAA,OAAO,EAAEJ,QAAQ,CAACK,OAJpB;AAKE,MAAA,IAAI,EAAEL,QAAQ,CAACM,SALjB;AAME,MAAA,UAAU,EAAE;AANd,MADF,CADF,CADkD;AAAA,GAAnD,CADH,CAVF,eA2BE,oBAAC,SAAD,qBACE,oBAAC,YAAD,qBACE,oBAAC,MAAD,qBACE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE;AAAZ,yGADF,eAEE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE;AAAV,kBACE,+FADF,CAFF,CADF,eASE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAExB,YAAjB;AAA+B,IAAA,OAAO,EAAEC,eAAxC;AAAyD,IAAA,KAAK,EAAEC;AAAhE,KACG,CAAC,CAAAF,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEyB,WAAd,KAA6B,EAA9B,EAAkCR,GAAlC,CAAuCS,OAAD,iBACrC,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,OAAO,CAACP;AAAvB,kBACE,oBAAC,QAAD,qBACE,oBAAC,WAAD;AACE,IAAA,OAAO,EAAEO,OADX;AAEE,IAAA,MAAM,EAAExC,MAAM,CAACN,aAAD,EAAgB;AAAEuC,MAAAA,EAAE,EAAEO,OAAO,CAACP,EAAd;AAAkBhC,MAAAA;AAAlB,KAAhB,CAFhB;AAGE,IAAA,WAAW,EAAED,MAAM,CAACJ,eAAD,EAAkB;AAAEK,MAAAA,IAAI,EAAEuC;AAAR,KAAlB,CAHrB;AAIE,IAAA,OAAO;AAJT,IADF,CADF,CADD,CADH,CATF,CADF,eA0BE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAEnB,YAAjB;AAA+B,IAAA,OAAO,EAAEC,eAAxC;AAAyD,IAAA,KAAK,EAAEC;AAAhE,KACG,CAAC,CAAAF,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEoB,WAAd,KAA6B,EAA9B,EAAkCV,GAAlC,CAAuCW,OAAD,iBACrC,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,OAAO,CAACT;AAAvB,kBACE,oBAAC,QAAD,qBACE,oBAAC,WAAD;AACE,IAAA,MAAM,EAAE,QADV;AAEE,IAAA,OAAO,EAAES,OAFX;AAGE,IAAA,MAAM,EAAE1C,MAAM,CAACL,aAAD,EAAgB;AAAEsC,MAAAA,EAAE,EAAES,OAAO,CAACT;AAAd,KAAhB;AAHhB,IADF,CADF,CADD,CADH,CA1BF,CA3BF,CADF;AAsED,CAtGD;;AAwGA,eAAelC,SAAf","sourcesContent":["import React from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\n\nimport Text from '../../atomic-ui/components/Text'\nimport Notice from '../../atomic-ui/components/Notice'\nimport Difinition from '../../atomic-ui/components/Difinition'\n\nimport { useHelper } from '../../hooks/useHelper'\nimport DashboardLayout from '../../layouts/dashboard'\nimport Processed from '../../components/Processed'\nimport FadeLoad from '../../components/FadeLoad'\nimport LazyLoad from '../../components/LazyLoad'\nimport ProjectCard from '../../components/ProjectCard'\nimport ArticleCard from '../../components/ArticleCard'\nimport { onProjectLink } from '../../store/helpers/project'\nimport { onArticleLink } from '../../store/helpers/article'\nimport { onUserAboutMore } from '../../store/helpers/user'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Панель администратора'\n\nconst Dashboard = () => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n\n  const { data: dataStatistics, loading: loadingStatistics, error: errorStatistics } = useQuery(\n    queries.GET_META_DASHBOARD_STATISTICS\n  )\n\n  const { data: dataActivities, loading: loadingActivities, error: errorActivities } = useQuery(\n    queries.GET_META_DASHBOARD_ACTIVITIES\n  )\n\n  const { data: dataProjects, loading: loadingProjects, error: errorProjects } = useQuery(\n    queries.GET_PROJECTS,\n    {\n      variables: {\n        offset: 0,\n        limit: 4\n      }\n    }\n  )\n\n  const { data: dataArticles, loading: loadingArticles, error: errorArticles } = useQuery(\n    queries.GET_ARTICLES,\n    {\n      variables: {\n        offset: 0,\n        limit: 4\n      }\n    }\n  )\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <Difinition icon={'activity'} text={TITLE} />\n\n      <Processed data={dataStatistics} loading={loadingStatistics} error={errorStatistics}>\n        <Text>Users: {dataStatistics?.getDashboardStatistics?.usersCount}</Text>\n        <Text>Projects: {dataStatistics?.getDashboardStatistics?.projectsCount}</Text>\n        <Text>Articles: {dataStatistics?.getDashboardStatistics?.articlesCount}</Text>\n        <Text>Categories: {dataStatistics?.getDashboardStatistics?.categoriesCount}</Text>\n      </Processed>\n\n      <Processed data={dataActivities} loading={loadingActivities} error={errorActivities}>\n        {(dataActivities?.getDashboardActivities || []).map((activity) => (\n          <FadeLoad key={activity.id}>\n            <LazyLoad>\n              <Notice\n                key={activity.id}\n                img={activity.user?.avatar?.path}\n                title={activity.user.name}\n                message={activity.message}\n                date={activity.createdAt}\n                appearance={'clear'}\n              />\n            </LazyLoad>\n          </FadeLoad>\n        ))}\n      </Processed>\n\n      <Documents>\n        <LastProjects>\n          <Header>\n            <Title tag={'h3'}>Последние преокты</Title>\n            <Link to={'/dashboard/projects'}>\n              <a>\n                Все проекты\n              </a>\n            </Link>\n          </Header>\n          <Processed data={dataProjects} loading={loadingProjects} error={errorProjects}>\n            {(dataProjects?.getProjects || []).map((project) => (\n              <FadeLoad key={project.id}>\n                <LazyLoad>\n                  <ProjectCard\n                    project={project}\n                    onLink={recall(onProjectLink, { id: project.id, user })}\n                    onAboutMore={recall(onUserAboutMore, { user: project })}\n                    preview\n                  />\n                </LazyLoad>\n              </FadeLoad>\n            ))}\n          </Processed>\n        </LastProjects>\n\n        <Processed data={dataArticles} loading={loadingArticles} error={errorArticles}>\n          {(dataArticles?.getArticles || []).map((article) => (\n            <FadeLoad key={article.id}>\n              <LazyLoad>\n                <ArticleCard\n                  layout={'column'}\n                  article={article}\n                  onLink={recall(onArticleLink, { id: article.id })}\n                />\n              </LazyLoad>\n            </FadeLoad>\n          ))}\n        </Processed>\n      </Documents>\n    </DashboardLayout>\n  )\n}\n\nexport default Dashboard\n"]},"metadata":{},"sourceType":"module"}
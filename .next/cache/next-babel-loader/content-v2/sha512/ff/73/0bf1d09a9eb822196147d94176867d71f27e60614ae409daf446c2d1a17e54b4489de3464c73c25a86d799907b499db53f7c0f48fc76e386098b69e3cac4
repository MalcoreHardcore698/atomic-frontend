{"ast":null,"code":"import React, { useCallback, useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport Select from '../../atomic-ui/components/Select';\nexport const AsyncSelect = ({\n  type,\n  query,\n  variables = {},\n  defaultValue,\n  placeholder,\n  selectValueField,\n  selectLabelField,\n  selectRestrictions,\n  selectLabelDecorator,\n  onChange\n}) => {\n  const {\n    data,\n    loading\n  } = useQuery(query, {\n    variables\n  });\n  const getLabel = useCallback(item => {\n    if (selectLabelField) {\n      const field = item[selectLabelField];\n      if (selectLabelDecorator) return selectLabelDecorator(field);else return field;\n    } else return item;\n  }, [selectLabelField, selectLabelDecorator]);\n  const options = useMemo(() => {\n    const opts = type && data && data[type] || [];\n\n    const isInclude = item => (Array.isArray(selectRestrictions) ? selectRestrictions : []).includes(item);\n\n    return opts.filter(item => selectRestrictions ? !isInclude(item) : item).map(item => ({\n      value: selectValueField ? item[selectValueField] : item,\n      label: getLabel(item)\n    })).filter(item => item.value && item.label);\n  }, [type, data, selectValueField, selectRestrictions, getLabel]);\n  return /*#__PURE__*/React.createElement(Select, {\n    options: options,\n    placeholder: placeholder,\n    defaultValue: defaultValue,\n    onChange: onChange,\n    isLoading: loading,\n    isSearchable: true\n  });\n};\nexport default AsyncSelect;","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/components/AsyncSelect/index.js"],"names":["React","useCallback","useMemo","useQuery","Select","AsyncSelect","type","query","variables","defaultValue","placeholder","selectValueField","selectLabelField","selectRestrictions","selectLabelDecorator","onChange","data","loading","getLabel","item","field","options","opts","isInclude","Array","isArray","includes","filter","map","value","label"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAC1BC,EAAAA,IAD0B;AAE1BC,EAAAA,KAF0B;AAG1BC,EAAAA,SAAS,GAAG,EAHc;AAI1BC,EAAAA,YAJ0B;AAK1BC,EAAAA,WAL0B;AAM1BC,EAAAA,gBAN0B;AAO1BC,EAAAA,gBAP0B;AAQ1BC,EAAAA,kBAR0B;AAS1BC,EAAAA,oBAT0B;AAU1BC,EAAAA;AAV0B,CAAD,KAWrB;AACJ,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBd,QAAQ,CAACI,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,CAAlC;AAEA,QAAMU,QAAQ,GAAGjB,WAAW,CAC1BkB,IAAD,IAAU;AACP,QAAIP,gBAAJ,EAAsB;AACpB,YAAMQ,KAAK,GAAGD,IAAI,CAACP,gBAAD,CAAlB;AAEA,UAAIE,oBAAJ,EACE,OAAOA,oBAAoB,CAACM,KAAD,CAA3B,CADF,KAGE,OAAOA,KAAP;AACH,KAPD,MAQK,OAAOD,IAAP;AACP,GAX0B,EAY3B,CAACP,gBAAD,EAAmBE,oBAAnB,CAZ2B,CAA5B;AAeA,QAAMO,OAAO,GAAGnB,OAAO,CACtB,MAAM;AACJ,UAAMoB,IAAI,GAAIhB,IAAI,IAAIU,IAAR,IAAiBA,IAAI,CAACV,IAAD,CAAtB,IAAkC,EAA/C;;AAEA,UAAMiB,SAAS,GAAIJ,IAAD,IAAU,CAC3BK,KAAK,CAACC,OAAN,CAAcZ,kBAAd,IAAoCA,kBAApC,GAAyD,EAD9B,EAE1Ba,QAF0B,CAEjBP,IAFiB,CAA5B;;AAIA,WAAOG,IAAI,CACTK,MADK,CACGR,IAAD,IAAUN,kBAAkB,GAAG,CAACU,SAAS,CAACJ,IAAD,CAAb,GAAsBA,IADpD,EAELS,GAFK,CAEAT,IAAD,KAAW;AACdU,MAAAA,KAAK,EAAElB,gBAAgB,GAAGQ,IAAI,CAACR,gBAAD,CAAP,GAA4BQ,IADrC;AAEdW,MAAAA,KAAK,EAAEZ,QAAQ,CAACC,IAAD;AAFD,KAAX,CAFC,EAMLQ,MANK,CAMGR,IAAD,IAAUA,IAAI,CAACU,KAAL,IAAcV,IAAI,CAACW,KAN/B,CAAP;AAOD,GAfqB,EAgBtB,CAACxB,IAAD,EAAOU,IAAP,EAAaL,gBAAb,EAA+BE,kBAA/B,EAAmDK,QAAnD,CAhBsB,CAAvB;AAmBA,sBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEG,OADX;AAEE,IAAA,WAAW,EAAEX,WAFf;AAGE,IAAA,YAAY,EAAED,YAHhB;AAIE,IAAA,QAAQ,EAAEM,QAJZ;AAKE,IAAA,SAAS,EAAEE,OALb;AAME,IAAA,YAAY;AANd,IADF;AAUD,CA1DM;AA4DP,eAAeZ,WAAf","sourcesContent":["import React, { useCallback, useMemo } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nimport Select from '../../atomic-ui/components/Select'\r\n\r\nexport const AsyncSelect = ({\r\n  type,\r\n  query,\r\n  variables = {},\r\n  defaultValue,\r\n  placeholder,\r\n  selectValueField,\r\n  selectLabelField,\r\n  selectRestrictions,\r\n  selectLabelDecorator,\r\n  onChange\r\n}) => {\r\n  const { data, loading } = useQuery(query, { variables })\r\n\r\n  const getLabel = useCallback(\r\n   (item) => {\r\n      if (selectLabelField) {\r\n        const field = item[selectLabelField]\r\n\r\n        if (selectLabelDecorator)\r\n          return selectLabelDecorator(field)\r\n        else\r\n          return field\r\n      }\r\n      else return item\r\n   },\r\n   [selectLabelField, selectLabelDecorator]\r\n  )\r\n\r\n  const options = useMemo(\r\n   () => {\r\n     const opts = (type && data && (data[type])) || []\r\n\r\n     const isInclude = (item) => (\r\n      Array.isArray(selectRestrictions) ? selectRestrictions : []\r\n     ).includes(item)\r\n\r\n     return opts\r\n      .filter((item) => selectRestrictions ? !isInclude(item) : item)\r\n      .map((item) => ({\r\n        value: selectValueField ? item[selectValueField] : item,\r\n        label: getLabel(item)\r\n      }))\r\n      .filter((item) => item.value && item.label)\r\n   },\r\n   [type, data, selectValueField, selectRestrictions, getLabel]\r\n  )\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      placeholder={placeholder}\r\n      defaultValue={defaultValue}\r\n      onChange={onChange}\r\n      isLoading={loading}\r\n      isSearchable\r\n    />\r\n  )\r\n}\r\n\r\nexport default AsyncSelect\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useCallback } from 'react';\nimport AvatarEditor from 'react-avatar-editor';\nimport styled, { css } from 'styled-components';\nimport imageCompression from 'browser-image-compression';\nimport { useDropzone } from 'react-dropzone';\nimport { v4 } from 'uuid';\nimport Image from '../Image';\nimport Text from '../Text';\nimport Button from '../Button';\nimport Grid from '../Grid';\nimport Tooltip from '../Tooltip';\nimport Icon from '../Icon';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"Dropzone__Wrap\",\n  componentId: \"zqj6am-0\"\n})([\"position:relative;display:flex;flex-direction:column;grid-gap:10px;width:100%;height:256px;min-height:256px;\"]);\nexport const InfoTooltip = styled(Tooltip).withConfig({\n  displayName: \"Dropzone__InfoTooltip\",\n  componentId: \"zqj6am-1\"\n})([\"position:absolute;right:var(--default-gap);bottom:var(--default-gap);z-index:var(--z-15);\"]);\nexport const InfoIcon = styled(Icon).withConfig({\n  displayName: \"Dropzone__InfoIcon\",\n  componentId: \"zqj6am-2\"\n})([\"cursor:pointer;transition:opacity 450ms ease;&:hover{opacity:0.65;}\"]);\nexport const Container = styled.div.withConfig({\n  displayName: \"Dropzone__Container\",\n  componentId: \"zqj6am-3\"\n})([\"display:flex;justify-content:center;align-items:center;position:relative;z-index:var(--z-12);font-weight:var(--font-weight-medium);font-size:var(--font-size-s);font-family:var(--font-family);color:var(--input-placeholder-color);width:100%;height:100%;border-radius:var(--surface-border-radius);border:2px dashed var(--input-placeholder-color);outline:none;overflow:hidden;flex-grow:1;cursor:pointer;transition:all 150ms ease;\", \" &:hover{color:var(--default-color-accent);border:2px dashed var(--default-color-accent);\", \"}\"], ({\n  error\n}) => error && css([\"color:var(--default-color-red);border:2px dashed var(--default-color-red);\"]), ({\n  error\n}) => error && css([\"color:var(--default-color-red);border:2px dashed var(--default-color-red);\"]));\nexport const Area = styled.div.withConfig({\n  displayName: \"Dropzone__Area\",\n  componentId: \"zqj6am-4\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;& > span{height:100%;}\"]);\nconst Overlay = styled.div.withConfig({\n  displayName: \"Dropzone__Overlay\",\n  componentId: \"zqj6am-5\"\n})([\"position:absolute;top:0;left:0;z-index:999;padding:1rem;background:#fff;width:fit-content;border:1px solid rgba(0,0,0,15%);\"]);\nconst MiddleOriented = styled.div.withConfig({\n  displayName: \"Dropzone__MiddleOriented\",\n  componentId: \"zqj6am-6\"\n})([\"margin:0 auto;text-align:center;\"]);\nconst ActionsLayout = styled.div.withConfig({\n  displayName: \"Dropzone__ActionsLayout\",\n  componentId: \"zqj6am-7\"\n})([\"input{width:100%;}\"]);\nconst ButtonsLayout = styled.div.withConfig({\n  displayName: \"Dropzone__ButtonsLayout\",\n  componentId: \"zqj6am-8\"\n})([\"display:flex;justify-content:space-between;margin-top:0.5rem;\"]);\nexport const PreviewList = styled(Grid).withConfig({\n  displayName: \"Dropzone__PreviewList\",\n  componentId: \"zqj6am-9\"\n})([\"img{height:128px;}\"]);\nexport const Preview = styled(Image).withConfig({\n  displayName: \"Dropzone__Preview\",\n  componentId: \"zqj6am-10\"\n})([\"width:100%;height:100%;object-fit:cover;border-radius:var(--surface-border-radius);\"]);\nexport const Placeholder = styled(Text).withConfig({\n  displayName: \"Dropzone__Placeholder\",\n  componentId: \"zqj6am-11\"\n})([\"color:inherit;padding:var(--default-gap);text-align:center;\"]);\nexport function getFile(file) {\n  var _file$type;\n\n  return {\n    file,\n    id: v4(),\n    blob: ((_file$type = file.type) === null || _file$type === void 0 ? void 0 : _file$type.includes('image')) && URL.createObjectURL(file)\n  };\n}\nexport async function compressedUpload(file, maxWidthOrHeight = 1366) {\n  try {\n    return await imageCompression(file, {\n      maxSizeMB: 1,\n      maxWidthOrHeight,\n      useWebWorker: true\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport const Dropzone = ({\n  style,\n  accept,\n  avatar,\n  className,\n  defaultValue,\n  placeholder,\n  tooltip,\n  multiple,\n  maxFiles,\n  onChange\n}) => {\n  const [error, setError] = useState(false);\n  const [images, setImages] = useState([]);\n  const [initScale, setScale] = useState([0.8]);\n  const [avatarState, setAvatar] = useState(false);\n  const [avatarHistory, setHistory] = useState([]);\n  const onDrop = useCallback(async droppedFiles => {\n    setError(false);\n\n    if (avatar) {\n      setAvatar(true);\n    }\n\n    if (droppedFiles.length > maxFiles || droppedFiles.length === 0) {\n      setError(true);\n      return false;\n    }\n\n    const candidate = multiple ? [] : await compressedUpload(droppedFiles[0]);\n\n    if (multiple) {\n      for (let file of droppedFiles) {\n        var _file$type2;\n\n        let compressedFile;\n        let miniature;\n\n        if ((_file$type2 = file.type) !== null && _file$type2 !== void 0 && _file$type2.includes('image')) {\n          compressedFile = await compressedUpload(file);\n          miniature = await compressedUpload(file, 185);\n        } else {\n          compressedFile = file;\n        }\n\n        if (compressedFile) {\n          candidate.push({ ...getFile(compressedFile),\n            size: compressedFile.size,\n            miniature: { ...getFile(miniature),\n              size: miniature.size\n            }\n          });\n        }\n      }\n    }\n\n    const result = candidate.length > 1 ? candidate : { ...getFile(candidate),\n      size: droppedFiles[0].size\n    };\n    setImages(result);\n\n    if (onChange) {\n      onChange(result);\n    }\n  }, [setImages]);\n  let imageScaled = null;\n\n  const handleScale = e => {\n    const scale = parseFloat(e.target.value);\n    setScale(scale);\n  };\n\n  const clearImages = () => {\n    setAvatar(false);\n\n    if (!avatarHistory) {\n      setImages('');\n    } else {\n      setImages(avatarHistory);\n    }\n  };\n\n  const onClickSave = () => {\n    if (imageScaled) {\n      const canvasScaled = imageScaled.getImageScaledToCanvas();\n      images.blob = canvasScaled.toDataURL('image/png');\n      setImages(images);\n      setAvatar(false);\n      setHistory(images);\n    }\n  };\n\n  const setEditorRef = editor => imageScaled = editor;\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    multiple,\n    avatar,\n    accept,\n    initScale,\n    handleScale,\n    clearImages,\n    onClickSave,\n    setEditorRef\n  });\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style\n  }, tooltip && /*#__PURE__*/React.createElement(InfoTooltip, {\n    text: tooltip,\n    maxWidth: 215\n  }, /*#__PURE__*/React.createElement(InfoIcon, {\n    size: 's',\n    icon: 'infoCircle',\n    stroke: (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.length) > 0 ? 'white' : 'var(--default-color-accent)'\n  })), avatarState && images.blob && /*#__PURE__*/React.createElement(Overlay, null, /*#__PURE__*/React.createElement(MiddleOriented, null, /*#__PURE__*/React.createElement(AvatarEditor, {\n    image: images.blob || (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.path) || (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.blob),\n    width: 220,\n    height: 256,\n    border: 10,\n    color: [255, 255, 255, 0.6],\n    scale: parseFloat(initScale),\n    rotate: 0,\n    ref: setEditorRef\n  })), /*#__PURE__*/React.createElement(ActionsLayout, null, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"scale\",\n    type: \"range\",\n    onChange: handleScale,\n    min: \"0.8\",\n    max: \"2\",\n    step: \"0.01\",\n    defaultValue: \"0.8\"\n  }), /*#__PURE__*/React.createElement(ButtonsLayout, null, /*#__PURE__*/React.createElement(Button, {\n    appearance: 'default',\n    onClick: onClickSave\n  }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), /*#__PURE__*/React.createElement(Button, {\n    appearance: 'outlined',\n    onClick: clearImages\n  }, \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\")))), /*#__PURE__*/React.createElement(Container, _extends({\n    className: 'dropzone-container'\n  }, getRootProps(), {\n    error: error\n  }), /*#__PURE__*/React.createElement(\"input\", _extends({\n    accept: accept\n  }, getInputProps(), {\n    hidden: true\n  })), /*#__PURE__*/React.createElement(Area, {\n    className: 'dropzone-area',\n    active: isDragActive\n  }, !defaultValue && images.length === 0 && /*#__PURE__*/React.createElement(Placeholder, null, error ? `Файлов не может быть больше ${maxFiles} или равно нулю` : placeholder), multiple && (Array.isArray(images) && images.length > 1 || Array.isArray(defaultValue) && (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.length) > 1) && /*#__PURE__*/React.createElement(PreviewList, {\n    percentage: 'minmax(196px, 1fr)'\n  }, (defaultValue || images).map(file => /*#__PURE__*/React.createElement(Preview, {\n    key: v4(),\n    src: (file === null || file === void 0 ? void 0 : file.blob) || file,\n    alt: file.id\n  }))), !multiple && (!Array.isArray(images) || defaultValue) && /*#__PURE__*/React.createElement(Preview, {\n    src: images.blob || (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.path) || (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.blob),\n    alt: defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.name\n  }))));\n};\nDropzone.defaultProps = {\n  maxFiles: 1,\n  multiple: false\n};\nexport default Dropzone;","map":null,"metadata":{},"sourceType":"module"}
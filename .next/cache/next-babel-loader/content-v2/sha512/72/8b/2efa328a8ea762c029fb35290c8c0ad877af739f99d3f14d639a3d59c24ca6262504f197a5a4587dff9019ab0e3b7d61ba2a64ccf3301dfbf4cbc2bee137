{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useDispatch } from 'react-redux';\nimport { omit } from '../atomic-ui/utils/functions';\nimport { setSearch, setParams } from '../store/actions/root';\nexport const parseParams = params => omit(params, ['search']);\nexport const useSearch = () => {\n  _s();\n\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const onSearch = useCallback((search, params) => {\n    if (search) dispatch(setSearch(search));\n    if (params) dispatch(setParams(parseParams(params)));\n    router.push({\n      pathname: router.pathname,\n      query: { ...(search ? {\n          search\n        } : {}),\n        ...(params || {})\n      }\n    }, undefined, {\n      shallow: true\n    });\n  }, [router, dispatch]);\n  useEffect(() => {\n    const query = router.query;\n\n    if (query) {\n      dispatch(setParams(parseParams(query)));\n    }\n  }, [router, dispatch]);\n  return [onSearch];\n};\n\n_s(useSearch, \"W3PZ3+GL1XFjAfQg8blnEL6iggU=\", false, function () {\n  return [useRouter, useDispatch];\n});","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/hooks/useSearch.js"],"names":["useCallback","useEffect","useRouter","useDispatch","omit","setSearch","setParams","parseParams","params","useSearch","router","dispatch","onSearch","search","push","pathname","query","undefined","shallow"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,IAAT,QAAqB,8BAArB;AAEA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,uBAArC;AAEA,OAAO,MAAMC,WAAW,GAAIC,MAAD,IAAYJ,IAAI,CAACI,MAAD,EAAS,CAAC,QAAD,CAAT,CAApC;AAEP,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC7B,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAMS,QAAQ,GAAGR,WAAW,EAA5B;AAEA,QAAMS,QAAQ,GAAGZ,WAAW,CAC3B,CAACa,MAAD,EAASL,MAAT,KAAoB;AAClB,QAAIK,MAAJ,EAAYF,QAAQ,CAACN,SAAS,CAACQ,MAAD,CAAV,CAAR;AACZ,QAAIL,MAAJ,EAAYG,QAAQ,CAACL,SAAS,CAACC,WAAW,CAACC,MAAD,CAAZ,CAAV,CAAR;AAEZE,IAAAA,MAAM,CAACI,IAAP,CACC;AACEC,MAAAA,QAAQ,EAAEL,MAAM,CAACK,QADnB;AAEEC,MAAAA,KAAK,EAAE,EACL,IAAIH,MAAM,GAAG;AAAEA,UAAAA;AAAF,SAAH,GAAgB,EAA1B,CADK;AAEL,YAAIL,MAAM,IAAI,EAAd;AAFK;AAFT,KADD,EAQCS,SARD,EASC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KATD;AAWD,GAhB0B,EAiB3B,CAACR,MAAD,EAASC,QAAT,CAjB2B,CAA5B;AAoBAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,KAAK,GAAGN,MAAM,CAACM,KAArB;;AACA,QAAIA,KAAJ,EAAW;AACTL,MAAAA,QAAQ,CAACL,SAAS,CAACC,WAAW,CAACS,KAAD,CAAZ,CAAV,CAAR;AACD;AACF,GALQ,EAKN,CAACN,MAAD,EAASC,QAAT,CALM,CAAT;AAOA,SAAO,CAACC,QAAD,CAAP;AACD,CAhCM;;GAAMH,S;UACIP,S,EACEC,W","sourcesContent":["import { useCallback, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport { useDispatch } from 'react-redux'\n\nimport { omit } from '../atomic-ui/utils/functions'\n\nimport { setSearch, setParams } from '../store/actions/root'\n\nexport const parseParams = (params) => omit(params, ['search'])\n\nexport const useSearch = () => {\n  const router = useRouter()\n  const dispatch = useDispatch()\n\n  const onSearch = useCallback(\n   (search, params) => {\n     if (search) dispatch(setSearch(search))\n     if (params) dispatch(setParams(parseParams(params)))\n\n     router.push(\n      {\n        pathname: router.pathname,\n        query: {\n          ...(search ? { search } : {}),\n          ...(params || {})\n        }\n      },\n      undefined,\n      { shallow: true }\n     )\n   },\n   [router, dispatch]\n  )\n\n  useEffect(() => {\n    const query = router.query\n    if (query) {\n      dispatch(setParams(parseParams(query)))\n    }\n  }, [router, dispatch])\n\n  return [onSearch]\n}\n"]},"metadata":{},"sourceType":"module"}
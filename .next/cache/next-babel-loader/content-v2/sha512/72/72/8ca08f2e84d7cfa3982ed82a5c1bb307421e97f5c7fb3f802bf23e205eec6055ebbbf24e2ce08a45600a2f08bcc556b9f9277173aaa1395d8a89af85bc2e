{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport Transition from '../Transition';\nimport Icon from '../Icon';\nimport Button from '../Button';\nimport Title from '../Title';\nconst DURATION = 100;\nexport function getPath(navigator) {\n  if (!navigator || navigator.length === 0) return null;\n  return navigator[navigator.length - 1];\n}\nexport const Wrap = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: var(--z-override);\n  overflow: auto;\n\n  &.fade-enter {\n    opacity: 0;\n  }\n\n  &.fade-enter-active {\n    opacity: 1;\n    transition: opacity 100ms, blur 100ms;\n  }\n\n  &.fade-exit {\n    opacity: 1;\n  }\n\n  &.fade-exit-active {\n    opacity: 0;\n    transition: opacity 100ms, blur 100ms;\n  }\n`;\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: var(--z-100);\n  background: var(--default-color-overlay);\n  cursor: pointer;\n`;\nexport const Content = styled.div`\n  position: relative;\n  top: 15%;\n  left: 0;\n  right: 0;\n  z-index: var(--z-101);\n\n  min-width: 480px;\n  max-width: 80%;\n  width: min-content;\n\n  margin-block-end: 150px;\n  background: var(--surface-background);\n  border: var(--surface-border);\n  border-radius: var(--surface-border-radius);\n  box-shadow: var(--surface-shadow);\n\n  &.swing-enter {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n\n  &.swing-enter-active {\n    opacity: 1;\n    transform: translateX(0);\n    transition: opacity 100ms, transform 100ms;\n  }\n\n  &.swing-exit {\n    opacity: 1;\n  }\n\n  &.swing-exit-active {\n    opacity: 0;\n    transform: scale(0.9);\n    transition: opacity 100ms, transform 100ms;\n  }\n\n  ${({\n  size\n}) => size === 'l' && css`\n      top: 5%;\n      min-width: 65%;\n    `}\n\n  @media only screen and (max-width: 768px) {\n    min-width: 320px;\n  }\n\n  @media only screen and (max-width: 480px) {\n    min-width: 285px;\n    max-width: 100%;\n    width: auto;\n    margin: 0 var(--default-gap);\n  }\n`;\nexport const Headline = styled.div`\n  position: relative;\n  display: flex;\n  border-bottom: var(--default-border);\n  padding: var(--default-gap);\n  line-height: 1;\n`;\nexport const BackButton = styled(Button)`\n  position: absolute;\n  top: 0;\n  left: 10px;\n  height: 100%;\n`;\nexport const StyledTitle = styled(Title)`\n  text-align: center;\n  width: 100%;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`;\nexport const Switch = props => {\n  const Childrens = props.children;\n  if (!Childrens) return null;\n  const path = props.path;\n  let Child = null;\n\n  for (const child of Childrens) {\n    if (path === child.props.path) {\n      Child = child;\n      break;\n    }\n  }\n\n  return Child;\n};\nexport const Route = ({\n  component,\n  close,\n  back,\n  jump\n}) => {\n  const Compoent = component;\n  return __jsx(Compoent, {\n    close: close,\n    back: back,\n    jump: jump\n  });\n};\nexport const Modal = ({\n  size,\n  routes,\n  closeByBackground,\n  onHide\n}) => {\n  const {\n    0: navigator,\n    1: setNavigator\n  } = useState(['/']);\n  const {\n    0: content,\n    1: setContent\n  } = useState(false);\n  const {\n    0: animation,\n    1: setAnimation\n  } = useState(null);\n  const transitions = {\n    fade: {\n      in: routes ? true : false,\n      animation: 'fade',\n      onEnter: () => setContent(true),\n      onExited: () => setContent(false),\n      timeout: DURATION\n    },\n    swing: {\n      in: content,\n      animation: 'swing',\n      timeout: DURATION\n    }\n  };\n\n  const getTitle = () => {\n    var _routes$find;\n\n    function compare(route) {\n      return route.path === getPath(navigator);\n    }\n\n    const title = routes === null || routes === void 0 ? void 0 : (_routes$find = routes.find(route => compare(route))) === null || _routes$find === void 0 ? void 0 : _routes$find.title;\n    return title || '';\n  };\n\n  const getRoute = () => {\n    const defaultState = {\n      back: true\n    };\n    const current = navigator[navigator.length - 1];\n    const candidate = routes.find(route => route.path === current);\n\n    if (candidate) {\n      var _candidate$back;\n\n      return (_candidate$back = candidate === null || candidate === void 0 ? void 0 : candidate.back) !== null && _candidate$back !== void 0 ? _candidate$back : defaultState;\n    }\n\n    return defaultState;\n  };\n\n  const handleBack = () => {\n    setAnimation('slideOutRight');\n    setTimeout(() => {\n      setNavigator([...navigator.filter((e, i) => i !== navigator.length - 1)]);\n      setAnimation('slideInLeft');\n    }, DURATION);\n  };\n\n  const handleJump = path => {\n    setAnimation('slideOutLeft');\n    setTimeout(() => {\n      setNavigator([...navigator, path]);\n      setAnimation('slideInRight');\n    }, DURATION);\n  };\n\n  const handleClose = () => {\n    setContent(false);\n    setAnimation(null);\n    setTimeout(() => {\n      setNavigator(['/']);\n      onHide();\n    }, DURATION);\n  };\n\n  useEffect(() => {\n    if (routes && routes.length > 0) {\n      const route = routes.find(route => route.home);\n      setNavigator([(route === null || route === void 0 ? void 0 : route.path) || '/']);\n    }\n  }, [routes]);\n  return __jsx(Transition, transitions.fade, __jsx(Wrap, null, __jsx(Overlay, {\n    className: !closeByBackground ? 'clear' : '',\n    onClick: closeByBackground ? handleClose : () => {}\n  }), __jsx(Transition, transitions.swing, __jsx(Content, {\n    className: `animate${animation ? ` ${animation}` : ''}`,\n    size: size\n  }, getTitle() && __jsx(Headline, null, navigator.length > 1 && getRoute().back && __jsx(BackButton, {\n    onClick: handleBack,\n    appearance: 'clear'\n  }, __jsx(Icon, {\n    icon: 'arrowLeft'\n  })), __jsx(StyledTitle, {\n    tag: 'h3'\n  }, getTitle())), __jsx(Switch, {\n    path: getPath(navigator)\n  }, (routes || []).map((props, key) => __jsx(Route, _extends({\n    key: key\n  }, props, {\n    close: handleClose,\n    back: handleBack,\n    jump: handleJump\n  }))))))));\n};\nModal.defaultProps = {\n  title: 'Modal Title',\n  routes: [],\n  onHide: () => {},\n  closeByBackground: true\n};\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}
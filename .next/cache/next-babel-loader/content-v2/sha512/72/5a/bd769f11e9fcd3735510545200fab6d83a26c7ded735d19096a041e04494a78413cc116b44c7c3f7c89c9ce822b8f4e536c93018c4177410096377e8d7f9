{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport UserCard from '../UserCard';\nimport { useHelper } from '../../hooks/useHelper';\nimport { onChat } from '../../store/helpers';\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../../store/helpers/user';\nimport queries from '../../graphql/queries';\nexport const UserList = ({\n  variables,\n  initialList\n}) => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const [users, setUsers] = useState(initialList || []);\n  const {\n    data,\n    loading,\n    error\n  } = initialList ? {\n    data: null,\n    loading: false,\n    error: false\n  } : useQuery(queries.GET_USERS, {\n    variables\n  });\n  useEffect(() => {\n    if (!loading && data) {\n      setUsers(data.getUsers);\n    }\n  }, [data, loading]);\n  useEffect(() => {\n    if ((initialList === null || initialList === void 0 ? void 0 : initialList.length) > 0) setUsers(initialList);\n  }, [initialList]);\n  return !loading && data || users.length > 0 ? users.map(author => {\n    var _author$company;\n\n    const owned = author.name === (user === null || user === void 0 ? void 0 : user.name);\n    return /*#__PURE__*/React.createElement(LazyLoad, {\n      key: author.email\n    }, /*#__PURE__*/React.createElement(UserCard, {\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        sender: user === null || user === void 0 ? void 0 : user.email,\n        recipient: author.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: author\n      }),\n      onMembers: recall(onUserMembers, {\n        id: author === null || author === void 0 ? void 0 : author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })\n    }));\n  }) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\") : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432 \\u043D\\u0435\\u0442\");\n};\nexport default UserList;","map":null,"metadata":{},"sourceType":"module"}
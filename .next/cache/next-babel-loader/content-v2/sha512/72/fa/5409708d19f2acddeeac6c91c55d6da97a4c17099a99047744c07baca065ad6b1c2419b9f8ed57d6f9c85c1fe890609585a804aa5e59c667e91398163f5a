{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport FadeLoad from '../FadeLoad';\nimport LazyLoad from '../LazyLoad';\nimport UserCard from '../UserCard';\nimport { useHelper } from '../../hooks/useHelper';\nimport { onChat } from '../../store/helpers';\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../../store/helpers/user';\nimport queries from '../../graphql/queries';\nexport const UserList = ({\n  variables,\n  initialList = []\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const [users, setUsers] = useState(initialList);\n  const {\n    data,\n    loading,\n    error\n  } = !initialList ? useQuery(queries.GET_USERS, {\n    variables\n  }) : {\n    data: null,\n    loading: false,\n    error: false\n  };\n  useEffect(() => {\n    if (!loading && data) {\n      setUsers(data.getUsers);\n    }\n  }, [data, loading]);\n  return !loading && data ? users.map(author => {\n    var _author$company;\n\n    const owned = author.name === (user === null || user === void 0 ? void 0 : user.name);\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: author.email\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(UserCard, {\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        email: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: author\n      }),\n      onMembers: recall(onUserMembers, {\n        id: author === null || author === void 0 ? void 0 : author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })\n    })));\n  }) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\") : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u043E\\u0432 \\u043D\\u0435\\u0442\");\n};\n\n_s(UserList, \"S8cK0WMij+FmAj0dv1nJttpxayk=\", false, function () {\n  return [useHelper, useSelector, useQuery];\n});\n\n_c = UserList;\nexport default UserList;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserList\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/UserList/index.js"],"names":["React","useState","useEffect","useQuery","useSelector","Alert","Spinner","Loader","FadeLoad","LazyLoad","UserCard","useHelper","onChat","onUserAboutMore","onUserLink","onUserMembers","queries","UserList","variables","initialList","recall","user","state","users","setUsers","data","loading","error","GET_USERS","getUsers","map","author","owned","name","email","auth","userChats","GET_USER_CHATS","chat","GET_CHAT","mutations","addUserChat","ADD_USER_CHAT","sendMessage","SEND_MESSAGE","id","company","width","textAlign"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,aAAtC,QAA2D,0BAA3D;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,WAAW,GAAG;AAA3B,CAAD,KAAqC;AAAA;;AAC3D,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,IAAI,GAAGjB,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAACkB,WAAD,CAAlC;AAEA,QAAM;AAAEM,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2B,CAACR,WAAD,GAC7BhB,QAAQ,CAACa,OAAO,CAACY,SAAT,EAAoB;AAAEV,IAAAA;AAAF,GAApB,CADqB,GAE7B;AAAEO,IAAAA,IAAI,EAAE,IAAR;AAAcC,IAAAA,OAAO,EAAE,KAAvB;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GAFJ;AAIAzB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwB,OAAD,IAAYD,IAAhB,EAAsB;AACpBD,MAAAA,QAAQ,CAACC,IAAI,CAACI,QAAN,CAAR;AACD;AACF,GAJQ,EAIN,CAACJ,IAAD,EAAOC,OAAP,CAJM,CAAT;AAMA,SAAO,CAACA,OAAD,IAAYD,IAAZ,GACLF,KAAK,CAACO,GAAN,CAAWC,MAAD,IAAY;AAAA;;AACpB,UAAMC,KAAK,GAAGD,MAAM,CAACE,IAAP,MAAgBZ,IAAhB,aAAgBA,IAAhB,uBAAgBA,IAAI,CAAEY,IAAtB,CAAd;AAEA,wBACE,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEF,MAAM,CAACG;AAAtB,oBACE,oBAAC,QAAD,qBACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAEH,MADR;AAEE,MAAA,KAAK,EAAEC,KAFT;AAGE,MAAA,MAAM,EACJX,IAAI,CAACa,KAAL,IACAd,MAAM,CAACR,MAAD,EAAS;AACbsB,QAAAA,KAAK,EAAEH,MAAM,CAACG,KADD;AAEbC,QAAAA,IAAI,EAAEd,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEa,KAFC;AAGblB,QAAAA,OAAO,EAAE;AACPoB,UAAAA,SAAS,EAAEpB,OAAO,CAACqB,cADZ;AAEPC,UAAAA,IAAI,EAAEtB,OAAO,CAACuB;AAFP,SAHI;AAObC,QAAAA,SAAS,EAAE;AACTC,UAAAA,WAAW,EAAEzB,OAAO,CAAC0B,aADZ;AAETC,UAAAA,WAAW,EAAE3B,OAAO,CAAC4B;AAFZ;AAPE,OAAT,CALV;AAkBE,MAAA,MAAM,EAAExB,MAAM,CAACN,UAAD,EAAa;AACzB+B,QAAAA,EAAE,EAAEd,MAAM,CAACG,KADc;AAEzBC,QAAAA,IAAI,EAAEd,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEa,KAFa;AAGzBF,QAAAA,KAHyB;AAIzBhB,QAAAA,OAAO,EAAE;AACPoB,UAAAA,SAAS,EAAEpB,OAAO,CAACqB,cADZ;AAEPC,UAAAA,IAAI,EAAEtB,OAAO,CAACuB;AAFP,SAJgB;AAQzBC,QAAAA,SAAS,EAAE;AACTC,UAAAA,WAAW,EAAEzB,OAAO,CAAC0B,aADZ;AAETC,UAAAA,WAAW,EAAE3B,OAAO,CAAC4B;AAFZ;AARc,OAAb,CAlBhB;AA+BE,MAAA,WAAW,EAAExB,MAAM,CAACP,eAAD,EAAkB;AAAEQ,QAAAA,IAAI,EAAEU;AAAR,OAAlB,CA/BrB;AAgCE,MAAA,SAAS,EAAEX,MAAM,CAACL,aAAD,EAAgB;AAAE8B,QAAAA,EAAE,EAAEd,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEG,KAAd;AAAqBC,QAAAA,IAAI,EAAEd,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEa;AAAjC,OAAhB,CAhCnB;AAiCE,MAAA,aAAa,EAAEd,MAAM,CAACN,UAAD,EAAa;AAChC+B,QAAAA,EAAE,qBAAEd,MAAM,CAACe,OAAT,oDAAE,gBAAgBZ,KADY;AAEhCC,QAAAA,IAAI,EAAEd,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEa,KAFoB;AAGhClB,QAAAA,OAAO,EAAE;AACPoB,UAAAA,SAAS,EAAEpB,OAAO,CAACqB,cADZ;AAEPC,UAAAA,IAAI,EAAEtB,OAAO,CAACuB;AAFP,SAHuB;AAOhCC,QAAAA,SAAS,EAAE;AACTC,UAAAA,WAAW,EAAEzB,OAAO,CAAC0B,aADZ;AAETC,UAAAA,WAAW,EAAE3B,OAAO,CAAC4B;AAFZ;AAPqB,OAAb;AAjCvB,MADF,CADF,CADF;AAoDD,GAvDD,CADK,GAyDHjB,KAAK,gBACP,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAE,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEoB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B;AAAnC,2JADO,GAILtB,OAAO,gBACT,oBAAC,MAAD,qBACE,oBAAC,OAAD,OADF,CADS,gBAKT,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEqB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B;AAAd,qEAlEF;AAoED,CAnFM;;GAAM/B,Q;UACIN,S,EACFP,W,EAITD,Q;;;KANOc,Q;AAqFb,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\n\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport FadeLoad from '../FadeLoad'\nimport LazyLoad from '../LazyLoad'\nimport UserCard from '../UserCard'\nimport { useHelper } from '../../hooks/useHelper'\nimport { onChat } from '../../store/helpers'\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../../store/helpers/user'\nimport queries from '../../graphql/queries'\n\nexport const UserList = ({ variables, initialList = [] }) => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n  const [users, setUsers] = useState(initialList)\n\n  const { data, loading, error } = !initialList\n    ? useQuery(queries.GET_USERS, { variables })\n    : { data: null, loading: false, error: false }\n\n  useEffect(() => {\n    if (!loading && data) {\n      setUsers(data.getUsers)\n    }\n  }, [data, loading])\n\n  return !loading && data ? (\n    users.map((author) => {\n      const owned = author.name === user?.name\n\n      return (\n        <FadeLoad key={author.email}>\n          <LazyLoad>\n            <UserCard\n              user={author}\n              owned={owned}\n              onChat={\n                user.email &&\n                recall(onChat, {\n                  email: author.email,\n                  auth: user?.email,\n                  queries: {\n                    userChats: queries.GET_USER_CHATS,\n                    chat: queries.GET_CHAT\n                  },\n                  mutations: {\n                    addUserChat: queries.ADD_USER_CHAT,\n                    sendMessage: queries.SEND_MESSAGE\n                  }\n                })\n              }\n              onLink={recall(onUserLink, {\n                id: author.email,\n                auth: user?.email,\n                owned,\n                queries: {\n                  userChats: queries.GET_USER_CHATS,\n                  chat: queries.GET_CHAT\n                },\n                mutations: {\n                  addUserChat: queries.ADD_USER_CHAT,\n                  sendMessage: queries.SEND_MESSAGE\n                }\n              })}\n              onAboutMore={recall(onUserAboutMore, { user: author })}\n              onMembers={recall(onUserMembers, { id: author?.email, auth: user?.email })}\n              onCompanyLink={recall(onUserLink, {\n                id: author.company?.email,\n                auth: user?.email,\n                queries: {\n                  userChats: queries.GET_USER_CHATS,\n                  chat: queries.GET_CHAT\n                },\n                mutations: {\n                  addUserChat: queries.ADD_USER_CHAT,\n                  sendMessage: queries.SEND_MESSAGE\n                }\n              })}\n            />\n          </LazyLoad>\n        </FadeLoad>\n      )\n    })\n  ) : error ? (\n    <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n      Не удалось загрузить данные\n    </Alert>\n  ) : loading ? (\n    <Loader>\n      <Spinner />\n    </Loader>\n  ) : (\n    <Alert style={{ width: '100%', textAlign: 'center' }}>Авторов нет</Alert>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { v4 } from 'uuid';\nimport Column from '../atomic-ui/components/Column';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Select from '../atomic-ui/components/Select';\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll';\nimport DefaultLayout from '../layouts/default';\nimport DashboardLayout from './dashboard';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport HandleBar from '../components/HandleBar';\nimport { LowerLoader } from '../components/Styled';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"content__Wrap\",\n  componentId: \"sc-1afm75p-0\"\n})([\"margin-top:120px;margin-bottom:80px;\", \" @media only screen and (max-width:480px){margin-top:0;}\"], ({\n  clear\n}) => clear && css([\"margin:0;\"]));\n\nconst ContentLayout = ({\n  title,\n  store,\n  query,\n  handle,\n  filters,\n  options,\n  research,\n  scaffold,\n  dashboard,\n  variables = {},\n  limit = 6,\n  startOffset = 6,\n  initialize,\n  children\n}) => {\n  const Layout = dashboard ? DashboardLayout : DefaultLayout;\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [search, setSearch] = useState(null);\n  const [isFetching, setFetching] = useState(false);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [offset, setOffset] = useState(startOffset);\n  const [documents, setDocuments] = useState((store === null || store === void 0 ? void 0 : store.documents) || []);\n  const [loadDocumentsBySearch, {\n    data: dataBySearch,\n    loading: loadingBySearch,\n    error: errorBySearch,\n    refetch: refetchBySearch\n  }] = useLazyQuery(query);\n  const [loadDocuments, {\n    data,\n    loading,\n    error,\n    refetch\n  }] = useLazyQuery(query);\n\n  const getFilters = () => {\n    return filters.map(filter => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return /*#__PURE__*/React.createElement(DatePicker, {\n            key: v4(),\n            value: date,\n            placeholder: filter.placeholder || 'Дата публикации',\n            onChange: onChangeDate,\n            withNavigate: true\n          });\n\n        case 'SELECT':\n          return /*#__PURE__*/React.createElement(Select, {\n            key: v4(),\n            options: filter.options,\n            placeholder: filter.placeholder || 'Раздел',\n            selected: select,\n            onChange: item => onChangeSelect(item)\n          });\n\n        default:\n          return null;\n      }\n    });\n  };\n\n  const onSearch = value => {\n    setDocuments([]);\n\n    if (value) {\n      setSearch(value);\n      loadDocumentsBySearch({\n        variables: { ...variables,\n          search: value,\n          offset: 0,\n          limit: startOffset\n        }\n      });\n    } else {\n      const result = { ...variables,\n        offset: 0,\n        limit\n      };\n      setSearch(null);\n      if (refetch) refetch(result);else loadDocuments({\n        variables: result\n      });\n    }\n\n    setOffset(0);\n  };\n\n  useInfiniteScroll({\n    callbackOnBottom: async () => {\n      const updateOffset = () => setOffset(prev => prev + limit);\n\n      if (!loading && !isFetching) {\n        setFetching(true);\n        const result = { ...variables,\n          offset,\n          limit\n        };\n\n        if (search) {\n          await refetchBySearch(variables);\n        } else {\n          if (refetch) {\n            await refetch(result);\n            updateOffset();\n          } else {\n            await loadDocuments({\n              variables: result\n            });\n          }\n        }\n\n        setFetching(false);\n      }\n    },\n    offset: 850\n  });\n  useEffect(() => {\n    if (initialize) loadDocuments({\n      variables: {\n        offset,\n        limit\n      }\n    });\n  }, [initialize]);\n  useEffect(() => {\n    if (research) onSearch(research);\n  }, [research]);\n  useEffect(() => {\n    const isCommon = !search && !loading && data;\n    const isSearch = search && !loadingBySearch && dataBySearch;\n    const result = isCommon || isSearch;\n    if (result) setDocuments(prev => [...prev, ...result[Object.keys(result)[0]]]);\n  }, [search, loading, loadingBySearch, data, dataBySearch]);\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: title,\n    scaffold: scaffold\n  }, /*#__PURE__*/React.createElement(Wrap, {\n    clear: scaffold || dashboard\n  }, !scaffold && !dashboard && /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter),\n    onSubmit: onSearch\n  }), dashboard && handle && /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: handle.icon,\n    buttonCreateText: handle.buttonCreateText,\n    onCreate: handle.onCreate,\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: handle.onChangeDisplayMethod\n  }), (filters || options) && /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: getFilters(),\n    options: options\n  }), React.createElement(children, {\n    documents\n  }), search && !store.loading && !loadingBySearch && documents.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u043E \\u0432\\u0430\\u0448\\u0435\\u043C\\u0443 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u0443 \\u043D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"), (search && !store.loading && errorBySearch || !search && error) && /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\"), (isFetching || !error && loading || search && !errorBySearch && loadingBySearch || store.loading) && /*#__PURE__*/React.createElement(LowerLoader, null, /*#__PURE__*/React.createElement(Spinner, null)), !search && !loading && !store.loading && !loadingBySearch && !errorBySearch && documents.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0414\\u0430\\u043D\\u043D\\u044B\\u0445 \\u043D\\u0435\\u0442\")));\n};\n\nexport default ContentLayout;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/layouts/content.js"],"names":["React","useState","useEffect","styled","css","useLazyQuery","v4","Column","Alert","DatePicker","Spinner","Select","useInfiniteScroll","DefaultLayout","DashboardLayout","FilterBar","SearchBar","HandleBar","LowerLoader","Wrap","clear","ContentLayout","title","store","query","handle","filters","options","research","scaffold","dashboard","variables","limit","startOffset","initialize","children","Layout","date","onChangeDate","select","onChangeSelect","search","setSearch","isFetching","setFetching","visibleFilter","setVisibleFilter","offset","setOffset","documents","setDocuments","loadDocumentsBySearch","data","dataBySearch","loading","loadingBySearch","error","errorBySearch","refetch","refetchBySearch","loadDocuments","getFilters","map","filter","type","placeholder","item","onSearch","value","result","callbackOnBottom","updateOffset","prev","isCommon","isSearch","Object","keys","icon","buttonCreateText","onCreate","onChangeDisplayMethod","createElement","length","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { useLazyQuery } from '@apollo/react-hooks'\nimport { v4 } from 'uuid'\n\nimport Column from '../atomic-ui/components/Column'\nimport Alert from '../atomic-ui/components/Alert'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Spinner from '../atomic-ui/components/Spinner'\nimport Select from '../atomic-ui/components/Select'\n\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll'\nimport DefaultLayout from '../layouts/default'\nimport DashboardLayout from './dashboard'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport HandleBar from '../components/HandleBar'\nimport { LowerLoader } from '../components/Styled'\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  ${({ clear }) =>\n    clear &&\n    css`\n      margin: 0;\n    `}\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst ContentLayout = ({\n  title,\n  store,\n  query,\n  handle,\n  filters,\n  options,\n  research,\n  scaffold,\n  dashboard,\n  variables = {},\n  limit = 6,\n  startOffset = 6,\n  initialize,\n  children\n}) => {\n  const Layout = dashboard ? DashboardLayout : DefaultLayout\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [search, setSearch] = useState(null)\n  const [isFetching, setFetching] = useState(false)\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [offset, setOffset] = useState(startOffset)\n  const [documents, setDocuments] = useState(store?.documents || [])\n\n  const [\n    loadDocumentsBySearch,\n    { data: dataBySearch, loading: loadingBySearch, error: errorBySearch, refetch: refetchBySearch }\n  ] = useLazyQuery(query)\n\n  const [loadDocuments, { data, loading, error, refetch }] = useLazyQuery(query)\n\n  const getFilters = () => {\n    return filters.map((filter) => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return (\n            <DatePicker\n              key={v4()}\n              value={date}\n              placeholder={filter.placeholder || 'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />\n          )\n        case 'SELECT':\n          return (\n            <Select\n              key={v4()}\n              options={filter.options}\n              placeholder={filter.placeholder || 'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          )\n        default:\n          return null\n      }\n    })\n  }\n\n  const onSearch = (value) => {\n    setDocuments([])\n    if (value) {\n      setSearch(value)\n      loadDocumentsBySearch({\n        variables: { ...variables, search: value, offset: 0, limit: startOffset }\n      })\n    } else {\n      const result = { ...variables, offset: 0, limit }\n\n      setSearch(null)\n\n      if (refetch) refetch(result)\n      else loadDocuments({ variables: result })\n    }\n    setOffset(0)\n  }\n\n  useInfiniteScroll({\n    callbackOnBottom: async () => {\n      const updateOffset = () => setOffset((prev) => prev + limit)\n\n      if (!loading && !isFetching) {\n        setFetching(true)\n\n        const result = { ...variables, offset, limit }\n\n        if (search) {\n          await refetchBySearch(variables)\n        } else {\n          if (refetch) {\n            await refetch(result)\n            updateOffset()\n          } else {\n            await loadDocuments({ variables: result })\n          }\n        }\n\n        setFetching(false)\n      }\n    },\n    offset: 850\n  })\n\n  useEffect(() => {\n    if (initialize) loadDocuments({ variables: { offset, limit } })\n  }, [initialize])\n\n  useEffect(() => {\n    if (research) onSearch(research)\n  }, [research])\n\n  useEffect(() => {\n    const isCommon = !search && !loading && data\n    const isSearch = search && !loadingBySearch && dataBySearch\n    const result = isCommon || isSearch\n    if (result) setDocuments((prev) => [...prev, ...result[Object.keys(result)[0]]])\n  }, [search, loading, loadingBySearch, data, dataBySearch])\n\n  return (\n    <Layout title={title} scaffold={scaffold}>\n      <Wrap clear={scaffold || dashboard}>\n        {!scaffold && !dashboard && (\n          <SearchBar onChangeFilter={() => setVisibleFilter(!visibleFilter)} onSubmit={onSearch} />\n        )}\n\n        {dashboard && handle && (\n          <HandleBar\n            title={title}\n            icon={handle.icon}\n            buttonCreateText={handle.buttonCreateText}\n            onCreate={handle.onCreate}\n            onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n            onChangeDisplayMethod={handle.onChangeDisplayMethod}\n          />\n        )}\n\n        {(filters || options) && (\n          <FilterBar isOpen={visibleFilter} filters={getFilters()} options={options} />\n        )}\n\n        {React.createElement(children, { documents })}\n\n        {search && !store.loading && !loadingBySearch && documents.length === 0 && (\n          <Alert style={{ width: '100%', textAlign: 'center' }}>\n            По вашему запросу ничего не найдено\n          </Alert>\n        )}\n\n        {((search && !store.loading && errorBySearch) || (!search && error)) && (\n          <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n            Не удалось загрузить данные\n          </Alert>\n        )}\n\n        {(isFetching ||\n          (!error && loading) ||\n          (search && !errorBySearch && loadingBySearch) ||\n          store.loading) && (\n          <LowerLoader>\n            <Spinner />\n          </LowerLoader>\n        )}\n\n        {!search &&\n          !loading &&\n          !store.loading &&\n          !loadingBySearch &&\n          !errorBySearch &&\n          documents.length === 0 && (\n            <Alert style={{ width: '100%', textAlign: 'center' }}>Данных нет</Alert>\n          )}\n      </Wrap>\n    </Layout>\n  )\n}\n\nexport default ContentLayout\n"]},"metadata":{},"sourceType":"module"}
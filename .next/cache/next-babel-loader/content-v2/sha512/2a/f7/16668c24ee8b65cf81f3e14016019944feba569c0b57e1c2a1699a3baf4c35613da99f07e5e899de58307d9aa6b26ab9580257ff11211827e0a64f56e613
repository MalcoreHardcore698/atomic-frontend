{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport DashboardLayout from '../../layouts/dashboard';\nimport FormSettings from '../../components/FormSettings';\nimport Processed from '../../components/Processed';\nimport { setItem } from '../../store/actions/snacks';\nimport { setSettings } from '../../store/actions/root';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Настройки';\nconst Container = styled.div.withConfig({\n  displayName: \"settings__Container\",\n  componentId: \"mgp0x9-0\"\n})([\"width:100%;max-width:745px;@media only screen and (max-width:768px){max-width:100%;}\"]);\n\nconst Settings = () => {\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_META_DASHBOARD_SETTINGS);\n  const [settings, setCurrentSettings] = useState(null);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!loading && data) {\n      setCurrentSettings(data.getDashboardSettings);\n    }\n  }, [data, loading]);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'setting',\n    text: TITLE\n  }), /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(Processed, {\n    data: data === null || data === void 0 ? void 0 : data.getDashboardSettings,\n    loading: loading,\n    error: error,\n    errorMessage: 'Упс! Не удалось получить настройки',\n    emptyMessage: 'Кажется настройки не были созданы'\n  }, /*#__PURE__*/React.createElement(FormSettings, {\n    settings: settings,\n    mutation: queries.UPDATE_META_DASHBOARD_SETTINGS,\n    onSubmit: async (form, action) => {\n      try {\n        var _form$general, _form$general$logotyp, _form$general2, _form$general2$logoty, _form$scaffold, _form$scaffold2, _form$scaffold2$prima, _form$scaffold3, _form$scaffold3$resid, _form$scaffold4, _form$scaffold4$backg, _form$scaffold5, _form$scaffold5$backg, _form$scaffold6, _form$meta, _form$meta2;\n\n        const result = await action({\n          variables: {\n            input: {\n              general: {\n                logotype: (_form$general = form.general) === null || _form$general === void 0 ? void 0 : (_form$general$logotyp = _form$general.logotype) === null || _form$general$logotyp === void 0 ? void 0 : _form$general$logotyp.file,\n                logotypeSize: (_form$general2 = form.general) === null || _form$general2 === void 0 ? void 0 : (_form$general2$logoty = _form$general2.logotype) === null || _form$general2$logoty === void 0 ? void 0 : _form$general2$logoty.size\n              },\n              scaffold: {\n                title: (_form$scaffold = form.scaffold) === null || _form$scaffold === void 0 ? void 0 : _form$scaffold.title,\n                primary: (_form$scaffold2 = form.scaffold) === null || _form$scaffold2 === void 0 ? void 0 : (_form$scaffold2$prima = _form$scaffold2.primary) === null || _form$scaffold2$prima === void 0 ? void 0 : _form$scaffold2$prima.value,\n                residues: (_form$scaffold3 = form.scaffold) === null || _form$scaffold3 === void 0 ? void 0 : (_form$scaffold3$resid = _form$scaffold3.residues) === null || _form$scaffold3$resid === void 0 ? void 0 : _form$scaffold3$resid.map(residue => residue.value),\n                background: (_form$scaffold4 = form.scaffold) === null || _form$scaffold4 === void 0 ? void 0 : (_form$scaffold4$backg = _form$scaffold4.background) === null || _form$scaffold4$backg === void 0 ? void 0 : _form$scaffold4$backg.file,\n                backgroundSize: (_form$scaffold5 = form.scaffold) === null || _form$scaffold5 === void 0 ? void 0 : (_form$scaffold5$backg = _form$scaffold5.background) === null || _form$scaffold5$backg === void 0 ? void 0 : _form$scaffold5$backg.size,\n                isRandom: (_form$scaffold6 = form.scaffold) === null || _form$scaffold6 === void 0 ? void 0 : _form$scaffold6.isRandom\n              },\n              meta: {\n                title: (_form$meta = form.meta) === null || _form$meta === void 0 ? void 0 : _form$meta.title,\n                description: (_form$meta2 = form.meta) === null || _form$meta2 === void 0 ? void 0 : _form$meta2.description\n              }\n            }\n          }\n        });\n        setCurrentSettings(result.data.updateDashboardSettings);\n        dispatch(setSettings(result.data.updateDashboardSettings));\n        dispatch(setItem({\n          type: 'success',\n          message: 'Настройки успешно изменены'\n        }));\n      } catch (_unused) {\n        dispatch(setItem({\n          type: 'error',\n          message: 'Не удалось изменить настройки'\n        }));\n      }\n    }\n  }))));\n};\n\nexport default Settings;","map":null,"metadata":{},"sourceType":"module"}
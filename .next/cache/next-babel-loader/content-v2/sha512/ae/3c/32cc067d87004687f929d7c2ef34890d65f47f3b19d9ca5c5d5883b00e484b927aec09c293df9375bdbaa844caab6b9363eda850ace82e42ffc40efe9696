{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onProjectAdd, onProjectCreate, onProjectEdit, onProjectLink, onProjectRemove, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserAboutMore, onUserLink } from '../store/helpers/user';\nimport { setUserFolder, updateUser } from '../store/actions/user';\nimport { getProjectLinkProps } from './useEntityQuery';\nimport { useHelper } from './useHelper';\nimport { useMutate } from './useMutate';\nimport queries from '../graphql/queries';\nexport const useProject = ({\n  isManage\n} = {}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const dispatch = useDispatch();\n  const canEditStatus = useMemo(() => {\n    var _user$role;\n\n    return user && (user === null || user === void 0 ? void 0 : (_user$role = user.role) === null || _user$role === void 0 ? void 0 : _user$role.name) === 'ADMIN';\n  }, [user]);\n  const hasAdded = useCallback(project => {\n    var _user$folders;\n\n    return !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === project.id))));\n  }, [user]);\n  const hasLiked = useCallback(project => !!((user.rating || []).find(item => item.id === project.id) || (project.rating || []).find(item => (item === null || item === void 0 ? void 0 : item.email) === (user === null || user === void 0 ? void 0 : user.email))), [user]);\n  const onAdd = useCallback(project => recall(onProjectAdd, {\n    id: project.id,\n    folders: user === null || user === void 0 ? void 0 : user.folders,\n    mutations: {\n      addProject: queries.ADD_USER_PROJECT,\n      createFolder: queries.ADD_USER_FOLDER\n    },\n    callback: item => {\n      const result = { ...item,\n        projects: [...item.projects, project.id]\n      };\n      dispatch(setUserFolder(result));\n    }\n  })(), [user, recall, dispatch]);\n  const onLike = useCallback(project => {\n    if (user !== null && user !== void 0 && user.email) {\n      mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser({\n        rating: response.data.likeProject\n      })))();\n    }\n  }, [user, mutate, dispatch]);\n  const onLink = useCallback(project => {\n    var _user$projects;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    recall(onProjectLink, getProjectLinkProps(project.id, user, owned, dispatch, mutate, recall, item => {\n      const result = { ...item,\n        projects: [...item.projects, project.id]\n      };\n      dispatch(setUserFolder(result));\n    }))();\n  }, [user, dispatch, mutate, recall]);\n  const onRemove = useCallback(project => recall(onProjectRemove, {\n    id: project.id,\n    folder,\n    mutation: queries.REMOVE_USER_PROJECT\n  })(), [user, recall]);\n  const onAboutMore = useCallback(project => {\n    recall(onUserAboutMore, {\n      user: project\n    })();\n  }, [recall]);\n  const onCompanyLink = useCallback(project => {\n    var _project$company;\n\n    recall(onUserLink, {\n      id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      recipient: project.author,\n      query: queries.GET_USER_CHATS,\n      mutation: queries.SEND_MESSAGE\n    })();\n  }, [user, recall]);\n  const onScreenshotClick = useCallback((project, key) => {\n    recall(onProjectScreenshot, {\n      screenshots: [project.preview, ...project.screenshots],\n      key\n    })();\n  }, [recall]);\n\n  const onEdit = (project, onAfter) => recall(onProjectEdit, {\n    id: project.id,\n    canEditStatus,\n    mutation: queries.UPDATE_PROJECT,\n    query: queries.GET_USERS,\n    onCompanyInputChange: mutate(queries.GET_USERS, {\n      account: 'ENTITY'\n    }),\n    onAfter\n  })();\n\n  const onCreate = onAfter => recall(onProjectCreate, {\n    canEditStatus,\n    mutation: queries.CREATE_PROJECT,\n    query: queries.GET_USERS,\n    onAfter\n  })();\n\n  return {\n    user,\n    hasAdded,\n    hasLiked,\n    onAdd,\n    onLike,\n    onLink,\n    onRemove,\n    onAboutMore,\n    onCompanyLink,\n    onScreenshotClick,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
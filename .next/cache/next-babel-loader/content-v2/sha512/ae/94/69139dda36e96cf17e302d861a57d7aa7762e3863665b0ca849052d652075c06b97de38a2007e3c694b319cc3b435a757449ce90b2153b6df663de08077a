{"ast":null,"code":"import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Image from '../../atomic-ui/components/Image';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport HTMLView from '../HTMLView';\nimport Comments from '../Comments';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"ArticleView__Wrap\",\n  componentId: \"sc-12lysue-0\"\n})([\"flex-grow:1;\", \" \", \" \", \"\"], ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Poster = styled(Image).withConfig({\n  displayName: \"ArticleView__Poster\",\n  componentId: \"sc-12lysue-1\"\n})([\"object-fit:cover;width:100%;height:512px;border-radius:var(--surface-border-radius);@media only screen and (max-width:480px){height:256px;}\"]);\nexport const Content = styled(Column).withConfig({\n  displayName: \"ArticleView__Content\",\n  componentId: \"sc-12lysue-2\"\n})([\"grid-gap:0;\"]);\nexport const Loader = styled.div.withConfig({\n  displayName: \"ArticleView__Loader\",\n  componentId: \"sc-12lysue-3\"\n})([\"position:absolute;display:flex;justify-content:center;align-items:center;flex-grow:1;width:100%;height:100%;\"]);\nexport const View = ({\n  article,\n  appearance,\n  className,\n  style,\n  onLink,\n  onCommentLink,\n  onCommentReply,\n  onCommentLike,\n  onCommentSend\n}) => {\n  var _data$getArticle$cate;\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_ARTICLE, {\n    variables: {\n      id: article\n    }\n  });\n  const [loadComments, {\n    dataComments,\n    loadingComments,\n    errorComments\n  }] = useLazyQuery(queries.GET_COMMENTS, {\n    variables: {\n      id: article\n    }\n  });\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance\n  }, !loading && data ? /*#__PURE__*/React.createElement(React.Fragment, null, data.getArticle.preview && /*#__PURE__*/React.createElement(Poster, {\n    src: data.getArticle.preview.path\n  }), /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Meta, {\n    date: data.getArticle.createdAt,\n    category: (_data$getArticle$cate = data.getArticle.category) === null || _data$getArticle$cate === void 0 ? void 0 : _data$getArticle$cate.name\n  }), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h3',\n    onClick: onLink,\n    style: {\n      marginTop: -5,\n      marginBottom: 5\n    }\n  }, data.getArticle.title), data.getArticle.body && /*#__PURE__*/React.createElement(HTMLView, {\n    content: data.getArticle.body\n  })), /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Comments, {\n    comments: dataComments,\n    appearance: 'ghost',\n    errorComments: errorComments,\n    loadingComments: loadingComments,\n    onLoad: loadComments,\n    onLink: onCommentLink,\n    onReply: onCommentReply,\n    onLike: onCommentLike,\n    onSubmit: onCommentSend\n  })) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0441\\u0442\\u0430\\u0442\\u044C\\u0435\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)));\n};\nView.defaultProps = {\n  appearance: 'default'\n};\nexport default View;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/ArticleView/index.js"],"names":["React","styled","css","useQuery","useLazyQuery","Column","Title","Image","Meta","Divider","Alert","Spinner","HTMLView","Comments","queries","Wrap","appearance","Poster","Content","Loader","div","View","article","className","style","onLink","onCommentLink","onCommentReply","onCommentLike","onCommentSend","data","loading","error","GET_ARTICLE","variables","id","loadComments","dataComments","loadingComments","errorComments","GET_COMMENTS","getArticle","preview","path","createdAt","category","name","marginTop","marginBottom","title","body","width","textAlign","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,qBAAvC;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AAEA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAO,MAAMC,IAAI,GAAGd,MAAM,CAACI,MAAD,CAAT;AAAA;AAAA;AAAA,mCAGb,CAAC;AAAEW,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,SAAf,IACAd,GADA,+KAJa,EAab,CAAC;AAAEc,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,OAAf,IACAd,GADA,4EAda,EAuBb,CAAC;AAAEc,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,OAAf,IACAd,GADA,4EAxBa,CAAV;AAkCP,OAAO,MAAMe,MAAM,GAAGhB,MAAM,CAACM,KAAD,CAAT;AAAA;AAAA;AAAA,mJAAZ;AAWP,OAAO,MAAMW,OAAO,GAAGjB,MAAM,CAACI,MAAD,CAAT;AAAA;AAAA;AAAA,mBAAb;AAIP,OAAO,MAAMc,MAAM,GAAGlB,MAAM,CAACmB,GAAV;AAAA;AAAA;AAAA,oHAAZ;AAUP,OAAO,MAAMC,IAAI,GAAG,CAAC;AACnBC,EAAAA,OADmB;AAEnBN,EAAAA,UAFmB;AAGnBO,EAAAA,SAHmB;AAInBC,EAAAA,KAJmB;AAKnBC,EAAAA,MALmB;AAMnBC,EAAAA,aANmB;AAOnBC,EAAAA,cAPmB;AAQnBC,EAAAA,aARmB;AASnBC,EAAAA;AATmB,CAAD,KAUd;AAAA;;AACJ,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2B7B,QAAQ,CAACW,OAAO,CAACmB,WAAT,EAAsB;AAC7DC,IAAAA,SAAS,EAAE;AACTC,MAAAA,EAAE,EAAEb;AADK;AADkD,GAAtB,CAAzC;AAKA,QAAM,CAACc,YAAD,EAAe;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA;AAAjC,GAAf,IAAmEnC,YAAY,CACnFU,OAAO,CAAC0B,YAD2E,EAEnF;AACEN,IAAAA,SAAS,EAAE;AACTC,MAAAA,EAAE,EAAEb;AADK;AADb,GAFmF,CAArF;AASA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEC,SAAjB;AAA4B,IAAA,KAAK,EAAEC,KAAnC;AAA0C,IAAA,UAAU,EAAER;AAAtD,KACG,CAACe,OAAD,IAAYD,IAAZ,gBACC,oBAAC,KAAD,CAAO,QAAP,QACGA,IAAI,CAACW,UAAL,CAAgBC,OAAhB,iBAA2B,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAEZ,IAAI,CAACW,UAAL,CAAgBC,OAAhB,CAAwBC;AAArC,IAD9B,eAGE,oBAAC,OAAD,qBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEb,IAAI,CAACW,UAAL,CAAgBG,SAA5B;AAAuC,IAAA,QAAQ,2BAAEd,IAAI,CAACW,UAAL,CAAgBI,QAAlB,0DAAE,sBAA0BC;AAA3E,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE,IAAZ;AAAkB,IAAA,OAAO,EAAErB,MAA3B;AAAmC,IAAA,KAAK,EAAE;AAAEsB,MAAAA,SAAS,EAAE,CAAC,CAAd;AAAiBC,MAAAA,YAAY,EAAE;AAA/B;AAA1C,KACGlB,IAAI,CAACW,UAAL,CAAgBQ,KADnB,CAFF,EAMGnB,IAAI,CAACW,UAAL,CAAgBS,IAAhB,iBAAwB,oBAAC,QAAD;AAAU,IAAA,OAAO,EAAEpB,IAAI,CAACW,UAAL,CAAgBS;AAAnC,IAN3B,CAHF,eAYE,oBAAC,OAAD;AAAS,IAAA,KAAK;AAAd,IAZF,eAcE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE;AAAZ,0EAdF,eAeE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAEb,YADZ;AAEE,IAAA,UAAU,EAAE,OAFd;AAGE,IAAA,aAAa,EAAEE,aAHjB;AAIE,IAAA,eAAe,EAAED,eAJnB;AAKE,IAAA,MAAM,EAAEF,YALV;AAME,IAAA,MAAM,EAAEV,aANV;AAOE,IAAA,OAAO,EAAEC,cAPX;AAQE,IAAA,MAAM,EAAEC,aARV;AASE,IAAA,QAAQ,EAAEC;AATZ,IAfF,CADD,GA4BGG,KAAK,gBACP,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAE,OAAnB;AAA4B,IAAA,KAAK,EAAE;AAAEmB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B;AAAnC,mPADO,gBAKP,oBAAC,MAAD,qBACE,oBAAC,OAAD,OADF,CAlCJ,CADF;AAyCD,CAlEM;AAoEP/B,IAAI,CAACgC,YAAL,GAAoB;AAClBrC,EAAAA,UAAU,EAAE;AADM,CAApB;AAIA,eAAeK,IAAf","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { useQuery, useLazyQuery } from '@apollo/react-hooks'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Image from '../../atomic-ui/components/Image'\nimport Meta from '../../atomic-ui/components/Meta'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport HTMLView from '../HTMLView'\nimport Comments from '../Comments'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled(Column)`\n  flex-grow: 1;\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const Poster = styled(Image)`\n  object-fit: cover;\n  width: 100%;\n  height: 512px;\n  border-radius: var(--surface-border-radius);\n\n  @media only screen and (max-width: 480px) {\n    height: 256px;\n  }\n`\n\nexport const Content = styled(Column)`\n  grid-gap: 0;\n`\n\nexport const Loader = styled.div`\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-grow: 1;\n  width: 100%;\n  height: 100%;\n`\n\nexport const View = ({\n  article,\n  appearance,\n  className,\n  style,\n  onLink,\n  onCommentLink,\n  onCommentReply,\n  onCommentLike,\n  onCommentSend\n}) => {\n  const { data, loading, error } = useQuery(queries.GET_ARTICLE, {\n    variables: {\n      id: article\n    }\n  })\n  const [loadComments, { dataComments, loadingComments, errorComments }] = useLazyQuery(\n    queries.GET_COMMENTS,\n    {\n      variables: {\n        id: article\n      }\n    }\n  )\n\n  return (\n    <Wrap className={className} style={style} appearance={appearance}>\n      {!loading && data ? (\n        <React.Fragment>\n          {data.getArticle.preview && <Poster src={data.getArticle.preview.path} />}\n\n          <Content>\n            <Meta date={data.getArticle.createdAt} category={data.getArticle.category?.name} />\n            <Title tag={'h3'} onClick={onLink} style={{ marginTop: -5, marginBottom: 5 }}>\n              {data.getArticle.title}\n            </Title>\n\n            {data.getArticle.body && <HTMLView content={data.getArticle.body} />}\n          </Content>\n\n          <Divider clear />\n\n          <Title tag={'h4'}>Комментарии</Title>\n          <Comments\n            comments={dataComments}\n            appearance={'ghost'}\n            errorComments={errorComments}\n            loadingComments={loadingComments}\n            onLoad={loadComments}\n            onLink={onCommentLink}\n            onReply={onCommentReply}\n            onLike={onCommentLike}\n            onSubmit={onCommentSend}\n          />\n        </React.Fragment>\n      ) : error ? (\n        <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n          Упс! Не удалось загрузить информацию о статье\n        </Alert>\n      ) : (\n        <Loader>\n          <Spinner />\n        </Loader>\n      )}\n    </Wrap>\n  )\n}\n\nView.defaultProps = {\n  appearance: 'default'\n}\n\nexport default View\n"]},"metadata":{},"sourceType":"module"}
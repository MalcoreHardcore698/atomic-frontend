{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Member, { Content as MemberContent } from '../../atomic-ui/components/Member';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Search from '../../atomic-ui/components/Search';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport { Loader } from '../Styled';\nimport { Wrap as WrapForm } from '../Form';\nimport MessengerChat from '../MessengerChat';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Messenger__Wrap\",\n  componentId: \"sc-1hnkbvn-0\"\n})([\"height:100%;flex-grow:1;\", \"{width:100%;padding:0;}@media only screen and (max-width:568px){flex-direction:column;}\", \" \", \" \", \"\"], WrapForm, ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const ChatsSearch = styled(Search).withConfig({\n  displayName: \"Messenger__ChatsSearch\",\n  componentId: \"sc-1hnkbvn-1\"\n})([\"margin-bottom:10px;\"]);\nexport const Chats = styled(Column).withConfig({\n  displayName: \"Messenger__Chats\",\n  componentId: \"sc-1hnkbvn-2\"\n})([\"grid-gap:0;width:320px;@media only screen and (max-width:568px){width:100%;}\"]);\nexport const Chat = styled(Member).withConfig({\n  displayName: \"Messenger__Chat\",\n  componentId: \"sc-1hnkbvn-3\"\n})([\"margin:0;padding:10px 0;border-radius:var(--surface-border-radius);transition:all 150ms ease;\", \" \", \"\"], ({\n  noPaddingForPosition\n}) => noPaddingForPosition && css([\"\", \"{p{padding-right:0;}}\"], MemberContent), ({\n  active\n}) => active && css([\"background:var(--input-background);padding:10px;\"]));\nexport const getUnreadedMessages = (messages, sender) => (messages || []).reduce((acc, item) => {\n  var _item$user;\n\n  return acc + (item.type === 'UNREADED' && ((_item$user = item.user) === null || _item$user === void 0 ? void 0 : _item$user.email) !== sender ? 1 : 0);\n}, 0);\nexport const getLastMessage = (messages, sender) => {\n  var _message$user;\n\n  const list = messages || [];\n  const message = list[list.length - 1];\n  if (!message) return '';\n  return `${((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.email) === sender ? 'Вы: ' : ''}${message.text}`;\n};\nexport const getExtendMessages = (messages, sender) => messages.map(message => ({ ...message,\n  side: sender === message.user.email ? 'owner' : 'observer'\n}));\nexport const ChatOne = ({\n  sender,\n  chat,\n  currentChat,\n  setLoading,\n  setCurrentChat,\n  getChat,\n  getTicket,\n  refetchChat,\n  refetchTicket\n}) => {\n  var _chat$chat, _chat$chat2, _chat$chat3, _chat$chat3$members$f, _chat$chat4, _chat$chat5, _chat$chat6, _chat$chat7, _chat$category, _chat$chat10;\n\n  return /*#__PURE__*/React.createElement(Chat, {\n    key: ((_chat$chat = chat.chat) === null || _chat$chat === void 0 ? void 0 : _chat$chat.id) || chat.id,\n    name: ((_chat$chat2 = chat.chat) === null || _chat$chat2 === void 0 ? void 0 : _chat$chat2.members.filter(member => member.email !== (sender === null || sender === void 0 ? void 0 : sender.email))[0].name) || chat.title,\n    avatar: ((_chat$chat3 = chat.chat) === null || _chat$chat3 === void 0 ? void 0 : (_chat$chat3$members$f = _chat$chat3.members.filter(member => member.email !== (sender === null || sender === void 0 ? void 0 : sender.email))[0].avatar) === null || _chat$chat3$members$f === void 0 ? void 0 : _chat$chat3$members$f.path) || (chat.chat ? '/images/avatar-default.png' : null),\n    budge: ((_chat$chat4 = chat.chat) === null || _chat$chat4 === void 0 ? void 0 : _chat$chat4.messages) && getUnreadedMessages((_chat$chat5 = chat.chat) === null || _chat$chat5 === void 0 ? void 0 : _chat$chat5.messages, sender === null || sender === void 0 ? void 0 : sender.email) || null,\n    position: ((_chat$chat6 = chat.chat) === null || _chat$chat6 === void 0 ? void 0 : _chat$chat6.messages) && getLastMessage((_chat$chat7 = chat.chat) === null || _chat$chat7 === void 0 ? void 0 : _chat$chat7.messages, sender === null || sender === void 0 ? void 0 : sender.email) || ((_chat$category = chat.category) === null || _chat$category === void 0 ? void 0 : _chat$category.name) || null,\n    onClick: async () => {\n      var _chat$chat8;\n\n      setLoading(true);\n\n      if ((_chat$chat8 = chat.chat) !== null && _chat$chat8 !== void 0 && _chat$chat8.id) {\n        var _chat$chat9;\n\n        const variables = {\n          id: (_chat$chat9 = chat.chat) === null || _chat$chat9 === void 0 ? void 0 : _chat$chat9.id\n        };\n        if (refetchChat) await refetchChat(variables);else await getChat({\n          variables\n        });\n        setCurrentChat(chat.chat);\n      } else {\n        const variables = {\n          id: chat.id\n        };\n        if (refetchTicket) await refetchTicket(variables);else await getTicket({\n          variables\n        });\n        setCurrentChat(chat);\n      }\n\n      setLoading(false);\n    },\n    active: currentChat && currentChat.id === (((_chat$chat10 = chat.chat) === null || _chat$chat10 === void 0 ? void 0 : _chat$chat10.id) || chat.id),\n    noPaddingForPosition: !Boolean(chat.chat)\n  });\n};\nexport const Messenger = ({\n  appearance,\n  recipient,\n  sender,\n  onAttach,\n  onMemberLink,\n  ...props\n}) => {\n  const [currentChat, setCurrentChat] = useState(null);\n  const [filteredUserChats, setFilteredUserChats] = useState([]);\n  const [filteredTicketChats, setFilteredTicketChats] = useState([]);\n  const [ticketChats, setTicketChats] = useState([]);\n  const [userChats, setUserChats] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [search, setSearch] = useState('');\n  const [getChat, {\n    data: chat,\n    loading: loadingChat,\n    error: errorChat,\n    refetch: refetchChat\n  }] = useLazyQuery(queries.GET_CHAT);\n  const [getTicket, {\n    data: ticket,\n    loading: loadingTicket,\n    error: errorTicket,\n    refetch: refetchTicket\n  }] = useLazyQuery(queries.GET_TICKET);\n  const {\n    data: dataUserChats,\n    loading: loadingUserChats,\n    error: errorUserChats,\n    refetch: getUserChats\n  } = useQuery(queries.GET_USER_CHATS);\n  const {\n    data: dataTicketChats,\n    loading: loadingTicketChats,\n    error: errorUserTickets,\n    refetch: getUserTickets\n  } = useQuery(queries.GET_USER_TICKETS);\n  const [sendMessage, {\n    data: dataSendMessage,\n    loading: loadingSendMessage,\n    error: errorSendMessage\n  }] = useMutation(queries.SEND_MESSAGE);\n  const [sendTicketMessage, {\n    data: dataUserSendMessage,\n    loading: loadingUserSendMessage,\n    error: errorUserSendMessage\n  }] = useMutation(queries.SEND_TICKET_MESSAGE);\n  const [readMessages, {\n    loading: loadingReadMessages\n  }] = useMutation(queries.READ_MESSAGES);\n  const [addUserChat] = useMutation(queries.ADD_USER_CHAT);\n\n  const onSubmit = value => {\n    if (value) {\n      setFilteredUserChats(userChats.filter(userChat => {\n        var _userChat$chat;\n\n        return ((userChat === null || userChat === void 0 ? void 0 : (_userChat$chat = userChat.chat) === null || _userChat$chat === void 0 ? void 0 : _userChat$chat.members) || []).find(member => (member === null || member === void 0 ? void 0 : member.name.toUpperCase().includes(value.toUpperCase())) || (member === null || member === void 0 ? void 0 : member.email.toUpperCase().includes(value.toUpperCase())));\n      }));\n      setFilteredTicketChats(ticketChats.filter(ticketChat => {\n        var _ticketChat$category;\n\n        return (ticketChat === null || ticketChat === void 0 ? void 0 : ticketChat.title.toUpperCase().includes(value.toUpperCase())) || (ticketChat === null || ticketChat === void 0 ? void 0 : (_ticketChat$category = ticketChat.category) === null || _ticketChat$category === void 0 ? void 0 : _ticketChat$category.name.toUpperCase().includes(value.toUpperCase()));\n      }));\n    } else {\n      setFilteredUserChats([]);\n      setFilteredTicketChats([]);\n    }\n\n    setSearch(value);\n  };\n\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: {\n          recipient\n        }\n      }).then(() => {\n        getUserChats();\n        getUserTickets();\n      });\n    }\n  }, [recipient, addUserChat]);\n  useEffect(() => {\n    if (recipient && !currentChat && !loadingUserChats && dataUserChats !== null && dataUserChats !== void 0 && dataUserChats.getUserChats) {\n      var _dataUserChats$getUse;\n\n      const id = (_dataUserChats$getUse = dataUserChats.getUserChats.find(userChat => userChat.chat.members.find(member => member.email === recipient))) === null || _dataUserChats$getUse === void 0 ? void 0 : _dataUserChats$getUse.chat.id;\n      if (id) getChat({\n        variables: {\n          id\n        }\n      });\n    }\n  }, [recipient, dataUserChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingChat && chat !== null && chat !== void 0 && chat.getChat) {\n      setCurrentChat(chat.getChat);\n    }\n  }, [chat, loadingChat]);\n  useEffect(() => {\n    if (!loadingTicket && ticket !== null && ticket !== void 0 && ticket.getTicket) {\n      setCurrentChat(ticket.getTicket);\n    }\n  }, [ticket, loadingTicket]);\n  useEffect(() => {\n    if (!loadingSendMessage && dataSendMessage) {\n      setCurrentChat(prev => ({ ...prev,\n        messages: getExtendMessages(dataSendMessage.sendMessage, sender === null || sender === void 0 ? void 0 : sender.email)\n      }));\n    }\n  }, [sender, dataSendMessage, loadingSendMessage]);\n  useEffect(() => {\n    if (!loadingUserSendMessage && dataUserSendMessage) {\n      setCurrentChat(prev => ({ ...prev,\n        messages: getExtendMessages(dataUserSendMessage.sendTicketMessage, sender === null || sender === void 0 ? void 0 : sender.email)\n      }));\n    }\n  }, [sender, dataUserSendMessage, loadingUserSendMessage]);\n  useEffect(() => {\n    if (!loadingUserChats && dataUserChats !== null && dataUserChats !== void 0 && dataUserChats.getUserChats) {\n      setUserChats(dataUserChats.getUserChats);\n    }\n  }, [dataUserChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingTicketChats && dataTicketChats !== null && dataTicketChats !== void 0 && dataTicketChats.getUserTickets) {\n      setTicketChats(dataTicketChats.getUserTickets);\n    }\n  }, [dataTicketChats, loadingTicketChats]);\n  useEffect(() => {\n    var _currentChat$messages;\n\n    const unreadedMessages = getUnreadedMessages((_currentChat$messages = currentChat === null || currentChat === void 0 ? void 0 : currentChat.messages) !== null && _currentChat$messages !== void 0 ? _currentChat$messages : [], sender);\n\n    if (currentChat && unreadedMessages > 0) {\n      readMessages({\n        variables: {\n          id: currentChat.messages.filter(message => {\n            var _message$user2;\n\n            return ((_message$user2 = message.user) === null || _message$user2 === void 0 ? void 0 : _message$user2.email) !== (sender === null || sender === void 0 ? void 0 : sender.email);\n          }).map(message => message.id)\n        }\n      });\n    }\n  }, [sender, currentChat, readMessages]);\n  return /*#__PURE__*/React.createElement(Wrap, _extends({}, props, {\n    key: loadingReadMessages,\n    appearance: appearance\n  }), /*#__PURE__*/React.createElement(Chats, null, /*#__PURE__*/React.createElement(ChatsSearch, {\n    appearance: 'ghost',\n    onSubmit: onSubmit\n  }), !loadingChat && !loadingTicket && !loadingUserChats && !loadingTicketChats && !loadingSendMessage && !loadingUserSendMessage && (userChats.length > 0 || ticketChats.length > 0) ? /*#__PURE__*/React.createElement(React.Fragment, null, (search && filteredUserChats.length > 0 ? filteredUserChats : search && filteredUserChats.length === 0 ? /*#__PURE__*/React.createElement(Alert, null, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \\u0441\\u0440\\u0435\\u0434\\u0438 \\u0447\\u0430\\u0442\\u043E\\u0432\") : userChats).map(userChat => /*#__PURE__*/React.createElement(ChatOne, {\n    chat: userChat,\n    sender: sender,\n    currentChat: currentChat,\n    setLoading: setLoading,\n    setCurrentChat: setCurrentChat,\n    getChat: getChat,\n    getTicket: getTicket,\n    refetchChat: refetchChat,\n    refetchTicket: refetchTicket\n  })), filteredUserChats.length > 0 || userChats.length > 0 && filteredUserChats.length === 0 && /*#__PURE__*/React.createElement(Divider, null), \"(\", (search && filteredTicketChats.length > 0 ? filteredTicketChats : search && filteredTicketChats.length === 0 ? /*#__PURE__*/React.createElement(Alert, null, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E \\u0441\\u0440\\u0435\\u0434\\u0438 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0439\") : ticketChats).map(ticketChat => /*#__PURE__*/React.createElement(ChatOne, {\n    chat: ticketChat,\n    sender: sender,\n    currentChat: currentChat,\n    setLoading: setLoading,\n    setCurrentChat: setCurrentChat,\n    getChat: getChat,\n    getTicket: getTicket,\n    refetchChat: refetchChat,\n    refetchTicket: refetchTicket\n  }))) : loadingChat || loadingTicket || loadingUserChats || loadingTicketChats || loadingSendMessage || loadingUserSendMessage ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      marginTop: 15\n    }\n  }, \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0435 \\u0447\\u0430\\u0442\\u044B \\u043E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u044E\\u0442\")), /*#__PURE__*/React.createElement(MessengerChat, {\n    chat: currentChat && { ...currentChat,\n      messages: getExtendMessages(currentChat.messages, sender === null || sender === void 0 ? void 0 : sender.email)\n    },\n    appearance: 'ghost',\n    error: errorChat || errorTicket || errorUserChats || errorUserTickets || errorSendMessage || errorUserSendMessage,\n    loading: loading || loadingTicket || loadingChat || loadingUserChats || loadingTicketChats || loadingSendMessage || loadingUserSendMessage,\n    onLink: onMemberLink,\n    onAttach: onAttach,\n    onSubmit: value => {\n      if (currentChat.members) {\n        const candidate = currentChat.members.find(member => member.email !== (sender === null || sender === void 0 ? void 0 : sender.email));\n        sendMessage({\n          variables: {\n            sender: sender === null || sender === void 0 ? void 0 : sender.email,\n            recipient: recipient || (candidate === null || candidate === void 0 ? void 0 : candidate.email),\n            text: value\n          }\n        });\n      } else {\n        var _currentChat$author;\n\n        sendTicketMessage({\n          variables: {\n            ticket: currentChat.id,\n            recipient: (_currentChat$author = currentChat.author) === null || _currentChat$author === void 0 ? void 0 : _currentChat$author.email,\n            text: value,\n            isClient: true\n          }\n        });\n      }\n    }\n  }));\n};\nMessenger.defaultProps = {\n  appearance: 'default'\n};\nexport default Messenger;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/Messenger/index.js"],"names":["React","useEffect","useState","styled","css","useQuery","useLazyQuery","useMutation","Row","Column","Member","Content","MemberContent","Alert","Search","Spinner","Divider","Loader","Wrap","WrapForm","MessengerChat","queries","appearance","ChatsSearch","Chats","Chat","noPaddingForPosition","active","getUnreadedMessages","messages","sender","reduce","acc","item","type","user","email","getLastMessage","list","message","length","text","getExtendMessages","map","side","ChatOne","chat","currentChat","setLoading","setCurrentChat","getChat","getTicket","refetchChat","refetchTicket","id","members","filter","member","name","title","avatar","path","category","variables","Boolean","Messenger","recipient","onAttach","onMemberLink","props","filteredUserChats","setFilteredUserChats","filteredTicketChats","setFilteredTicketChats","ticketChats","setTicketChats","userChats","setUserChats","loading","search","setSearch","data","loadingChat","error","errorChat","refetch","GET_CHAT","ticket","loadingTicket","errorTicket","GET_TICKET","dataUserChats","loadingUserChats","errorUserChats","getUserChats","GET_USER_CHATS","dataTicketChats","loadingTicketChats","errorUserTickets","getUserTickets","GET_USER_TICKETS","sendMessage","dataSendMessage","loadingSendMessage","errorSendMessage","SEND_MESSAGE","sendTicketMessage","dataUserSendMessage","loadingUserSendMessage","errorUserSendMessage","SEND_TICKET_MESSAGE","readMessages","loadingReadMessages","READ_MESSAGES","addUserChat","ADD_USER_CHAT","onSubmit","value","userChat","find","toUpperCase","includes","ticketChat","then","prev","unreadedMessages","marginTop","candidate","author","isClient","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled, { css } from 'styled-components'\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Member, { Content as MemberContent } from '../../atomic-ui/components/Member'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Search from '../../atomic-ui/components/Search'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Divider from '../../atomic-ui/components/Divider'\n\nimport { Loader } from '../Styled'\nimport { Wrap as WrapForm } from '../Form'\nimport MessengerChat from '../MessengerChat'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled(Row)`\n  height: 100%;\n  flex-grow: 1;\n\n  ${WrapForm} {\n    width: 100%;\n    padding: 0;\n  }\n\n  @media only screen and (max-width: 568px) {\n    flex-direction: column;\n  }\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const ChatsSearch = styled(Search)`\n  margin-bottom: 10px;\n`\n\nexport const Chats = styled(Column)`\n  grid-gap: 0;\n  width: 320px;\n\n  @media only screen and (max-width: 568px) {\n    width: 100%;\n  }\n`\n\nexport const Chat = styled(Member)`\n  margin: 0;\n  padding: 10px 0;\n  border-radius: var(--surface-border-radius);\n  transition: all 150ms ease;\n\n  ${({ noPaddingForPosition }) =>\n    noPaddingForPosition &&\n    css`\n      ${MemberContent} {\n        p {\n          padding-right: 0;\n        }\n      }\n    `}\n\n  ${({ active }) =>\n    active &&\n    css`\n      background: var(--input-background);\n      padding: 10px;\n    `}\n`\n\nexport const getUnreadedMessages = (messages, sender) =>\n  (messages || []).reduce(\n    (acc, item) => acc + (item.type === 'UNREADED' && item.user?.email !== sender ? 1 : 0),\n    0\n  )\n\nexport const getLastMessage = (messages, sender) => {\n  const list = messages || []\n  const message = list[list.length - 1]\n  if (!message) return ''\n  return `${message.user?.email === sender ? 'Вы: ' : ''}${message.text}`\n}\n\nexport const getExtendMessages = (messages, sender) =>\n  messages.map((message) => ({\n    ...message,\n    side: sender === message.user.email ? 'owner' : 'observer'\n  }))\n\nexport const ChatOne = ({\n  sender,\n  chat,\n  currentChat,\n  setLoading,\n  setCurrentChat,\n  getChat,\n  getTicket,\n  refetchChat,\n  refetchTicket\n}) => {\n  return (\n    <Chat\n      key={chat.chat?.id || chat.id}\n      name={\n        chat.chat?.members.filter((member) => member.email !== sender?.email)[0].name ||\n        chat.title\n      }\n      avatar={\n        chat.chat?.members.filter((member) => member.email !== sender?.email)[0].avatar?.path ||\n        (chat.chat ? '/images/avatar-default.png' : null)\n      }\n      budge={\n        (chat.chat?.messages && getUnreadedMessages(chat.chat?.messages, sender?.email)) || null\n      }\n      position={\n        (chat.chat?.messages && getLastMessage(chat.chat?.messages, sender?.email)) ||\n        chat.category?.name || null\n      }\n      onClick={async () => {\n        setLoading(true)\n        if (chat.chat?.id) {\n          const variables = { id: chat.chat?.id }\n          if (refetchChat) await refetchChat(variables)\n          else await getChat({ variables })\n          setCurrentChat(chat.chat)\n        } else {\n          const variables = { id: chat.id }\n          if (refetchTicket) await refetchTicket(variables)\n          else await getTicket({ variables })\n          setCurrentChat(chat)\n        }\n        setLoading(false)\n      }}\n      active={currentChat && currentChat.id === (chat.chat?.id || chat.id)}\n      noPaddingForPosition={!Boolean(chat.chat)}\n    />\n  )\n}\n\nexport const Messenger = ({ appearance, recipient, sender, onAttach, onMemberLink, ...props }) => {\n  const [currentChat, setCurrentChat] = useState(null)\n  const [filteredUserChats, setFilteredUserChats] = useState([])\n  const [filteredTicketChats, setFilteredTicketChats] = useState([])\n  const [ticketChats, setTicketChats] = useState([])\n  const [userChats, setUserChats] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [search, setSearch] = useState('')\n\n  const [\n    getChat,\n    { data: chat, loading: loadingChat, error: errorChat, refetch: refetchChat }\n  ] = useLazyQuery(queries.GET_CHAT)\n  const [\n    getTicket,\n    { data: ticket, loading: loadingTicket, error: errorTicket, refetch: refetchTicket }\n  ] = useLazyQuery(queries.GET_TICKET)\n\n  const {\n    data: dataUserChats,\n    loading: loadingUserChats,\n    error: errorUserChats,\n    refetch: getUserChats\n  } = useQuery(queries.GET_USER_CHATS)\n\n  const {\n    data: dataTicketChats,\n    loading: loadingTicketChats,\n    error: errorUserTickets,\n    refetch: getUserTickets\n  } = useQuery(queries.GET_USER_TICKETS)\n\n  const [\n    sendMessage,\n    { data: dataSendMessage, loading: loadingSendMessage, error: errorSendMessage }\n  ] = useMutation(queries.SEND_MESSAGE)\n  const [\n    sendTicketMessage,\n    { data: dataUserSendMessage, loading: loadingUserSendMessage, error: errorUserSendMessage }\n  ] = useMutation(queries.SEND_TICKET_MESSAGE)\n  const [readMessages, { loading: loadingReadMessages }] = useMutation(queries.READ_MESSAGES)\n  const [addUserChat] = useMutation(queries.ADD_USER_CHAT)\n\n  const onSubmit = (value) => {\n    if (value) {\n      setFilteredUserChats(userChats.filter((userChat) =>\n        (userChat?.chat?.members || []).find((member) =>\n          member?.name.toUpperCase().includes(value.toUpperCase()) ||\n          member?.email.toUpperCase().includes(value.toUpperCase())\n        )\n      ))\n      setFilteredTicketChats(ticketChats.filter((ticketChat) =>\n        ticketChat?.title.toUpperCase().includes(value.toUpperCase()) ||\n        ticketChat?.category?.name.toUpperCase().includes(value.toUpperCase())\n      ))\n    } else {\n      setFilteredUserChats([])\n      setFilteredTicketChats([])\n    }\n    setSearch(value)\n  }\n\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: { recipient }\n      }).then(() => {\n        getUserChats()\n        getUserTickets()\n      })\n    }\n  }, [recipient, addUserChat])\n\n  useEffect(() => {\n    if (recipient && !currentChat && !loadingUserChats && dataUserChats?.getUserChats) {\n      const id = dataUserChats.getUserChats.find((userChat) =>\n        userChat.chat.members.find((member) => member.email === recipient)\n      )?.chat.id\n\n      if (id) getChat({ variables: { id } })\n    }\n  }, [recipient, dataUserChats, loadingUserChats])\n\n  useEffect(() => {\n    if (!loadingChat && chat?.getChat) {\n      setCurrentChat(chat.getChat)\n    }\n  }, [chat, loadingChat])\n\n  useEffect(() => {\n    if (!loadingTicket && ticket?.getTicket) {\n      setCurrentChat(ticket.getTicket)\n    }\n  }, [ticket, loadingTicket])\n\n  useEffect(() => {\n    if (!loadingSendMessage && dataSendMessage) {\n      setCurrentChat((prev) => ({\n        ...prev,\n        messages: getExtendMessages(dataSendMessage.sendMessage, sender?.email)\n      }))\n    }\n  }, [sender, dataSendMessage, loadingSendMessage])\n\n  useEffect(() => {\n    if (!loadingUserSendMessage && dataUserSendMessage) {\n      setCurrentChat((prev) => ({\n        ...prev,\n        messages: getExtendMessages(dataUserSendMessage.sendTicketMessage, sender?.email)\n      }))\n    }\n  }, [sender, dataUserSendMessage, loadingUserSendMessage])\n\n  useEffect(() => {\n    if (!loadingUserChats && dataUserChats?.getUserChats) {\n      setUserChats(dataUserChats.getUserChats)\n    }\n  }, [dataUserChats, loadingUserChats])\n\n  useEffect(() => {\n    if (!loadingTicketChats && dataTicketChats?.getUserTickets) {\n      setTicketChats(dataTicketChats.getUserTickets)\n    }\n  }, [dataTicketChats, loadingTicketChats])\n\n  useEffect(() => {\n    const unreadedMessages = getUnreadedMessages(currentChat?.messages ?? [], sender)\n    if (currentChat && unreadedMessages > 0) {\n      readMessages({\n        variables: {\n          id: currentChat.messages\n            .filter((message) => message.user?.email !== sender?.email)\n            .map((message) => message.id)\n        }\n      })\n    }\n  }, [sender, currentChat, readMessages])\n\n  return (\n    <Wrap {...props} key={loadingReadMessages} appearance={appearance}>\n      <Chats>\n        <ChatsSearch appearance={'ghost'} onSubmit={onSubmit} />\n\n        {!loadingChat &&\n        !loadingTicket &&\n        !loadingUserChats &&\n        !loadingTicketChats &&\n        !loadingSendMessage &&\n        !loadingUserSendMessage &&\n        (userChats.length > 0 || ticketChats.length > 0) ? (\n          <React.Fragment>\n            {(search && filteredUserChats.length > 0 ? filteredUserChats :\n              search && filteredUserChats.length === 0 ? (\n              <Alert>\n                Ничего не найдено среди чатов\n              </Alert>\n            ) : userChats).map((userChat) => (\n              <ChatOne\n                chat={userChat}\n                sender={sender}\n                currentChat={currentChat}\n                setLoading={setLoading}\n                setCurrentChat={setCurrentChat}\n                getChat={getChat}\n                getTicket={getTicket}\n                refetchChat={refetchChat}\n                refetchTicket={refetchTicket}\n              />\n            ))}\n            {filteredUserChats.length > 0 || (userChats.length > 0 && filteredUserChats.length === 0) && <Divider />}(\n            {(search && filteredTicketChats.length > 0 ? filteredTicketChats :\n              search && filteredTicketChats.length === 0 ? (\n              <Alert>\n                Ничего не найдено среди обращений\n              </Alert>\n            ) : ticketChats).map((ticketChat) => (\n              <ChatOne\n                chat={ticketChat}\n                sender={sender}\n                currentChat={currentChat}\n                setLoading={setLoading}\n                setCurrentChat={setCurrentChat}\n                getChat={getChat}\n                getTicket={getTicket}\n                refetchChat={refetchChat}\n                refetchTicket={refetchTicket}\n              />\n            ))}\n          </React.Fragment>\n        ) : loadingChat ||\n          loadingTicket ||\n          loadingUserChats ||\n          loadingTicketChats ||\n          loadingSendMessage ||\n          loadingUserSendMessage ? (\n          <Loader>\n            <Spinner />\n          </Loader>\n        ) : (\n          <Alert style={{ marginTop: 15 }}>Активные чаты отсутствуют</Alert>\n        )}\n      </Chats>\n      <MessengerChat\n        chat={\n          currentChat && {\n            ...currentChat,\n            messages: getExtendMessages(currentChat.messages, sender?.email)\n          }\n        }\n        appearance={'ghost'}\n        error={\n          errorChat ||\n          errorTicket ||\n          errorUserChats ||\n          errorUserTickets ||\n          errorSendMessage ||\n          errorUserSendMessage\n        }\n        loading={\n          loading ||\n          loadingTicket ||\n          loadingChat ||\n          loadingUserChats ||\n          loadingTicketChats ||\n          loadingSendMessage ||\n          loadingUserSendMessage\n        }\n        onLink={onMemberLink}\n        onAttach={onAttach}\n        onSubmit={(value) => {\n          if (currentChat.members) {\n            const candidate = currentChat.members.find((member) => member.email !== sender?.email)\n            sendMessage({\n              variables: {\n                sender: sender?.email,\n                recipient: recipient || candidate?.email,\n                text: value\n              }\n            })\n          } else {\n            sendTicketMessage({\n              variables: {\n                ticket: currentChat.id,\n                recipient: currentChat.author?.email,\n                text: value,\n                isClient: true\n              }\n            })\n          }\n        }}\n      />\n    </Wrap>\n  )\n}\n\nMessenger.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Messenger\n"]},"metadata":{},"sourceType":"module"}
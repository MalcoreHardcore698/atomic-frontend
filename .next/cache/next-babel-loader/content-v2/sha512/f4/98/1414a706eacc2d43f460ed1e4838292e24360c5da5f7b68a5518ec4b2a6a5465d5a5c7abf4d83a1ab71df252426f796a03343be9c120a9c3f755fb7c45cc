{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/category';\nimport { useHelper } from '../../hooks/useHelper';\nimport { onCategoryCreate, onCategoryEdit, onCategoryLink } from '../../store/helpers/category';\nimport CategoryCard from '../../components/CategoryCard';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Категории';\nconst LIMIT = 32;\n\nconst Categories = () => {\n  const recall = useHelper();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    icon: 'folder',\n    template: template,\n    emptyMessage: 'Категорий нет',\n    buttonCreateText: 'Создать категорию',\n    getType: 'getCategories',\n    getQuery: queries.GET_CATEGORIES,\n    deleteQuery: queries.DELETE_CATEGORY,\n    deleteEntityMultiText: 'категории',\n    deleteEntitySingleText: 'категорию',\n    onLink: category => recall(onCategoryLink, {\n      id: category.id,\n      category\n    }),\n    onEdit: category => recall(onCategoryEdit, {\n      id: category.id,\n      category,\n      mutation: queries.UPDATE_CATEGORY\n    })(),\n    onCreate: recall(onCategoryCreate, {\n      mutation: queries.CREATE_CATEGORY\n    }),\n    render: document => /*#__PURE__*/React.createElement(CategoryCard, {\n      category: document\n    })\n  });\n};\n\nexport default Categories;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/categories.js"],"names":["React","useEffect","useDispatch","template","useHelper","onCategoryCreate","onCategoryEdit","onCategoryLink","CategoryCard","ContentLayout","setDocuments","queries","TITLE","LIMIT","Categories","recall","dispatch","GET_CATEGORIES","DELETE_CATEGORY","category","id","mutation","UPDATE_CATEGORY","CREATE_CATEGORY","document"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,QAAP,MAAqB,qDAArB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,gBAAT,EAA2BC,cAA3B,EAA2CC,cAA3C,QAAiE,8BAAjE;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,MAAMC,KAAK,GAAG,WAAd;AACA,MAAMC,KAAK,GAAG,EAAd;;AAEA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,MAAM,GAAGX,SAAS,EAAxB;AACA,QAAMY,QAAQ,GAAGd,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACN,YAAY,CAAC,IAAD,CAAb,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEE,KADT;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,IAAI,EAAE,QAHR;AAIE,IAAA,QAAQ,EAAEV,QAJZ;AAKE,IAAA,YAAY,EAAE,eALhB;AAME,IAAA,gBAAgB,EAAE,mBANpB;AAOE,IAAA,OAAO,EAAE,eAPX;AAQE,IAAA,QAAQ,EAAEQ,OAAO,CAACM,cARpB;AASE,IAAA,WAAW,EAAEN,OAAO,CAACO,eATvB;AAUE,IAAA,qBAAqB,EAAE,WAVzB;AAWE,IAAA,sBAAsB,EAAE,WAX1B;AAYE,IAAA,MAAM,EAAGC,QAAD,IAAcJ,MAAM,CAACR,cAAD,EAAiB;AAAEa,MAAAA,EAAE,EAAED,QAAQ,CAACC,EAAf;AAAmBD,MAAAA;AAAnB,KAAjB,CAZ9B;AAaE,IAAA,MAAM,EAAGA,QAAD,IACNJ,MAAM,CAACT,cAAD,EAAiB;AACrBc,MAAAA,EAAE,EAAED,QAAQ,CAACC,EADQ;AAErBD,MAAAA,QAFqB;AAGrBE,MAAAA,QAAQ,EAAEV,OAAO,CAACW;AAHG,KAAjB,CAAN,EAdJ;AAoBE,IAAA,QAAQ,EAAEP,MAAM,CAACV,gBAAD,EAAmB;AAAEgB,MAAAA,QAAQ,EAAEV,OAAO,CAACY;AAApB,KAAnB,CApBlB;AAqBE,IAAA,MAAM,EAAGC,QAAD,iBAAc,oBAAC,YAAD;AAAc,MAAA,QAAQ,EAAEA;AAAxB;AArBxB,IADF;AAyBD,CAjCD;;AAmCA,eAAeV,UAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport template from '../../atomic-ui/components/Table/templates/category'\n\nimport { useHelper } from '../../hooks/useHelper'\nimport { onCategoryCreate, onCategoryEdit, onCategoryLink } from '../../store/helpers/category'\nimport CategoryCard from '../../components/CategoryCard'\nimport ContentLayout from '../../layouts/dashboard/content'\nimport { setDocuments } from '../../store/actions/documents'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Категории'\nconst LIMIT = 32\n\nconst Categories = () => {\n  const recall = useHelper()\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      limit={LIMIT}\n      icon={'folder'}\n      template={template}\n      emptyMessage={'Категорий нет'}\n      buttonCreateText={'Создать категорию'}\n      getType={'getCategories'}\n      getQuery={queries.GET_CATEGORIES}\n      deleteQuery={queries.DELETE_CATEGORY}\n      deleteEntityMultiText={'категории'}\n      deleteEntitySingleText={'категорию'}\n      onLink={(category) => recall(onCategoryLink, { id: category.id, category })}\n      onEdit={(category) =>\n        recall(onCategoryEdit, {\n          id: category.id,\n          category,\n          mutation: queries.UPDATE_CATEGORY\n        })()\n      }\n      onCreate={recall(onCategoryCreate, { mutation: queries.CREATE_CATEGORY })}\n      render={(document) => <CategoryCard category={document} />}\n    />\n  )\n}\n\nexport default Categories\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, memo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Table, { Wrap as WrapTable } from '../../atomic-ui/components/Table';\nimport { CentralAlert, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nconst statuses = ['PUBLISHED', 'MODERATION'];\nexport const Wrap = styled.div.withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"width:100%;\", \"{width:calc(100vw - 280px);}\"], WrapTable);\n_c = Wrap;\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const Loader = () => /*#__PURE__*/React.createElement(LowerLoader, {\n  key: 'loader'\n}, /*#__PURE__*/React.createElement(Spinner, null));\n_c2 = Loader;\nexport const Content = memo(_c3 = _s(({\n  type,\n  search,\n  params,\n  refetch,\n  loading,\n  template,\n  component,\n  variables,\n  limit = 6,\n  emptyMessage,\n  initialList,\n  initialDisplayMethod,\n  setCheckedList,\n  gridOptions,\n  withoutMore,\n  itemProps,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  var _router$query;\n\n  _s();\n\n  const router = useRouter();\n  const displayMethod = useSelector(state => state.root.displayMethod);\n  const [items, setItems] = useState(initialList || []);\n  const [page, setPage] = useState(Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n\n  const loadMore = async () => {\n    if (!isEnd && !loading && refetch) {\n      setIsLoading(true);\n      const response = await refetch({ ...variables,\n        ...params,\n        offset: limit * page,\n        search,\n        limit\n      });\n\n      if (response !== null && response !== void 0 && response.data) {\n        const list = response.data[type];\n        if (list.length === 0) setIsEnd(true);\n        if (list.length > 0) setItems(prev => [...prev, ...list]);\n        setPage(prev => prev + 1);\n      }\n\n      setIsLoading(false);\n    }\n  }; // Necessary for determination checkList outside [content]\n\n\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) setCheckedList(items);\n  }, [items, setCheckedList]);\n  return /*#__PURE__*/React.createElement(Wrap, null, (initialDisplayMethod || displayMethod) === 'grid' && /*#__PURE__*/React.createElement(Grid, gridOptions, items.map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n    key: item.id || item.email\n  }, component(item, itemProps)))), (initialDisplayMethod || displayMethod) === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: items,\n    template: template,\n    onChecked: onChecked,\n    onClick: onClick,\n    onEdit: onEdit,\n    onDelete: onDelete\n  }), (loading || isLoading) && !withoutMore && /*#__PURE__*/React.createElement(Loader, null), !loading && !isLoading && items.length === 0 && /*#__PURE__*/React.createElement(CentralAlert, null, emptyMessage), items.length > 0 && !isEnd && !loading && !withoutMore && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      justifyContent: 'center'\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    disabled: isLoading,\n    style: {\n      width: 245\n    },\n    onClick: loadMore\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435\"))));\n}, \"T9MBfifQ6F4hkWhB2SKZ4Tb3kaQ=\", false, function () {\n  return [useRouter, useSelector];\n}));\n_c4 = Content;\nexport const List = memo(_c5 = _s2(({\n  type,\n  query,\n  limit,\n  template,\n  component,\n  variables,\n  startOffset,\n  emptyMessage,\n  initialDisplayMethod,\n  setCheckedList,\n  withoutSearch,\n  itemProps,\n  gridOptions,\n  onChecked,\n  onDelete,\n  onClick,\n  onEdit\n}) => {\n  _s2();\n\n  const {\n    search,\n    params\n  } = useSelector(state => ({\n    search: withoutSearch ? '' : state.root.search,\n    params: withoutSearch ? {} : state.root.params\n  }));\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(query, {\n    variables: {\n      status: statuses,\n      ...variables,\n      offset: startOffset,\n      limit\n    }\n  });\n  if (loading) return /*#__PURE__*/React.createElement(Loader, null);\n  return /*#__PURE__*/React.createElement(Content, {\n    type: type,\n    limit: limit,\n    query: query,\n    search: search,\n    params: params,\n    refetch: refetch,\n    template: template,\n    component: component,\n    emptyMessage: emptyMessage,\n    initialList: type && data && data[type],\n    initialDisplayMethod: initialDisplayMethod,\n    setCheckedList: setCheckedList,\n    withoutMore: !search,\n    itemProps: itemProps,\n    gridOptions: gridOptions,\n    onChecked: onChecked,\n    onDelete: onDelete,\n    onClick: onClick,\n    onEdit: onEdit\n  });\n}, \"d62UX5znDIjkfxb2asTORUHF604=\", false, function () {\n  return [useSelector, useQuery];\n}));\n_c6 = List;\nList.defaultProps = {\n  startOffset: 0\n};\nexport default List;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Loader\");\n$RefreshReg$(_c3, \"Content$memo\");\n$RefreshReg$(_c4, \"Content\");\n$RefreshReg$(_c5, \"List$memo\");\n$RefreshReg$(_c6, \"List\");","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/List/index.js"],"names":["React","useState","useEffect","memo","useQuery","useSelector","useRouter","styled","Row","Grid","Alert","Spinner","Divider","Button","Table","Wrap","WrapTable","CentralAlert","LowerLoader","LazyLoad","statuses","div","CenterAlert","Loader","Content","type","search","params","refetch","loading","template","component","variables","limit","emptyMessage","initialList","initialDisplayMethod","setCheckedList","gridOptions","withoutMore","itemProps","onChecked","onClick","onEdit","onDelete","router","displayMethod","state","root","items","setItems","page","setPage","Number","query","isLoading","setIsLoading","isEnd","setIsEnd","loadMore","response","offset","data","list","length","prev","map","item","id","email","justifyContent","width","List","startOffset","withoutSearch","status","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, memo } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Grid from '../../atomic-ui/components/Grid'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Button from '../../atomic-ui/components/Button'\nimport Table, { Wrap as WrapTable } from '../../atomic-ui/components/Table'\n\nimport { CentralAlert, LowerLoader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\n\nconst statuses = ['PUBLISHED', 'MODERATION']\n\nexport const Wrap = styled.div`\n  width: 100%;\n\n  ${WrapTable} {\n    width: calc(100vw - 280px);\n  }\n`\n\nexport const CenterAlert = styled(Alert)`\n  width: 100%;\n  text-align: center;\n`\n\nexport const Loader = () => (\n  <LowerLoader key={'loader'}>\n    <Spinner />\n  </LowerLoader>\n)\n\nexport const Content = memo(\n  ({\n    type,\n    search,\n    params,\n    refetch,\n    loading,\n    template,\n    component,\n    variables,\n    limit = 6,\n    emptyMessage,\n    initialList,\n    initialDisplayMethod,\n    setCheckedList,\n    gridOptions,\n    withoutMore,\n    itemProps,\n    onChecked,\n    onClick,\n    onEdit,\n    onDelete\n  }) => {\n    const router = useRouter()\n    const displayMethod = useSelector((state) => state.root.displayMethod)\n\n    const [items, setItems] = useState(initialList || [])\n    const [page, setPage] = useState(Number(router.query?.page) || 1)\n    const [isLoading, setIsLoading] = useState(false)\n    const [isEnd, setIsEnd] = useState(false)\n\n    const loadMore = async () => {\n      if (!isEnd && !loading && refetch) {\n        setIsLoading(true)\n\n        const response = await refetch({\n          ...variables,\n          ...params,\n          offset: limit * page,\n          search,\n          limit\n        })\n\n        if (response?.data) {\n          const list = response.data[type]\n          if (list.length === 0) setIsEnd(true)\n          if (list.length > 0) setItems((prev) => [...prev, ...list])\n          setPage((prev) => prev + 1)\n        }\n\n        setIsLoading(false)\n      }\n    }\n\n    // Necessary for determination checkList outside [content]\n    useEffect(() => {\n      if (items?.length > 0 && setCheckedList) setCheckedList(items)\n    }, [items, setCheckedList])\n\n    return (\n      <Wrap>\n        {(initialDisplayMethod || displayMethod) === 'grid' && (\n          <Grid {...gridOptions}>\n            {items.map((item) => (\n              <LazyLoad key={item.id || item.email}>{component(item, itemProps)}</LazyLoad>\n            ))}\n          </Grid>\n        )}\n\n        {(initialDisplayMethod || displayMethod) === 'list' && (\n          <Table\n            data={items}\n            template={template}\n            onChecked={onChecked}\n            onClick={onClick}\n            onEdit={onEdit}\n            onDelete={onDelete}\n          />\n        )}\n\n        {(loading || isLoading) && !withoutMore && <Loader />}\n\n        {!loading && !isLoading && items.length === 0 && (\n          <CentralAlert>{emptyMessage}</CentralAlert>\n        )}\n\n        {items.length > 0 && !isEnd && !loading && !withoutMore && (\n          <React.Fragment>\n            <Divider />\n            <Row style={{ justifyContent: 'center' }}>\n              <Button\n                type={'button'}\n                disabled={isLoading}\n                style={{ width: 245 }}\n                onClick={loadMore}>\n                Загрузить еще\n              </Button>\n            </Row>\n          </React.Fragment>\n        )}\n      </Wrap>\n    )\n  }\n)\n\nexport const List = memo(\n  ({\n    type,\n    query,\n    limit,\n    template,\n    component,\n    variables,\n    startOffset,\n    emptyMessage,\n    initialDisplayMethod,\n    setCheckedList,\n    withoutSearch,\n    itemProps,\n    gridOptions,\n    onChecked,\n    onDelete,\n    onClick,\n    onEdit\n  }) => {\n    const { search, params } = useSelector((state) => ({\n      search: withoutSearch ? '' : state.root.search,\n      params: withoutSearch ? {} : state.root.params\n    }))\n\n    const { data, loading, refetch } = useQuery(query, {\n      variables: {\n        status: statuses,\n        ...variables,\n        offset: startOffset,\n        limit\n      }\n    })\n\n    if (loading) return <Loader />\n\n    return (\n      <Content\n        type={type}\n        limit={limit}\n        query={query}\n        search={search}\n        params={params}\n        refetch={refetch}\n        template={template}\n        component={component}\n        emptyMessage={emptyMessage}\n        initialList={type && data && data[type]}\n        initialDisplayMethod={initialDisplayMethod}\n        setCheckedList={setCheckedList}\n        withoutMore={!search}\n        itemProps={itemProps}\n        gridOptions={gridOptions}\n        onChecked={onChecked}\n        onDelete={onDelete}\n        onClick={onClick}\n        onEdit={onEdit}\n      />\n    )\n  }\n)\n\nList.defaultProps = {\n  startOffset: 0\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}
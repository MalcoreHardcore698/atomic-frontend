{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Member from '../../atomic-ui/components/Member';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Search from '../../atomic-ui/components/Search';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport { Wrap as WrapForm } from '../Form';\nimport MessengerChat from '../MessengerChat';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Messenger__Wrap\",\n  componentId: \"sc-1hnkbvn-0\"\n})([\"height:100%;flex-grow:1;\", \"{width:100%;padding:0;}@media only screen and (max-width:568px){flex-direction:column;}\", \" \", \" \", \"\"], WrapForm, ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const ChatsSearch = styled(Search).withConfig({\n  displayName: \"Messenger__ChatsSearch\",\n  componentId: \"sc-1hnkbvn-1\"\n})([\"margin-bottom:10px;\"]);\nexport const Chats = styled(Column).withConfig({\n  displayName: \"Messenger__Chats\",\n  componentId: \"sc-1hnkbvn-2\"\n})([\"grid-gap:0;width:320px;@media only screen and (max-width:568px){width:100%;}\"]);\nexport const Chat = styled(Member).withConfig({\n  displayName: \"Messenger__Chat\",\n  componentId: \"sc-1hnkbvn-3\"\n})([\"margin:0;padding:10px 0;border-radius:var(--surface-border-radius);transition:all 150ms ease;\", \"\"], ({\n  active\n}) => active && css([\"background:var(--input-background);padding:10px;\"]));\nexport const getUnreadedMessages = (messages, sender) => (messages || []).reduce((acc, item) => {\n  var _item$user;\n\n  return acc + (item.type === 'UNREADED' && ((_item$user = item.user) === null || _item$user === void 0 ? void 0 : _item$user.email) !== (sender === null || sender === void 0 ? void 0 : sender.email) ? 1 : 0);\n}, 0);\nexport const getLastMessage = (messages, sender) => {\n  var _message$user;\n\n  const list = messages || [];\n  const message = list[list.length - 1];\n  if (!message) return '';\n  return `${((_message$user = message.user) === null || _message$user === void 0 ? void 0 : _message$user.email) === (sender === null || sender === void 0 ? void 0 : sender.email) ? 'Вы: ' : ''}${message.text}`;\n};\nexport const getExtendMessages = (messages, sender) => messages.map(message => ({ ...message,\n  side: (sender === null || sender === void 0 ? void 0 : sender.name) === message.user.name ? 'owner' : 'observer'\n}));\nexport const Messenger = ({\n  appearance,\n  recipient,\n  sender,\n  onAttach,\n  onMemberLink,\n  ...props\n}) => {\n  const [currentChat, setCurrentChat] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [chats, setChats] = useState([]);\n  const [userChats, setUserChats] = useState([]);\n  const [ticketChats, setTicketChats] = useState([]);\n  const [getChat, {\n    data: chat,\n    loading: loadingChat,\n    error: errorChat,\n    refetch: refetchChat\n  }] = useLazyQuery(queries.GET_CHAT);\n  const [getTicket, {\n    data: ticket,\n    loading: loadingTicket,\n    error: errorTicket,\n    refetch: refetchTicket\n  }] = useLazyQuery(queries.GET_TICKET);\n  const {\n    data: dataUserChats,\n    loading: loadingUserChats,\n    error: errorUserChats,\n    refetch: getUserChats\n  } = useQuery(queries.GET_USER_CHATS);\n  const {\n    data: dataTicketChats,\n    loading: loadingTicketChats,\n    error: errorUserTickets,\n    refetch: getUserTickets\n  } = useQuery(queries.GET_USER_TICKETS);\n  const [sendMessage, {\n    data: dataSendMessage,\n    loading: loadingSendMessage,\n    error: errorSendMessage\n  }] = useMutation(queries.SEND_MESSAGE);\n  const [sendTicketMessage, {\n    data: dataUserSendMessage,\n    loading: loadingUserSendMessage,\n    error: errorUserSendMessage\n  }] = useMutation(queries.SEND_TICKET_MESSAGE);\n  const [addUserChat] = useMutation(queries.ADD_USER_CHAT);\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: {\n          recipient: recipient.email\n        }\n      }).then(() => {\n        getUserChats();\n        getUserTickets();\n      });\n    }\n  }, [recipient, addUserChat]);\n  useEffect(() => {\n    if (recipient && !currentChat && !loadingUserChats && dataUserChats !== null && dataUserChats !== void 0 && dataUserChats.getUserChats) {\n      var _dataUserChats$getUse;\n\n      const id = (_dataUserChats$getUse = dataUserChats.getUserChats.find(userChat => userChat.chat.members.find(member => member.name === recipient.name))) === null || _dataUserChats$getUse === void 0 ? void 0 : _dataUserChats$getUse.chat.id;\n      if (id) getChat({\n        variables: {\n          id\n        }\n      });\n    }\n  }, [recipient, dataUserChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingChat && chat !== null && chat !== void 0 && chat.getChat) {\n      setCurrentChat(chat.getChat);\n    }\n  }, [chat, loadingChat]);\n  useEffect(() => {\n    if (!loadingTicket && ticket !== null && ticket !== void 0 && ticket.getTicket) {\n      setCurrentChat(ticket.getTicket);\n    }\n  }, [ticket, loadingTicket]);\n  useEffect(() => {\n    if (!loadingSendMessage && dataSendMessage) {\n      setCurrentChat(prev => ({ ...prev,\n        messages: getExtendMessages(dataSendMessage.sendMessage, sender)\n      }));\n    }\n  }, [sender, dataSendMessage, loadingSendMessage]);\n  useEffect(() => {\n    if (!loadingUserSendMessage && dataUserSendMessage) {\n      setCurrentChat(prev => ({ ...prev,\n        messages: getExtendMessages(dataUserSendMessage.sendTicketMessage, sender)\n      }));\n    }\n  }, [sender, dataUserSendMessage, loadingUserSendMessage]);\n  useEffect(() => {\n    if (!loadingUserChats && dataUserChats !== null && dataUserChats !== void 0 && dataUserChats.getUserChats) {\n      setUserChats(dataUserChats.getUserChats);\n    }\n  }, [dataUserChats, loadingUserChats]);\n  useEffect(() => {\n    if (!loadingTicketChats && dataTicketChats !== null && dataTicketChats !== void 0 && dataTicketChats.getUserTickets) {\n      setTicketChats(dataTicketChats.getUserTickets);\n    }\n  }, [dataTicketChats, loadingTicketChats]);\n  useEffect(() => {\n    setChats(userChats.concat(ticketChats));\n  }, [userChats, ticketChats]);\n  return /*#__PURE__*/React.createElement(Wrap, _extends({}, props, {\n    appearance: appearance\n  }), /*#__PURE__*/React.createElement(Chats, null, /*#__PURE__*/React.createElement(ChatsSearch, {\n    appearance: 'ghost'\n  }), !loadingChat && !loadingTicket && !loadingUserChats && !loadingTicketChats && !loadingSendMessage && !loadingUserSendMessage && chats.length > 0 ? chats.map(chat => {\n    var _chat$chat, _chat$chat2, _chat$counsellor, _chat$chat3, _chat$chat3$members$f, _chat$counsellor2, _chat$counsellor2$ava, _chat$chat4, _chat$chat5, _chat$chat6, _chat$chat7, _chat$chat10;\n\n    return /*#__PURE__*/React.createElement(Chat, {\n      key: ((_chat$chat = chat.chat) === null || _chat$chat === void 0 ? void 0 : _chat$chat.id) || chat.id,\n      name: ((_chat$chat2 = chat.chat) === null || _chat$chat2 === void 0 ? void 0 : _chat$chat2.members.filter(member => member.name !== (sender === null || sender === void 0 ? void 0 : sender.name))[0].name) || ((_chat$counsellor = chat.counsellor) === null || _chat$counsellor === void 0 ? void 0 : _chat$counsellor.name),\n      avatar: ((_chat$chat3 = chat.chat) === null || _chat$chat3 === void 0 ? void 0 : (_chat$chat3$members$f = _chat$chat3.members.filter(member => member.name !== (sender === null || sender === void 0 ? void 0 : sender.name))[0].avatar) === null || _chat$chat3$members$f === void 0 ? void 0 : _chat$chat3$members$f.path) || ((_chat$counsellor2 = chat.counsellor) === null || _chat$counsellor2 === void 0 ? void 0 : (_chat$counsellor2$ava = _chat$counsellor2.avatar) === null || _chat$counsellor2$ava === void 0 ? void 0 : _chat$counsellor2$ava.path) || '/images/avatar-default.png',\n      budge: ((_chat$chat4 = chat.chat) === null || _chat$chat4 === void 0 ? void 0 : _chat$chat4.messages) && getUnreadedMessages((_chat$chat5 = chat.chat) === null || _chat$chat5 === void 0 ? void 0 : _chat$chat5.messages, sender) || chat.messages && getUnreadedMessages(chat.messages, sender) || null,\n      position: ((_chat$chat6 = chat.chat) === null || _chat$chat6 === void 0 ? void 0 : _chat$chat6.messages) && getLastMessage((_chat$chat7 = chat.chat) === null || _chat$chat7 === void 0 ? void 0 : _chat$chat7.messages, sender) || chat.messages && getLastMessage(chat.messages, sender) || null,\n      onClick: async () => {\n        var _chat$chat8;\n\n        setLoading(true);\n\n        if ((_chat$chat8 = chat.chat) !== null && _chat$chat8 !== void 0 && _chat$chat8.id) {\n          var _chat$chat9;\n\n          const variables = {\n            id: (_chat$chat9 = chat.chat) === null || _chat$chat9 === void 0 ? void 0 : _chat$chat9.id\n          };\n          if (refetchChat) await refetchChat(variables);else await getChat({\n            variables\n          });\n          setCurrentChat(chat.chat);\n        } else {\n          const variables = {\n            id: chat.id\n          };\n          if (refetchTicket) await refetchTicket(variables);else await getTicket({\n            variables\n          });\n          setCurrentChat(chat);\n        }\n\n        setLoading(false);\n      },\n      active: currentChat && currentChat.id === (((_chat$chat10 = chat.chat) === null || _chat$chat10 === void 0 ? void 0 : _chat$chat10.id) || chat.id)\n    });\n  }) : loadingChat || loadingTicket || loadingUserChats || loadingTicketChats || loadingSendMessage || loadingUserSendMessage ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      marginTop: 15\n    }\n  }, \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0435 \\u0447\\u0430\\u0442\\u044B \\u043E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u044E\\u0442\")), /*#__PURE__*/React.createElement(MessengerChat, {\n    chat: currentChat && { ...currentChat,\n      messages: currentChat.messages.map(message => ({ ...message,\n        side: (sender === null || sender === void 0 ? void 0 : sender.name) === message.user.name ? 'owner' : 'observer'\n      }))\n    },\n    appearance: 'ghost',\n    error: errorChat || errorTicket || errorUserChats || errorUserTickets || errorSendMessage || errorUserSendMessage,\n    loading: loading || loadingTicket || loadingChat || loadingUserChats || loadingTicketChats || loadingSendMessage || loadingUserSendMessage,\n    onLink: onMemberLink,\n    onAttach: onAttach,\n    onSubmit: value => {\n      if (currentChat.members) {\n        const candidate = currentChat.members.find(member => member.email !== (sender === null || sender === void 0 ? void 0 : sender.email));\n        sendMessage({\n          variables: {\n            sender: sender === null || sender === void 0 ? void 0 : sender.email,\n            recipient: (recipient === null || recipient === void 0 ? void 0 : recipient.email) || (candidate === null || candidate === void 0 ? void 0 : candidate.email),\n            text: value\n          }\n        });\n      } else {\n        var _currentChat$author;\n\n        sendTicketMessage({\n          variables: {\n            ticket: currentChat.id,\n            recipient: (_currentChat$author = currentChat.author) === null || _currentChat$author === void 0 ? void 0 : _currentChat$author.email,\n            text: value,\n            isClient: true\n          }\n        });\n      }\n    }\n  }));\n};\nMessenger.defaultProps = {\n  appearance: 'default'\n};\nexport default Messenger;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/Messenger/index.js"],"names":["React","useEffect","useState","styled","css","useQuery","useLazyQuery","useMutation","Row","Column","Member","Alert","Search","Spinner","Loader","Wrap","WrapForm","MessengerChat","queries","appearance","ChatsSearch","Chats","Chat","active","getUnreadedMessages","messages","sender","reduce","acc","item","type","user","email","getLastMessage","list","message","length","text","getExtendMessages","map","side","name","Messenger","recipient","onAttach","onMemberLink","props","currentChat","setCurrentChat","loading","setLoading","chats","setChats","userChats","setUserChats","ticketChats","setTicketChats","getChat","data","chat","loadingChat","error","errorChat","refetch","refetchChat","GET_CHAT","getTicket","ticket","loadingTicket","errorTicket","refetchTicket","GET_TICKET","dataUserChats","loadingUserChats","errorUserChats","getUserChats","GET_USER_CHATS","dataTicketChats","loadingTicketChats","errorUserTickets","getUserTickets","GET_USER_TICKETS","sendMessage","dataSendMessage","loadingSendMessage","errorSendMessage","SEND_MESSAGE","sendTicketMessage","dataUserSendMessage","loadingUserSendMessage","errorUserSendMessage","SEND_TICKET_MESSAGE","addUserChat","ADD_USER_CHAT","variables","then","id","find","userChat","members","member","prev","concat","filter","counsellor","avatar","path","marginTop","value","candidate","author","isClient","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,QAAT,EAAmBC,YAAnB,EAAiCC,WAAjC,QAAoD,qBAApD;AAEA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,IAAI,IAAIC,QAAjB,QAAiC,SAAjC;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAO,MAAMH,IAAI,GAAGZ,MAAM,CAACK,GAAD,CAAT;AAAA;AAAA;AAAA,0IAIbQ,QAJa,EAab,CAAC;AAAEG,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,SAAf,IACAf,GADA,+KAda,EAuBb,CAAC;AAAEe,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,OAAf,IACAf,GADA,4EAxBa,EAiCb,CAAC;AAAEe,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,OAAf,IACAf,GADA,4EAlCa,CAAV;AA4CP,OAAO,MAAMgB,WAAW,GAAGjB,MAAM,CAACS,MAAD,CAAT;AAAA;AAAA;AAAA,2BAAjB;AAIP,OAAO,MAAMS,KAAK,GAAGlB,MAAM,CAACM,MAAD,CAAT;AAAA;AAAA;AAAA,oFAAX;AASP,OAAO,MAAMa,IAAI,GAAGnB,MAAM,CAACO,MAAD,CAAT;AAAA;AAAA;AAAA,0GAMb,CAAC;AAAEa,EAAAA;AAAF,CAAD,KACAA,MAAM,IACNnB,GADM,sDAPO,CAAV;AAcP,OAAO,MAAMoB,mBAAmB,GAAG,CAACC,QAAD,EAAWC,MAAX,KACjC,CAACD,QAAQ,IAAI,EAAb,EAAiBE,MAAjB,CACE,CAACC,GAAD,EAAMC,IAAN;AAAA;;AAAA,SAAeD,GAAG,IAAIC,IAAI,CAACC,IAAL,KAAc,UAAd,IAA4B,eAAAD,IAAI,CAACE,IAAL,0DAAWC,KAAX,OAAqBN,MAArB,aAAqBA,MAArB,uBAAqBA,MAAM,CAAEM,KAA7B,CAA5B,GAAiE,CAAjE,GAAqE,CAAzE,CAAlB;AAAA,CADF,EAEE,CAFF,CADK;AAMP,OAAO,MAAMC,cAAc,GAAG,CAACR,QAAD,EAAWC,MAAX,KAAsB;AAAA;;AAClD,QAAMQ,IAAI,GAAGT,QAAQ,IAAI,EAAzB;AACA,QAAMU,OAAO,GAAGD,IAAI,CAACA,IAAI,CAACE,MAAL,GAAc,CAAf,CAApB;AACA,MAAI,CAACD,OAAL,EAAc,OAAO,EAAP;AACd,SAAQ,GAAE,kBAAAA,OAAO,CAACJ,IAAR,gEAAcC,KAAd,OAAwBN,MAAxB,aAAwBA,MAAxB,uBAAwBA,MAAM,CAAEM,KAAhC,IAAwC,MAAxC,GAAiD,EAAG,GAAEG,OAAO,CAACE,IAAK,EAA7E;AACD,CALM;AAOP,OAAO,MAAMC,iBAAiB,GAAG,CAACb,QAAD,EAAWC,MAAX,KAC/BD,QAAQ,CAACc,GAAT,CAAcJ,OAAD,KAAc,EACzB,GAAGA,OADsB;AAEzBK,EAAAA,IAAI,EAAE,CAAAd,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEe,IAAR,MAAiBN,OAAO,CAACJ,IAAR,CAAaU,IAA9B,GAAqC,OAArC,GAA+C;AAF5B,CAAd,CAAb,CADK;AAMP,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEvB,EAAAA,UAAF;AAAcwB,EAAAA,SAAd;AAAyBjB,EAAAA,MAAzB;AAAiCkB,EAAAA,QAAjC;AAA2CC,EAAAA,YAA3C;AAAyD,KAAGC;AAA5D,CAAD,KAAyE;AAChG,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC9C,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAC+C,OAAD,EAAUC,UAAV,IAAwBhD,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACiD,KAAD,EAAQC,QAAR,IAAoBlD,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACmD,SAAD,EAAYC,YAAZ,IAA4BpD,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACqD,WAAD,EAAcC,cAAd,IAAgCtD,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CACJuD,OADI,EAEJ;AAAEC,IAAAA,IAAI,EAAEC,IAAR;AAAcV,IAAAA,OAAO,EAAEW,WAAvB;AAAoCC,IAAAA,KAAK,EAAEC,SAA3C;AAAsDC,IAAAA,OAAO,EAAEC;AAA/D,GAFI,IAGF1D,YAAY,CAACY,OAAO,CAAC+C,QAAT,CAHhB;AAIA,QAAM,CACJC,SADI,EAEJ;AAAER,IAAAA,IAAI,EAAES,MAAR;AAAgBlB,IAAAA,OAAO,EAAEmB,aAAzB;AAAwCP,IAAAA,KAAK,EAAEQ,WAA/C;AAA4DN,IAAAA,OAAO,EAAEO;AAArE,GAFI,IAGFhE,YAAY,CAACY,OAAO,CAACqD,UAAT,CAHhB;AAKA,QAAM;AACJb,IAAAA,IAAI,EAAEc,aADF;AAEJvB,IAAAA,OAAO,EAAEwB,gBAFL;AAGJZ,IAAAA,KAAK,EAAEa,cAHH;AAIJX,IAAAA,OAAO,EAAEY;AAJL,MAKFtE,QAAQ,CAACa,OAAO,CAAC0D,cAAT,CALZ;AAOA,QAAM;AACJlB,IAAAA,IAAI,EAAEmB,eADF;AAEJ5B,IAAAA,OAAO,EAAE6B,kBAFL;AAGJjB,IAAAA,KAAK,EAAEkB,gBAHH;AAIJhB,IAAAA,OAAO,EAAEiB;AAJL,MAKF3E,QAAQ,CAACa,OAAO,CAAC+D,gBAAT,CALZ;AAOA,QAAM,CACJC,WADI,EAEJ;AAAExB,IAAAA,IAAI,EAAEyB,eAAR;AAAyBlC,IAAAA,OAAO,EAAEmC,kBAAlC;AAAsDvB,IAAAA,KAAK,EAAEwB;AAA7D,GAFI,IAGF9E,WAAW,CAACW,OAAO,CAACoE,YAAT,CAHf;AAIA,QAAM,CACJC,iBADI,EAEJ;AAAE7B,IAAAA,IAAI,EAAE8B,mBAAR;AAA6BvC,IAAAA,OAAO,EAAEwC,sBAAtC;AAA8D5B,IAAAA,KAAK,EAAE6B;AAArE,GAFI,IAGFnF,WAAW,CAACW,OAAO,CAACyE,mBAAT,CAHf;AAIA,QAAM,CAACC,WAAD,IAAgBrF,WAAW,CAACW,OAAO,CAAC2E,aAAT,CAAjC;AAEA5F,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0C,SAAJ,EAAe;AACbiD,MAAAA,WAAW,CAAC;AACVE,QAAAA,SAAS,EAAE;AAAEnD,UAAAA,SAAS,EAAEA,SAAS,CAACX;AAAvB;AADD,OAAD,CAAX,CAEG+D,IAFH,CAEQ,MAAM;AACZpB,QAAAA,YAAY;AACZK,QAAAA,cAAc;AACf,OALD;AAMD;AACF,GATQ,EASN,CAACrC,SAAD,EAAYiD,WAAZ,CATM,CAAT;AAWA3F,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0C,SAAS,IAAI,CAACI,WAAd,IAA6B,CAAC0B,gBAA9B,IAAkDD,aAAlD,aAAkDA,aAAlD,eAAkDA,aAAa,CAAEG,YAArE,EAAmF;AAAA;;AACjF,YAAMqB,EAAE,4BAAGxB,aAAa,CAACG,YAAd,CAA2BsB,IAA3B,CAAiCC,QAAD,IACzCA,QAAQ,CAACvC,IAAT,CAAcwC,OAAd,CAAsBF,IAAtB,CAA4BG,MAAD,IAAYA,MAAM,CAAC3D,IAAP,KAAgBE,SAAS,CAACF,IAAjE,CADS,CAAH,0DAAG,sBAERkB,IAFQ,CAEHqC,EAFR;AAIA,UAAIA,EAAJ,EAAQvC,OAAO,CAAC;AAAEqC,QAAAA,SAAS,EAAE;AAAEE,UAAAA;AAAF;AAAb,OAAD,CAAP;AACT;AACF,GARQ,EAQN,CAACrD,SAAD,EAAY6B,aAAZ,EAA2BC,gBAA3B,CARM,CAAT;AAUAxE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC2D,WAAD,IAAgBD,IAAhB,aAAgBA,IAAhB,eAAgBA,IAAI,CAAEF,OAA1B,EAAmC;AACjCT,MAAAA,cAAc,CAACW,IAAI,CAACF,OAAN,CAAd;AACD;AACF,GAJQ,EAIN,CAACE,IAAD,EAAOC,WAAP,CAJM,CAAT;AAMA3D,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACmE,aAAD,IAAkBD,MAAlB,aAAkBA,MAAlB,eAAkBA,MAAM,CAAED,SAA9B,EAAyC;AACvClB,MAAAA,cAAc,CAACmB,MAAM,CAACD,SAAR,CAAd;AACD;AACF,GAJQ,EAIN,CAACC,MAAD,EAASC,aAAT,CAJM,CAAT;AAMAnE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACmF,kBAAD,IAAuBD,eAA3B,EAA4C;AAC1CnC,MAAAA,cAAc,CAAEqD,IAAD,KAAW,EACxB,GAAGA,IADqB;AAExB5E,QAAAA,QAAQ,EAAEa,iBAAiB,CAAC6C,eAAe,CAACD,WAAjB,EAA8BxD,MAA9B;AAFH,OAAX,CAAD,CAAd;AAID;AACF,GAPQ,EAON,CAACA,MAAD,EAASyD,eAAT,EAA0BC,kBAA1B,CAPM,CAAT;AASAnF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwF,sBAAD,IAA2BD,mBAA/B,EAAoD;AAClDxC,MAAAA,cAAc,CAAEqD,IAAD,KAAW,EACxB,GAAGA,IADqB;AAExB5E,QAAAA,QAAQ,EAAEa,iBAAiB,CAACkD,mBAAmB,CAACD,iBAArB,EAAwC7D,MAAxC;AAFH,OAAX,CAAD,CAAd;AAID;AACF,GAPQ,EAON,CAACA,MAAD,EAAS8D,mBAAT,EAA8BC,sBAA9B,CAPM,CAAT;AASAxF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwE,gBAAD,IAAqBD,aAArB,aAAqBA,aAArB,eAAqBA,aAAa,CAAEG,YAAxC,EAAsD;AACpDrB,MAAAA,YAAY,CAACkB,aAAa,CAACG,YAAf,CAAZ;AACD;AACF,GAJQ,EAIN,CAACH,aAAD,EAAgBC,gBAAhB,CAJM,CAAT;AAMAxE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC6E,kBAAD,IAAuBD,eAAvB,aAAuBA,eAAvB,eAAuBA,eAAe,CAAEG,cAA5C,EAA4D;AAC1DxB,MAAAA,cAAc,CAACqB,eAAe,CAACG,cAAjB,CAAd;AACD;AACF,GAJQ,EAIN,CAACH,eAAD,EAAkBC,kBAAlB,CAJM,CAAT;AAMA7E,EAAAA,SAAS,CAAC,MAAM;AACdmD,IAAAA,QAAQ,CAACC,SAAS,CAACiD,MAAV,CAAiB/C,WAAjB,CAAD,CAAR;AACD,GAFQ,EAEN,CAACF,SAAD,EAAYE,WAAZ,CAFM,CAAT;AAIA,sBACE,oBAAC,IAAD,eAAUT,KAAV;AAAiB,IAAA,UAAU,EAAE3B;AAA7B,mBACE,oBAAC,KAAD,qBACE,oBAAC,WAAD;AAAa,IAAA,UAAU,EAAE;AAAzB,IADF,EAEG,CAACyC,WAAD,IACD,CAACQ,aADA,IAED,CAACK,gBAFA,IAGD,CAACK,kBAHA,IAID,CAACM,kBAJA,IAKD,CAACK,sBALA,IAMDtC,KAAK,CAACf,MAAN,GAAe,CANd,GAOCe,KAAK,CAACZ,GAAN,CAAWoB,IAAD;AAAA;;AAAA,wBACR,oBAAC,IAAD;AACE,MAAA,GAAG,EAAE,eAAAA,IAAI,CAACA,IAAL,0DAAWqC,EAAX,KAAiBrC,IAAI,CAACqC,EAD7B;AAEE,MAAA,IAAI,EACF,gBAAArC,IAAI,CAACA,IAAL,4DAAWwC,OAAX,CAAmBI,MAAnB,CAA2BH,MAAD,IAAYA,MAAM,CAAC3D,IAAP,MAAgBf,MAAhB,aAAgBA,MAAhB,uBAAgBA,MAAM,CAAEe,IAAxB,CAAtC,EAAoE,CAApE,EAAuEA,IAAvE,0BACAkB,IAAI,CAAC6C,UADL,qDACA,iBAAiB/D,IADjB,CAHJ;AAME,MAAA,MAAM,EACJ,gBAAAkB,IAAI,CAACA,IAAL,qFAAWwC,OAAX,CAAmBI,MAAnB,CAA2BH,MAAD,IAAYA,MAAM,CAAC3D,IAAP,MAAgBf,MAAhB,aAAgBA,MAAhB,uBAAgBA,MAAM,CAAEe,IAAxB,CAAtC,EAAoE,CAApE,EAAuEgE,MAAvE,gFACIC,IADJ,2BAEA/C,IAAI,CAAC6C,UAFL,+EAEA,kBAAiBC,MAFjB,0DAEA,sBAAyBC,IAFzB,KAGA,4BAVJ;AAYE,MAAA,KAAK,EACF,gBAAA/C,IAAI,CAACA,IAAL,4DAAWlC,QAAX,KAAuBD,mBAAmB,gBAACmC,IAAI,CAACA,IAAN,gDAAC,YAAWlC,QAAZ,EAAsBC,MAAtB,CAA3C,IACCiC,IAAI,CAAClC,QAAL,IAAiBD,mBAAmB,CAACmC,IAAI,CAAClC,QAAN,EAAgBC,MAAhB,CADrC,IAEA,IAfJ;AAiBE,MAAA,QAAQ,EACL,gBAAAiC,IAAI,CAACA,IAAL,4DAAWlC,QAAX,KAAuBQ,cAAc,gBAAC0B,IAAI,CAACA,IAAN,gDAAC,YAAWlC,QAAZ,EAAsBC,MAAtB,CAAtC,IACCiC,IAAI,CAAClC,QAAL,IAAiBQ,cAAc,CAAC0B,IAAI,CAAClC,QAAN,EAAgBC,MAAhB,CADhC,IAEA,IApBJ;AAsBE,MAAA,OAAO,EAAE,YAAY;AAAA;;AACnBwB,QAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,2BAAIS,IAAI,CAACA,IAAT,wCAAI,YAAWqC,EAAf,EAAmB;AAAA;;AACjB,gBAAMF,SAAS,GAAG;AAAEE,YAAAA,EAAE,iBAAErC,IAAI,CAACA,IAAP,gDAAE,YAAWqC;AAAjB,WAAlB;AACA,cAAIhC,WAAJ,EAAiB,MAAMA,WAAW,CAAC8B,SAAD,CAAjB,CAAjB,KACK,MAAMrC,OAAO,CAAC;AAAEqC,YAAAA;AAAF,WAAD,CAAb;AACL9C,UAAAA,cAAc,CAACW,IAAI,CAACA,IAAN,CAAd;AACD,SALD,MAKO;AACL,gBAAMmC,SAAS,GAAG;AAAEE,YAAAA,EAAE,EAAErC,IAAI,CAACqC;AAAX,WAAlB;AACA,cAAI1B,aAAJ,EAAmB,MAAMA,aAAa,CAACwB,SAAD,CAAnB,CAAnB,KACK,MAAM5B,SAAS,CAAC;AAAE4B,YAAAA;AAAF,WAAD,CAAf;AACL9C,UAAAA,cAAc,CAACW,IAAD,CAAd;AACD;;AACDT,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OApCH;AAqCE,MAAA,MAAM,EAAEH,WAAW,IAAIA,WAAW,CAACiD,EAAZ,MAAoB,iBAAArC,IAAI,CAACA,IAAL,8DAAWqC,EAAX,KAAiBrC,IAAI,CAACqC,EAA1C;AArCzB,MADQ;AAAA,GAAV,CAPD,GAgDGpC,WAAW,IACbQ,aADE,IAEFK,gBAFE,IAGFK,kBAHE,IAIFM,kBAJE,IAKFK,sBALE,gBAMF,oBAAC,MAAD,qBACE,oBAAC,OAAD,OADF,CANE,gBAUF,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAEkB,MAAAA,SAAS,EAAE;AAAb;AAAd,oJA5DJ,CADF,eAgEE,oBAAC,aAAD;AACE,IAAA,IAAI,EACF5D,WAAW,IAAI,EACb,GAAGA,WADU;AAEbtB,MAAAA,QAAQ,EAAEsB,WAAW,CAACtB,QAAZ,CAAqBc,GAArB,CAA0BJ,OAAD,KAAc,EAC/C,GAAGA,OAD4C;AAE/CK,QAAAA,IAAI,EAAE,CAAAd,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEe,IAAR,MAAiBN,OAAO,CAACJ,IAAR,CAAaU,IAA9B,GAAqC,OAArC,GAA+C;AAFN,OAAd,CAAzB;AAFG,KAFnB;AAUE,IAAA,UAAU,EAAE,OAVd;AAWE,IAAA,KAAK,EACHqB,SAAS,IACTO,WADA,IAEAK,cAFA,IAGAK,gBAHA,IAIAM,gBAJA,IAKAK,oBAjBJ;AAmBE,IAAA,OAAO,EACLzC,OAAO,IACPmB,aADA,IAEAR,WAFA,IAGAa,gBAHA,IAIAK,kBAJA,IAKAM,kBALA,IAMAK,sBA1BJ;AA4BE,IAAA,MAAM,EAAE5C,YA5BV;AA6BE,IAAA,QAAQ,EAAED,QA7BZ;AA8BE,IAAA,QAAQ,EAAGgE,KAAD,IAAW;AACnB,UAAI7D,WAAW,CAACoD,OAAhB,EAAyB;AACvB,cAAMU,SAAS,GAAG9D,WAAW,CAACoD,OAAZ,CAAoBF,IAApB,CAA0BG,MAAD,IAAYA,MAAM,CAACpE,KAAP,MAAiBN,MAAjB,aAAiBA,MAAjB,uBAAiBA,MAAM,CAAEM,KAAzB,CAArC,CAAlB;AACAkD,QAAAA,WAAW,CAAC;AACVY,UAAAA,SAAS,EAAE;AACTpE,YAAAA,MAAM,EAAEA,MAAF,aAAEA,MAAF,uBAAEA,MAAM,CAAEM,KADP;AAETW,YAAAA,SAAS,EAAE,CAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEX,KAAX,MAAoB6E,SAApB,aAAoBA,SAApB,uBAAoBA,SAAS,CAAE7E,KAA/B,CAFF;AAGTK,YAAAA,IAAI,EAAEuE;AAHG;AADD,SAAD,CAAX;AAOD,OATD,MASO;AAAA;;AACLrB,QAAAA,iBAAiB,CAAC;AAChBO,UAAAA,SAAS,EAAE;AACT3B,YAAAA,MAAM,EAAEpB,WAAW,CAACiD,EADX;AAETrD,YAAAA,SAAS,yBAAEI,WAAW,CAAC+D,MAAd,wDAAE,oBAAoB9E,KAFtB;AAGTK,YAAAA,IAAI,EAAEuE,KAHG;AAITG,YAAAA,QAAQ,EAAE;AAJD;AADK,SAAD,CAAjB;AAQD;AACF;AAlDH,IAhEF,CADF;AAuHD,CAlOM;AAoOPrE,SAAS,CAACsE,YAAV,GAAyB;AACvB7F,EAAAA,UAAU,EAAE;AADW,CAAzB;AAIA,eAAeuB,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled, { css } from 'styled-components'\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Member from '../../atomic-ui/components/Member'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Search from '../../atomic-ui/components/Search'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport { Wrap as WrapForm } from '../Form'\nimport MessengerChat from '../MessengerChat'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled(Row)`\n  height: 100%;\n  flex-grow: 1;\n\n  ${WrapForm} {\n    width: 100%;\n    padding: 0;\n  }\n\n  @media only screen and (max-width: 568px) {\n    flex-direction: column;\n  }\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const ChatsSearch = styled(Search)`\n  margin-bottom: 10px;\n`\n\nexport const Chats = styled(Column)`\n  grid-gap: 0;\n  width: 320px;\n\n  @media only screen and (max-width: 568px) {\n    width: 100%;\n  }\n`\n\nexport const Chat = styled(Member)`\n  margin: 0;\n  padding: 10px 0;\n  border-radius: var(--surface-border-radius);\n  transition: all 150ms ease;\n\n  ${({ active }) =>\n    active &&\n    css`\n      background: var(--input-background);\n      padding: 10px;\n    `}\n`\n\nexport const getUnreadedMessages = (messages, sender) =>\n  (messages || []).reduce(\n    (acc, item) => acc + (item.type === 'UNREADED' && item.user?.email !== sender?.email ? 1 : 0),\n    0\n  )\n\nexport const getLastMessage = (messages, sender) => {\n  const list = messages || []\n  const message = list[list.length - 1]\n  if (!message) return ''\n  return `${message.user?.email === sender?.email ? 'Вы: ' : ''}${message.text}`\n}\n\nexport const getExtendMessages = (messages, sender) =>\n  messages.map((message) => ({\n    ...message,\n    side: sender?.name === message.user.name ? 'owner' : 'observer'\n  }))\n\nexport const Messenger = ({ appearance, recipient, sender, onAttach, onMemberLink, ...props }) => {\n  const [currentChat, setCurrentChat] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [chats, setChats] = useState([])\n  const [userChats, setUserChats] = useState([])\n  const [ticketChats, setTicketChats] = useState([])\n\n  const [\n    getChat,\n    { data: chat, loading: loadingChat, error: errorChat, refetch: refetchChat }\n  ] = useLazyQuery(queries.GET_CHAT)\n  const [\n    getTicket,\n    { data: ticket, loading: loadingTicket, error: errorTicket, refetch: refetchTicket }\n  ] = useLazyQuery(queries.GET_TICKET)\n\n  const {\n    data: dataUserChats,\n    loading: loadingUserChats,\n    error: errorUserChats,\n    refetch: getUserChats\n  } = useQuery(queries.GET_USER_CHATS)\n\n  const {\n    data: dataTicketChats,\n    loading: loadingTicketChats,\n    error: errorUserTickets,\n    refetch: getUserTickets\n  } = useQuery(queries.GET_USER_TICKETS)\n\n  const [\n    sendMessage,\n    { data: dataSendMessage, loading: loadingSendMessage, error: errorSendMessage }\n  ] = useMutation(queries.SEND_MESSAGE)\n  const [\n    sendTicketMessage,\n    { data: dataUserSendMessage, loading: loadingUserSendMessage, error: errorUserSendMessage }\n  ] = useMutation(queries.SEND_TICKET_MESSAGE)\n  const [addUserChat] = useMutation(queries.ADD_USER_CHAT)\n\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: { recipient: recipient.email }\n      }).then(() => {\n        getUserChats()\n        getUserTickets()\n      })\n    }\n  }, [recipient, addUserChat])\n\n  useEffect(() => {\n    if (recipient && !currentChat && !loadingUserChats && dataUserChats?.getUserChats) {\n      const id = dataUserChats.getUserChats.find((userChat) =>\n        userChat.chat.members.find((member) => member.name === recipient.name)\n      )?.chat.id\n\n      if (id) getChat({ variables: { id } })\n    }\n  }, [recipient, dataUserChats, loadingUserChats])\n\n  useEffect(() => {\n    if (!loadingChat && chat?.getChat) {\n      setCurrentChat(chat.getChat)\n    }\n  }, [chat, loadingChat])\n\n  useEffect(() => {\n    if (!loadingTicket && ticket?.getTicket) {\n      setCurrentChat(ticket.getTicket)\n    }\n  }, [ticket, loadingTicket])\n\n  useEffect(() => {\n    if (!loadingSendMessage && dataSendMessage) {\n      setCurrentChat((prev) => ({\n        ...prev,\n        messages: getExtendMessages(dataSendMessage.sendMessage, sender)\n      }))\n    }\n  }, [sender, dataSendMessage, loadingSendMessage])\n\n  useEffect(() => {\n    if (!loadingUserSendMessage && dataUserSendMessage) {\n      setCurrentChat((prev) => ({\n        ...prev,\n        messages: getExtendMessages(dataUserSendMessage.sendTicketMessage, sender)\n      }))\n    }\n  }, [sender, dataUserSendMessage, loadingUserSendMessage])\n\n  useEffect(() => {\n    if (!loadingUserChats && dataUserChats?.getUserChats) {\n      setUserChats(dataUserChats.getUserChats)\n    }\n  }, [dataUserChats, loadingUserChats])\n\n  useEffect(() => {\n    if (!loadingTicketChats && dataTicketChats?.getUserTickets) {\n      setTicketChats(dataTicketChats.getUserTickets)\n    }\n  }, [dataTicketChats, loadingTicketChats])\n\n  useEffect(() => {\n    setChats(userChats.concat(ticketChats))\n  }, [userChats, ticketChats])\n\n  return (\n    <Wrap {...props} appearance={appearance}>\n      <Chats>\n        <ChatsSearch appearance={'ghost'} />\n        {!loadingChat &&\n        !loadingTicket &&\n        !loadingUserChats &&\n        !loadingTicketChats &&\n        !loadingSendMessage &&\n        !loadingUserSendMessage &&\n        chats.length > 0 ? (\n          chats.map((chat) => (\n            <Chat\n              key={chat.chat?.id || chat.id}\n              name={\n                chat.chat?.members.filter((member) => member.name !== sender?.name)[0].name ||\n                chat.counsellor?.name\n              }\n              avatar={\n                chat.chat?.members.filter((member) => member.name !== sender?.name)[0].avatar\n                  ?.path ||\n                chat.counsellor?.avatar?.path ||\n                '/images/avatar-default.png'\n              }\n              budge={\n                (chat.chat?.messages && getUnreadedMessages(chat.chat?.messages, sender)) ||\n                (chat.messages && getUnreadedMessages(chat.messages, sender)) ||\n                null\n              }\n              position={\n                (chat.chat?.messages && getLastMessage(chat.chat?.messages, sender)) ||\n                (chat.messages && getLastMessage(chat.messages, sender)) ||\n                null\n              }\n              onClick={async () => {\n                setLoading(true)\n                if (chat.chat?.id) {\n                  const variables = { id: chat.chat?.id }\n                  if (refetchChat) await refetchChat(variables)\n                  else await getChat({ variables })\n                  setCurrentChat(chat.chat)\n                } else {\n                  const variables = { id: chat.id }\n                  if (refetchTicket) await refetchTicket(variables)\n                  else await getTicket({ variables })\n                  setCurrentChat(chat)\n                }\n                setLoading(false)\n              }}\n              active={currentChat && currentChat.id === (chat.chat?.id || chat.id)}\n            />\n          ))\n        ) : loadingChat ||\n          loadingTicket ||\n          loadingUserChats ||\n          loadingTicketChats ||\n          loadingSendMessage ||\n          loadingUserSendMessage ? (\n          <Loader>\n            <Spinner />\n          </Loader>\n        ) : (\n          <Alert style={{ marginTop: 15 }}>Активные чаты отсутствуют</Alert>\n        )}\n      </Chats>\n      <MessengerChat\n        chat={\n          currentChat && {\n            ...currentChat,\n            messages: currentChat.messages.map((message) => ({\n              ...message,\n              side: sender?.name === message.user.name ? 'owner' : 'observer'\n            }))\n          }\n        }\n        appearance={'ghost'}\n        error={\n          errorChat ||\n          errorTicket ||\n          errorUserChats ||\n          errorUserTickets ||\n          errorSendMessage ||\n          errorUserSendMessage\n        }\n        loading={\n          loading ||\n          loadingTicket ||\n          loadingChat ||\n          loadingUserChats ||\n          loadingTicketChats ||\n          loadingSendMessage ||\n          loadingUserSendMessage\n        }\n        onLink={onMemberLink}\n        onAttach={onAttach}\n        onSubmit={(value) => {\n          if (currentChat.members) {\n            const candidate = currentChat.members.find((member) => member.email !== sender?.email)\n            sendMessage({\n              variables: {\n                sender: sender?.email,\n                recipient: recipient?.email || candidate?.email,\n                text: value\n              }\n            })\n          } else {\n            sendTicketMessage({\n              variables: {\n                ticket: currentChat.id,\n                recipient: currentChat.author?.email,\n                text: value,\n                isClient: true\n              }\n            })\n          }\n        }}\n      />\n    </Wrap>\n  )\n}\n\nMessenger.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Messenger\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { b64DecodeUnicode, b64EncodeUnicode } from '../atomic-ui/utils/functions';\nimport { useHelper } from './useHelper';\nimport { useMutate } from './useMutate';\nimport { onArticleLink } from '../store/helpers/article';\nimport { onCategoryLink } from '../store/helpers/category';\nimport { onProjectAdd, onProjectLink } from '../store/helpers/project';\nimport { onRoleLink } from '../store/helpers/role';\nimport { onUserLink } from '../store/helpers/user';\nimport { onTicketLink } from '../store/helpers/ticket';\nimport { updateUser } from '../store/actions/user';\nimport queries from '../graphql/queries';\nimport { setItem } from \"../store/actions/snacks\";\nexport const getProjectLinkProps = (id, user, owned, dispatch, mutate, recall, callback) => ({\n  id,\n  auth: user === null || user === void 0 ? void 0 : user.email,\n  liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === id),\n  onLike: user.email && mutate(queries.LIKE_PROJECT, {\n    id\n  }, response => dispatch(updateUser(response.data.likeProject))),\n  onAdd: user.email && recall(onProjectAdd, {\n    id,\n    folders: user === null || user === void 0 ? void 0 : user.folders,\n    mutations: {\n      addProject: queries.ADD_USER_PROJECT,\n      createFolder: queries.ADD_USER_FOLDER\n    },\n    callback\n  }),\n  owned\n});\nexport const getUserLinkProps = (id, user, owned) => ({\n  id,\n  auth: user === null || user === void 0 ? void 0 : user.email,\n  owned,\n  queries: {\n    userChats: queries.GET_USER_CHATS,\n    chat: queries.GET_CHAT\n  },\n  mutations: {\n    addUserChat: queries.ADD_USER_CHAT,\n    sendMessage: queries.SEND_MESSAGE\n  }\n});\nexport const invokeRecall = (recall, mutate, user, dispatch, query) => {\n  const getPerfectID = parameter => {\n    try {\n      if (parameter) {\n        return b64DecodeUnicode(parameter);\n      }\n    } catch (_unused) {\n      dispatch(setItem({\n        type: 'error',\n        message: 'Неправильный URL'\n      }));\n    }\n\n    return null;\n  };\n\n  if (query.article) {\n    const id = getPerfectID(query.article);\n    if (id) recall(onArticleLink, {\n      id\n    })();\n  }\n\n  if (query.category) {\n    const id = getPerfectID(query.category);\n    if (id) recall(onCategoryLink, {\n      id\n    })();\n  }\n\n  if (query.project) {\n    const id = getPerfectID(query.project);\n\n    if (id) {\n      var _user$projects;\n\n      const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === id);\n      recall(onProjectLink, getProjectLinkProps(id, user, owned, dispatch, mutate, recall))();\n    }\n  }\n\n  if (query.role) {\n    const id = getPerfectID(query.role);\n    if (id) recall(onRoleLink, {\n      id\n    })();\n  }\n\n  if (query.user) {\n    const id = getPerfectID(query.user);\n\n    if (id) {\n      const owned = id === (user === null || user === void 0 ? void 0 : user.name);\n      recall(onUserLink, getUserLinkProps(id, user, owned))();\n    }\n  }\n\n  if (query.ticket) {\n    const id = getPerfectID(query.ticket);\n    if (id) recall(onTicketLink, {\n      id,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    })();\n  }\n};\nexport const useEntityQuery = () => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const router = useRouter();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  const setQuery = async (str, entity, callback) => {\n    await router.push({\n      pathname: router.pathname,\n      query: {\n        [entity]: b64EncodeUnicode(str)\n      }\n    }, undefined, {\n      shallow: true\n    });\n    if (callback) callback(str);\n  };\n\n  const useDetectQuery = () => {\n    useEffect(() => {\n      const query = router.query;\n\n      if (Object.entries(query).length === 1) {\n        invokeRecall(recall, mutate, user, dispatch, query);\n      }\n    }, [router]);\n  };\n\n  return {\n    setQuery,\n    useDetectQuery\n  };\n};\nexport default useEntityQuery;","map":null,"metadata":{},"sourceType":"module"}
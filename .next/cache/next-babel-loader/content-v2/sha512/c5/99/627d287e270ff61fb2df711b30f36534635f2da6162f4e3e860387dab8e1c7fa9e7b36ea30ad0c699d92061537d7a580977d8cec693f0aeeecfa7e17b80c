{"ast":null,"code":"import _taggedTemplateLiteral from \"C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\\n  width: 100%;\\n  height: 100%;\\n  flex-grow: 1;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  padding: var(--default-gap);\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Column from '../Column';\nimport Select from '../Select';\nimport Search from '../Search';\nimport Spinner from '../Spinner';\nimport Alert from '../Alert';\nexport var Wrap = styled(Column)(_templateObject());\nexport var Loader = styled.div(_templateObject2());\n/*\n * const entities: entity[]\n * type entity = {\n *  label: string;\n *  value: ObjectID | string;\n *  render: ReactNode | Element | string;\n * }\n */\n\nexport var GlobalSearch = function GlobalSearch(_ref) {\n  var result = _ref.result,\n      search = _ref.search,\n      loading = _ref.loading,\n      entities = _ref.entities,\n      initialEntity = _ref.initialEntity,\n      appearance = _ref.appearance,\n      style = _ref.style,\n      className = _ref.className,\n      onChange = _ref.onChange,\n      onSubmit = _ref.onSubmit;\n\n  var _useState = useState(initialEntity),\n      entity = _useState[0],\n      setEntity = _useState[1];\n\n  var searchRef = useRef(null);\n\n  var handleChange = function handleChange(value) {\n    setEntity(value);\n\n    if (searchRef !== null && searchRef !== void 0 && searchRef.current) {\n      searchRef.current.value = '';\n      if (onSubmit) onSubmit('');\n    }\n  };\n\n  var renderContent = function renderContent() {\n    return __jsx(React.Fragment, null, __jsx(Search, {\n      ref: searchRef,\n      appearance: 'ghost',\n      placeholder: 'Поиск',\n      defaultValue: search,\n      onSubmit: onSubmit\n    }), (result === null || result === void 0 ? void 0 : result.length) > 0 ? result.map(function (item) {\n      return entity.render && __jsx(React.Fragment, {\n        key: item.id || item.email\n      }, entity.render(item));\n    }) : __jsx(Alert, {\n      style: {\n        width: '100%',\n        textAlign: 'center',\n        flexGrow: 1\n      }\n    }, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"));\n  };\n\n  useEffect(function () {\n    if (onChange) onChange(entity);\n  }, [entity, onChange]);\n  return __jsx(Wrap, {\n    style: style,\n    className: className,\n    appearance: appearance\n  }, __jsx(Select, {\n    appearance: 'ghost',\n    defaultValue: entity,\n    placeholder: 'Где будем искать?',\n    label: 'Зона поиска',\n    options: entities,\n    onChange: handleChange,\n    isLoading: loading,\n    isSearchable: true,\n    isClearable: true\n  }), !loading && entity && renderContent(), loading && __jsx(Loader, null, __jsx(Spinner, null)));\n};\nGlobalSearch.defaultProps = {\n  appearance: 'clear'\n};\nexport default GlobalSearch;","map":null,"metadata":{},"sourceType":"module"}
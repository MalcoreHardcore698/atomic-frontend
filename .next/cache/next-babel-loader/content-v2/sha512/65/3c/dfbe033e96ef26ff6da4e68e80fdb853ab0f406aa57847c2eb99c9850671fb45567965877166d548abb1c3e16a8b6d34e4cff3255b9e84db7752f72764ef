{"ast":null,"code":"import gql from 'graphql-tag';\nimport { UserFields, UserMemberFields, MessageFields, ProjectFields, NoticeFields, UserForReset } from \"../../fragments\";\nexport const GOOGLE_AUTH = gql`\n  mutation googleAuth($accessToken: String!) {\n    googleAuth(accessToken: $accessToken) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const FACEBOOK_AUTH = gql`\n  mutation facebookAuth($accessToken: String!) {\n    facebookAuth(accessToken: $accessToken) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const CHECKIN = gql`\n  mutation checkin($login: String!) {\n    checkin(login: $login)\n  }\n`;\nexport const LOGIN = gql`\n  mutation login($login: String!, $password: String!) {\n    login(login: $login, password: $password) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const REGISTER = gql`\n  mutation register($input: RegisterInput) {\n    register(input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const RESET = gql`\n  mutation updateUserPasswordResetStatus($email: String!) {\n    updateUserPasswordResetStatus(email: $email) {\n      ...UserForReset\n    }\n  }\n  ${UserForReset}\n`;\nexport const CHECK_EMAIL = gql`\n  query getResetTokenByEmail($email: String, $token: String) {\n    ...UserForReset\n  }\n  ${UserForReset}\n`;\nexport const CHECK_RESET_TOKEN = gql`\n  mutation checkTokenAndResetPassword($email: String, $token: String, password: String) {\n    checkTokenAndResetPassword($email: String, $token: String, password: String) {\n      ...UserForReset\n    }\n  }\n  ${UserForReset}\n`;\nexport const LOGOUT = gql`\n  mutation logout {\n    logout\n  }\n`;\nexport const CHECK_USER = gql`\n  query checkUser($search: String!) {\n    checkUser(search: $search) {\n      status\n      message\n    }\n  }\n`;\nexport const GET_USER = gql`\n  query getUser($email: String) {\n    getUser(email: $email) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const GET_USERS = gql`\n  query getUsers(\n    $offset: Int\n    $limit: Int\n    $search: String\n    $email: [String]\n    $account: [AccountType]\n    $company: String\n  ) {\n    getUsers(\n      offset: $offset\n      limit: $limit\n      search: $search\n      email: $email\n      account: $account\n      company: $company\n    ) {\n      name\n      about\n      email\n      avatar {\n        path\n      }\n      account\n      members\n      company {\n        name\n        email\n        avatar {\n          path\n        }\n      }\n      role {\n        id\n        name\n      }\n    }\n  }\n`;\nexport const GET_USERS_FOR_TICKET = gql`\n  query getUsers(\n    $offset: Int\n    $limit: Int\n    $search: String\n    $email: [String]\n    $account: [AccountType]\n    $company: String\n  ) {\n    getUsers(\n      offset: $offset\n      limit: $limit\n      search: $search\n      email: $email\n      account: $account\n      company: $company\n    ) {\n      name\n      email\n    }\n  }\n`;\nexport const GET_USER_MEMBERS = gql`\n  query getUserMembers($email: String!) {\n    getUserMembers(email: $email) {\n      ...UserMemberFields\n    }\n  }\n  ${UserMemberFields}\n`;\nexport const GET_USER_PARTICIPANT_PROJECTS = gql`\n  query getProjects($member: String) {\n    getProjects(member: $member) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`;\nexport const GET_USER_PROJECTS = gql`\n  query getProjects($author: String) {\n    getProjects(author: $author) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`;\nexport const CREATE_USER = gql`\n  mutation createUser($input: UserCreateInput!) {\n    createUser(input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const UPDATE_CLIENT_USER = gql`\n  mutation updateClientUser($input: UserUpdateInput!) {\n    updateClientUser(input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const UPDATE_USER = gql`\n  mutation updateUser($email: String!, $input: UserUpdateInput!) {\n    updateUser(email: $email, input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const DELETE_USER = gql`\n  mutation deleteUser($email: String!) {\n    deleteUser(email: $email) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const INVITE_USER_MEMBER = gql`\n  mutation inviteUserMember($email: String!) {\n    inviteUserMember(email: $email)\n  }\n`;\nexport const APPLY_INVITE_USER_MEMBER = gql`\n  mutation applyInviteUserMember($id: ID!, $email: String!) {\n    applyInviteUserMember(id: $id, email: $email) {\n      ...NoticeFields\n    }\n  }\n  ${NoticeFields}\n`;\nexport const REJECT_INVITE_USER_MEMBER = gql`\n  mutation rejectInviteUserMember($id: ID!, $email: String!) {\n    rejectInviteUserMember(id: $id, email: $email) {\n      ...NoticeFields\n    }\n  }\n  ${NoticeFields}\n`;\nexport const APPOINT_USER_MEMBER = gql`\n  mutation appointUserMember($email: String!) {\n    appointUserMember(email: $email) {\n      ...UserMemberFields\n    }\n  }\n  ${UserMemberFields}\n`;\nexport const EXCLUDE_USER_MEMBER = gql`\n  mutation excludeUserMember($email: String!) {\n    excludeUserMember(email: $email) {\n      ...UserMemberFields\n    }\n  }\n  ${UserMemberFields}\n`;\nexport const DISMISS_USER_MEMBER = gql`\n  mutation dismissUserMember($email: String!) {\n    dismissUserMember(email: $email) {\n      ...UserMemberFields\n    }\n  }\n  ${UserMemberFields}\n`;\nexport const ADD_USER_PROJECT = gql`\n  mutation addUserProject($project: ID!, $folder: ID!) {\n    addUserProject(project: $project, folder: $folder)\n  }\n`;\nexport const REMOVE_USER_PROJECT = gql`\n  mutation removeUserProject($project: ID!, $folder: ID!) {\n    removeUserProject(project: $project, folder: $folder)\n  }\n`;\nexport const ADD_USER_FOLDER = gql`\n  mutation addUserFolder($name: String!) {\n    addUserFolder(name: $name) {\n      id\n      name\n      projects\n    }\n  }\n`;\nexport const DELETE_USER_FOLDER = gql`\n  mutation deleteUserFolder($id: ID!) {\n    deleteUserFolder(id: $id) {\n      id\n      name\n      projects\n    }\n  }\n`;\nexport const GET_USER_CHATS = gql`\n  query getUserChats {\n    getUserChats {\n      chat {\n        id\n        type\n        title\n        members {\n          name\n          avatar {\n            path\n          }\n        }\n        messages {\n          ...MessageFields\n        }\n      }\n      status\n      updatedAt\n      createdAt\n    }\n  }\n  ${MessageFields}\n`;","map":{"version":3,"sources":["/Users/alicefromwonderland/Desktop/branches/atomic/atomic-frontend/graphql/queries/User/index.js"],"names":["gql","UserFields","UserMemberFields","MessageFields","ProjectFields","NoticeFields","UserForReset","GOOGLE_AUTH","FACEBOOK_AUTH","CHECKIN","LOGIN","REGISTER","RESET","CHECK_EMAIL","CHECK_RESET_TOKEN","LOGOUT","CHECK_USER","GET_USER","GET_USERS","GET_USERS_FOR_TICKET","GET_USER_MEMBERS","GET_USER_PARTICIPANT_PROJECTS","GET_USER_PROJECTS","CREATE_USER","UPDATE_CLIENT_USER","UPDATE_USER","DELETE_USER","INVITE_USER_MEMBER","APPLY_INVITE_USER_MEMBER","REJECT_INVITE_USER_MEMBER","APPOINT_USER_MEMBER","EXCLUDE_USER_MEMBER","DISMISS_USER_MEMBER","ADD_USER_PROJECT","REMOVE_USER_PROJECT","ADD_USER_FOLDER","DELETE_USER_FOLDER","GET_USER_CHATS"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SACEC,UADF,EAEEC,gBAFF,EAGEC,aAHF,EAIEC,aAJF,EAKEC,YALF,EAKgBC,YALhB,QAMO,iBANP;AAQA,OAAO,MAAMC,WAAW,GAAGP,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAW;AACf,CAPO;AASP,OAAO,MAAMO,aAAa,GAAGR,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAW;AACf,CAPO;AASP,OAAO,MAAMQ,OAAO,GAAGT,GAAI;AAC3B;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMU,KAAK,GAAGV,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAW;AACf,CAPO;AASP,OAAO,MAAMU,QAAQ,GAAGX,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAW;AACf,CAPO;AASP,OAAO,MAAMW,KAAK,GAAGZ,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA,IAAIM,YAAa;AACjB,CAPO;AASP,OAAO,MAAMO,WAAW,GAAGb,GAAI;AAC/B;AACA;AACA;AACA,IAAIM,YAAa;AACjB,CALO;AAMP,OAAO,MAAMQ,iBAAiB,GAAGd,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA,IAAIM,YAAa;AACjB,CAPO;AASP,OAAO,MAAMS,MAAM,GAAGf,GAAI;AAC1B;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMgB,UAAU,GAAGhB,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO;AASP,OAAO,MAAMiB,QAAQ,GAAGjB,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAW;AACf,CAPO;AASP,OAAO,MAAMiB,SAAS,GAAGlB,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtCO;AAwCP,OAAO,MAAMmB,oBAAoB,GAAGnB,GAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBO;AAuBP,OAAO,MAAMoB,gBAAgB,GAAGpB,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA,IAAIE,gBAAiB;AACrB,CAPO;AASP,OAAO,MAAMmB,6BAA6B,GAAGrB,GAAI;AACjD;AACA;AACA;AACA;AACA;AACA,IAAII,aAAc;AAClB,CAPO;AASP,OAAO,MAAMkB,iBAAiB,GAAGtB,GAAI;AACrC;AACA;AACA;AACA;AACA;AACA,IAAII,aAAc;AAClB,CAPO;AASP,OAAO,MAAMmB,WAAW,GAAGvB,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAW;AACf,CAPO;AASP,OAAO,MAAMuB,kBAAkB,GAAGxB,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAW;AACf,CAPO;AASP,OAAO,MAAMwB,WAAW,GAAGzB,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAW;AACf,CAPO;AASP,OAAO,MAAMyB,WAAW,GAAG1B,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA,IAAIC,UAAW;AACf,CAPO;AASP,OAAO,MAAM0B,kBAAkB,GAAG3B,GAAI;AACtC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAM4B,wBAAwB,GAAG5B,GAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,IAAIK,YAAa;AACjB,CAPO;AASP,OAAO,MAAMwB,yBAAyB,GAAG7B,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA,IAAIK,YAAa;AACjB,CAPO;AASP,OAAO,MAAMyB,mBAAmB,GAAG9B,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA,IAAIE,gBAAiB;AACrB,CAPO;AASP,OAAO,MAAM6B,mBAAmB,GAAG/B,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA,IAAIE,gBAAiB;AACrB,CAPO;AASP,OAAO,MAAM8B,mBAAmB,GAAGhC,GAAI;AACvC;AACA;AACA;AACA;AACA;AACA,IAAIE,gBAAiB;AACrB,CAPO;AASP,OAAO,MAAM+B,gBAAgB,GAAGjC,GAAI;AACpC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMkC,mBAAmB,GAAGlC,GAAI;AACvC;AACA;AACA;AACA,CAJO;AAMP,OAAO,MAAMmC,eAAe,GAAGnC,GAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;AAUP,OAAO,MAAMoC,kBAAkB,GAAGpC,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;AAUP,OAAO,MAAMqC,cAAc,GAAGrC,GAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIG,aAAc;AAClB,CAvBO","sourcesContent":["import gql from 'graphql-tag'\nimport {\n  UserFields,\n  UserMemberFields,\n  MessageFields,\n  ProjectFields,\n  NoticeFields, UserForReset\n} from \"../../fragments\"\n\nexport const GOOGLE_AUTH = gql`\n  mutation googleAuth($accessToken: String!) {\n    googleAuth(accessToken: $accessToken) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const FACEBOOK_AUTH = gql`\n  mutation facebookAuth($accessToken: String!) {\n    facebookAuth(accessToken: $accessToken) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const CHECKIN = gql`\n  mutation checkin($login: String!) {\n    checkin(login: $login)\n  }\n`\n\nexport const LOGIN = gql`\n  mutation login($login: String!, $password: String!) {\n    login(login: $login, password: $password) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const REGISTER = gql`\n  mutation register($input: RegisterInput) {\n    register(input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const RESET = gql`\n  mutation updateUserPasswordResetStatus($email: String!) {\n    updateUserPasswordResetStatus(email: $email) {\n      ...UserForReset\n    }\n  }\n  ${UserForReset}\n`\n\nexport const CHECK_EMAIL = gql`\n  query getResetTokenByEmail($email: String, $token: String) {\n    ...UserForReset\n  }\n  ${UserForReset}\n`\nexport const CHECK_RESET_TOKEN = gql`\n  mutation checkTokenAndResetPassword($email: String, $token: String, password: String) {\n    checkTokenAndResetPassword($email: String, $token: String, password: String) {\n      ...UserForReset\n    }\n  }\n  ${UserForReset}\n`\n\nexport const LOGOUT = gql`\n  mutation logout {\n    logout\n  }\n`\n\nexport const CHECK_USER = gql`\n  query checkUser($search: String!) {\n    checkUser(search: $search) {\n      status\n      message\n    }\n  }\n`\n\nexport const GET_USER = gql`\n  query getUser($email: String) {\n    getUser(email: $email) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const GET_USERS = gql`\n  query getUsers(\n    $offset: Int\n    $limit: Int\n    $search: String\n    $email: [String]\n    $account: [AccountType]\n    $company: String\n  ) {\n    getUsers(\n      offset: $offset\n      limit: $limit\n      search: $search\n      email: $email\n      account: $account\n      company: $company\n    ) {\n      name\n      about\n      email\n      avatar {\n        path\n      }\n      account\n      members\n      company {\n        name\n        email\n        avatar {\n          path\n        }\n      }\n      role {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const GET_USERS_FOR_TICKET = gql`\n  query getUsers(\n    $offset: Int\n    $limit: Int\n    $search: String\n    $email: [String]\n    $account: [AccountType]\n    $company: String\n  ) {\n    getUsers(\n      offset: $offset\n      limit: $limit\n      search: $search\n      email: $email\n      account: $account\n      company: $company\n    ) {\n      name\n      email\n    }\n  }\n`\n\nexport const GET_USER_MEMBERS = gql`\n  query getUserMembers($email: String!) {\n    getUserMembers(email: $email) {\n      ...UserMemberFields\n    }\n  }\n  ${UserMemberFields}\n`\n\nexport const GET_USER_PARTICIPANT_PROJECTS = gql`\n  query getProjects($member: String) {\n    getProjects(member: $member) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`\n\nexport const GET_USER_PROJECTS = gql`\n  query getProjects($author: String) {\n    getProjects(author: $author) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`\n\nexport const CREATE_USER = gql`\n  mutation createUser($input: UserCreateInput!) {\n    createUser(input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const UPDATE_CLIENT_USER = gql`\n  mutation updateClientUser($input: UserUpdateInput!) {\n    updateClientUser(input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const UPDATE_USER = gql`\n  mutation updateUser($email: String!, $input: UserUpdateInput!) {\n    updateUser(email: $email, input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const DELETE_USER = gql`\n  mutation deleteUser($email: String!) {\n    deleteUser(email: $email) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`\n\nexport const INVITE_USER_MEMBER = gql`\n  mutation inviteUserMember($email: String!) {\n    inviteUserMember(email: $email)\n  }\n`\n\nexport const APPLY_INVITE_USER_MEMBER = gql`\n  mutation applyInviteUserMember($id: ID!, $email: String!) {\n    applyInviteUserMember(id: $id, email: $email) {\n      ...NoticeFields\n    }\n  }\n  ${NoticeFields}\n`\n\nexport const REJECT_INVITE_USER_MEMBER = gql`\n  mutation rejectInviteUserMember($id: ID!, $email: String!) {\n    rejectInviteUserMember(id: $id, email: $email) {\n      ...NoticeFields\n    }\n  }\n  ${NoticeFields}\n`\n\nexport const APPOINT_USER_MEMBER = gql`\n  mutation appointUserMember($email: String!) {\n    appointUserMember(email: $email) {\n      ...UserMemberFields\n    }\n  }\n  ${UserMemberFields}\n`\n\nexport const EXCLUDE_USER_MEMBER = gql`\n  mutation excludeUserMember($email: String!) {\n    excludeUserMember(email: $email) {\n      ...UserMemberFields\n    }\n  }\n  ${UserMemberFields}\n`\n\nexport const DISMISS_USER_MEMBER = gql`\n  mutation dismissUserMember($email: String!) {\n    dismissUserMember(email: $email) {\n      ...UserMemberFields\n    }\n  }\n  ${UserMemberFields}\n`\n\nexport const ADD_USER_PROJECT = gql`\n  mutation addUserProject($project: ID!, $folder: ID!) {\n    addUserProject(project: $project, folder: $folder)\n  }\n`\n\nexport const REMOVE_USER_PROJECT = gql`\n  mutation removeUserProject($project: ID!, $folder: ID!) {\n    removeUserProject(project: $project, folder: $folder)\n  }\n`\n\nexport const ADD_USER_FOLDER = gql`\n  mutation addUserFolder($name: String!) {\n    addUserFolder(name: $name) {\n      id\n      name\n      projects\n    }\n  }\n`\n\nexport const DELETE_USER_FOLDER = gql`\n  mutation deleteUserFolder($id: ID!) {\n    deleteUserFolder(id: $id) {\n      id\n      name\n      projects\n    }\n  }\n`\n\nexport const GET_USER_CHATS = gql`\n  query getUserChats {\n    getUserChats {\n      chat {\n        id\n        type\n        title\n        members {\n          name\n          avatar {\n            path\n          }\n        }\n        messages {\n          ...MessageFields\n        }\n      }\n      status\n      updatedAt\n      createdAt\n    }\n  }\n  ${MessageFields}\n`\n"]},"metadata":{},"sourceType":"module"}
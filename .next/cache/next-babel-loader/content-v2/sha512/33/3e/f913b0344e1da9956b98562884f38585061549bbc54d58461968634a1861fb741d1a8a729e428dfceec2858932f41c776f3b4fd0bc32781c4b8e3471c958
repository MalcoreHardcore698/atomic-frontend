{"ast":null,"code":"import React, { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch';\nimport { Card } from '../../layouts/dashboard/content';\nimport { setModal } from '../../store/actions/modal';\nimport { invokeRecall } from '../../hooks/useEntityQuery';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nexport const Query = memo(({\n  data,\n  loading,\n  search,\n  entity,\n  entities,\n  onHide,\n  onJump,\n  onChange,\n  onSubmit\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  const hideModal = () => dispatch(setModal(null));\n\n  const onEdit = item => {\n    hideModal();\n    if (onHide) onHide();\n    return invokeRecall(recall, mutate, user, dispatch, {\n      [entity === null || entity === void 0 ? void 0 : entity.value]: item.id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(GlobalSearch, {\n    search: search,\n    loading: loading,\n    initialEntity: entity,\n    result: search && data && entity && data[entity === null || entity === void 0 ? void 0 : entity.value],\n    entities: (entities || []).map(elem => ({ ...elem,\n      render: item => /*#__PURE__*/React.createElement(Card, {\n        key: item.id || item.email,\n        item: item,\n        appearance: 'clear',\n        component: elem.render(item),\n        onLink: hideModal,\n        onEdit: document => onEdit(document) // onDelete={(document) => onJump('/delete', { item: document, entity: elem })}\n        ,\n        withoutChecked: true\n      })\n    })),\n    onSubmit: onSubmit,\n    onChange: onChange\n  });\n});\nexport const QuerySearch = memo(({\n  search,\n  entity,\n  entities,\n  setSearch,\n  onHide,\n  onJump,\n  onChange\n}) => {\n  const initialResult = [null, {\n    data: null,\n    loading: false,\n    refetch: null\n  }];\n  const [load, {\n    data,\n    loading,\n    refetch\n  }] = entity ? useLazyQuery(entity.query) : initialResult;\n\n  const onSubmit = value => {\n    const variables = {\n      search: value\n    };\n    if (setSearch) setSearch(value);\n\n    if (value) {\n      if (refetch) {\n        refetch(variables);\n      }\n\n      if (load) {\n        load({\n          variables\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Query, {\n    data: data,\n    entity: entity,\n    search: search,\n    loading: loading,\n    entities: entities,\n    onHide: onHide,\n    onJump: onJump,\n    onChange: onChange,\n    onSubmit: onSubmit\n  });\n});\nexport default QuerySearch;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/QuerySearch/index.js"],"names":["React","memo","useDispatch","useSelector","useLazyQuery","GlobalSearch","Card","setModal","invokeRecall","useHelper","useMutate","Query","data","loading","search","entity","entities","onHide","onJump","onChange","onSubmit","recall","mutate","user","state","dispatch","hideModal","onEdit","item","value","id","map","elem","render","email","document","QuerySearch","setSearch","initialResult","refetch","load","query","variables"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport GlobalSearch from '../../atomic-ui/components/GlobalSearch'\n\nimport { Card } from '../../layouts/dashboard/content'\nimport { setModal } from '../../store/actions/modal'\nimport { invokeRecall } from '../../hooks/useEntityQuery'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\n\nexport const Query = memo(\n  ({ data, loading, search, entity, entities, onHide, onJump, onChange, onSubmit }) => {\n    const recall = useHelper()\n    const mutate = useMutate()\n    const user = useSelector((state) => state.user)\n    const dispatch = useDispatch()\n\n    const hideModal = () => dispatch(setModal(null))\n\n    const onEdit = (item) => {\n      hideModal()\n      if (onHide) onHide()\n      return invokeRecall(recall, mutate, user, dispatch, { [entity?.value]: item.id })\n    }\n\n    return (\n      <GlobalSearch\n        search={search}\n        loading={loading}\n        initialEntity={entity}\n        result={search && data && entity && data[entity?.value]}\n        entities={(entities || []).map((elem) => ({\n          ...elem,\n          render: (item) => (\n            <Card\n              key={item.id || item.email}\n              item={item}\n              appearance={'clear'}\n              component={elem.render(item)}\n              onLink={hideModal}\n              onEdit={(document) => onEdit(document)}\n              // onDelete={(document) => onJump('/delete', { item: document, entity: elem })}\n              withoutChecked\n            />\n          )\n        }))}\n        onSubmit={onSubmit}\n        onChange={onChange}\n      />\n    )\n  }\n)\n\nexport const QuerySearch = memo(\n  ({ search, entity, entities, setSearch, onHide, onJump, onChange }) => {\n    const initialResult = [null, { data: null, loading: false, refetch: null }]\n    const [load, { data, loading, refetch }] = entity ? useLazyQuery(entity.query) : initialResult\n\n    const onSubmit = (value) => {\n      const variables = { search: value }\n\n      if (setSearch) setSearch(value)\n\n      if (value) {\n        if (refetch) {\n          refetch(variables)\n        }\n        if (load) {\n          load({ variables })\n        }\n      }\n    }\n\n    return (\n      <Query\n        data={data}\n        entity={entity}\n        search={search}\n        loading={loading}\n        entities={entities}\n        onHide={onHide}\n        onJump={onJump}\n        onChange={onChange}\n        onSubmit={onSubmit}\n      />\n    )\n  }\n)\n\nexport default QuerySearch\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row, { Wrap as WrapRow } from '../../atomic-ui/components/Row';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nimport Column from '../../atomic-ui/components/Column';\nimport Image from '../../atomic-ui/components/Image';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport { getLabelRole } from '../../utils/functions';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"UserCard__Wrap\",\n  componentId: \"bx733i-0\"\n})([\"grid-gap:var(--default-gap);\", \" \", \" \", \" \", \"\"], ({\n  layout\n}) => layout === 'column' && css([\"display:flex;flex-wrap:wrap;\"]), ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Content = styled(Row).withConfig({\n  displayName: \"UserCard__Content\",\n  componentId: \"bx733i-1\"\n})([\"display:grid;grid-template-columns:120px 1fr;grid-template-rows:175px;@media only screen and (max-width:480px){display:flex;flex-direction:column;grid-gap:var(--default-gap);}\"]);\nexport const Avatar = styled(Image).withConfig({\n  displayName: \"UserCard__Avatar\",\n  componentId: \"bx733i-2\"\n})([\"position:relative;width:100%;height:100%;border-radius:var(--surface-border-radius);overflow:hidden;object-fit:cover;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"UserCard__Header\",\n  componentId: \"bx733i-3\"\n})([\"justify-content:space-between;align-items:center;\"]);\nexport const Actions = styled(Row).withConfig({\n  displayName: \"UserCard__Actions\",\n  componentId: \"bx733i-4\"\n})([\"grid-gap:5px;\"]);\nexport const Name = styled(Title).withConfig({\n  displayName: \"UserCard__Name\",\n  componentId: \"bx733i-5\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\nexport const About = styled(Text).withConfig({\n  displayName: \"UserCard__About\",\n  componentId: \"bx733i-6\"\n})([\"display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;text-overflow:ellipsis;font-size:var(--font-size-m);height:215px;\"]);\nexport const Indicator = styled(Difinition).withConfig({\n  displayName: \"UserCard__Indicator\",\n  componentId: \"bx733i-7\"\n})([\"align-items:flex-end;flex-grow:10;height:100%;\"]);\nexport const Footer = styled(Row).withConfig({\n  displayName: \"UserCard__Footer\",\n  componentId: \"bx733i-8\"\n})([\"justify-content:space-between;grid-column:1 / 3;@media only screen and (max-width:480px){display:flex;flex-direction:column;grid-gap:var(--default-gap);\", \"{flex-grow:1;\", \"{flex-grow:1;button{width:100%;}}}}\"], WrapRow, WrapTooltip);\nexport const Card = ({\n  user,\n  preview,\n  owned,\n  added,\n  style,\n  className,\n  appearance,\n  onAdd,\n  onLink,\n  onChat,\n  onMembers,\n  onCompanyLink,\n  onChecked,\n  onEdit,\n  onDelete\n}) => {\n  var _user$avatar, _user$projects, _user$company, _user$company$avatar, _user$company2;\n\n  const [isAdded, setAdded] = useState(added);\n\n  const onClickAdd = () => {\n    if (onAdd) onAdd();\n    setAdded(!isAdded);\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Avatar, {\n    src: (user === null || user === void 0 ? void 0 : (_user$avatar = user.avatar) === null || _user$avatar === void 0 ? void 0 : _user$avatar.path) || '/images/avatar-default.png',\n    layout: 'fill',\n    alt: user.name\n  }), /*#__PURE__*/React.createElement(Column, {\n    style: {\n      gridGap: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Meta, {\n    category: getLabelRole(user.account)\n  }), (onChecked || onEdit || onDelete) && /*#__PURE__*/React.createElement(Actions, null, onDelete && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить пользователя'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    appearance: 'red',\n    onClick: onDelete\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), onEdit && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактировать пользователя'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    onClick: onEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), onChecked && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отметить пользователя',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, null)))), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: onLink\n  }, user.name), /*#__PURE__*/React.createElement(About, null, user.about || 'Информация о себе не заполнена'), user.projects && /*#__PURE__*/React.createElement(Indicator, {\n    icon: 'work',\n    label: 'Проекты',\n    text: (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.length\n  }))), !preview && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Footer, null, user.account === 'ENTITY' ? /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'user2',\n    label: 'Участники',\n    text: user.members,\n    onLink: onMembers\n  }) : /*#__PURE__*/React.createElement(Difinition, _extends({}, user.company ? {\n    img: (_user$company = user.company) === null || _user$company === void 0 ? void 0 : (_user$company$avatar = _user$company.avatar) === null || _user$company$avatar === void 0 ? void 0 : _user$company$avatar.path\n  } : {\n    icon: 'work'\n  }, {\n    label: 'Компания',\n    text: ((_user$company2 = user.company) === null || _user$company2 === void 0 ? void 0 : _user$company2.name) || '-',\n    onLink: user.company && onCompanyLink\n  })), !owned && (onChat || onAdd) && /*#__PURE__*/React.createElement(Row, null, onChat && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Написать пользователю'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    appearance: 'green',\n    onClick: onChat,\n    revert: true\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'chat',\n    stroke: 'var(--default-color-green)'\n  }))), onAdd && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Подписаться на пользователя'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onClickAdd,\n    revert: !isAdded\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: isAdded ? 'check' : 'add',\n    stroke: isAdded ? 'white' : 'var(--default-color-accent)'\n  })))))));\n};\nCard.defaultProps = {\n  appearance: 'default'\n};\nexport default Card;","map":null,"metadata":{},"sourceType":"module"}
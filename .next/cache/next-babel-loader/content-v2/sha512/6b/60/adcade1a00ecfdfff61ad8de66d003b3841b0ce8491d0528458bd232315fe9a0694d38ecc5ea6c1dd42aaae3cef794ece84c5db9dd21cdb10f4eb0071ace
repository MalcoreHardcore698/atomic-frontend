{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../../apollo';\nimport { useHelper } from '../../hooks/useHelper';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport RoleCard from '../../components/RoleCard';\nimport LazyLoad from '../../components/LazyLoad';\nimport FadeLoad from '../../components/FadeLoad';\nimport { onRoleCreate, onRoleEdit, onRoleDelete, onRoleLink } from '../../store/helpers/role';\nimport { setDocuments } from '../../store/actions/documents';\nimport { categories } from '../../__mock__';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Роли';\n\nconst Roles = ({\n  store,\n  permissions\n}) => {\n  const recall = useHelper();\n  const documents = useSelector(state => state.documents);\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const roles = useMemo(() => documents || store.roles, [documents, store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'lock',\n    title: TITLE,\n    buttonCreateText: 'Создать роль',\n    onCreate: recall(onRoleCreate, {\n      permissions,\n      mutation: queries.CREATE_ROLE\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: displayMethod === 'list' ? [] : templates.role.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), roles.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0420\\u043E\\u043B\\u0435\\u0439 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: roles,\n    template: templates.role,\n    onChecked: () => {},\n    onClick: role => recall(onRoleLink, {\n      id: role.id,\n      role\n    })(),\n    onDelete: role => recall(onRoleDelete, {\n      id: role.id,\n      role,\n      mutation: queries.DELETE_ROLE\n    })(),\n    onEdit: role => recall(onRoleEdit, {\n      id: role.id,\n      role,\n      permissions,\n      mutation: queries.UPDATE_ROLE\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, roles.map(role => /*#__PURE__*/React.createElement(FadeLoad, {\n    key: role.id\n  }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(RoleCard, {\n    role: role,\n    onChecked: () => {},\n    onLink: recall(onRoleLink, {\n      id: role.id,\n      role\n    }),\n    onDelete: recall(onRoleDelete, {\n      id: role.id,\n      role,\n      mutation: queries.DELETE_ROLE\n    }),\n    onEdit: recall(onRoleEdit, {\n      id: role.id,\n      role,\n      permissions,\n      mutation: queries.UPDATE_ROLE\n    })\n  }))))));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let roles = [];\n  let permissions = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_ROLES\n    });\n\n    if (response && response.data) {\n      roles = response.data.getRoles;\n      permissions = response.data.getPermissions;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        roles\n      },\n      permissions\n    }\n  };\n}\nexport default Roles;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/roles.js"],"names":["React","useState","useEffect","useMemo","useDispatch","useSelector","Grid","Alert","DatePicker","Select","Table","templates","initializeApollo","useHelper","DashboardLayout","HandleBar","FilterBar","RoleCard","LazyLoad","FadeLoad","onRoleCreate","onRoleEdit","onRoleDelete","onRoleLink","setDocuments","categories","queries","TITLE","Roles","store","permissions","recall","documents","state","dispatch","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","displayMethod","onChangeDisplayMethod","roles","mutation","CREATE_ROLE","item","value","role","map","index","label","header","length","width","textAlign","id","DELETE_ROLE","UPDATE_ROLE","overflowX","getServerSideProps","client","response","query","GET_META_DASHBOARD_ROLES","data","getRoles","getPermissions","err","console","log","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Grid from '../../atomic-ui/components/Grid'\nimport Alert from '../../atomic-ui/components/Alert'\nimport DatePicker from '../../atomic-ui/components/DatePicker'\nimport Select from '../../atomic-ui/components/Select'\nimport Table from '../../atomic-ui/components/Table'\nimport templates from '../../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport DashboardLayout from '../../layouts/dashboard'\nimport HandleBar from '../../components/HandleBar'\nimport FilterBar from '../../components/FilterBar'\nimport RoleCard from '../../components/RoleCard'\nimport LazyLoad from '../../components/LazyLoad'\nimport FadeLoad from '../../components/FadeLoad'\nimport { onRoleCreate, onRoleEdit, onRoleDelete, onRoleLink } from '../../store/helpers/role'\nimport { setDocuments } from '../../store/actions/documents'\nimport { categories } from '../../__mock__'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Роли'\n\nconst Roles = ({ store, permissions }) => {\n  const recall = useHelper()\n  const documents = useSelector((state) => state.documents)\n  const dispatch = useDispatch()\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n\n  const roles = useMemo(() => documents || store.roles, [documents, store])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <HandleBar\n        icon={'lock'}\n        title={TITLE}\n        buttonCreateText={'Создать роль'}\n        onCreate={recall(onRoleCreate, { permissions, mutation: queries.CREATE_ROLE })}\n        onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n        onChangeDisplayMethod={(item) => onChangeDisplayMethod(item.value)}\n      />\n\n      <FilterBar\n        isOpen={visibleFilter}\n        filters={[\n          <DatePicker\n            key={0}\n            value={date}\n            placeholder={'Дата публикации'}\n            onChange={onChangeDate}\n            withNavigate\n          />,\n          <Select\n            key={1}\n            options={categories}\n            placeholder={'Раздел'}\n            selected={select}\n            onChange={(item) => onChangeSelect(item)}\n          />\n        ]}\n        options={\n          displayMethod === 'list'\n            ? []\n            : templates.role.map((item, index) => ({\n                label: item.header,\n                value: index\n              }))\n        }\n      />\n\n      {roles.length === 0 && (\n        <Alert style={{ width: '100%', textAlign: 'center' }}>Ролей нет</Alert>\n      )}\n\n      {displayMethod === 'list' && (\n        <Table\n          data={roles}\n          template={templates.role}\n          onChecked={() => {}}\n          onClick={(role) => recall(onRoleLink, { id: role.id, role })()}\n          onDelete={(role) =>\n            recall(onRoleDelete, { id: role.id, role, mutation: queries.DELETE_ROLE })()\n          }\n          onEdit={(role) =>\n            recall(onRoleEdit, { id: role.id, role, permissions, mutation: queries.UPDATE_ROLE })()\n          }\n          style={{ overflowX: 'auto', width: 'calc(100vw - 290px)' }}\n        />\n      )}\n\n      {displayMethod === 'grid' && (\n        <Grid>\n          {roles.map((role) => (\n            <FadeLoad key={role.id}>\n              <LazyLoad>\n                <RoleCard\n                  role={role}\n                  onChecked={() => {}}\n                  onLink={recall(onRoleLink, { id: role.id, role })}\n                  onDelete={recall(onRoleDelete, {\n                    id: role.id,\n                    role,\n                    mutation: queries.DELETE_ROLE\n                  })}\n                  onEdit={recall(onRoleEdit, {\n                    id: role.id,\n                    role,\n                    permissions,\n                    mutation: queries.UPDATE_ROLE\n                  })}\n                />\n              </LazyLoad>\n            </FadeLoad>\n          ))}\n        </Grid>\n      )}\n    </DashboardLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let roles = []\n  let permissions = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_ROLES\n    })\n\n    if (response && response.data) {\n      roles = response.data.getRoles\n      permissions = response.data.getPermissions\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { roles },\n      permissions\n    }\n  }\n}\n\nexport default Roles\n"]},"metadata":{},"sourceType":"module"}
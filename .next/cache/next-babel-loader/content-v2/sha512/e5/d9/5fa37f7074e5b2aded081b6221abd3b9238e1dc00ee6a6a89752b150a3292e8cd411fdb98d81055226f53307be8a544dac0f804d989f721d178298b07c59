{"ast":null,"code":"import React from 'react';\nimport styled from 'styled-components';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ErrorNotFound from './404';\nimport DefaultLayout from '../layouts/default';\nimport TicketForm from '../components/FormTicket';\nimport { setItem } from '../store/actions/snacks';\nimport { setModal } from '../store/actions/modal';\nimport queries from '../graphql/queries';\nconst TITLE = 'Поддержка';\nconst Wrap = styled.div.withConfig({\n  displayName: \"support__Wrap\",\n  componentId: \"s0xf32-0\"\n})([\"display:grid;grid-template-columns:380px;justify-content:center;align-content:center;margin:120px 0;@media only screen and (max-width:480px){grid-template-columns:100%;margin:25px 0;}\"]);\nexport const Support = () => {\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  if (user && user.authenticated) {\n    return /*#__PURE__*/React.createElement(DefaultLayout, {\n      title: TITLE\n    }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(TicketForm, {\n      title: 'Поддержка',\n      mutation: queries.CREATE_USER_TICKET,\n      onSubmit: async (form, action) => {\n        try {\n          var _form$category;\n\n          await action({\n            variables: {\n              input: {\n                title: form.title,\n                message: form.message,\n                category: (_form$category = form.category) === null || _form$category === void 0 ? void 0 : _form$category.value\n              }\n            }\n          });\n          dispatch(setItem({\n            type: 'success',\n            message: 'Вопрос успешно отправлен'\n          }));\n        } catch (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отправить вопрос'\n          }));\n        } finally {\n          dispatch(setModal(null));\n        }\n      },\n      withContainer: true,\n      isClient: true\n    })));\n  }\n\n  return /*#__PURE__*/React.createElement(ErrorNotFound, null);\n};\nexport default Support;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/pages/support.js"],"names":["React","styled","useDispatch","useSelector","ErrorNotFound","DefaultLayout","TicketForm","setItem","setModal","queries","TITLE","Wrap","div","Support","user","state","dispatch","authenticated","CREATE_USER_TICKET","form","action","variables","input","title","message","category","value","type","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,aAAP,MAA0B,OAA1B;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,KAAK,GAAG,WAAd;AAEA,MAAMC,IAAI,GAAGV,MAAM,CAACW,GAAV;AAAA;AAAA;AAAA,+LAAV;AAaA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAC3B,QAAMC,IAAI,GAAGX,WAAW,CAAEY,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAME,QAAQ,GAAGd,WAAW,EAA5B;;AAEA,MAAIY,IAAI,IAAIA,IAAI,CAACG,aAAjB,EAAgC;AAC9B,wBACE,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEP;AAAtB,oBACE,oBAAC,IAAD,qBACE,oBAAC,UAAD;AACE,MAAA,KAAK,EAAE,WADT;AAEE,MAAA,QAAQ,EAAED,OAAO,CAACS,kBAFpB;AAGE,MAAA,QAAQ,EAAE,OAAOC,IAAP,EAAaC,MAAb,KAAwB;AAChC,YAAI;AAAA;;AACF,gBAAMA,MAAM,CAAC;AACXC,YAAAA,SAAS,EAAE;AACTC,cAAAA,KAAK,EAAE;AACLC,gBAAAA,KAAK,EAAEJ,IAAI,CAACI,KADP;AAELC,gBAAAA,OAAO,EAAEL,IAAI,CAACK,OAFT;AAGLC,gBAAAA,QAAQ,oBAAEN,IAAI,CAACM,QAAP,mDAAE,eAAeC;AAHpB;AADE;AADA,WAAD,CAAZ;AASAV,UAAAA,QAAQ,CACNT,OAAO,CAAC;AACNoB,YAAAA,IAAI,EAAE,SADA;AAENH,YAAAA,OAAO,EAAE;AAFH,WAAD,CADD,CAAR;AAMD,SAhBD,CAgBE,OAAOI,GAAP,EAAY;AACZZ,UAAAA,QAAQ,CACNT,OAAO,CAAC;AACNoB,YAAAA,IAAI,EAAE,OADA;AAENH,YAAAA,OAAO,EAAE;AAFH,WAAD,CADD,CAAR;AAMD,SAvBD,SAuBU;AACRR,UAAAA,QAAQ,CAACR,QAAQ,CAAC,IAAD,CAAT,CAAR;AACD;AACF,OA9BH;AA+BE,MAAA,aAAa,MA/Bf;AAgCE,MAAA,QAAQ;AAhCV,MADF,CADF,CADF;AAwCD;;AAED,sBAAO,oBAAC,aAAD,OAAP;AACD,CAhDM;AAkDP,eAAeK,OAAf","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport ErrorNotFound from './404'\nimport DefaultLayout from '../layouts/default'\nimport TicketForm from '../components/FormTicket'\nimport { setItem } from '../store/actions/snacks'\nimport { setModal } from '../store/actions/modal'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Поддержка'\n\nconst Wrap = styled.div`\n  display: grid;\n  grid-template-columns: 380px;\n  justify-content: center;\n  align-content: center;\n  margin: 120px 0;\n\n  @media only screen and (max-width: 480px) {\n    grid-template-columns: 100%;\n    margin: 25px 0;\n  }\n`\n\nexport const Support = () => {\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  if (user && user.authenticated) {\n    return (\n      <DefaultLayout title={TITLE}>\n        <Wrap>\n          <TicketForm\n            title={'Поддержка'}\n            mutation={queries.CREATE_USER_TICKET}\n            onSubmit={async (form, action) => {\n              try {\n                await action({\n                  variables: {\n                    input: {\n                      title: form.title,\n                      message: form.message,\n                      category: form.category?.value\n                    }\n                  }\n                })\n                dispatch(\n                  setItem({\n                    type: 'success',\n                    message: 'Вопрос успешно отправлен'\n                  })\n                )\n              } catch (err) {\n                dispatch(\n                  setItem({\n                    type: 'error',\n                    message: 'Не удалось отправить вопрос'\n                  })\n                )\n              } finally {\n                dispatch(setModal(null))\n              }\n            }}\n            withContainer\n            isClient\n          />\n        </Wrap>\n      </DefaultLayout>\n    )\n  }\n\n  return <ErrorNotFound />\n}\n\nexport default Support\n"]},"metadata":{},"sourceType":"module"}
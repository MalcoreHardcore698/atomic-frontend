{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { useHelper } from '../../hooks/useHelper';\nimport ContentLayout from '../../layouts/content';\nimport UserCard from '../../components/UserCard';\nimport LazyLoad from '../../components/LazyLoad';\nimport FadeLoad from '../../components/FadeLoad';\nimport { onUserCreate, onUserEdit, onUserDelete, onUserLink, onUserAboutMore } from '../../store/helpers/user';\nimport { setDocuments } from '../../store/actions/documents';\nimport { onChat } from '../../store/helpers';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Пользователи';\nconst START_OFFSET = 12;\nconst LIMIT = 12;\n\nconst Users = ({\n  store\n}) => {\n  const recall = useHelper();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  const roles = useMemo(() => store.roles, [store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER',\n      placeholder: 'Дата регистарции'\n    }, {\n      type: 'SELECT',\n      placeholder: 'Компания',\n      options: []\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата регистарции',\n      value: 'createdAt'\n    }],\n    handle: {\n      icon: 'user2',\n      buttonCreateText: 'Создать пользователя',\n      onCreate: recall(onUserCreate, {\n        roles,\n        canEditRole,\n        mutation: queries.CREATE_USER\n      }),\n      onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n    },\n    limit: LIMIT,\n    startOffset: START_OFFSET,\n    bottomScrollOffset: 0,\n    query: queries.GET_USERS,\n    store: {\n      documents: documents || store.users\n    },\n    dashboard: true\n  }, ({\n    documents\n  }) => displayMethod === 'list' ? /*#__PURE__*/React.createElement(Table, {\n    data: documents,\n    template: templates.user,\n    onChecked: () => {},\n    onClick: author => {\n      const owned = author.name === user.name;\n      return recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })();\n    },\n    onDelete: author => recall(onUserDelete, {\n      id: author.email,\n      user: author,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      mutation: queries.DELETE_USER\n    })(),\n    onEdit: author => recall(onUserEdit, {\n      user: author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      roles,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      }\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }) : /*#__PURE__*/React.createElement(Grid, null, documents.map(author => {\n    const owned = author.name === user.name;\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: author.email\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(UserCard, {\n      user: author,\n      onChecked: () => {},\n      onChat: user.email && recall(onChat, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: author\n      }),\n      onDelete: recall(onUserDelete, {\n        id: author.email,\n        user: author,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        mutation: queries.DELETE_USER\n      }),\n      onEdit: recall(onUserEdit, {\n        user: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        roles,\n        canEditRole,\n        mutations: {\n          update: queries.UPDATE_USER,\n          del: queries.DELETE_USER,\n          changePassword: queries.UPDATE_USER\n        }\n      }),\n      preview: true\n    })));\n  })));\n};\n\nexport var __N_SSP = true;\nexport default Users;","map":null,"metadata":{},"sourceType":"module"}
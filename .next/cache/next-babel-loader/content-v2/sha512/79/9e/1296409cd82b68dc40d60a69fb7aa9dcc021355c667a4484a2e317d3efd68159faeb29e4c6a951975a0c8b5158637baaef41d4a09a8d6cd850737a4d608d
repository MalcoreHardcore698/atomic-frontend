{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../../apollo';\nimport { useHelper } from '../../hooks/useHelper';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport TicketCard from '../../components/ArticleCard';\nimport { onTicketCreate, onTicketEdit, onTicketDelete, onTicketLink } from '../../store/helpers/ticket';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nimport { categories } from '../../__mock__';\nconst TITLE = 'Обращения';\n\nconst Tickets = ({\n  store\n}) => {\n  const recall = useHelper();\n  const documents = useSelector(state => state.documents);\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const tickets = useMemo(() => documents || store.tickets, [documents, store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'ticket',\n    title: TITLE,\n    buttonCreateText: 'Создать обращение',\n    onCreate: recall(onTicketCreate, {\n      mutation: queries.CREATE_TICKET\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: displayMethod === 'list' ? [] : templates.ticket.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), tickets.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0439 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: tickets,\n    template: templates.ticket,\n    onChecked: () => {},\n    onClick: ticket => recall(onTicketLink, {\n      id: ticket.id,\n      ticket\n    })(),\n    onDelete: ticket => recall(onTicketDelete, {\n      id: ticket.id,\n      ticket,\n      mutation: queries.DELETE_TICKET\n    })(),\n    onEdit: ticket => recall(onTicketEdit, {\n      id: ticket.id,\n      ticket,\n      mutation: queries.UPDATE_TICKET\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, tickets.map(ticket => /*#__PURE__*/React.createElement(TicketCard, {\n    key: ticket.id,\n    ticket: ticket,\n    onChecked: () => {},\n    onLink: recall(onTicketLink, {\n      id: ticket.id,\n      ticket\n    }),\n    onDelete: recall(onTicketDelete, {\n      id: ticket.id,\n      ticket,\n      mutation: queries.DELETE_TICKET\n    }),\n    onEdit: recall(onTicketEdit, {\n      id: ticket.id,\n      ticket,\n      mutation: queries.UPDATE_TICKET\n    })\n  }))));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let tickets = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_TICKETS\n    });\n\n    if (response && response.data) {\n      tickets = response.data.getTickets;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        tickets\n      }\n    }\n  };\n}\nexport default Tickets;","map":null,"metadata":{},"sourceType":"module"}
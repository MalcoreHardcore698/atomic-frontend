{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { useHelper } from '../../hooks/useHelper';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport UserCard from '../../components/ArticleCard';\nimport { onUserCreate, onUserEdit, onUserDelete, onUserLink } from '../../store/helpers/user';\nimport { setDocuments } from '../../store/actions/documents';\nimport { onChat } from '../../store/helpers';\nimport queries from '../../graphql/queries';\nimport { categories } from '../../__mock__';\nconst TITLE = 'Пользователи';\n\nconst Users = ({\n  store\n}) => {\n  const recall = useHelper();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditRole = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  const users = useMemo(() => documents || store.users, [documents, store]);\n  const roles = useMemo(() => store.roles, [store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'user2',\n    title: TITLE,\n    buttonCreateText: 'Создать пользователя',\n    onCreate: recall(onUserCreate, {\n      roles,\n      canEditRole,\n      mutation: queries.CREATE_USER\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: displayMethod === 'list' ? [] : templates.user.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), users.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: users,\n    template: templates.user,\n    onChecked: () => {},\n    onClick: author => {\n      const owned = author.name === user.name;\n      return recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      })();\n    },\n    onDelete: author => recall(onUserDelete, {\n      id: author.email,\n      user: author,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      mutation: queries.DELETE_USER\n    })(),\n    onEdit: author => recall(onUserEdit, {\n      user: author.email,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      roles,\n      canEditRole,\n      mutations: {\n        update: queries.UPDATE_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_USER\n      }\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, (users || []).map(author => {\n    const owned = author.name === user.name;\n    return /*#__PURE__*/React.createElement(UserCard, {\n      key: author.email,\n      user: author,\n      onChecked: () => {},\n      onChat: user.email && recall(onChat, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned,\n        queries: {\n          userChats: queries.GET_USER_CHATS,\n          chat: queries.GET_CHAT\n        },\n        mutations: {\n          addUserChat: queries.ADD_USER_CHAT,\n          sendMessage: queries.SEND_MESSAGE\n        }\n      }),\n      onDelete: recall(onUserDelete, {\n        id: author.email,\n        user: author,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        mutation: queries.DELETE_USER\n      }),\n      onEdit: recall(onUserEdit, {\n        user: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        roles,\n        canEditRole,\n        mutations: {\n          update: queries.UPDATE_USER,\n          del: queries.DELETE_USER,\n          changePassword: queries.UPDATE_USER\n        }\n      }),\n      preview: true\n    });\n  })));\n};\n\nexport var __N_SSP = true;\nexport default Users;","map":null,"metadata":{},"sourceType":"module"}
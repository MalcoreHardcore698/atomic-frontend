{"ast":null,"code":"var _jsxFileName = \"/Users/alicefromwonderland/Desktop/branches/atomic/atomic-frontend/atomic-ui/components/Difinition/index.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Text from '../Text';\nimport Title from '../Title';\nimport Tooltip from '../Tooltip';\nimport Button from '../Button';\nimport Popper, { Wrap as WrapPopper } from '../Popper';\nimport Icon from '../Icon';\nimport Chip from '../Chip';\nimport Actions from './Actions';\nexport const ActionTooltip = styled(Tooltip)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: var(--input-height-s);\n  height: 100%;\n  opacity: 0;\n  visibility: hidden;\n  transition: all 150ms ease;\n\n  svg {\n    path {\n      stroke: var(--ghost-color-text);\n    }\n  }\n\n  .more_square_svg__circle {\n    fill: var(--ghost-color-text);\n    stroke: none;\n  }\n\n  &:hover {\n    svg {\n      path {\n        stroke: black;\n      }\n    }\n\n    .more_square_svg__circle {\n      fill: black;\n      stroke: none;\n    }\n  }\n`;\nexport const Wrap = styled(Row)`\n  position: relative;\n  padding-right: var(--input-height-s);\n  transition: opacity 150ms ease;\n\n  ${WrapPopper} {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: var(--z-10);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n  }\n\n  &:hover {\n    ${ActionTooltip} {\n      opacity: 1;\n      visibility: visible;\n    }\n  }\n`;\nexport const Content = styled(Column)`\n  justify-content: center;\n  grid-gap: 0;\n\n  ${({\n  clickable\n}) => clickable && css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`;\nexport const Image = styled.img`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  border-radius: var(--surface-border-radius);\n  object-fit: cover;\n`;\nexport const RoundedIcon = styled(Icon)`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  background: var(--default-color-${({\n  color\n}) => color || 'accent'}-dim);\n  border-radius: var(--surface-border-radius);\n\n  ${({\n  disabled\n}) => disabled && css`\n      background: var(--ghost-color-background);\n\n      svg path {\n        stroke: var(--ghost-color-text);\n      }\n    `}\n\n  @media only screen and (max-width: 480px) {\n    width: var(--input-height-s);\n    height: var(--input-height-s);\n    min-width: var(--input-height-s);\n    min-height: var(--input-height-s);\n\n    svg {\n      transform: scale(0.85);\n    }\n  }\n`;\nexport const Label = styled(Text)`\n  color: var(--ghost-color-text);\n  font-size: var(--font-size-s);\n  white-space: nowrap;\n  width: 128px;\n  max-width: 400px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${({\n  disabled\n}) => disabled && css`\n      color: var(--ghost-color-text);\n    `}\n\n  ${({\n  stretch\n}) => stretch && css`\n      width: auto;\n    `}\n`;\nexport const Value = styled(Title)`\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`;\nexport const MarkedText = styled(Row)`\n  align-items: center;\n  color: var(--ghost-color-text);\n  grid-gap: 5px;\n\n  .red {\n    color: var(--default-color-red);\n  }\n\n  svg {\n    margin-top: -3px;\n    margin-left: -4px;\n  }\n`;\nexport const getValue = (label, text, disabled) => {\n  const disabledStyle = disabled ? {\n    color: 'var(--ghost-color-text)'\n  } : {};\n\n  if (Array.isArray(text)) {\n    const slicedFactor = 3;\n    return __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 7\n      }\n    }, text.slice(0, slicedFactor).map(item => __jsx(Chip, {\n      key: v4(),\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }, item)), text.length > 5 && __jsx(Chip, {\n      style: {\n        display: 'inline-flex'\n      },\n      color: 'ghost',\n      appearance: 'outlined',\n      size: 'xs',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }, \"+\", text.slice(slicedFactor).length));\n  } // eslint-disable-next-line valid-typeof\n\n\n  if (typeof Text === 'funciton') {\n    const Text = text;\n    return __jsx(Text, {\n      style: disabledStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return __jsx(Value, {\n    style: disabledStyle,\n    tag: !label ? 'h2' : 'h4',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, text);\n};\nexport const Difinition = ({\n  img,\n  color,\n  icon,\n  label,\n  text,\n  tooltip,\n  className,\n  style,\n  stretch,\n  disabled,\n  revert,\n  actions,\n  onLink\n}) => {\n  const renderLabel = () => label && __jsx(Label, {\n    stretch: stretch,\n    disabled: disabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }\n  }, label);\n\n  const renderText = () => tooltip ? __jsx(Tooltip, {\n    place: 'top',\n    text: tooltip,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 9\n    }\n  }, getValue(label, text, disabled))) : __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }\n  }, getValue(label, text, disabled));\n\n  return __jsx(Wrap, {\n    className: className,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 5\n    }\n  }, img && !icon && __jsx(Image, {\n    src: img,\n    alt: 'Avatar',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 24\n    }\n  }), !img && icon && __jsx(RoundedIcon, {\n    icon: icon,\n    color: color,\n    disabled: disabled,\n    stroke: `var(--default-color-${color || 'accent'})`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }), __jsx(Content, {\n    clickable: !disabled && !!onLink,\n    onClick: () => !disabled && onLink && onLink(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }\n  }, !revert && renderLabel(), !revert && renderText(), revert && renderText(), revert && renderLabel()), (actions === null || actions === void 0 ? void 0 : actions.length) > 0 && __jsx(Popper, {\n    place: 'bottom',\n    offset: {\n      right: 68\n    },\n    body: __jsx(Actions, {\n      key: 'menu',\n      actions: actions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }\n    }),\n    appearance: 'clear',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }, __jsx(ActionTooltip, {\n    text: 'Действия',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    type: 'button',\n    appearance: 'clear',\n    kind: 'icon',\n    size: 's',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }, __jsx(Icon, {\n    icon: 'moreSquare',\n    size: 's',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 15\n    }\n  })))));\n};\nexport default Difinition;","map":{"version":3,"sources":["/Users/alicefromwonderland/Desktop/branches/atomic/atomic-frontend/atomic-ui/components/Difinition/index.js"],"names":["React","styled","css","v4","Row","Column","Text","Title","Tooltip","Button","Popper","Wrap","WrapPopper","Icon","Chip","Actions","ActionTooltip","Content","clickable","Image","img","RoundedIcon","color","disabled","Label","stretch","Value","MarkedText","getValue","label","text","disabledStyle","Array","isArray","slicedFactor","slice","map","item","display","length","Difinition","icon","tooltip","className","style","revert","actions","onLink","renderLabel","renderText","right"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { v4 } from 'uuid'\n\nimport Row from '../Row'\nimport Column from '../Column'\nimport Text from '../Text'\nimport Title from '../Title'\nimport Tooltip from '../Tooltip'\nimport Button from '../Button'\nimport Popper, { Wrap as WrapPopper } from '../Popper'\nimport Icon from '../Icon'\nimport Chip from '../Chip'\nimport Actions from './Actions'\n\nexport const ActionTooltip = styled(Tooltip)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: var(--input-height-s);\n  height: 100%;\n  opacity: 0;\n  visibility: hidden;\n  transition: all 150ms ease;\n\n  svg {\n    path {\n      stroke: var(--ghost-color-text);\n    }\n  }\n\n  .more_square_svg__circle {\n    fill: var(--ghost-color-text);\n    stroke: none;\n  }\n\n  &:hover {\n    svg {\n      path {\n        stroke: black;\n      }\n    }\n\n    .more_square_svg__circle {\n      fill: black;\n      stroke: none;\n    }\n  }\n`\n\nexport const Wrap = styled(Row)`\n  position: relative;\n  padding-right: var(--input-height-s);\n  transition: opacity 150ms ease;\n\n  ${WrapPopper} {\n    position: absolute;\n    top: 0;\n    right: 0;\n    z-index: var(--z-10);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100%;\n  }\n\n  &:hover {\n    ${ActionTooltip} {\n      opacity: 1;\n      visibility: visible;\n    }\n  }\n`\n\nexport const Content = styled(Column)`\n  justify-content: center;\n  grid-gap: 0;\n\n  ${({ clickable }) =>\n    clickable &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.65;\n      }\n    `}\n`\n\nexport const Image = styled.img`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  border-radius: var(--surface-border-radius);\n  object-fit: cover;\n`\n\nexport const RoundedIcon = styled(Icon)`\n  width: var(--input-height-m);\n  height: var(--input-height-m);\n  min-width: var(--input-height-m);\n  min-height: var(--input-height-m);\n  background: var(--default-color-${({ color }) => color || 'accent'}-dim);\n  border-radius: var(--surface-border-radius);\n\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      background: var(--ghost-color-background);\n\n      svg path {\n        stroke: var(--ghost-color-text);\n      }\n    `}\n\n  @media only screen and (max-width: 480px) {\n    width: var(--input-height-s);\n    height: var(--input-height-s);\n    min-width: var(--input-height-s);\n    min-height: var(--input-height-s);\n\n    svg {\n      transform: scale(0.85);\n    }\n  }\n`\n\nexport const Label = styled(Text)`\n  color: var(--ghost-color-text);\n  font-size: var(--font-size-s);\n  white-space: nowrap;\n  width: 128px;\n  max-width: 400px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      color: var(--ghost-color-text);\n    `}\n\n  ${({ stretch }) =>\n    stretch &&\n    css`\n      width: auto;\n    `}\n`\n\nexport const Value = styled(Title)`\n  font-weight: var(--font-weight-bold);\n  line-height: 1;\n\n  @media only screen and (max-width: 480px) {\n    font-size: var(--font-size-l);\n  }\n`\n\nexport const MarkedText = styled(Row)`\n  align-items: center;\n  color: var(--ghost-color-text);\n  grid-gap: 5px;\n\n  .red {\n    color: var(--default-color-red);\n  }\n\n  svg {\n    margin-top: -3px;\n    margin-left: -4px;\n  }\n`\n\nexport const getValue = (label, text, disabled) => {\n  const disabledStyle = disabled ? { color: 'var(--ghost-color-text)' } : {}\n\n  if (Array.isArray(text)) {\n    const slicedFactor = 3\n    return (\n      <React.Fragment>\n        {text.slice(0, slicedFactor).map((item) => (\n          <Chip\n            key={v4()}\n            style={{ display: 'inline-flex' }}\n            color={'ghost'}\n            appearance={'outlined'}\n            size={'xs'}>\n            {item}\n          </Chip>\n        ))}\n        {text.length > 5 && (\n          <Chip\n            style={{ display: 'inline-flex' }}\n            color={'ghost'}\n            appearance={'outlined'}\n            size={'xs'}>\n            +{text.slice(slicedFactor).length}\n          </Chip>\n        )}\n      </React.Fragment>\n    )\n  }\n\n  // eslint-disable-next-line valid-typeof\n  if (typeof Text === 'funciton') {\n    const Text = text\n    return <Text style={disabledStyle} />\n  }\n\n  return (\n    <Value style={disabledStyle} tag={!label ? 'h2' : 'h4'}>\n      {text}\n    </Value>\n  )\n}\n\nexport const Difinition = ({\n  img,\n  color,\n  icon,\n  label,\n  text,\n  tooltip,\n  className,\n  style,\n  stretch,\n  disabled,\n  revert,\n  actions,\n  onLink\n}) => {\n  const renderLabel = () =>\n    label && (\n      <Label stretch={stretch} disabled={disabled}>\n        {label}\n      </Label>\n    )\n\n  const renderText = () =>\n    tooltip ? (\n      <Tooltip place={'top'} text={tooltip}>\n        <Row>{getValue(label, text, disabled)}</Row>\n      </Tooltip>\n    ) : (\n      <Row>{getValue(label, text, disabled)}</Row>\n    )\n\n  return (\n    <Wrap\n      className={className}\n      style={style}>\n      {img && !icon && <Image src={img} alt={'Avatar'} />}\n      {!img && icon && (\n        <RoundedIcon\n          icon={icon}\n          color={color}\n          disabled={disabled}\n          stroke={`var(--default-color-${color || 'accent'})`}\n        />\n      )}\n\n      <Content clickable={!disabled && !!onLink} onClick={() => !disabled && onLink && onLink()}>\n        {!revert && renderLabel()}\n        {!revert && renderText()}\n\n        {revert && renderText()}\n        {revert && renderLabel()}\n      </Content>\n\n      {actions?.length > 0 && (\n        <Popper\n          place={'bottom'}\n          offset={{ right: 68 }}\n          body={<Actions key={'menu'} actions={actions} />}\n          appearance={'clear'}>\n          <ActionTooltip text={'Действия'}>\n            <Button type={'button'} appearance={'clear'} kind={'icon'} size={'s'}>\n              <Icon icon={'moreSquare'} size={'s'} />\n            </Button>\n          </ActionTooltip>\n        </Popper>\n      )}\n    </Wrap>\n  )\n}\n\nexport default Difinition\n"]},"metadata":{},"sourceType":"module"}
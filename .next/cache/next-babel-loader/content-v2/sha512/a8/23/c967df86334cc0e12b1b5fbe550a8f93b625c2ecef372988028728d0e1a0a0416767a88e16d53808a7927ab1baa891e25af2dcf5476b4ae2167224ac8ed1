{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dan82\\\\Documents\\\\workspace\\\\FREELANCE\\\\atomic\\\\atomic-frontend\\\\atomic-ui\\\\components\\\\GlobalSearch\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Column from '../Column';\nimport Select from '../Select';\nimport Search from '../Search';\nimport Spinner from '../Spinner';\nexport const Wrap = styled(Column)`\n  padding: var(--default-gap);\n`;\nexport const Loader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n`;\n/*\n * const entities: entity[]\n * type entity = {\n *  label: string;\n *  value: ObjectID | string;\n *  render: ReactNode | Element | string;\n * }\n */\n\nexport const GlobalSearch = ({\n  result,\n  loading,\n  entities,\n  initialEntity,\n  appearance,\n  style,\n  className,\n  onChange,\n  onSubmit\n}) => {\n  const {\n    0: entity,\n    1: setEntity\n  } = useState(initialEntity);\n\n  const renderContent = () => __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Search, {\n    appearance: 'ghost',\n    placeholder: 'Поиск',\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), Array.isArray(result) && result.map(item => entity.render && __jsx(React.Fragment, {\n    key: item.id || item.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }, entity.render(item))));\n\n  useEffect(() => {\n    if (onChange) onChange(entity);\n  }, [entity, onChange]);\n  return __jsx(Wrap, {\n    style: style,\n    className: className,\n    appearance: appearance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(Select, {\n    appearance: 'ghost',\n    defaultValue: entity,\n    placeholder: 'Где будем искать?',\n    label: 'Зона поиска',\n    options: entities,\n    onChange: setEntity,\n    isLoading: loading,\n    isSearchable: true,\n    isClearable: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), !loading && entity && renderContent(), loading && __jsx(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })));\n};\nGlobalSearch.defaultProps = {\n  appearance: 'clear'\n};\nexport default GlobalSearch;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/GlobalSearch/index.js"],"names":["React","useState","useEffect","styled","Column","Select","Search","Spinner","Wrap","Loader","div","GlobalSearch","result","loading","entities","initialEntity","appearance","style","className","onChange","onSubmit","entity","setEntity","renderContent","Array","isArray","map","item","render","id","email","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,MAAMC,IAAI,GAAGL,MAAM,CAACC,MAAD,CAAS;AACnC;AACA,CAFO;AAIP,OAAO,MAAMK,MAAM,GAAGN,MAAM,CAACO,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAC3BC,EAAAA,MAD2B;AAE3BC,EAAAA,OAF2B;AAG3BC,EAAAA,QAH2B;AAI3BC,EAAAA,aAJ2B;AAK3BC,EAAAA,UAL2B;AAM3BC,EAAAA,KAN2B;AAO3BC,EAAAA,SAP2B;AAQ3BC,EAAAA,QAR2B;AAS3BC,EAAAA;AAT2B,CAAD,KAUtB;AACJ,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBrB,QAAQ,CAACc,aAAD,CAApC;;AAEA,QAAMQ,aAAa,GAAG,MACpB,MAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,UAAU,EAAE,OAApB;AAA6B,IAAA,WAAW,EAAE,OAA1C;AAAmD,IAAA,QAAQ,EAAEH,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGGI,KAAK,CAACC,OAAN,CAAcb,MAAd,KACCA,MAAM,CAACc,GAAP,CACGC,IAAD,IACEN,MAAM,CAACO,MAAP,IACE,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,GAAG,EAAED,IAAI,CAACE,EAAL,IAAWF,IAAI,CAACG,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6CT,MAAM,CAACO,MAAP,CAAcD,IAAd,CAA7C,CAHN,CAJJ,CADF;;AAcAzB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,QAAJ,EAAcA,QAAQ,CAACE,MAAD,CAAR;AACf,GAFQ,EAEN,CAACA,MAAD,EAASF,QAAT,CAFM,CAAT;AAIA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,KAAb;AAAoB,IAAA,SAAS,EAAEC,SAA/B;AAA0C,IAAA,UAAU,EAAEF,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,UAAU,EAAE,OADd;AAEE,IAAA,YAAY,EAAEK,MAFhB;AAGE,IAAA,WAAW,EAAE,mBAHf;AAIE,IAAA,KAAK,EAAE,aAJT;AAKE,IAAA,OAAO,EAAEP,QALX;AAME,IAAA,QAAQ,EAAEQ,SANZ;AAOE,IAAA,SAAS,EAAET,OAPb;AAQE,IAAA,YAAY,MARd;AASE,IAAA,WAAW,MATb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAaG,CAACA,OAAD,IAAYQ,MAAZ,IAAsBE,aAAa,EAbtC,EAeGV,OAAO,IACN,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhBJ,CADF;AAuBD,CAtDM;AAwDPF,YAAY,CAACoB,YAAb,GAA4B;AAC1Bf,EAAAA,UAAU,EAAE;AADc,CAA5B;AAIA,eAAeL,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport Column from '../Column'\nimport Select from '../Select'\nimport Search from '../Search'\nimport Spinner from '../Spinner'\n\nexport const Wrap = styled(Column)`\n  padding: var(--default-gap);\n`\n\nexport const Loader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n`\n\n/*\n * const entities: entity[]\n * type entity = {\n *  label: string;\n *  value: ObjectID | string;\n *  render: ReactNode | Element | string;\n * }\n */\n\nexport const GlobalSearch = ({\n  result,\n  loading,\n  entities,\n  initialEntity,\n  appearance,\n  style,\n  className,\n  onChange,\n  onSubmit\n}) => {\n  const [entity, setEntity] = useState(initialEntity)\n\n  const renderContent = () => (\n    <React.Fragment>\n      <Search appearance={'ghost'} placeholder={'Поиск'} onSubmit={onSubmit} />\n\n      {Array.isArray(result) &&\n        result.map(\n          (item) =>\n            entity.render && (\n              <React.Fragment key={item.id || item.email}>{entity.render(item)}</React.Fragment>\n            )\n        )}\n    </React.Fragment>\n  )\n\n  useEffect(() => {\n    if (onChange) onChange(entity)\n  }, [entity, onChange])\n\n  return (\n    <Wrap style={style} className={className} appearance={appearance}>\n      <Select\n        appearance={'ghost'}\n        defaultValue={entity}\n        placeholder={'Где будем искать?'}\n        label={'Зона поиска'}\n        options={entities}\n        onChange={setEntity}\n        isLoading={loading}\n        isSearchable\n        isClearable\n      />\n\n      {!loading && entity && renderContent()}\n\n      {loading && (\n        <Loader>\n          <Spinner />\n        </Loader>\n      )}\n    </Wrap>\n  )\n}\n\nGlobalSearch.defaultProps = {\n  appearance: 'clear'\n}\n\nexport default GlobalSearch\n"]},"metadata":{},"sourceType":"module"}
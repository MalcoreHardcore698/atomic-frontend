{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport styled, { css } from 'styled-components';\nimport { v4 } from 'uuid';\nimport Row from '../Row';\nimport Column from '../Column';\nimport Icon from '../Icon';\nimport Button from '../Button';\nimport Switch from '../Switch';\nimport Difinition from '../Difinition';\nimport Checkbox from '../Checkbox';\nimport Tooltip, { Wrap as TooltipWrap } from '../Tooltip';\nimport Popper from '../Popper';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"Table__Wrap\",\n  componentId: \"gzldu8-0\"\n})([\"\"]);\nexport const Manage = styled(Row).withConfig({\n  displayName: \"Table__Manage\",\n  componentId: \"gzldu8-1\"\n})([\"display:grid;grid-template-columns:36px 1fr 70px;\", \"\"], ({\n  checkable\n}) => checkable && css([\"grid-template-columns:1fr 40px;\"]));\nexport const Headers = styled(Switch).withConfig({\n  displayName: \"Table__Headers\",\n  componentId: \"gzldu8-2\"\n})([\"\", \" \", \"\"], ({\n  width\n}) => width && css([\"span{width:\", \";}\"], width), ({\n  first,\n  width\n}) => first && width && css([\"span:first-child{width:calc(\", \" + 45px);}\"], width));\nexport const Header = styled(Row).withConfig({\n  displayName: \"Table__Header\",\n  componentId: \"gzldu8-3\"\n})([\"display:flex;justify-content:flex-start;align-items:center;width:100%;height:30px;color:#959595;&:last-child{justify-content:flex-end;}\"]);\nexport const Track = styled(Row).withConfig({\n  displayName: \"Table__Track\",\n  componentId: \"gzldu8-4\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  checked\n}) => checked && css([\"opacity:0.45;\"]));\nexport const Content = styled(Row).withConfig({\n  displayName: \"Table__Content\",\n  componentId: \"gzldu8-5\"\n})([\"padding:5px 15px;width:calc(100% - 85px);\", \" \", \" \", \" \", \" & > label{display:flex;justify-content:center;align-items:center;width:calc(var(--input-height-m) - 15px);margin-left:5px;& > span{margin:0;}}\"], ({\n  checkable\n}) => checkable && css([\"width:100%;\"]), ({\n  editable\n}) => editable && css([\"width:calc(100% - 55px);\"]), ({\n  appearance\n}) => appearance === 'default' && css([\"border:1px solid var(--surface-border);background:var(--surface-background);box-shadow:1px solid var(--surface-shadow);border-radius:var(--surface-border-radius);\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"border:none;background:none;box-shadow:none;border-radius:0;\"]));\nexport const Container = styled(Row).withConfig({\n  displayName: \"Table__Container\",\n  componentId: \"gzldu8-6\"\n})([\"width:100%;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;\"]));\nexport const Actions = styled(Column).withConfig({\n  displayName: \"Table__Actions\",\n  componentId: \"gzldu8-7\"\n})([\"justify-content:center;align-items:center;width:70px;padding:5px;grid-gap:5px;button{width:100%;flex-grow:1;}\", \"{width:100%;}\", \" \", \" \", \" \", \"\"], TooltipWrap, ({\n  checkable\n}) => checkable && css([\"width:40px;\"]), ({\n  horizontal\n}) => horizontal && css([\"flex-direction:row;\"]), ({\n  appearance\n}) => appearance === 'default' && css([\"border:1px solid var(--surface-border);background:var(--surface-background);box-shadow:1px solid var(--surface-shadow);border-radius:var(--surface-border-radius);\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"border:none;background:none;box-shadow:none;border-radius:0;padding:0;\"]));\nexport const FieldsPopper = styled(Popper).withConfig({\n  displayName: \"Table__FieldsPopper\",\n  componentId: \"gzldu8-8\"\n})([\"display:flex;align-items:center;& > div{display:flex;}\"]);\nexport const Cell = styled(Difinition).withConfig({\n  displayName: \"Table__Cell\",\n  componentId: \"gzldu8-9\"\n})([\"align-items:center;flex-grow:1;width:\", \";overflow:hidden;& > div{width:100%;}h4{font-size:var(--font-size-m);font-weight:var(--font-weight-bold);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;}\"], ({\n  width\n}) => width);\nexport const HeaderList = styled(Column).withConfig({\n  displayName: \"Table__HeaderList\",\n  componentId: \"gzldu8-10\"\n})([\"border:1px solid var(--surface-border);background:var(--surface-background);box-shadow:var(--surface-shadow);border-radius:var(--surface-border-radius);padding:10px;grid-gap:10px;\"]);\nexport const CheckboxTooltip = styled(Tooltip).withConfig({\n  displayName: \"Table__CheckboxTooltip\",\n  componentId: \"gzldu8-11\"\n})([\"display:flex;justify-content:flex-end;align-items:center;\"]);\nexport const getIsAdmin = document => {\n  var _document$name;\n\n  return ((_document$name = document.name) === null || _document$name === void 0 ? void 0 : _document$name.toUpperCase()) === 'ADMIN';\n};\nexport const Table = ({\n  data,\n  template,\n  className,\n  style,\n  appearance,\n  onClick,\n  onChecked,\n  onDelete,\n  onEdit\n}) => {\n  const [isAllChecked, setIsAllChecked] = useState(false);\n  const [documents, setDocuments] = useState((data || []).map(item => ({ ...item,\n    id: item.id || v4(),\n    checked: false\n  })));\n  const buttonDeleteDisabled = useMemo(() => !documents.find(item => item.checked), [documents]);\n  const defaultWidth = `${Math.floor(100 / template.length)}%`;\n  const headers = useMemo(() => (template || []).map(item => ({\n    value: v4(),\n    label: item.header,\n    tooltip: item.tooltip || `Сортировка по «${item.header}»`,\n    visible: !item.hidden\n  })), []);\n\n  const handleChecked = document => {\n    setDocuments(prev => {\n      const isExists = item => item.id === document.id;\n\n      const candidate = prev.find(isExists);\n\n      if (candidate) {\n        return prev.map(item => isExists(item) ? { ...document,\n          checked: !item.checked\n        } : { ...item,\n          checked: isAllChecked || item.checked\n        });\n      } else {\n        return [...prev, { ...document,\n          checked: true\n        }];\n      }\n    });\n    setIsAllChecked(false);\n  };\n\n  const handleAllChecked = () => {\n    const value = !isAllChecked;\n    setDocuments(prev => prev.map(item => ({ ...item,\n      checked: !getIsAdmin(item) ? value : false\n    })));\n    setIsAllChecked(value);\n  };\n\n  useEffect(() => {\n    const countChecked = documents.reduce((acc, curr) => acc + (curr.checked ? 1 : 0), 0);\n\n    if (documents.length > 0 && countChecked === documents.length) {\n      setIsAllChecked(true);\n    }\n  }, [documents]);\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style\n  }, /*#__PURE__*/React.createElement(Manage, {\n    checkable: !onChecked\n  }, onChecked && /*#__PURE__*/React.createElement(CheckboxTooltip, {\n    text: 'Отметить все',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    size: 's',\n    checked: isAllChecked,\n    onChange: handleAllChecked\n  })), /*#__PURE__*/React.createElement(Headers, {\n    defaultValue: headers[0],\n    options: headers.filter(h => h.visible),\n    first: onChecked,\n    stretch: true\n  }), /*#__PURE__*/React.createElement(Actions, {\n    appearance: appearance,\n    checkable: !onChecked,\n    horizontal: true\n  }, onDelete && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удаление выделенного',\n    place: 'left'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 'xs',\n    kind: 'icon',\n    appearance: buttonDeleteDisabled ? 'ghost' : 'red',\n    disabled: buttonDeleteDisabled,\n    onClick: () => onDelete(documents.filter(document => document.checked))\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: buttonDeleteDisabled ? 'var(--ghost-color-text)' : 'white'\n  }))), /*#__PURE__*/React.createElement(FieldsPopper, {\n    place: 'left',\n    offset: {\n      bottom: 80\n    },\n    body: /*#__PURE__*/React.createElement(HeaderList, null, headers.map((header, index) => /*#__PURE__*/React.createElement(Checkbox, {\n      key: index,\n      size: 's',\n      label: header.label,\n      checked: header.visible\n    }))),\n    appearance: 'clear'\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отображение полей',\n    place: 'left'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 'xs',\n    kind: 'icon'\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'show',\n    size: 'xs',\n    stroke: 'white'\n  })))))), documents.map((document, index) => /*#__PURE__*/React.createElement(Track, {\n    key: index,\n    checked: document.checked\n  }, /*#__PURE__*/React.createElement(Content, {\n    appearance: appearance,\n    checkable: !onChecked,\n    editable: !onChecked && onEdit\n  }, onChecked && /*#__PURE__*/React.createElement(CheckboxTooltip, {\n    text: 'Отметить документ',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    size: 's',\n    checked: !getIsAdmin(document) && (isAllChecked || document.checked),\n    onChange: !getIsAdmin(document) && (() => handleChecked(document))\n  })), /*#__PURE__*/React.createElement(Container, {\n    onClick: () => onClick(document)\n  }, template.map((cell, index) => headers[index].visible ? React.cloneElement(cell.content(document), {\n    key: index,\n    label: cell.header,\n    width: (cell === null || cell === void 0 ? void 0 : cell.width) || defaultWidth\n  }) : null))), (onEdit || onDelete) && /*#__PURE__*/React.createElement(Actions, {\n    appearance: appearance,\n    checkable: !onChecked\n  }, onEdit && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактирование',\n    place: 'left'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 'xs',\n    kind: 'icon',\n    disabled: getIsAdmin(document) || document.checked,\n    onClick: () => onEdit(document)\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white',\n    fill: getIsAdmin(document) || document.checked ? 'var(--ghost-color-text)' : 'var(--default-color-accent)'\n  }))), onDelete && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удаление',\n    place: 'left'\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: 'xs',\n    kind: 'icon',\n    appearance: 'red',\n    disabled: getIsAdmin(document) || document.checked,\n    onClick: () => onDelete(document)\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white',\n    fill: getIsAdmin(document) || document.checked ? 'var(--ghost-color-text)' : 'var(--default-color-red)'\n  })))))));\n};\nTable.defaultProps = {\n  appearance: 'default'\n};\nexport default Table;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport Column from '../../atomic-ui/components/Column';\nimport Button from '../../atomic-ui/components/Button';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Screenshot from '../../atomic-ui/components/Screenshot';\nimport AddMemberForm from '../../components/FormAddMember';\nimport AddFileForm from '../../components/FormAddFile';\nimport ProjectForm from '../../components/FormProject';\nimport DeleteForm from '../../components/FormDelete';\nimport SureDeleteForm, { Content as ContentSureDelete } from '../../components/FormSureDelete';\nimport ProjectCard from '../../components/ProjectCard';\nimport ProjectView from '../../components/ProjectView';\nimport { setDocuments } from '../actions/documents';\nimport { setMutate, addProjectMember, addProjectScreenshot, addProjectFile, removeProjectMember, removeProjectScreenshot, removeProjectFile, clearProjectMembers, clearProjectScreenshots, clearProjectFiles } from '../actions/root';\nimport { setModal } from '../actions/modal';\nimport { setDrawer } from '../actions/drawer';\nimport { setItem } from '../actions/snacks';\nimport { onUserLink, onUserFolderAdd, onUserAboutMore } from './user';\nimport { onFileLink } from '.';\nexport function onProjectLink(dispatch, props) {\n  const {\n    id,\n    auth,\n    liked,\n    onAdd,\n    onLike,\n    owned\n  } = props;\n  dispatch(setDrawer({\n    icon: 'work',\n    title: 'Проект',\n    content: /*#__PURE__*/React.createElement(ProjectView, {\n      appearance: 'clear',\n      project: id,\n      owned: owned,\n      liked: liked,\n      onLike: onLike,\n      onAdd: onAdd,\n      onFileLink: () => onFileLink(dispatch, {\n        id\n      }),\n      onAboutMore: project => onUserAboutMore(dispatch, {\n        project\n      }),\n      onMemberLink: member => onUserLink(dispatch, {\n        id: member,\n        auth,\n        owned\n      }),\n      onCompanyLink: company => onUserLink(dispatch, {\n        id: company,\n        auth,\n        owned\n      }),\n      onScreenshotClick: (_, key, screenshots) => onProjectScreenshot(dispatch, {\n        screenshots,\n        key\n      })\n    })\n  }));\n}\nexport function onProjectCreate(dispatch, props) {\n  const {\n    companies,\n    categories,\n    statuses,\n    canEditStatus,\n    mutation,\n    query,\n    onCompanyInputChange\n  } = props;\n  dispatch(clearProjectMembers());\n  dispatch(clearProjectScreenshots());\n  dispatch(clearProjectFiles());\n  dispatch(setDrawer({\n    icon: 'work',\n    title: 'Создание проекта',\n    content: /*#__PURE__*/React.createElement(ProjectForm, {\n      mutation: mutation,\n      companies: companies,\n      categories: categories,\n      statuses: statuses,\n      appearance: 'clear',\n      canEditStatus: canEditStatus,\n      onMemberAdd: () => onMemberAdd(dispatch, {\n        query\n      }),\n      onScreenshotAdd: () => onScreenshotAdd(dispatch),\n      onFileAdd: () => onFileAdd(dispatch),\n      onMemberRemove: name => dispatch(removeProjectMember(name)),\n      onScreenshotRemove: id => onSureDelete(dispatch, {\n        id,\n        text: 'Вы действительно хотите удалить изображение?',\n        removeAction: removeProjectScreenshot\n      }),\n      onFileRemove: id => onSureDelete(dispatch, {\n        id,\n        text: 'Вы действительно хотите удалить файл?',\n        removeAction: removeProjectFile\n      }),\n      onCompanyInputChange: onCompanyInputChange,\n      onSubmit: async (form, action) => {\n        try {\n          var _form$preview, _form$company, _form$company$value, _form$preview2, _form$preview2$file, _form$category, _form$status;\n\n          const members = form.members.map(member => member.value.email);\n          const files = form.files.map(file => file.file);\n          const fileSizes = form.files.map(file => file.size);\n          const screenshots = form.screenshots.map(screenshot => screenshot.file);\n          const screenshotSizes = form.screenshots.map(screenshot => screenshot.size);\n          const projects = await action({\n            variables: {\n              input: {\n                title: form.title,\n                body: form.body,\n                description: form.description,\n                preview: (_form$preview = form.preview) === null || _form$preview === void 0 ? void 0 : _form$preview.file,\n                company: (_form$company = form.company) === null || _form$company === void 0 ? void 0 : (_form$company$value = _form$company.value) === null || _form$company$value === void 0 ? void 0 : _form$company$value.email,\n                previewSize: (_form$preview2 = form.preview) === null || _form$preview2 === void 0 ? void 0 : (_form$preview2$file = _form$preview2.file) === null || _form$preview2$file === void 0 ? void 0 : _form$preview2$file.size,\n                members: members.length > 0 ? members : [],\n                files: files.length > 0 ? files : [],\n                fileSizes: fileSizes.length > 0 ? fileSizes : [],\n                screenshots: screenshots.length > 0 ? screenshots : [],\n                screenshotSizes: screenshotSizes.length > 0 ? screenshotSizes : [],\n                presentation: form.presentation,\n                category: (_form$category = form.category) === null || _form$category === void 0 ? void 0 : _form$category.value,\n                status: (_form$status = form.status) === null || _form$status === void 0 ? void 0 : _form$status.value\n              }\n            }\n          });\n          dispatch(setDocuments(projects.data.createProject));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Проект успешно создан'\n          }));\n        } catch (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось создать проект'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n          dispatch(clearProjectMembers());\n          dispatch(clearProjectScreenshots());\n          dispatch(clearProjectFiles());\n        }\n      }\n    })\n  }));\n}\nexport function onProjectEdit(dispatch, props) {\n  const {\n    id,\n    auth,\n    companies,\n    categories,\n    statuses,\n    canEditStatus,\n    mutation,\n    query\n  } = props;\n  dispatch(setDrawer({\n    icon: 'work',\n    title: 'Редактирование проекта',\n    content: /*#__PURE__*/React.createElement(ProjectForm, {\n      project: id,\n      mutation: mutation,\n      companies: companies,\n      categories: categories,\n      statuses: statuses,\n      appearance: 'clear',\n      canEditStatus: canEditStatus,\n      onMemberAdd: () => onMemberAdd(dispatch, {\n        query\n      }),\n      onScreenshotAdd: () => onScreenshotAdd(dispatch),\n      onFileAdd: () => onFileAdd(dispatch),\n      onMemberRemove: name => dispatch(removeProjectMember(name)),\n      onScreenshotRemove: id => onSureDelete(dispatch, {\n        id,\n        text: 'Вы действительно хотите удалить изображение?',\n        removeAction: removeProjectScreenshot\n      }),\n      onFileRemove: id => onSureDelete(dispatch, {\n        id,\n        text: 'Вы действительно хотите удалить файл?',\n        removeAction: removeProjectFile\n      }),\n      onSubmit: async (form, action) => {\n        try {\n          var _form$preview3, _form$company2, _form$company2$value, _form$preview4, _form$preview4$file, _form$category2, _form$status2;\n\n          const members = form.members.map(member => {\n            var _member$value;\n\n            return member.email || ((_member$value = member.value) === null || _member$value === void 0 ? void 0 : _member$value.email);\n          });\n          const files = form.files.filter(screenshot => {\n            var _screenshot$file;\n\n            return !((_screenshot$file = screenshot.file) !== null && _screenshot$file !== void 0 && _screenshot$file.id);\n          }).map(file => {\n            var _file$file;\n\n            return (_file$file = file.file) !== null && _file$file !== void 0 && _file$file.type ? file.file : null;\n          });\n          const screenshots = form.screenshots.filter(screenshot => {\n            var _screenshot$file2;\n\n            return !((_screenshot$file2 = screenshot.file) !== null && _screenshot$file2 !== void 0 && _screenshot$file2.id);\n          }).map(screenshot => {\n            var _screenshot$file3;\n\n            return (_screenshot$file3 = screenshot.file) !== null && _screenshot$file3 !== void 0 && _screenshot$file3.type ? screenshot.file : null;\n          });\n          const fileSizes = form.files.map(file => file.size);\n          const screenshotSizes = form.screenshots.map(screenshot => screenshot.size);\n          const projects = await action({\n            variables: {\n              id,\n              input: {\n                title: form.title,\n                body: form.body,\n                description: form.description,\n                preview: (_form$preview3 = form.preview) === null || _form$preview3 === void 0 ? void 0 : _form$preview3.file,\n                company: (_form$company2 = form.company) === null || _form$company2 === void 0 ? void 0 : (_form$company2$value = _form$company2.value) === null || _form$company2$value === void 0 ? void 0 : _form$company2$value.email,\n                previewSize: (_form$preview4 = form.preview) === null || _form$preview4 === void 0 ? void 0 : (_form$preview4$file = _form$preview4.file) === null || _form$preview4$file === void 0 ? void 0 : _form$preview4$file.size,\n                members: members,\n                files: files,\n                fileSizes: fileSizes,\n                screenshots: screenshots,\n                screenshotSizes: screenshotSizes,\n                presentation: form.presentation,\n                category: (_form$category2 = form.category) === null || _form$category2 === void 0 ? void 0 : _form$category2.value,\n                status: (_form$status2 = form.status) === null || _form$status2 === void 0 ? void 0 : _form$status2.value\n              }\n            }\n          });\n          dispatch(setDocuments(projects.data.updateProject));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Проект успешно отредактирован'\n          }));\n        } catch (err) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отредактирвоать проект'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n          dispatch(clearProjectMembers());\n          dispatch(clearProjectScreenshots());\n          dispatch(clearProjectFiles());\n        }\n      },\n      onCommentLink: user => onUserLink(dispatch, {\n        email: user,\n        auth\n      })\n    })\n  }));\n}\nexport function onProjectDelete(dispatch, props) {\n  const {\n    id,\n    auth,\n    project,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление проекта',\n    content: /*#__PURE__*/React.createElement(DeleteForm, {\n      mutation: mutation,\n      appearance: 'clear',\n      onCancel: () => dispatch(setDrawer(null)),\n      onSubmit: async (_, action) => {\n        try {\n          const projects = await action({\n            variables: {\n              id\n            }\n          });\n          dispatch(setDocuments(projects.data.deleteProject));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Проект успешно удален'\n          }));\n        } catch (_unused) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось удалить проект'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n        }\n      }\n    }, /*#__PURE__*/React.createElement(ProjectCard, {\n      project: project,\n      appearance: 'clear',\n      onLink: () => onProjectLink(dispatch, {\n        id: project.id\n      }),\n      onAdd: () => onProjectAdd(dispatch, {\n        id: project.id\n      }),\n      onCompanyLink: company => onUserLink(dispatch, {\n        id: company,\n        auth\n      }),\n      onScreenshotClick: (_, key) => onProjectScreenshot(dispatch, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })\n    }))\n  }));\n}\nexport function onProjectAdd(dispatch, props) {\n  const {\n    id,\n    folders,\n    mutations\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'В какую папку добавить проект?',\n    component: () => /*#__PURE__*/React.createElement(Column, {\n      style: {\n        padding: '15px'\n      }\n    }, folders && folders.length > 0 ? folders.map(folder => /*#__PURE__*/React.createElement(Button, {\n      key: folder.id,\n      onClick: () => {\n        dispatch(setMutate(mutations.addProject, {\n          project: id,\n          folder: folder.id\n        }));\n        dispatch(setModal(null));\n      }\n    }, folder.name)) : /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        textAlign: 'center'\n      },\n      width: '100%'\n    }, \"\\u041F\\u0430\\u043F\\u043E\\u043A \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => onUserFolderAdd(dispatch, {\n        mutation: mutations.createFolder,\n        onCancel: () => onProjectAdd(dispatch, props),\n        callback: () => onProjectAdd(dispatch, props)\n      }),\n      revert: true\n    }, \"\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430\"))\n  }]));\n}\nexport function onProjectRemove(dispatch, props) {\n  const {\n    id,\n    folder,\n    mutation,\n    callback\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'Удаление проекта из папки',\n    component: () => /*#__PURE__*/React.createElement(SureDeleteForm, {\n      text: 'Вы действительно хотите удалить этот проект?',\n      mutation: mutation,\n      padding: false,\n      onCancel: () => dispatch(setModal(null)),\n      onSubmit: async (_, action) => {\n        await action({\n          variables: {\n            project: id,\n            folder: folder.id\n          }\n        });\n        dispatch(setModal(null));\n        if (callback) callback();\n      }\n    })\n  }]));\n}\nexport function onMemberAdd(dispatch, props) {\n  const {\n    query\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'Добавление участника',\n    component: () => /*#__PURE__*/React.createElement(AddMemberForm, {\n      query: query,\n      onSubmit: member => {\n        dispatch(addProjectMember(member));\n        dispatch(setModal(null));\n      }\n    })\n  }]));\n}\nexport function onScreenshotAdd(dispatch) {\n  dispatch(setModal([{\n    path: '/',\n    title: 'Добавление изображений',\n    component: () => /*#__PURE__*/React.createElement(AddFileForm, {\n      placeholder: 'Перетащите сюда изображения',\n      submitText: 'Добавить изображения',\n      onSubmit: files => {\n        for (let file of files) {\n          dispatch(addProjectScreenshot(file));\n        }\n\n        dispatch(setModal(null));\n      }\n    })\n  }]));\n}\nexport function onFileAdd(dispatch) {\n  dispatch(setModal([{\n    path: '/',\n    title: 'Добавление файлов',\n    component: () => /*#__PURE__*/React.createElement(AddFileForm, {\n      accept: 'application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint, text/plain, application/pdf, image/*',\n      onSubmit: files => {\n        for (let file of files) {\n          dispatch(addProjectFile(file));\n        }\n\n        dispatch(setModal(null));\n      }\n    })\n  }]));\n}\nexport function onSureDelete(dispatch, props) {\n  const {\n    id,\n    text,\n    removeAction\n  } = props;\n  dispatch(setModal([{\n    path: '/',\n    title: 'Удаление',\n    component: () => /*#__PURE__*/React.createElement(ContentSureDelete, {\n      text: text,\n      type: 'button',\n      onCancel: () => dispatch(setModal(null)),\n      onSubmit: async () => {\n        dispatch(removeAction(id));\n        dispatch(setModal(null));\n      }\n    })\n  }]));\n}\nexport function onProjectScreenshot(dispatch, props) {\n  const {\n    key,\n    screenshots\n  } = props;\n  dispatch(setModal(screenshots.map((screenshot, index) => ({\n    title: 'Изображение',\n    path: `/${screenshot.id}`,\n    home: screenshot.id === key,\n    component: ({\n      jump\n    }) => /*#__PURE__*/React.createElement(Screenshot, {\n      index: index,\n      screenshot: screenshot,\n      screenshots: screenshots,\n      onClick: jump\n    }),\n    back: false\n  })), 'l'));\n}","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/store/helpers/project.js"],"names":["React","Column","Button","Alert","Screenshot","AddMemberForm","AddFileForm","ProjectForm","DeleteForm","SureDeleteForm","Content","ContentSureDelete","ProjectCard","ProjectView","setDocuments","setMutate","addProjectMember","addProjectScreenshot","addProjectFile","removeProjectMember","removeProjectScreenshot","removeProjectFile","clearProjectMembers","clearProjectScreenshots","clearProjectFiles","setModal","setDrawer","setItem","onUserLink","onUserFolderAdd","onUserAboutMore","onFileLink","onProjectLink","dispatch","props","id","auth","liked","onAdd","onLike","owned","icon","title","content","project","member","company","_","key","screenshots","onProjectScreenshot","onProjectCreate","companies","categories","statuses","canEditStatus","mutation","query","onCompanyInputChange","onMemberAdd","onScreenshotAdd","onFileAdd","name","onSureDelete","text","removeAction","form","action","members","map","value","email","files","file","fileSizes","size","screenshot","screenshotSizes","projects","variables","input","body","description","preview","previewSize","length","presentation","category","status","data","createProject","type","message","err","onProjectEdit","filter","updateProject","user","onProjectDelete","color","deleteProject","onProjectAdd","folders","mutations","path","component","padding","folder","addProject","textAlign","createFolder","onCancel","callback","onProjectRemove","index","home","jump","back"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Button from '../../atomic-ui/components/Button'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Screenshot from '../../atomic-ui/components/Screenshot'\n\nimport AddMemberForm from '../../components/FormAddMember'\nimport AddFileForm from '../../components/FormAddFile'\nimport ProjectForm from '../../components/FormProject'\nimport DeleteForm from '../../components/FormDelete'\nimport SureDeleteForm, { Content as ContentSureDelete } from '../../components/FormSureDelete'\nimport ProjectCard from '../../components/ProjectCard'\nimport ProjectView from '../../components/ProjectView'\nimport { setDocuments } from '../actions/documents'\nimport {\n  setMutate,\n  addProjectMember,\n  addProjectScreenshot,\n  addProjectFile,\n  removeProjectMember,\n  removeProjectScreenshot,\n  removeProjectFile,\n  clearProjectMembers,\n  clearProjectScreenshots,\n  clearProjectFiles\n} from '../actions/root'\nimport { setModal } from '../actions/modal'\nimport { setDrawer } from '../actions/drawer'\nimport { setItem } from '../actions/snacks'\nimport { onUserLink, onUserFolderAdd, onUserAboutMore } from './user'\nimport { onFileLink } from '.'\n\nexport function onProjectLink(dispatch, props) {\n  const { id, auth, liked, onAdd, onLike, owned } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'work',\n      title: 'Проект',\n      content: (\n        <ProjectView\n          appearance={'clear'}\n          project={id}\n          owned={owned}\n          liked={liked}\n          onLike={onLike}\n          onAdd={onAdd}\n          onFileLink={() => onFileLink(dispatch, { id })}\n          onAboutMore={(project) => onUserAboutMore(dispatch, { project })}\n          onMemberLink={(member) => onUserLink(dispatch, { id: member, auth, owned })}\n          onCompanyLink={(company) => onUserLink(dispatch, { id: company, auth, owned })}\n          onScreenshotClick={(_, key, screenshots) =>\n            onProjectScreenshot(dispatch, {\n              screenshots,\n              key\n            })\n          }\n        />\n      )\n    })\n  )\n}\n\nexport function onProjectCreate(dispatch, props) {\n  const {\n    companies,\n    categories,\n    statuses,\n    canEditStatus,\n    mutation,\n    query,\n    onCompanyInputChange\n  } = props\n\n  dispatch(clearProjectMembers())\n  dispatch(clearProjectScreenshots())\n  dispatch(clearProjectFiles())\n\n  dispatch(\n    setDrawer({\n      icon: 'work',\n      title: 'Создание проекта',\n      content: (\n        <ProjectForm\n          mutation={mutation}\n          companies={companies}\n          categories={categories}\n          statuses={statuses}\n          appearance={'clear'}\n          canEditStatus={canEditStatus}\n          onMemberAdd={() => onMemberAdd(dispatch, { query })}\n          onScreenshotAdd={() => onScreenshotAdd(dispatch)}\n          onFileAdd={() => onFileAdd(dispatch)}\n          onMemberRemove={(name) => dispatch(removeProjectMember(name))}\n          onScreenshotRemove={(id) =>\n            onSureDelete(dispatch, {\n              id,\n              text: 'Вы действительно хотите удалить изображение?',\n              removeAction: removeProjectScreenshot\n            })\n          }\n          onFileRemove={(id) =>\n            onSureDelete(dispatch, {\n              id,\n              text: 'Вы действительно хотите удалить файл?',\n              removeAction: removeProjectFile\n            })\n          }\n          onCompanyInputChange={onCompanyInputChange}\n          onSubmit={async (form, action) => {\n            try {\n              const members = form.members.map((member) => member.value.email)\n              const files = form.files.map((file) => file.file)\n              const fileSizes = form.files.map((file) => file.size)\n              const screenshots = form.screenshots.map((screenshot) => screenshot.file)\n              const screenshotSizes = form.screenshots.map((screenshot) => screenshot.size)\n\n              const projects = await action({\n                variables: {\n                  input: {\n                    title: form.title,\n                    body: form.body,\n                    description: form.description,\n                    preview: form.preview?.file,\n                    company: form.company?.value?.email,\n                    previewSize: form.preview?.file?.size,\n                    members: members.length > 0 ? members : [],\n                    files: files.length > 0 ? files : [],\n                    fileSizes: fileSizes.length > 0 ? fileSizes : [],\n                    screenshots: screenshots.length > 0 ? screenshots : [],\n                    screenshotSizes: screenshotSizes.length > 0 ? screenshotSizes : [],\n                    presentation: form.presentation,\n                    category: form.category?.value,\n                    status: form.status?.value\n                  }\n                }\n              })\n              dispatch(setDocuments(projects.data.createProject))\n              dispatch(\n                setItem({\n                  type: 'success',\n                  message: 'Проект успешно создан'\n                })\n              )\n            } catch (err) {\n              dispatch(\n                setItem({\n                  type: 'error',\n                  message: 'Не удалось создать проект'\n                })\n              )\n            } finally {\n              dispatch(setDrawer(null))\n              dispatch(clearProjectMembers())\n              dispatch(clearProjectScreenshots())\n              dispatch(clearProjectFiles())\n            }\n          }}\n        />\n      )\n    })\n  )\n}\n\nexport function onProjectEdit(dispatch, props) {\n  const { id, auth, companies, categories, statuses, canEditStatus, mutation, query } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'work',\n      title: 'Редактирование проекта',\n      content: (\n        <ProjectForm\n          project={id}\n          mutation={mutation}\n          companies={companies}\n          categories={categories}\n          statuses={statuses}\n          appearance={'clear'}\n          canEditStatus={canEditStatus}\n          onMemberAdd={() => onMemberAdd(dispatch, { query })}\n          onScreenshotAdd={() => onScreenshotAdd(dispatch)}\n          onFileAdd={() => onFileAdd(dispatch)}\n          onMemberRemove={(name) => dispatch(removeProjectMember(name))}\n          onScreenshotRemove={(id) =>\n            onSureDelete(dispatch, {\n              id,\n              text: 'Вы действительно хотите удалить изображение?',\n              removeAction: removeProjectScreenshot\n            })\n          }\n          onFileRemove={(id) =>\n            onSureDelete(dispatch, {\n              id,\n              text: 'Вы действительно хотите удалить файл?',\n              removeAction: removeProjectFile\n            })\n          }\n          onSubmit={async (form, action) => {\n            try {\n              const members = form.members.map((member) => member.email || member.value?.email)\n              const files = form.files\n                .filter((screenshot) => !screenshot.file?.id)\n                .map((file) => (file.file?.type ? file.file : null))\n              const screenshots = form.screenshots\n                .filter((screenshot) => !screenshot.file?.id)\n                .map((screenshot) => (screenshot.file?.type ? screenshot.file : null))\n              const fileSizes = form.files.map((file) => file.size)\n              const screenshotSizes = form.screenshots.map((screenshot) => screenshot.size)\n\n              const projects = await action({\n                variables: {\n                  id,\n                  input: {\n                    title: form.title,\n                    body: form.body,\n                    description: form.description,\n                    preview: form.preview?.file,\n                    company: form.company?.value?.email,\n                    previewSize: form.preview?.file?.size,\n                    members: members,\n                    files: files,\n                    fileSizes: fileSizes,\n                    screenshots: screenshots,\n                    screenshotSizes: screenshotSizes,\n                    presentation: form.presentation,\n                    category: form.category?.value,\n                    status: form.status?.value\n                  }\n                }\n              })\n              dispatch(setDocuments(projects.data.updateProject))\n              dispatch(\n                setItem({\n                  type: 'success',\n                  message: 'Проект успешно отредактирован'\n                })\n              )\n            } catch (err) {\n              dispatch(\n                setItem({\n                  type: 'error',\n                  message: 'Не удалось отредактирвоать проект'\n                })\n              )\n            } finally {\n              dispatch(setDrawer(null))\n              dispatch(clearProjectMembers())\n              dispatch(clearProjectScreenshots())\n              dispatch(clearProjectFiles())\n            }\n          }}\n          onCommentLink={(user) => onUserLink(dispatch, { email: user, auth })}\n        />\n      )\n    })\n  )\n}\n\nexport function onProjectDelete(dispatch, props) {\n  const { id, auth, project, mutation } = props\n\n  dispatch(\n    setDrawer({\n      icon: 'delete',\n      color: 'red',\n      title: 'Удаление проекта',\n      content: (\n        <DeleteForm\n          mutation={mutation}\n          appearance={'clear'}\n          onCancel={() => dispatch(setDrawer(null))}\n          onSubmit={async (_, action) => {\n            try {\n              const projects = await action({\n                variables: { id }\n              })\n              dispatch(setDocuments(projects.data.deleteProject))\n              dispatch(\n                setItem({\n                  type: 'success',\n                  message: 'Проект успешно удален'\n                })\n              )\n            } catch {\n              dispatch(\n                setItem({\n                  type: 'error',\n                  message: 'Не удалось удалить проект'\n                })\n              )\n            } finally {\n              dispatch(setDrawer(null))\n            }\n          }}>\n          <ProjectCard\n            project={project}\n            appearance={'clear'}\n            onLink={() => onProjectLink(dispatch, { id: project.id })}\n            onAdd={() => onProjectAdd(dispatch, { id: project.id })}\n            onCompanyLink={(company) => onUserLink(dispatch, { id: company, auth })}\n            onScreenshotClick={(_, key) =>\n              onProjectScreenshot(dispatch, {\n                screenshots: [project.preview, ...project.screenshots],\n                key\n              })\n            }\n          />\n        </DeleteForm>\n      )\n    })\n  )\n}\n\nexport function onProjectAdd(dispatch, props) {\n  const { id, folders, mutations } = props\n\n  dispatch(\n    setModal([\n      {\n        path: '/',\n        title: 'В какую папку добавить проект?',\n        component: () => (\n          <Column style={{ padding: '15px' }}>\n            {folders && folders.length > 0 ? (\n              folders.map((folder) => (\n                <Button\n                  key={folder.id}\n                  onClick={() => {\n                    dispatch(setMutate(mutations.addProject, { project: id, folder: folder.id }))\n                    dispatch(setModal(null))\n                  }}>\n                  {folder.name}\n                </Button>\n              ))\n            ) : (\n              <Alert style={{ textAlign: 'center' }} width={'100%'}>\n                Папок нет\n              </Alert>\n            )}\n            <Button\n              onClick={() =>\n                onUserFolderAdd(dispatch, {\n                  mutation: mutations.createFolder,\n                  onCancel: () => onProjectAdd(dispatch, props),\n                  callback: () => onProjectAdd(dispatch, props)\n                })\n              }\n              revert>\n              Новая папка\n            </Button>\n          </Column>\n        )\n      }\n    ])\n  )\n}\n\nexport function onProjectRemove(dispatch, props) {\n  const { id, folder, mutation, callback } = props\n\n  dispatch(\n    setModal([\n      {\n        path: '/',\n        title: 'Удаление проекта из папки',\n        component: () => (\n          <SureDeleteForm\n            text={'Вы действительно хотите удалить этот проект?'}\n            mutation={mutation}\n            padding={false}\n            onCancel={() => dispatch(setModal(null))}\n            onSubmit={async (_, action) => {\n              await action({\n                variables: {\n                  project: id,\n                  folder: folder.id\n                }\n              })\n              dispatch(setModal(null))\n              if (callback) callback()\n            }}\n          />\n        )\n      }\n    ])\n  )\n}\n\nexport function onMemberAdd(dispatch, props) {\n  const { query } = props\n\n  dispatch(\n    setModal([\n      {\n        path: '/',\n        title: 'Добавление участника',\n        component: () => (\n          <AddMemberForm\n            query={query}\n            onSubmit={(member) => {\n              dispatch(addProjectMember(member))\n              dispatch(setModal(null))\n            }}\n          />\n        )\n      }\n    ])\n  )\n}\n\nexport function onScreenshotAdd(dispatch) {\n  dispatch(\n    setModal([\n      {\n        path: '/',\n        title: 'Добавление изображений',\n        component: () => (\n          <AddFileForm\n            placeholder={'Перетащите сюда изображения'}\n            submitText={'Добавить изображения'}\n            onSubmit={(files) => {\n              for (let file of files) {\n                dispatch(addProjectScreenshot(file))\n              }\n              dispatch(setModal(null))\n            }}\n          />\n        )\n      }\n    ])\n  )\n}\n\nexport function onFileAdd(dispatch) {\n  dispatch(\n    setModal([\n      {\n        path: '/',\n        title: 'Добавление файлов',\n        component: () => (\n          <AddFileForm\n            accept={\n              'application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint, text/plain, application/pdf, image/*'\n            }\n            onSubmit={(files) => {\n              for (let file of files) {\n                dispatch(addProjectFile(file))\n              }\n              dispatch(setModal(null))\n            }}\n          />\n        )\n      }\n    ])\n  )\n}\n\nexport function onSureDelete(dispatch, props) {\n  const { id, text, removeAction } = props\n\n  dispatch(\n    setModal([\n      {\n        path: '/',\n        title: 'Удаление',\n        component: () => (\n          <ContentSureDelete\n            text={text}\n            type={'button'}\n            onCancel={() => dispatch(setModal(null))}\n            onSubmit={async () => {\n              dispatch(removeAction(id))\n              dispatch(setModal(null))\n            }}\n          />\n        )\n      }\n    ])\n  )\n}\n\nexport function onProjectScreenshot(dispatch, props) {\n  const { key, screenshots } = props\n\n  dispatch(\n    setModal(\n      screenshots.map((screenshot, index) => ({\n        title: 'Изображение',\n        path: `/${screenshot.id}`,\n        home: screenshot.id === key,\n        component: ({ jump }) => (\n          <Screenshot\n            index={index}\n            screenshot={screenshot}\n            screenshots={screenshots}\n            onClick={jump}\n          />\n        ),\n        back: false\n      })),\n      'l'\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Column from '../atomic-ui/components/Column';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport { useHelper } from '../hooks/useHelper';\nimport { useMutate } from '../hooks/useMutate';\nimport DefaultLayout from '../layouts/default';\nimport ProjectCard from '../components/ProjectCard';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport { updateUser } from '../store/actions/user';\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserLink } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nimport { filters } from '../__mock__';\nconst TITLE = 'Проекты';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"projects__Wrap\",\n  componentId: \"sc-3yxn9c-0\"\n})([\"margin-top:120px;margin-bottom:80px;@media only screen and (max-width:480px){margin-top:0;}\"]);\n_c = Wrap;\nconst Container = styled.aside.withConfig({\n  displayName: \"projects__Container\",\n  componentId: \"sc-3yxn9c-1\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\n_c2 = Container;\n\nconst Projects = ({\n  store,\n  categories\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const router = useRouter();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const projects = useMemo(() => (documents || store.projects).map(project => project.category.id !== router.query.category), [documents, store]);\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: filters\n  }), /*#__PURE__*/React.createElement(Container, null, projects.length > 0 ? projects.map(project => {\n    var _user$projects, _project$company;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    if (project.category.id !== router.query.category) return null;\n    return /*#__PURE__*/React.createElement(ProjectCard, {\n      key: project.id,\n      project: project,\n      owned: owned,\n      liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user,\n        owned\n      }),\n      onLike: (user === null || user === void 0 ? void 0 : user.email) && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onAdd: (user === null || user === void 0 ? void 0 : user.email) && recall(onProjectAdd, {\n        id: project.id\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    });\n  }) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\"))));\n};\n\n_s(Projects, \"TpFcdCYjFP6vZyfNf88/I7u/PnU=\", false, function () {\n  return [useHelper, useMutate, useRouter, useSelector, useDispatch];\n});\n\n_c3 = Projects;\nexport var __N_SSP = true;\nexport default Projects;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Projects\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/projects.js"],"names":["React","useState","useMemo","useRouter","styled","useSelector","useDispatch","Column","Alert","DatePicker","Select","useHelper","useMutate","DefaultLayout","ProjectCard","FilterBar","SearchBar","updateUser","onProjectLink","onProjectAdd","onProjectScreenshot","onUserLink","queries","filters","TITLE","Wrap","Container","aside","Projects","store","categories","recall","mutate","router","user","documents","state","dispatch","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","projects","map","project","category","id","query","item","length","owned","find","candidate","likedProjects","auth","email","LIKE_PROJECT","response","data","likeProject","company","recipient","author","GET_USER_CHATS","mutation","SEND_MESSAGE","_","key","screenshots","preview","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Column from '../atomic-ui/components/Column'\nimport Alert from '../atomic-ui/components/Alert'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Select from '../atomic-ui/components/Select'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport { useMutate } from '../hooks/useMutate'\nimport DefaultLayout from '../layouts/default'\nimport ProjectCard from '../components/ProjectCard'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport { updateUser } from '../store/actions/user'\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project'\nimport { onUserLink } from '../store/helpers/user'\nimport queries from '../graphql/queries'\nimport { filters } from '../__mock__'\n\nconst TITLE = 'Проекты'\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst Container = styled.aside`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nconst Projects = ({ store, categories }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const router = useRouter()\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    documents: state.documents\n  }))\n  const dispatch = useDispatch()\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n\n  const projects = useMemo(\n    () =>\n      (documents || store.projects).map((project) => project.category.id !== router.query.category),\n    [documents, store]\n  )\n\n  return (\n    <DefaultLayout title={TITLE}>\n      <Wrap>\n        <SearchBar onChangeFilter={() => setVisibleFilter(!visibleFilter)} />\n\n        <FilterBar\n          isOpen={visibleFilter}\n          filters={[\n            <DatePicker\n              key={0}\n              value={date}\n              placeholder={'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />,\n            <Select\n              key={1}\n              options={categories}\n              placeholder={'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          ]}\n          options={filters}\n        />\n\n        <Container>\n          {projects.length > 0 ? (\n            projects.map((project) => {\n              const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n\n              if (project.category.id !== router.query.category) return null\n\n              return (\n                <ProjectCard\n                  key={project.id}\n                  project={project}\n                  owned={owned}\n                  liked={!!(user?.likedProjects || []).find((item) => item.id === project.id)}\n                  onLink={recall(onProjectLink, { id: project.id, auth: user, owned })}\n                  onLike={\n                    user?.email &&\n                    mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                      dispatch(updateUser(response.data.likeProject))\n                    )\n                  }\n                  onAdd={user?.email && recall(onProjectAdd, { id: project.id })}\n                  onCompanyLink={recall(onUserLink, {\n                    id: project.company?.email,\n                    auth: user?.email,\n                    recipient: project.author,\n                    query: queries.GET_USER_CHATS,\n                    mutation: queries.SEND_MESSAGE\n                  })}\n                  onScreenshotClick={(_, key) =>\n                    recall(onProjectScreenshot, {\n                      screenshots: [project.preview, ...project.screenshots],\n                      key\n                    })()\n                  }\n                />\n              )\n            })\n          ) : (\n            <Alert style={{ width: '100%', textAlign: 'center' }}>Проектов нет</Alert>\n          )}\n        </Container>\n      </Wrap>\n    </DefaultLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let projects = []\n  let categories = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_PROJECTS,\n      variables: {\n        status: 'PUBLISHED'\n      }\n    })\n\n    if (response && response.data) {\n      projects = response.data.getProjects\n      categories = response.data.getCategories\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { projects },\n      categories\n    }\n  }\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
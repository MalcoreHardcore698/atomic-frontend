{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Controller } from 'react-hook-form';\nimport { useQuery } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Message from '../../atomic-ui/components/Message';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Text from '../../atomic-ui/components/Text';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Title from '../../atomic-ui/components/Title';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Select from '../../atomic-ui/components/Select';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { getLabelCategory } from '../../utils/functions';\nimport { Loader } from '../Styled';\nimport Form from '../Form';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"FormTicket__Wrap\",\n  componentId: \"n5aw2g-0\"\n})([\"width:100%;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"FormTicket__Header\",\n  componentId: \"n5aw2g-1\"\n})([\"justify-content:space-between;width:100%;\"]);\nexport const Messages = styled(Column).withConfig({\n  displayName: \"FormTicket__Messages\",\n  componentId: \"n5aw2g-2\"\n})([\"position:relative;background:#fbfbfb;border-radius:var(--surface-border-radius);padding:var(--default-gap);padding-top:55px;flex-grow:1;\"]);\nexport const Meta = styled(Row).withConfig({\n  displayName: \"FormTicket__Meta\",\n  componentId: \"n5aw2g-3\"\n})([\"position:absolute;top:0;left:0;width:100%;justify-content:space-between;padding:8px var(--default-gap);border-radius:var(--surface-border-radius) var(--surface-border-radius) 0 0;background:var(--ghost-color-background);\"]);\nexport const Empty = styled(Text).withConfig({\n  displayName: \"FormTicket__Empty\",\n  componentId: \"n5aw2g-4\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;\"]);\nexport const LIMIT_USERS = 15;\nexport const Ticket = ({\n  ticket,\n  appearance,\n  mutation,\n  className,\n  onFinish,\n  onReport,\n  onLink,\n  onAttach,\n  onSubmit,\n  ...props\n}) => {\n  const [offsetUsers, setOffsetUsers] = useState(0); // const [usersSelectInput, setUsersSelectInput] = useState('')\n\n  const [users, setUsers] = useState([]);\n  const {\n    data,\n    loading: loadingTicket,\n    error: errorTicket\n  } = ticket ? useQuery(queries.GET_TICKET, {\n    variables: {\n      id: ticket\n    }\n  }) : {\n    data: {\n      getTicket: {}\n    },\n    loading: false,\n    error: false\n  };\n  const {\n    data: dataUsers,\n    loading: loadingUsers,\n    // refetch: searchUsers,\n    fetchMore: updateUsers\n  } = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      offset: offsetUsers,\n      limit: LIMIT_USERS\n    }\n  });\n  const {\n    data: dataCategories,\n    loading: loadingCategories\n  } = useQuery(queries.GET_CATEGORIES, {\n    variables: {\n      type: 'TICKET'\n    }\n  });\n  useEffect(() => {\n    if (!loadingUsers && dataUsers) {\n      setUsers(prev => [...prev, ...dataUsers.getUsers]);\n    }\n  }, [dataUsers, loadingUsers]);\n\n  if (!ticket) {\n    return /*#__PURE__*/React.createElement(Form, {\n      className: className,\n      appearance: appearance,\n      mutation: mutation,\n      onSubmit: onSubmit\n    }, ({\n      register,\n      loading,\n      errors,\n      control,\n      getValues\n    }) => {\n      var _data$getTicket, _data$getTicket2, _data$getTicket3, _data$getTicket4;\n\n      return !loadingTicket && data ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n        tag: 'h4'\n      }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.title && /*#__PURE__*/React.createElement(Alert, {\n        style: {\n          width: '100%'\n        },\n        appearance: 'error'\n      }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(Input, {\n        type: 'text',\n        name: 'title',\n        ref: register({\n          required: true\n        }),\n        defaultValue: getValues('title') || ((_data$getTicket = data.getTicket) === null || _data$getTicket === void 0 ? void 0 : _data$getTicket.title),\n        placeholder: 'Название',\n        appearance: 'ghost',\n        disabled: loading\n      }), /*#__PURE__*/React.createElement(Controller, {\n        name: 'author',\n        control: control,\n        defaultValue: (_data$getTicket2 = data.getTicket) !== null && _data$getTicket2 !== void 0 && _data$getTicket2.author ? {\n          value: data.getTicket.author.id,\n          label: data.getTicket.author.name\n        } : null,\n        render: ({\n          value,\n          onChange\n        }) => /*#__PURE__*/React.createElement(Select, {\n          options: users.map(user => ({\n            value: user,\n            label: user.name\n          })),\n          appearance: 'ghost',\n          defaultValue: value // inputValue={usersSelectInput}\n          ,\n          placeholder: 'Выберите автора обращения',\n          onChange: onChange // onInputChange={(input) => setUsersSelectInput(input)}\n          // onKeyDown={(e) => {\n          //   // Pressed ENTER\n          //   if (e.keyCode === 13) {\n          //     searchUsers({\n          //       search: usersSelectInput\n          //     })\n          //   }\n          // }}\n          ,\n          onMenuScrollToBottom: async () => {\n            await updateUsers({\n              variables: {\n                offset: offsetUsers,\n                limit: LIMIT_USERS\n              },\n              updateQuery: (prev, next) => {\n                console.log(prev, next);\n                return { ...prev,\n                  ...next\n                };\n              }\n            });\n            setOffsetUsers(prev => prev + LIMIT_USERS);\n          },\n          isLoading: loadingUsers // isSearchable\n\n        })\n      }), /*#__PURE__*/React.createElement(Controller, {\n        name: 'counsellor',\n        control: control,\n        defaultValue: (_data$getTicket3 = data.getTicket) !== null && _data$getTicket3 !== void 0 && _data$getTicket3.counsellor ? {\n          value: data.getTicket.counsellor.id,\n          label: data.getTicket.counsellor.name\n        } : null,\n        render: ({\n          value,\n          onChange\n        }) => /*#__PURE__*/React.createElement(Select, {\n          options: !loadingUsers && dataUsers ? dataUsers.getUsers.map(user => ({\n            value: user,\n            label: user.name\n          })) : [],\n          appearance: 'ghost',\n          defaultValue: value,\n          placeholder: 'Выберите советника',\n          onChange: onChange,\n          onMenuScrollToBottom: async () => {\n            await updateUsers({\n              variables: {\n                offset: offsetUsers,\n                limit: LIMIT_USERS\n              },\n              updateQuery: (prev, next) => {\n                console.log(prev, next);\n                return { ...prev,\n                  ...next\n                };\n              }\n            });\n            setOffsetUsers(prev => prev + LIMIT_USERS);\n          },\n          isLoading: loadingUsers\n        })\n      }), /*#__PURE__*/React.createElement(Controller, {\n        name: 'category',\n        control: control,\n        defaultValue: (_data$getTicket4 = data.getTicket) !== null && _data$getTicket4 !== void 0 && _data$getTicket4.category ? {\n          value: data.getTicket.category.id,\n          label: getLabelCategory(data.getTicket.category.name)\n        } : null,\n        render: ({\n          value,\n          onChange\n        }) => /*#__PURE__*/React.createElement(Select, {\n          appearance: 'ghost',\n          placeholder: 'Выберите раздел',\n          options: !loadingCategories && dataCategories ? dataCategories.getCategories.filter(item => item.type === 'TICKET').map(item => ({\n            value: item.id,\n            label: getLabelCategory(item.name)\n          })) : [],\n          onChange: onChange,\n          defaultValue: value,\n          isLoading: loadingCategories,\n          isClearable: true\n        })\n      })), /*#__PURE__*/React.createElement(Divider, {\n        clear: true\n      }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n        style: {\n          flexGrow: 1\n        },\n        type: 'submit',\n        disabled: loading\n      }, \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C\"))) : errorTicket ? /*#__PURE__*/React.createElement(Alert, {\n        appearance: 'error',\n        style: {\n          width: '100%',\n          textAlign: 'center'\n        }\n      }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0441\\u0442\\u0430\\u0442\\u044C\\u0435\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Wrap, props, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Difinition, {\n    label: 'Номер обращения',\n    text: (ticket === null || ticket === void 0 ? void 0 : ticket.token) || '-'\n  }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    onClick: onFinish,\n    disabled: !ticket\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: onReport,\n    kind: 'icon',\n    appearance: 'red',\n    disabled: !ticket\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'flag',\n    stroke: 'white'\n  })))), /*#__PURE__*/React.createElement(Messages, null, /*#__PURE__*/React.createElement(Meta, null, /*#__PURE__*/React.createElement(Text, null, \"\\u0422\\u0435\\u043C\\u0430: \", ticket.title), /*#__PURE__*/React.createElement(Text, null, ticket.createdAt)), ticket && ticket.messages && ticket.messages.length > 0 ? ticket.messages.map(message => /*#__PURE__*/React.createElement(Message, {\n    key: message.id,\n    avatar: message.avatar,\n    side: message.side,\n    name: message.name,\n    text: message.text,\n    time: message.time,\n    onLink: onLink\n  })) : /*#__PURE__*/React.createElement(Empty, null, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\")), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    onSubmit: onAttach\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'attach',\n    stroke: 'white'\n  })), /*#__PURE__*/React.createElement(Input, {\n    placeholder: 'Отправьте сообщенение...',\n    appearance: appearance\n  }), /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    onSubmit: onSubmit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'send',\n    stroke: 'white'\n  }))));\n};\nexport default Ticket;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormTicket/index.js"],"names":["React","useState","useEffect","styled","Controller","useQuery","Row","Column","Message","Input","Button","Icon","Text","Difinition","Title","Alert","Select","Divider","Spinner","getLabelCategory","Loader","Form","queries","Wrap","Header","Messages","Meta","Empty","LIMIT_USERS","Ticket","ticket","appearance","mutation","className","onFinish","onReport","onLink","onAttach","onSubmit","props","offsetUsers","setOffsetUsers","users","setUsers","data","loading","loadingTicket","error","errorTicket","GET_TICKET","variables","id","getTicket","dataUsers","loadingUsers","fetchMore","updateUsers","GET_USERS_FOR_TICKET","offset","limit","dataCategories","loadingCategories","GET_CATEGORIES","type","prev","getUsers","register","errors","control","getValues","title","width","required","author","value","label","name","onChange","map","user","updateQuery","next","console","log","counsellor","category","getCategories","filter","item","flexGrow","textAlign","token","createdAt","messages","length","message","avatar","side","text","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Controller } from 'react-hook-form'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Message from '../../atomic-ui/components/Message'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Text from '../../atomic-ui/components/Text'\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport Title from '../../atomic-ui/components/Title'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Select from '../../atomic-ui/components/Select'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { getLabelCategory } from '../../utils/functions'\nimport { Loader } from '../Styled'\nimport Form from '../Form'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled(Column)`\n  width: 100%;\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n  width: 100%;\n`\n\nexport const Messages = styled(Column)`\n  position: relative;\n  background: #fbfbfb;\n  border-radius: var(--surface-border-radius);\n  padding: var(--default-gap);\n  padding-top: 55px;\n  flex-grow: 1;\n`\n\nexport const Meta = styled(Row)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  justify-content: space-between;\n  padding: 8px var(--default-gap);\n  border-radius: var(--surface-border-radius) var(--surface-border-radius) 0 0;\n  background: var(--ghost-color-background);\n`\n\nexport const Empty = styled(Text)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`\n\nexport const LIMIT_USERS = 15\n\nexport const Ticket = ({\n  ticket,\n  appearance,\n  mutation,\n  className,\n  onFinish,\n  onReport,\n  onLink,\n  onAttach,\n  onSubmit,\n  ...props\n}) => {\n  const [offsetUsers, setOffsetUsers] = useState(0)\n  // const [usersSelectInput, setUsersSelectInput] = useState('')\n  const [users, setUsers] = useState([])\n\n  const { data, loading: loadingTicket, error: errorTicket } = ticket\n    ? useQuery(queries.GET_TICKET, {\n        variables: {\n          id: ticket\n        }\n      })\n    : { data: { getTicket: {} }, loading: false, error: false }\n\n  const {\n    data: dataUsers,\n    loading: loadingUsers,\n    // refetch: searchUsers,\n    fetchMore: updateUsers\n  } = useQuery(queries.GET_USERS_FOR_TICKET, {\n    variables: {\n      offset: offsetUsers,\n      limit: LIMIT_USERS\n    }\n  })\n\n  const { data: dataCategories, loading: loadingCategories } = useQuery(queries.GET_CATEGORIES, {\n    variables: {\n      type: 'TICKET'\n    }\n  })\n\n  useEffect(() => {\n    if (!loadingUsers && dataUsers) {\n      setUsers((prev) => [...prev, ...dataUsers.getUsers])\n    }\n  }, [dataUsers, loadingUsers])\n\n  if (!ticket) {\n    return (\n      <Form className={className} appearance={appearance} mutation={mutation} onSubmit={onSubmit}>\n        {({ register, loading, errors, control, getValues }) =>\n          !loadingTicket && data ? (\n            <React.Fragment>\n              <Column>\n                <Title tag={'h4'}>Основное</Title>\n\n                {errors && errors.title && (\n                  <Alert style={{ width: '100%' }} appearance={'error'}>\n                    Введите название обращение\n                  </Alert>\n                )}\n                <Input\n                  type={'text'}\n                  name={'title'}\n                  ref={register({ required: true })}\n                  defaultValue={getValues('title') || data.getTicket?.title}\n                  placeholder={'Название'}\n                  appearance={'ghost'}\n                  disabled={loading}\n                />\n\n                <Controller\n                  name={'author'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.author\n                      ? {\n                          value: data.getTicket.author.id,\n                          label: data.getTicket.author.name\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      options={users.map((user) => ({\n                        value: user,\n                        label: user.name\n                      }))}\n                      appearance={'ghost'}\n                      defaultValue={value}\n                      // inputValue={usersSelectInput}\n                      placeholder={'Выберите автора обращения'}\n                      onChange={onChange}\n                      // onInputChange={(input) => setUsersSelectInput(input)}\n                      // onKeyDown={(e) => {\n                      //   // Pressed ENTER\n                      //   if (e.keyCode === 13) {\n                      //     searchUsers({\n                      //       search: usersSelectInput\n                      //     })\n                      //   }\n                      // }}\n                      onMenuScrollToBottom={async () => {\n                        await updateUsers({\n                          variables: {\n                            offset: offsetUsers,\n                            limit: LIMIT_USERS\n                          },\n                          updateQuery: (prev, next) => {\n                            console.log(prev, next)\n                            return { ...prev, ...next }\n                          }\n                        })\n                        setOffsetUsers((prev) => prev + LIMIT_USERS)\n                      }}\n                      isLoading={loadingUsers}\n                      // isSearchable\n                    />\n                  )}\n                />\n\n                <Controller\n                  name={'counsellor'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.counsellor\n                      ? {\n                          value: data.getTicket.counsellor.id,\n                          label: data.getTicket.counsellor.name\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      options={\n                        !loadingUsers && dataUsers\n                          ? dataUsers.getUsers.map((user) => ({\n                              value: user,\n                              label: user.name\n                            }))\n                          : []\n                      }\n                      appearance={'ghost'}\n                      defaultValue={value}\n                      placeholder={'Выберите советника'}\n                      onChange={onChange}\n                      onMenuScrollToBottom={async () => {\n                        await updateUsers({\n                          variables: {\n                            offset: offsetUsers,\n                            limit: LIMIT_USERS\n                          },\n                          updateQuery: (prev, next) => {\n                            console.log(prev, next)\n                            return { ...prev, ...next }\n                          }\n                        })\n                        setOffsetUsers((prev) => prev + LIMIT_USERS)\n                      }}\n                      isLoading={loadingUsers}\n                    />\n                  )}\n                />\n\n                <Controller\n                  name={'category'}\n                  control={control}\n                  defaultValue={\n                    data.getTicket?.category\n                      ? {\n                          value: data.getTicket.category.id,\n                          label: getLabelCategory(data.getTicket.category.name)\n                        }\n                      : null\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      appearance={'ghost'}\n                      placeholder={'Выберите раздел'}\n                      options={\n                        !loadingCategories && dataCategories\n                          ? dataCategories.getCategories\n                              .filter((item) => item.type === 'TICKET')\n                              .map((item) => ({\n                                value: item.id,\n                                label: getLabelCategory(item.name)\n                              }))\n                          : []\n                      }\n                      onChange={onChange}\n                      defaultValue={value}\n                      isLoading={loadingCategories}\n                      isClearable\n                    />\n                  )}\n                />\n              </Column>\n\n              <Divider clear />\n\n              <Row>\n                <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n                  Создать\n                </Button>\n              </Row>\n            </React.Fragment>\n          ) : errorTicket ? (\n            <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n              Упс! Не удалось загрузить информацию о статье\n            </Alert>\n          ) : (\n            <Loader>\n              <Spinner />\n            </Loader>\n          )\n        }\n      </Form>\n    )\n  }\n\n  return (\n    <Wrap {...props}>\n      <Header>\n        <Difinition label={'Номер обращения'} text={ticket?.token || '-'} />\n\n        <Row>\n          <Button onClick={onFinish} disabled={!ticket}>\n            Закрыть обращение\n          </Button>\n          <Button onClick={onReport} kind={'icon'} appearance={'red'} disabled={!ticket}>\n            <Icon icon={'flag'} stroke={'white'} />\n          </Button>\n        </Row>\n      </Header>\n\n      <Messages>\n        <Meta>\n          <Text>Тема: {ticket.title}</Text>\n          <Text>{ticket.createdAt}</Text>\n        </Meta>\n\n        {ticket && ticket.messages && ticket.messages.length > 0 ? (\n          ticket.messages.map((message) => (\n            <Message\n              key={message.id}\n              avatar={message.avatar}\n              side={message.side}\n              name={message.name}\n              text={message.text}\n              time={message.time}\n              onLink={onLink}\n            />\n          ))\n        ) : (\n          <Empty>Выберите обращение</Empty>\n        )}\n      </Messages>\n\n      <Row>\n        <Button kind={'icon'} onSubmit={onAttach}>\n          <Icon icon={'attach'} stroke={'white'} />\n        </Button>\n        <Input placeholder={'Отправьте сообщенение...'} appearance={appearance} />\n        <Button kind={'icon'} onSubmit={onSubmit}>\n          <Icon icon={'send'} stroke={'white'} />\n        </Button>\n      </Row>\n    </Wrap>\n  )\n}\n\nexport default Ticket\n"]},"metadata":{},"sourceType":"module"}
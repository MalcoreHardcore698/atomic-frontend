{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { createSelectOptions, getLabelPermission } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nimport { useQuery } from '@apollo/react-hooks';\nimport queries from '../../graphql/queries';\nimport { Loader } from '../Styled';\nimport Spinner from '../../atomic-ui/components/Spinner';\nexport const Role = ({\n  role,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  var _role$permissions;\n\n  const [permissionsError, setPermissionsError] = useState(false);\n  const [selectedPermissions, setSelectedPermissions] = useState((role === null || role === void 0 ? void 0 : (_role$permissions = role.permissions) === null || _role$permissions === void 0 ? void 0 : _role$permissions.map(permission => ({\n    value: permission,\n    label: getLabelPermission(permission)\n  }))) || null);\n  const {\n    data: dataPermissions,\n    loading: loadingPermissions\n  } = useQuery(queries.GET_PERMISSIONS);\n  const [permissions, setPermissions] = useState([]);\n  useEffect(() => {\n    if (!loadingPermissions && dataPermissions) {\n      setPermissions(dataPermissions.getPermissions);\n    }\n  }, [loadingPermissions, dataPermissions]);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => {\n      if ((selectedPermissions === null || selectedPermissions === void 0 ? void 0 : selectedPermissions.length) > 0) {\n        onSubmit({ ...form,\n          permissions: selectedPermissions\n        }, action);\n      } else {\n        setPermissionsError(true);\n      }\n    }\n  }, ({\n    register,\n    loading,\n    errors,\n    getValues\n  }) => !loading ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.name && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0440\\u043E\\u043B\\u0438 \\u0434\\u043E\\u043B\\u0436\\u043D\\u043E \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u043B\\u0430\\u0442\\u0438\\u043D\\u0441\\u043A\\u0438\\u0435 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u044B\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: 'name',\n    ref: register({\n      required: true,\n      pattern: /[A-Za-z]/\n    }),\n    defaultValue: (role === null || role === void 0 ? void 0 : role.name) || getValues('name'),\n    placeholder: 'Название',\n    appearance: 'ghost',\n    disabled: loading\n  }), permissionsError && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u043F\\u0440\\u0438\\u0432\\u0438\\u043B\\u0435\\u0433\\u0438\\u0439 \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u0445\\u043E\\u0442\\u044F \\u0431\\u044B \\u043E\\u0434\\u0438\\u043D \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\"), /*#__PURE__*/React.createElement(Select, {\n    name: 'permissions',\n    appearance: 'ghost',\n    defaultValue: selectedPermissions,\n    onChange: value => {\n      setSelectedPermissions(value);\n      setPermissionsError(false);\n    },\n    placeholder: 'Выберите привелегии',\n    options: createSelectOptions(permissions).map(option => ({ ...option,\n      label: getLabelPermission(option.label)\n    })),\n    isLoading: loading || loadingPermissions,\n    isClearable: true,\n    isMulti: true\n  })), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      flexGrow: 1\n    },\n    type: 'submit',\n    disabled: loading\n  }, role ? 'Сохранить' : 'Создать'))) : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)));\n};\nexport default Role;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/FormRole/index.js"],"names":["React","useEffect","useState","Row","Column","Title","Input","Button","Select","Alert","createSelectOptions","getLabelPermission","Form","useQuery","queries","Loader","Spinner","Role","role","mutation","appearance","className","onSubmit","permissionsError","setPermissionsError","selectedPermissions","setSelectedPermissions","permissions","map","permission","value","label","data","dataPermissions","loading","loadingPermissions","GET_PERMISSIONS","setPermissions","getPermissions","form","action","length","register","errors","getValues","name","width","required","pattern","option","flexGrow"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Select from '../../atomic-ui/components/Select'\nimport Alert from '../../atomic-ui/components/Alert'\nimport { createSelectOptions, getLabelPermission } from '../../atomic-ui/utils/functions'\n\nimport Form from '../Form'\nimport { useQuery } from '@apollo/react-hooks'\nimport queries from '../../graphql/queries'\nimport { Loader } from '../Styled'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nexport const Role = ({ role, mutation, appearance, className, onSubmit }) => {\n  const [permissionsError, setPermissionsError] = useState(false)\n  const [selectedPermissions, setSelectedPermissions] = useState(\n    role?.permissions?.map((permission) => ({\n      value: permission,\n      label: getLabelPermission(permission)\n    })) || null\n  )\n\n  const { data: dataPermissions, loading: loadingPermissions } = useQuery(queries.GET_PERMISSIONS)\n\n  const [permissions, setPermissions] = useState([])\n\n  useEffect(() => {\n    if (!loadingPermissions && dataPermissions) {\n      setPermissions(dataPermissions.getPermissions)\n    }\n  }, [loadingPermissions, dataPermissions])\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) => {\n        if (selectedPermissions?.length > 0) {\n          onSubmit({ ...form, permissions: selectedPermissions }, action)\n        } else {\n          setPermissionsError(true)\n        }\n      }}>\n      {({ register, loading, errors, getValues }) =>\n        !loading ? (\n          <React.Fragment>\n            <Column>\n              <Title tag={'h4'}>Основное</Title>\n\n              {errors && errors.name && (\n                <Alert style={{ width: '100%' }} appearance={'error'}>\n                  Название роли должно содержать только латинские символы\n                </Alert>\n              )}\n              <Input\n                type={'text'}\n                name={'name'}\n                ref={register({\n                  required: true,\n                  pattern: /[A-Za-z]/\n                })}\n                defaultValue={role?.name || getValues('name')}\n                placeholder={'Название'}\n                appearance={'ghost'}\n                disabled={loading}\n              />\n\n              {permissionsError && (\n                <Alert style={{ width: '100%' }} appearance={'error'}>\n                  Список привилегий должен содержать хотя бы один элемент\n                </Alert>\n              )}\n              <Select\n                name={'permissions'}\n                appearance={'ghost'}\n                defaultValue={selectedPermissions}\n                onChange={(value) => {\n                  setSelectedPermissions(value)\n                  setPermissionsError(false)\n                }}\n                placeholder={'Выберите привелегии'}\n                options={createSelectOptions(permissions).map((option) => ({\n                  ...option,\n                  label: getLabelPermission(option.label)\n                }))}\n                isLoading={loading || loadingPermissions}\n                isClearable\n                isMulti\n              />\n            </Column>\n\n            <Row>\n              <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n                {role ? 'Сохранить' : 'Создать'}\n              </Button>\n            </Row>\n          </React.Fragment>\n        ) : (\n          <Loader>\n            <Spinner />\n          </Loader>\n        )\n      }\n    </Form>\n  )\n}\n\nexport default Role\n"]},"metadata":{},"sourceType":"module"}
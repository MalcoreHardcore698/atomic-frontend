{"ast":null,"code":"import React, { useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport Column from '../atomic-ui/components/Column';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport DefaultLayout from '../layouts/default';\nimport ArticleCard from '../components/ArticleCard';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport { onArticleLink } from '../store/helpers/article';\nimport queries from '../graphql/queries';\nimport { filters } from '../__mock__';\nconst TITLE = 'Статьи';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"articles__Wrap\",\n  componentId: \"x1h2c3-0\"\n})([\"margin-top:120px;margin-bottom:80px;@media only screen and (max-width:480px){margin-top:0;}\"]);\nconst Container = styled.aside.withConfig({\n  displayName: \"articles__Container\",\n  componentId: \"x1h2c3-1\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\n\nconst Articles = ({\n  store,\n  categories\n}) => {\n  const recall = useHelper();\n  const documents = useSelector(state => state.documents);\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const articles = useMemo(() => documents || store.articles, [documents, store]);\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: filters\n  }), /*#__PURE__*/React.createElement(Container, null, articles.length > 0 ? articles.map(article => /*#__PURE__*/React.createElement(ArticleCard, {\n    key: article.id,\n    article: article,\n    onLink: recall(onArticleLink, {\n      id: article.id,\n      article\n    })\n  })) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0435\\u0439 \\u043D\\u0435\\u0442\"))));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let articles = [];\n  let categories = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_ARTICLES,\n      variables: {\n        status: 'PUBLISHED'\n      }\n    });\n\n    if (response && response.data) {\n      articles = response.data.getArticles;\n      categories = response.data.getCategories;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        articles\n      },\n      categories\n    }\n  };\n}\nexport default Articles;","map":null,"metadata":{},"sourceType":"module"}
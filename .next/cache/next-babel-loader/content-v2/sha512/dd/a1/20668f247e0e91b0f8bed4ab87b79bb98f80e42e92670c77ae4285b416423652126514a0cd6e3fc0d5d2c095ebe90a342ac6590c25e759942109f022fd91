{"ast":null,"code":"import React from 'react';\nimport ContentLayout from '../layouts/content';\nimport { GridAside as Container } from '../components/Styled';\nimport UserList from '../components/UserList';\nimport queries from '../graphql/queries';\nconst TITLE = 'Авторы';\n\nconst Creators = ({\n  store\n}) => /*#__PURE__*/React.createElement(ContentLayout, {\n  title: TITLE,\n  filters: [{\n    type: 'DATEPICKER',\n    placeholder: 'Дата регистарции'\n  }, {\n    type: 'SELECT',\n    placeholder: 'Компания',\n    options: store === null || store === void 0 ? void 0 : store.companies.map(company => ({\n      value: company.email,\n      label: company.name\n    }))\n  }],\n  options: [{\n    label: 'Компания',\n    value: 'company'\n  }, {\n    label: 'Участники',\n    value: 'members'\n  }, {\n    label: 'Дата регистарции',\n    value: 'createdAt'\n  }],\n  query: queries.GET_USERS,\n  store: {\n    documents: store === null || store === void 0 ? void 0 : store.users\n  }\n}, ({\n  documents\n}) => /*#__PURE__*/React.createElement(Container, null, /*#__PURE__*/React.createElement(UserList, {\n  initialList: documents\n})));\n\n_c = Creators;\nexport var __N_SSP = true;\nexport default Creators;\n\nvar _c;\n\n$RefreshReg$(_c, \"Creators\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/creators.js"],"names":["React","ContentLayout","GridAside","Container","UserList","queries","TITLE","Creators","store","type","placeholder","options","companies","map","company","value","email","label","name","GET_USERS","documents","users"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,SAASC,SAAS,IAAIC,SAAtB,QAAuC,sBAAvC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,KAAK,GAAG,QAAd;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,kBACf,oBAAC,aAAD;AACE,EAAA,KAAK,EAAEF,KADT;AAEE,EAAA,OAAO,EAAE,CACP;AAAEG,IAAAA,IAAI,EAAE,YAAR;AAAsBC,IAAAA,WAAW,EAAE;AAAnC,GADO,EAEP;AACED,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,WAAW,EAAE,UAFf;AAGEC,IAAAA,OAAO,EAAEH,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEI,SAAP,CAAiBC,GAAjB,CAAsBC,OAAD,KAAc;AAC1CC,MAAAA,KAAK,EAAED,OAAO,CAACE,KAD2B;AAE1CC,MAAAA,KAAK,EAAEH,OAAO,CAACI;AAF2B,KAAd,CAArB;AAHX,GAFO,CAFX;AAaE,EAAA,OAAO,EAAE,CACP;AAAED,IAAAA,KAAK,EAAE,UAAT;AAAqBF,IAAAA,KAAK,EAAE;AAA5B,GADO,EAEP;AAAEE,IAAAA,KAAK,EAAE,WAAT;AAAsBF,IAAAA,KAAK,EAAE;AAA7B,GAFO,EAGP;AAAEE,IAAAA,KAAK,EAAE,kBAAT;AAA6BF,IAAAA,KAAK,EAAE;AAApC,GAHO,CAbX;AAkBE,EAAA,KAAK,EAAEV,OAAO,CAACc,SAlBjB;AAmBE,EAAA,KAAK,EAAE;AAAEC,IAAAA,SAAS,EAAEZ,KAAF,aAAEA,KAAF,uBAAEA,KAAK,CAAEa;AAApB;AAnBT,GAoBG,CAAC;AAAED,EAAAA;AAAF,CAAD,kBACC,oBAAC,SAAD,qBACE,oBAAC,QAAD;AAAU,EAAA,WAAW,EAAEA;AAAvB,EADF,CArBJ,CADF;;KAAMb,Q;;AA6DN,eAAeA,QAAf","sourcesContent":["import React from 'react'\n\nimport { initializeApollo } from '../apollo'\nimport ContentLayout from '../layouts/content'\nimport { GridAside as Container } from '../components/Styled'\nimport UserList from '../components/UserList'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Авторы'\nconst START_OFFSET = 6\n\nconst Creators = ({ store }) => (\n  <ContentLayout\n    title={TITLE}\n    filters={[\n      { type: 'DATEPICKER', placeholder: 'Дата регистарции' },\n      {\n        type: 'SELECT',\n        placeholder: 'Компания',\n        options: store?.companies.map((company) => ({\n          value: company.email,\n          label: company.name\n        }))\n      }\n    ]}\n    options={[\n      { label: 'Компания', value: 'company' },\n      { label: 'Участники', value: 'members' },\n      { label: 'Дата регистарции', value: 'createdAt' }\n    ]}\n    query={queries.GET_USERS}\n    store={{ documents: store?.users }}>\n    {({ documents }) => (\n      <Container>\n        <UserList initialList={documents} />\n      </Container>\n    )}\n  </ContentLayout>\n)\n\nexport async function getServerSideProps({ query }) {\n  const client = initializeApollo()\n\n  let users = []\n  let companies = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS,\n      variables: {\n        offset: query?.page * START_OFFSET || 0,\n        limit: START_OFFSET\n      }\n    })\n\n    if (response && response.data) {\n      users = response.data.getUsers\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        users,\n        companies\n      }\n    }\n  }\n}\n\nexport default Creators\n"]},"metadata":{},"sourceType":"module"}
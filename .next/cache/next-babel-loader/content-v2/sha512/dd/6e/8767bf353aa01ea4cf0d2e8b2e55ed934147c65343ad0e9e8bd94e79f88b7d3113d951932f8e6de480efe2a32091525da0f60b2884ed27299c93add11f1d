{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/project';\nimport ProjectSuit from '../../components/ProjectSuit';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { setDocuments } from '../../store/actions/documents';\nimport { useProject } from '../../hooks/useProject';\nimport { projects as filterConfig } from '../../components/FilterBar/config';\nimport { COMMON_START_OFFSET, DASHBOARD_LOAD_LIMIT } from '../../constants';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\n\nconst Projects = () => {\n  const {\n    onCreate,\n    onEdit,\n    ...methods\n  } = useProject({\n    isManage: true\n  });\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    icon: 'work',\n    template: template,\n    entityType: 'project',\n    getType: 'getProjects',\n    filterConfig: filterConfig,\n    limit: DASHBOARD_LOAD_LIMIT,\n    emptyMessage: 'Проектов нет',\n    getQuery: queries.GET_PROJECTS,\n    buttonCreateText: 'Создать проект',\n    deleteEntityMultiText: 'проекты',\n    deleteEntitySingleText: 'проект',\n    startOffset: COMMON_START_OFFSET,\n    deleteQuery: queries.DELETE_PROJECT,\n    render: document => /*#__PURE__*/React.createElement(ProjectSuit, _extends({}, methods, {\n      project: document,\n      withSocials: false,\n      preview: true,\n      withStatus: true\n    })),\n    onCreate: onCreate,\n    onEdit: onEdit\n  });\n};\n\nexport default Projects;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport Column from '../atomic-ui/components/Column';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Select from '../atomic-ui/components/Select';\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll';\nimport DefaultLayout from '../layouts/default';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport { Loader } from '../components/Styled';\nimport { categories, filters } from '../__mock__';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"content__Wrap\",\n  componentId: \"sc-1afm75p-0\"\n})([\"margin-top:120px;margin-bottom:80px;\", \" @media only screen and (max-width:480px){margin-top:0;}\"], ({\n  dashboard\n}) => dashboard && css([\"margin:0;\"]));\n\nconst ContentLayout = ({\n  title,\n  store,\n  query,\n  limit,\n  dashboard,\n  startOffset,\n  children\n}) => {\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [search, setSearch] = useState(null);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [offset, setOffset] = useState(startOffset);\n  const [documents, setDocuments] = useState((store === null || store === void 0 ? void 0 : store.documents) || []);\n  const [loadDocumentsBySearch, {\n    data: dataBySearch,\n    loading: loadingBySearch,\n    error: errorBySearch,\n    refetch: refetchBySearch\n  }] = useLazyQuery(query);\n  const [loadDocuments, {\n    data,\n    loading,\n    error,\n    refetch\n  }] = useLazyQuery(query);\n  const [isFetching, setIsFetching] = useInfiniteScroll(async () => {\n    const variables = {\n      offset,\n      limit\n    };\n    if (search) await refetchBySearch(variables);else {\n      if (refetch) await refetch(variables);else await loadDocuments({\n        variables\n      });\n    }\n    setOffset(prev => prev + limit);\n    setIsFetching(false);\n  }, 800);\n\n  const onSearch = value => {\n    setDocuments([]);\n\n    if (value) {\n      setSearch(value);\n      setOffset(startOffset);\n      loadDocumentsBySearch({\n        variables: {\n          search: value,\n          offset: 0,\n          limit: startOffset\n        }\n      });\n    } else {\n      const variables = {\n        offset: 0,\n        limit\n      };\n      setSearch(null);\n      setOffset(0);\n      if (refetch) refetch(variables);else loadDocuments({\n        variables\n      });\n    }\n  };\n\n  useEffect(() => {\n    const isCommon = !search && !loading && data;\n    const isSearch = search && !loadingBySearch && dataBySearch;\n    const result = isCommon || isSearch;\n    if (result) setDocuments(prev => [...prev, ...result.getUsers]);\n  }, [search, loading, loadingBySearch, data, dataBySearch]);\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: title\n  }, /*#__PURE__*/React.createElement(Wrap, {\n    dashboard: dashboard\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter),\n    onSubmit: onSearch\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: filters\n  }), React.createElement(children, {\n    documents\n  }), search && !loadingBySearch && documents.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u043E \\u0432\\u0430\\u0448\\u0435\\u043C\\u0443 \\u0437\\u0430\\u043F\\u0440\\u043E\\u0441\\u0443 \\u043D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"), (search && errorBySearch || !search && error) && /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\"), (!error && loading || search && !errorBySearch && loadingBySearch || isFetching) && /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)), !search && !loading && !loadingBySearch && !errorBySearch && documents.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0414\\u0430\\u043D\\u043D\\u044B\\u0445 \\u043D\\u0435\\u0442\")));\n};\n\nexport default ContentLayout;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/layouts/content.js"],"names":["React","useState","useEffect","styled","css","useLazyQuery","Column","Alert","DatePicker","Spinner","Select","useInfiniteScroll","DefaultLayout","FilterBar","SearchBar","Loader","categories","filters","Wrap","dashboard","ContentLayout","title","store","query","limit","startOffset","children","date","onChangeDate","select","onChangeSelect","search","setSearch","visibleFilter","setVisibleFilter","offset","setOffset","documents","setDocuments","loadDocumentsBySearch","data","dataBySearch","loading","loadingBySearch","error","errorBySearch","refetch","refetchBySearch","loadDocuments","isFetching","setIsFetching","variables","prev","onSearch","value","isCommon","isSearch","result","getUsers","item","createElement","length","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { useLazyQuery } from '@apollo/react-hooks'\n\nimport Column from '../atomic-ui/components/Column'\nimport Alert from '../atomic-ui/components/Alert'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Spinner from '../atomic-ui/components/Spinner'\nimport Select from '../atomic-ui/components/Select'\n\nimport { useInfiniteScroll } from '../hooks/useInfiniteScroll'\nimport DefaultLayout from '../layouts/default'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport { Loader } from '../components/Styled'\nimport { categories, filters } from '../__mock__'\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  ${({ dashboard }) =>\n    dashboard &&\n    css`\n      margin: 0;\n    `}\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst ContentLayout = ({ title, store, query, limit, dashboard, startOffset, children }) => {\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [search, setSearch] = useState(null)\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [offset, setOffset] = useState(startOffset)\n  const [documents, setDocuments] = useState(store?.documents || [])\n\n  const [\n    loadDocumentsBySearch,\n    { data: dataBySearch, loading: loadingBySearch, error: errorBySearch, refetch: refetchBySearch }\n  ] = useLazyQuery(query)\n\n  const [loadDocuments, { data, loading, error, refetch }] = useLazyQuery(query)\n\n  const [isFetching, setIsFetching] = useInfiniteScroll(async () => {\n    const variables = { offset, limit }\n    if (search) await refetchBySearch(variables)\n    else {\n      if (refetch) await refetch(variables)\n      else await loadDocuments({ variables })\n    }\n    setOffset((prev) => prev + limit)\n    setIsFetching(false)\n  }, 800)\n\n  const onSearch = (value) => {\n    setDocuments([])\n    if (value) {\n      setSearch(value)\n      setOffset(startOffset)\n      loadDocumentsBySearch({\n        variables: { search: value, offset: 0, limit: startOffset }\n      })\n    } else {\n      const variables = { offset: 0, limit }\n\n      setSearch(null)\n      setOffset(0)\n\n      if (refetch) refetch(variables)\n      else loadDocuments({ variables })\n    }\n  }\n\n  useEffect(() => {\n    const isCommon = !search && !loading && data\n    const isSearch = search && !loadingBySearch && dataBySearch\n    const result = isCommon || isSearch\n    if (result) setDocuments((prev) => [...prev, ...result.getUsers])\n  }, [search, loading, loadingBySearch, data, dataBySearch])\n\n  return (\n    <DefaultLayout title={title}>\n      <Wrap dashboard={dashboard}>\n        <SearchBar onChangeFilter={() => setVisibleFilter(!visibleFilter)} onSubmit={onSearch} />\n\n        <FilterBar\n          isOpen={visibleFilter}\n          filters={[\n            <DatePicker\n              key={0}\n              value={date}\n              placeholder={'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />,\n            <Select\n              key={1}\n              options={categories}\n              placeholder={'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          ]}\n          options={filters}\n        />\n\n        {React.createElement(children, { documents })}\n\n        {search && !loadingBySearch && documents.length === 0 && (\n          <Alert style={{ width: '100%', textAlign: 'center' }}>\n            По вашему запросу ничего не найдено\n          </Alert>\n        )}\n\n        {((search && errorBySearch) || (!search && error)) && (\n          <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n            Не удалось загрузить данные\n          </Alert>\n        )}\n\n        {((!error && loading) || (search && !errorBySearch && loadingBySearch) || isFetching) && (\n          <Loader>\n            <Spinner />\n          </Loader>\n        )}\n\n        {!search && !loading && !loadingBySearch && !errorBySearch && documents.length === 0 && (\n          <Alert style={{ width: '100%', textAlign: 'center' }}>Данных нет</Alert>\n        )}\n      </Wrap>\n    </DefaultLayout>\n  )\n}\n\nexport default ContentLayout\n"]},"metadata":{},"sourceType":"module"}
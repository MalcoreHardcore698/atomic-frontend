{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../Row';\nimport Text from '../Text';\nimport Image from '../Image';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Card__Wrap\",\n  componentId: \"sc-1w24dle-0\"\n})([\"position:relative;display:grid;grid-template-columns:1fr 96px;align-items:center;padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);overflow:hidden;transition:all 150ms ease;\", \" p{font-size:var(--font-h3);font-weight:700;color:white;\", \"}\", \" \", \" \", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.75;}\"]), ({\n  type,\n  color\n}) => (type !== 'solid' || !type) && color && css([\"padding-left:15px;color:#232323;\"]), ({\n  type,\n  color\n}) => (type !== 'solid' || !type) && color && css([\"&::before{content:'';position:absolute;top:10px;left:0;width:3px;height:calc(100% - 20px);background:\", \";border-radius:0 var(--surface-border-radius) var(--surface-border-radius) 0;}\"], color.accent), ({\n  type\n}) => type === 'solid' && css([\"height:128px;align-items:flex-end;font-size:var(--font-h3);font-weight:700;color:white;\"]), ({\n  type,\n  color\n}) => type === 'solid' && color && css([\"background:\", \";border:none;\"], color.accent));\n_c = Wrap;\nexport const Extras = styled.span.withConfig({\n  displayName: \"Card__Extras\",\n  componentId: \"sc-1w24dle-1\"\n})([\"display:flex;justify-self:center;align-self:center;transform:rotate(15deg);\", \"\"], ({\n  type,\n  color\n}) => type === 'solid' && color && css([\"position:relative;top:20px;align-items:flex-end;font-size:170px;font-weight:700;color:\", \";line-height:0;transform:rotate(0);svg{path,circle{stroke:\", \";}transform:scale(6);}\"], color.dim, color.dim));\n_c2 = Extras;\nexport const getColor = color => {\n  switch (color) {\n    case 'blue':\n      return {\n        accent: '#009EE3',\n        dim: '#3EC0F0'\n      };\n\n    case 'orange':\n      return {\n        accent: '#F07C00',\n        dim: '#F39300'\n      };\n\n    case 'green':\n      return {\n        accent: '#93C11C',\n        dim: '#B8CF21'\n      };\n\n    case 'purple':\n      return {\n        accent: '#4065AD',\n        dim: '#697DBD'\n      };\n\n    case 'red':\n      return {\n        accent: '#E40039',\n        dim: '#EA4C60'\n      };\n\n    case 'pink':\n      return {\n        accent: '#A71380',\n        dim: '#B44996'\n      };\n\n    default:\n      return {\n        accent: 'white',\n        dim: 'white'\n      };\n  }\n};\nexport const Card = ({\n  text,\n  color,\n  extras,\n  type,\n  onClick,\n  ...props\n}) => /*#__PURE__*/React.createElement(Wrap, _extends({\n  type: type,\n  color: getColor(color)\n}, props, {\n  onClick: onClick\n}), /*#__PURE__*/React.createElement(Text, null, text), /*#__PURE__*/React.createElement(Extras, {\n  type: type,\n  color: getColor(color)\n}, typeof extras === 'string' ? /*#__PURE__*/React.createElement(Image, {\n  src: extras,\n  alt: 'Icon'\n}) : extras));\n_c3 = Card;\nexport default Card;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Extras\");\n$RefreshReg$(_c3, \"Card\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/atomic-ui/components/Card/index.js"],"names":["React","styled","css","Row","Text","Image","Wrap","onClick","type","color","accent","Extras","span","dim","getColor","Card","text","extras","props"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Row from '../Row'\nimport Text from '../Text'\nimport Image from '../Image'\n\nexport const Wrap = styled(Row)`\n  position: relative;\n  display: grid;\n  grid-template-columns: 1fr 96px;\n  align-items: center;\n  padding: var(--default-gap);\n  background: var(--surface-background);\n  border: var(--surface-border);\n  border-radius: var(--surface-border-radius);\n  overflow: hidden;\n  transition: all 150ms ease;\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.75;\n      }\n    `}\n\n  p {\n    font-size: var(--font-h3);\n    font-weight: 700;\n    color: white;\n\n    ${({ type, color }) =>\n      (type !== 'solid' || !type) &&\n      color &&\n      css`\n        padding-left: 15px;\n        color: #232323;\n      `}\n  }\n\n  ${({ type, color }) =>\n    (type !== 'solid' || !type) &&\n    color &&\n    css`\n      &::before {\n        content: '';\n        position: absolute;\n        top: 10px;\n        left: 0;\n        width: 3px;\n        height: calc(100% - 20px);\n        background: ${color.accent};\n        border-radius: 0 var(--surface-border-radius) var(--surface-border-radius) 0;\n      }\n    `}\n\n  ${({ type }) =>\n    type === 'solid' &&\n    css`\n      height: 128px;\n      align-items: flex-end;\n      font-size: var(--font-h3);\n      font-weight: 700;\n      color: white;\n    `}\n\n  ${({ type, color }) =>\n    type === 'solid' &&\n    color &&\n    css`\n      background: ${color.accent};\n      border: none;\n    `}\n`\n\nexport const Extras = styled.span`\n  display: flex;\n  justify-self: center;\n  align-self: center;\n  transform: rotate(15deg);\n\n  ${({ type, color }) =>\n    type === 'solid' &&\n    color &&\n    css`\n      position: relative;\n      top: 20px;\n      align-items: flex-end;\n      font-size: 170px;\n      font-weight: 700;\n      color: ${color.dim};\n      line-height: 0;\n      transform: rotate(0);\n\n      svg {\n        path,\n        circle {\n          stroke: ${color.dim};\n        }\n        transform: scale(6);\n      }\n    `}\n`\n\nexport const getColor = (color) => {\n  switch (color) {\n    case 'blue':\n      return { accent: '#009EE3', dim: '#3EC0F0' }\n    case 'orange':\n      return { accent: '#F07C00', dim: '#F39300' }\n    case 'green':\n      return { accent: '#93C11C', dim: '#B8CF21' }\n    case 'purple':\n      return { accent: '#4065AD', dim: '#697DBD' }\n    case 'red':\n      return { accent: '#E40039', dim: '#EA4C60' }\n    case 'pink':\n      return { accent: '#A71380', dim: '#B44996' }\n    default:\n      return { accent: 'white', dim: 'white' }\n  }\n}\n\nexport const Card = ({ text, color, extras, type, onClick, ...props }) => (\n  <Wrap type={type} color={getColor(color)} {...props} onClick={onClick}>\n    <Text>{text}</Text>\n    <Extras type={type} color={getColor(color)}>\n      {typeof extras === 'string' ? <Image src={extras} alt={'Icon'} /> : extras}\n    </Extras>\n  </Wrap>\n)\n\nexport default Card\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport RoleForm from '../../components/FormRole';\nimport DeleteForm from '../../components/FormDelete';\nimport RoleView from '../../components/RoleView';\nimport { setDocuments } from '../actions/documents';\nimport { setDrawer } from '../actions/drawer';\nimport { setItem } from '../actions/snacks';\nexport function onRoleLink(dispatch, props) {\n  const {\n    id\n  } = props;\n  dispatch(setDrawer({\n    icon: 'lock',\n    title: 'Роль',\n    content: /*#__PURE__*/React.createElement(RoleView, {\n      role: id,\n      appearance: 'clear'\n    })\n  }));\n}\nexport function onRoleCreate(dispatch, props) {\n  const {\n    permissions,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'lock',\n    title: 'Создание роли',\n    content: /*#__PURE__*/React.createElement(RoleForm, {\n      mutation: mutation,\n      permissions: permissions,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          const roles = await action({\n            variables: {\n              input: {\n                name: form.name,\n                permissions: form.permissions.map(permission => permission.value)\n              }\n            }\n          });\n          dispatch(setDocuments(roles.data.createRole));\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Роль успешно создана'\n          }));\n        } catch (_unused) {\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось создать роль'\n          }));\n        }\n      }\n    })\n  }));\n}\nexport function onRoleEdit(dispatch, props) {\n  const {\n    role,\n    permissions,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'lock',\n    title: 'Редактирование роли',\n    content: /*#__PURE__*/React.createElement(RoleForm, {\n      role: role,\n      mutation: mutation,\n      permissions: permissions,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          const roles = await action({\n            variables: {\n              id: role.id,\n              input: {\n                name: form.name,\n                permissions: form.permissions.map(permission => permission.value)\n              }\n            }\n          });\n          dispatch(setDocuments(roles.data.updateRole));\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Роль успешно отредактирована'\n          }));\n        } catch (_unused2) {\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отредактировать роль'\n          }));\n        }\n      }\n    })\n  }));\n}\nexport function onRoleDelete(dispatch, props) {\n  const {\n    id,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление роли',\n    content: /*#__PURE__*/React.createElement(DeleteForm, {\n      mutation: mutation,\n      appearance: 'clear',\n      onCancel: () => dispatch(setDrawer(null)),\n      onSubmit: async (_, action) => {\n        try {\n          const roles = await action({\n            variables: {\n              id\n            }\n          });\n          dispatch(setDocuments(roles.data.deleteRole));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Роль успешно удалена'\n          }));\n        } catch (_unused3) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось удалить роль'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n        }\n      }\n    }, /*#__PURE__*/React.createElement(RoleView, {\n      role: id,\n      appearance: 'clear'\n    }))\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}
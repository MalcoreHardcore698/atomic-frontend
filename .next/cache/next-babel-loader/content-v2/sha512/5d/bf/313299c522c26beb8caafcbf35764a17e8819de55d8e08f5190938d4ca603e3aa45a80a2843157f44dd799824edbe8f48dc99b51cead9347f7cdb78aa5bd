{"ast":null,"code":"import React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport ProjectCard from '../ProjectCard';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport { setUserFolder, updateUser } from '../../store/actions/user';\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user';\nimport { onProjectAdd, onProjectRemove, onProjectLink, onProjectScreenshot } from '../../store/helpers/project';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"ProjectList__Wrap\",\n  componentId: \"zcwfmw-0\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);grid-auto-rows:max-content;@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\nexport const ProjectList = ({\n  variables,\n  layout,\n  eliminable,\n  initialList,\n  initialRefetch,\n  emptyMessage\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const [projects, setProjects] = useState(initialList || []);\n  const dispatch = useDispatch();\n  const {\n    data,\n    loading,\n    error\n  } = initialList ? {\n    data: null,\n    loading: false,\n    error: false\n  } : useQuery(queries.GET_PROJECTS, {\n    variables\n  });\n  const onAdd = useCallback(project => recall(onProjectAdd, {\n    id: project.id,\n    folders: user === null || user === void 0 ? void 0 : user.folders,\n    mutations: {\n      addProject: queries.ADD_USER_PROJECT,\n      createFolder: queries.ADD_USER_FOLDER\n    },\n    callback: item => {\n      const result = { ...item,\n        projects: [...item.projects, project.id]\n      };\n      dispatch(setUserFolder(result));\n    }\n  })(), [user]);\n  const onRemove = useCallback(project => recall(onProjectRemove, {\n    id: project.id,\n    folder,\n    mutation: queries.REMOVE_USER_PROJECT,\n    callback: () => initialRefetch && initialRefetch(projects.filter(pr => pr.id !== project.id).map(pr => pr.id))\n  })(), [user]);\n  useEffect(() => {\n    if (!loading && data) {\n      setProjects(data.getProjects);\n    }\n  }, [data, loading]);\n  useEffect(() => {\n    if (!loading && (initialList === null || initialList === void 0 ? void 0 : initialList.length) > 0) setProjects(initialList);\n  }, [loading, initialList]);\n  return /*#__PURE__*/React.createElement(Wrap, null, projects.length > 0 ? projects.map(project => {\n    var _user$projects, _user$folders, _user$folders2, _project$company;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    return /*#__PURE__*/React.createElement(LazyLoad, {\n      key: project.id\n    }, /*#__PURE__*/React.createElement(ProjectCard, {\n      project: project,\n      eliminable: eliminable,\n      layout: layout || 'column',\n      owned: owned,\n      added: !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === project.id)))),\n      liked: !!(project.rating || []).find(item => item.email === user.email),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        added: !!(user !== null && user !== void 0 && (_user$folders2 = user.folders) !== null && _user$folders2 !== void 0 && _user$folders2.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === project.id)))),\n        liked: !!(project.rating || []).find(item => item.email === user.email),\n        onLike: user.email && mutate(queries.LIKE_PROJECT, {\n          id: project.id\n        }, response => dispatch(updateUser(response.data.likeProject))),\n        onAdd: user.email && recall(onProjectAdd, {\n          id: project.id,\n          folders: user === null || user === void 0 ? void 0 : user.folders,\n          mutations: {\n            addProject: queries.ADD_USER_PROJECT,\n            createFolder: queries.ADD_USER_FOLDER\n          },\n          callback: item => {\n            const result = { ...item,\n              projects: [...item.projects, project.id]\n            };\n            dispatch(setUserFolder(result));\n          }\n        }),\n        owned\n      }),\n      onLike: user.email && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onAdd: user.email && (() => onAdd(project)),\n      onRemove: user.email && (() => onRemove(project)),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })(),\n      withSocials: true\n    }));\n  }) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\") : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, emptyMessage));\n};\nProjectList.defaultProps = {\n  emptyMessage: 'Проектов нет'\n};\nexport default ProjectList;","map":{"version":3,"sources":["/Users/alicefromwonderland/Desktop/branches/atomic/atomic-frontend/components/ProjectList/index.js"],"names":["React","useState","useEffect","useCallback","styled","useQuery","useDispatch","useSelector","Alert","Spinner","Loader","LazyLoad","ProjectCard","useHelper","useMutate","setUserFolder","updateUser","onUserAboutMore","onUserLink","onProjectAdd","onProjectRemove","onProjectLink","onProjectScreenshot","queries","Wrap","div","ProjectList","variables","layout","eliminable","initialList","initialRefetch","emptyMessage","recall","mutate","user","folder","state","root","projects","setProjects","dispatch","data","loading","error","GET_PROJECTS","onAdd","project","id","folders","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","callback","item","result","onRemove","mutation","REMOVE_USER_PROJECT","filter","pr","map","getProjects","length","owned","find","candidate","rating","email","auth","added","liked","onLike","LIKE_PROJECT","response","likeProject","company","recipient","author","query","GET_USER_CHATS","SEND_MESSAGE","_","key","screenshots","preview","width","textAlign","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\nimport ProjectCard from '../ProjectCard'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\nimport { setUserFolder, updateUser } from '../../store/actions/user'\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user'\nimport {\n  onProjectAdd,\n  onProjectRemove,\n  onProjectLink,\n  onProjectScreenshot\n} from '../../store/helpers/project'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n  grid-auto-rows: max-content;\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nexport const ProjectList = ({\n  variables,\n  layout,\n  eliminable,\n  initialList,\n  initialRefetch,\n  emptyMessage\n}) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder\n  }))\n  const [projects, setProjects] = useState(initialList || [])\n  const dispatch = useDispatch()\n\n  const { data, loading, error } = initialList\n    ? { data: null, loading: false, error: false }\n    : useQuery(queries.GET_PROJECTS, { variables })\n\n  const onAdd = useCallback(\n    (project) =>\n      recall(onProjectAdd, {\n        id: project.id,\n        folders: user?.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        },\n        callback: (item) => {\n          const result = { ...item, projects: [...item.projects, project.id] }\n          dispatch(setUserFolder(result))\n        }\n      })(),\n    [user]\n  )\n\n  const onRemove = useCallback(\n    (project) =>\n      recall(onProjectRemove, {\n        id: project.id,\n        folder,\n        mutation: queries.REMOVE_USER_PROJECT,\n        callback: () =>\n          initialRefetch &&\n          initialRefetch(projects.filter((pr) => pr.id !== project.id).map((pr) => pr.id))\n      })(),\n    [user]\n  )\n\n  useEffect(() => {\n    if (!loading && data) {\n      setProjects(data.getProjects)\n    }\n  }, [data, loading])\n\n  useEffect(() => {\n    if (!loading && initialList?.length > 0) setProjects(initialList)\n  }, [loading, initialList])\n\n  return (\n    <Wrap>\n      {projects.length > 0 ? (\n        projects.map((project) => {\n          const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n\n          return (\n            <LazyLoad key={project.id}>\n              <ProjectCard\n                project={project}\n                eliminable={eliminable}\n                layout={layout || 'column'}\n                owned={owned}\n                added={\n                  !!user?.folders?.find(\n                    (folder) => !!folder?.projects.find((item) => item === project.id)\n                  )\n                }\n                liked={!!(project.rating || []).find((item) => item.email === user.email)}\n                onLink={recall(onProjectLink, {\n                  id: project.id,\n                  auth: user?.email,\n                  added: !!user?.folders?.find(\n                    (folder) => !!folder?.projects.find((item) => item === project.id)\n                  ),\n                  liked: !!(project.rating || []).find((item) => item.email === user.email),\n                  onLike:\n                    user.email &&\n                    mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                      dispatch(updateUser(response.data.likeProject))\n                    ),\n                  onAdd:\n                    user.email &&\n                    recall(onProjectAdd, {\n                      id: project.id,\n                      folders: user?.folders,\n                      mutations: {\n                        addProject: queries.ADD_USER_PROJECT,\n                        createFolder: queries.ADD_USER_FOLDER\n                      },\n                      callback: (item) => {\n                        const result = { ...item, projects: [...item.projects, project.id] }\n                        dispatch(setUserFolder(result))\n                      }\n                    }),\n                  owned\n                })}\n                onLike={\n                  user.email &&\n                  mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                    dispatch(updateUser(response.data.likeProject))\n                  )\n                }\n                onAdd={user.email && (() => onAdd(project))}\n                onRemove={user.email && (() => onRemove(project))}\n                onAboutMore={recall(onUserAboutMore, { user: project })}\n                onCompanyLink={recall(onUserLink, {\n                  id: project.company?.email,\n                  auth: user?.email,\n                  recipient: project.author,\n                  query: queries.GET_USER_CHATS,\n                  mutation: queries.SEND_MESSAGE\n                })}\n                onScreenshotClick={(_, key) =>\n                  recall(onProjectScreenshot, {\n                    screenshots: [project.preview, ...project.screenshots],\n                    key\n                  })()\n                }\n                withSocials\n              />\n            </LazyLoad>\n          )\n        })\n      ) : error ? (\n        <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n          Не удалось загрузить данные\n        </Alert>\n      ) : loading ? (\n        <Loader>\n          <Spinner />\n        </Loader>\n      ) : (\n        <Alert style={{ width: '100%', textAlign: 'center' }}>{emptyMessage}</Alert>\n      )}\n    </Wrap>\n  )\n}\n\nProjectList.defaultProps = {\n  emptyMessage: 'Проектов нет'\n}\n\nexport default ProjectList\n"]},"metadata":{},"sourceType":"module"}
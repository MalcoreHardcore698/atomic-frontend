{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport TextArea from '../../atomic-ui/components/TextArea';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nimport queries from '../../graphql/queries';\nimport { Loader } from '../Styled';\nexport const Category = ({\n  category,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  const [typeError, setTypeError] = useState(false);\n  const [type, setType] = useState(category && category.type && {\n    value: category.type,\n    label: getLabelCategory(category.type)\n  } || null);\n  const {\n    data: dataTypes,\n    loading: loadingTypes\n  } = useQuery(queries.GET_CATEGORY_TYPES);\n  const [types, setTypes] = useState([]);\n  useEffect(() => {\n    if (!loadingTypes && dataTypes) {\n      setTypes(dataTypes.getCategoryTypes);\n    }\n  }, [loadingTypes, dataTypes]);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => {\n      if (type) {\n        onSubmit({ ...form,\n          type\n        }, action);\n      } else {\n        setTypeError(true);\n      }\n    }\n  }, ({\n    register,\n    loading,\n    errors,\n    getValues\n  }) => !loading ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.name && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: 'name',\n    ref: register({\n      required: true\n    }),\n    defaultValue: (category === null || category === void 0 ? void 0 : category.name) || getValues('name'),\n    placeholder: 'Название',\n    appearance: 'ghost',\n    disabled: loading\n  }), typeError && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0442\\u0438\\u043F \\u043A\\u0430\\u0442\\u0435\\u0433\\u043E\\u0440\\u0438\\u0438\"), /*#__PURE__*/React.createElement(Select, {\n    name: 'type',\n    appearance: 'ghost',\n    defaultValue: type,\n    onChange: value => {\n      setType(value);\n      setTypeError(false);\n    },\n    placeholder: 'Выберите тип',\n    options: types.map(type => ({\n      value: type,\n      label: getLabelCategory(type)\n    })),\n    isLoading: loading || loadingTypes,\n    isClearable: true\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    name: 'description',\n    ref: register(),\n    defaultValue: (category === null || category === void 0 ? void 0 : category.description) || getValues('description'),\n    placeholder: 'Описание',\n    appearance: 'ghost',\n    disabled: loading\n  })), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      flexGrow: 1\n    },\n    type: 'submit',\n    disabled: loading\n  }, category ? 'Сохранить' : 'Создать'))) : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)));\n};\nCategory.defaultProps = {\n  create: true\n};\nexport default Category;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/FormCategory/index.js"],"names":["React","useEffect","useState","useQuery","Row","Column","Title","Input","Button","Select","TextArea","Spinner","Alert","getLabelCategory","Form","queries","Loader","Category","category","mutation","appearance","className","onSubmit","typeError","setTypeError","type","setType","value","label","data","dataTypes","loading","loadingTypes","GET_CATEGORY_TYPES","types","setTypes","getCategoryTypes","form","action","register","errors","getValues","name","width","required","map","description","flexGrow","defaultProps","create"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Select from '../../atomic-ui/components/Select'\nimport TextArea from '../../atomic-ui/components/TextArea'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Alert from '../../atomic-ui/components/Alert'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\n\nimport Form from '../Form'\nimport queries from '../../graphql/queries'\nimport { Loader } from '../Styled'\n\nexport const Category = ({ category, mutation, appearance, className, onSubmit }) => {\n  const [typeError, setTypeError] = useState(false)\n  const [type, setType] = useState(\n    (category &&\n      category.type && {\n        value: category.type,\n        label: getLabelCategory(category.type)\n      }) ||\n      null\n  )\n\n  const { data: dataTypes, loading: loadingTypes } = useQuery(queries.GET_CATEGORY_TYPES)\n\n  const [types, setTypes] = useState([])\n\n  useEffect(() => {\n    if (!loadingTypes && dataTypes) {\n      setTypes(dataTypes.getCategoryTypes)\n    }\n  }, [loadingTypes, dataTypes])\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) => {\n        if (type) {\n          onSubmit({ ...form, type }, action)\n        } else {\n          setTypeError(true)\n        }\n      }}>\n      {({ register, loading, errors, getValues }) =>\n        !loading ? (\n          <React.Fragment>\n            <Column>\n              <Title tag={'h4'}>Основное</Title>\n\n              {errors && errors.name && (\n                <Alert style={{ width: '100%' }} appearance={'error'}>\n                  Введите название категории\n                </Alert>\n              )}\n              <Input\n                type={'text'}\n                name={'name'}\n                ref={register({ required: true })}\n                defaultValue={category?.name || getValues('name')}\n                placeholder={'Название'}\n                appearance={'ghost'}\n                disabled={loading}\n              />\n\n              {typeError && (\n                <Alert style={{ width: '100%' }} appearance={'error'}>\n                  Выберите тип категории\n                </Alert>\n              )}\n              <Select\n                name={'type'}\n                appearance={'ghost'}\n                defaultValue={type}\n                onChange={(value) => {\n                  setType(value)\n                  setTypeError(false)\n                }}\n                placeholder={'Выберите тип'}\n                options={types.map((type) => ({\n                  value: type,\n                  label: getLabelCategory(type)\n                }))}\n                isLoading={loading || loadingTypes}\n                isClearable\n              />\n\n              <TextArea\n                name={'description'}\n                ref={register()}\n                defaultValue={category?.description || getValues('description')}\n                placeholder={'Описание'}\n                appearance={'ghost'}\n                disabled={loading}\n              />\n            </Column>\n\n            <Row>\n              <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n                {category ? 'Сохранить' : 'Создать'}\n              </Button>\n            </Row>\n          </React.Fragment>\n        ) : (\n          <Loader>\n            <Spinner />\n          </Loader>\n        )\n      }\n    </Form>\n  )\n}\n\nCategory.defaultProps = {\n  create: true\n}\n\nexport default Category\n"]},"metadata":{},"sourceType":"module"}
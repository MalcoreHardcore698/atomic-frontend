{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport { Wrap as WrapText } from '../../atomic-ui/components/Text';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Button from '../../atomic-ui/components/Button';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Icon from '../../atomic-ui/components/Icon';\nimport { onUserFolderAdd, onUserFolderDelete } from '../../store/helpers/user';\nimport { setFolder, setIgnoreFetch } from '../../store/actions/root';\nimport { setUserFolder } from '../../store/actions/user';\nimport { useHelper } from '../../hooks/useHelper';\nimport queries from '../../graphql/queries';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"Organizer__Wrap\",\n  componentId: \"sc-1rvcbdn-0\"\n})([\"width:265px;min-width:265px;\"]);\nconst CreateButton = styled(Button).withConfig({\n  displayName: \"Organizer__CreateButton\",\n  componentId: \"sc-1rvcbdn-1\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}\"]);\nconst RemoveTooltip = styled(Tooltip).withConfig({\n  displayName: \"Organizer__RemoveTooltip\",\n  componentId: \"sc-1rvcbdn-2\"\n})([\"position:absolute;right:8px;z-index:var(--z-11);display:none;\"]);\nconst ListItem = styled.div.withConfig({\n  displayName: \"Organizer__ListItem\",\n  componentId: \"sc-1rvcbdn-3\"\n})([\"position:relative;display:flex;justify-content:space-between;align-items:center;height:var(--input-height-s);background:var(--ghost-color-background);border-radius:var(--surface-border-radius);padding:8px 10px;width:100%;height:auto;cursor:pointer;transition:all 150ms ease;\", \",h4{color:var(--ghost-color-text);}\", \"{svg path{color:var(--ghost-color-text);}}&:hover{\", \"{display:flex;svg path{stroke:black;}}\", \",h4{color:black;}}\", \"\"], WrapText, RemoveTooltip, RemoveTooltip, WrapText, ({\n  active\n}) => active && css([\"color:var(--default-color-accent);background:var(--default-color-accent-dim);\", \"{svg path{stroke:var(--default-color-accent) !important;}}\", \",h4,p{color:var(--default-color-accent);}&:hover{\", \",h4,p{color:var(--default-color-accent);}}\"], RemoveTooltip, WrapText, WrapText));\nexport const Organizer = () => {\n  const recall = useHelper();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const dispatch = useDispatch();\n  const defaultFolder = useMemo(() => user === null || user === void 0 ? void 0 : user.folders[0], [user]);\n\n  const onFolderClick = item => {\n    if (item.projects && item) {\n      const result = { ...item,\n        projects: item.projects\n      };\n      dispatch(setIgnoreFetch(false));\n      dispatch(setFolder(result));\n      dispatch(setUserFolder(result));\n    }\n  };\n\n  useEffect(() => {\n    if (defaultFolder) {\n      dispatch(setFolder(defaultFolder));\n    }\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(Wrap, null, user.folders && user.folders.length > 0 ? /*#__PURE__*/React.createElement(Column, null, user.folders.map(item => {\n    const length = item.projects.length;\n    const label = length === 1 ? 'проект' : length > 1 && length < 5 ? 'проекта' : 'проектов';\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: item.id,\n      active: folder && item.id === folder.id\n    }, /*#__PURE__*/React.createElement(Difinition, {\n      text: item.name,\n      label: `${length} ${label}`,\n      onLink: () => onFolderClick(item),\n      revert: true\n    }), /*#__PURE__*/React.createElement(RemoveTooltip, {\n      place: 'left',\n      text: 'Удалить'\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: 'xs',\n      kind: 'icon',\n      type: 'button',\n      appearance: 'clear',\n      onClick: recall(onUserFolderDelete, {\n        id: item.id,\n        mutation: queries.DELETE_USER_FOLDER,\n        callback: () => onFolderClick(defaultFolder)\n      })\n    }, /*#__PURE__*/React.createElement(Icon, {\n      size: 'xs',\n      icon: 'delete',\n      stroke: 'var(--ghost-color-text)'\n    }))));\n  })) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0430\\u043F\\u043E\\u043A \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(CreateButton, {\n    onClick: recall(onUserFolderAdd, {\n      mutation: queries.ADD_USER_FOLDER\n    })\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430\"), /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'white'\n  })));\n};\nexport default Organizer;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/Organizer/index.js"],"names":["React","useEffect","useMemo","useDispatch","useSelector","styled","css","Column","Wrap","WrapText","Difinition","Tooltip","Button","Alert","Icon","onUserFolderAdd","onUserFolderDelete","setFolder","setIgnoreFetch","setUserFolder","useHelper","queries","CreateButton","RemoveTooltip","ListItem","div","active","Organizer","recall","user","folder","state","root","dispatch","defaultFolder","folders","onFolderClick","item","projects","result","length","map","label","id","name","mutation","DELETE_USER_FOLDER","callback","width","textAlign","ADD_USER_FOLDER"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport styled, { css } from 'styled-components'\n\nimport Column from '../../atomic-ui/components/Column'\nimport { Wrap as WrapText } from '../../atomic-ui/components/Text'\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport Tooltip from '../../atomic-ui/components/Tooltip'\nimport Button from '../../atomic-ui/components/Button'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Icon from '../../atomic-ui/components/Icon'\n\nimport { onUserFolderAdd, onUserFolderDelete } from '../../store/helpers/user'\nimport { setFolder, setIgnoreFetch } from '../../store/actions/root'\nimport { setUserFolder } from '../../store/actions/user'\nimport { useHelper } from '../../hooks/useHelper'\nimport queries from '../../graphql/queries'\n\nconst Wrap = styled(Column)`\n  width: 265px;\n  min-width: 265px;\n`\n\nconst CreateButton = styled(Button)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  grid-gap: 10px;\n\n  span {\n    white-space: nowrap;\n  }\n`\n\nconst RemoveTooltip = styled(Tooltip)`\n  position: absolute;\n  right: 8px;\n  z-index: var(--z-11);\n  display: none;\n`\n\nconst ListItem = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: var(--input-height-s);\n  background: var(--ghost-color-background);\n  border-radius: var(--surface-border-radius);\n  padding: 8px 10px;\n  width: 100%;\n  height: auto;\n  cursor: pointer;\n  transition: all 150ms ease;\n\n  ${WrapText}, h4 {\n    color: var(--ghost-color-text);\n  }\n\n  ${RemoveTooltip} {\n    svg path {\n      color: var(--ghost-color-text);\n    }\n  }\n\n  &:hover {\n    ${RemoveTooltip} {\n      display: flex;\n\n      svg path {\n        stroke: black;\n      }\n    }\n\n    ${WrapText}, h4 {\n      color: black;\n    }\n  }\n\n  ${({ active }) =>\n    active &&\n    css`\n      color: var(--default-color-accent);\n      background: var(--default-color-accent-dim);\n\n      ${RemoveTooltip} {\n        svg path {\n          stroke: var(--default-color-accent) !important;\n        }\n      }\n\n      ${WrapText}, h4, p {\n        color: var(--default-color-accent);\n      }\n\n      &:hover {\n        ${WrapText}, h4, p {\n          color: var(--default-color-accent);\n        }\n      }\n    `}\n`\n\nexport const Organizer = () => {\n  const recall = useHelper()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder\n  }))\n  const dispatch = useDispatch()\n\n  const defaultFolder = useMemo(() => user?.folders[0], [user])\n\n  const onFolderClick = (item) => {\n    if (item.projects && item) {\n      const result = { ...item, projects: item.projects }\n      dispatch(setIgnoreFetch(false))\n\n      dispatch(setFolder(result))\n      dispatch(setUserFolder(result))\n    }\n  }\n\n  useEffect(() => {\n    if (defaultFolder) {\n      dispatch(setFolder(defaultFolder))\n    }\n  }, [dispatch])\n\n  return (\n    <Wrap>\n      {user.folders && user.folders.length > 0 ? (\n        <Column>\n          {user.folders.map((item) => {\n            const length = item.projects.length\n            const label =\n              length === 1 ? 'проект' : length > 1 && length < 5 ? 'проекта' : 'проектов'\n\n            return (\n              <ListItem key={item.id} active={folder && item.id === folder.id}>\n                <Difinition\n                  text={item.name}\n                  label={`${length} ${label}`}\n                  onLink={() => onFolderClick(item)}\n                  revert\n                />\n                <RemoveTooltip place={'left'} text={'Удалить'}>\n                  <Button\n                    size={'xs'}\n                    kind={'icon'}\n                    type={'button'}\n                    appearance={'clear'}\n                    onClick={recall(onUserFolderDelete, {\n                      id: item.id,\n                      mutation: queries.DELETE_USER_FOLDER,\n                      callback: () => onFolderClick(defaultFolder)\n                    })}>\n                    <Icon size={'xs'} icon={'delete'} stroke={'var(--ghost-color-text)'} />\n                  </Button>\n                </RemoveTooltip>\n              </ListItem>\n            )\n          })}\n        </Column>\n      ) : (\n        <Alert style={{ width: '100%', textAlign: 'center' }}>Папок нет</Alert>\n      )}\n      <CreateButton onClick={recall(onUserFolderAdd, { mutation: queries.ADD_USER_FOLDER })}>\n        <span>Новая папка</span>\n        <Icon icon={'add'} stroke={'white'} />\n      </CreateButton>\n    </Wrap>\n  )\n}\n\nexport default Organizer\n"]},"metadata":{},"sourceType":"module"}
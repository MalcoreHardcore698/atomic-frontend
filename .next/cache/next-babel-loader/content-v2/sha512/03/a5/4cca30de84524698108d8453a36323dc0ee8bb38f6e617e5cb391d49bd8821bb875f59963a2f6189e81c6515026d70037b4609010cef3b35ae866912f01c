{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Column from '../../atomic-ui/components/Column';\nimport Table from '../../atomic-ui/components/Table';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { GridAside as Container, Loader, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { useRouter } from 'next/router';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"\"]);\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const List = ({\n  type,\n  query,\n  template,\n  variables,\n  component,\n  errorMessage,\n  emptyMessage,\n  limit = 6,\n  startOffset = 6,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const router = useRouter();\n  const displayMethod = useSelector(state => state.root.displayMethod);\n  const pageStart = useMemo(() => {\n    var _router$query;\n\n    return Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1;\n  }, [router]);\n  const [offset, setOffset] = useState(startOffset + 1);\n  const [items, setItems] = useState([]);\n  const [isEnd, setIsEnd] = useState(false);\n  const {\n    data,\n    loading,\n    error,\n    refetch\n  } = useQuery(query, {\n    variables\n  });\n\n  const loadMore = async page => {\n    const updateOffset = () => setOffset(limit * page + startOffset + 1);\n\n    const result = { ...variables,\n      offset,\n      limit\n    };\n\n    if (refetch) {\n      const response = await refetch(result);\n      const list = response.data[Object.keys(response.data)[0]];\n\n      if (list.length > 0) {\n        setItems(prev => [...prev, ...list]);\n        updateOffset();\n      }\n\n      if (list.length === 0) {\n        setIsEnd(true);\n      }\n    }\n  };\n\n  const renderContent = useCallback(() => {\n    if (displayMethod === 'grid') {\n      return /*#__PURE__*/React.createElement(Container, null, (items || []).map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n        key: item.id || item.email\n      }, component(item))));\n    }\n\n    return /*#__PURE__*/React.createElement(Table, {\n      data: items,\n      template: template,\n      onChecked: onChecked,\n      onClick: onClick,\n      onEdit: onEdit,\n      onDelete: onDelete\n    });\n  }, [items, displayMethod, onChecked, onClick, onEdit, onDelete]);\n  useEffect(() => {\n    if (!loading && data) {\n      setItems(data[type]);\n    }\n  }, [data, loading]);\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) {\n      setCheckedList(items);\n    }\n  }, [items, setCheckedList]);\n  return !error ? /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: pageStart || 0,\n    loadMore: loadMore,\n    hasMore: !isEnd,\n    loader: /*#__PURE__*/React.createElement(LowerLoader, {\n      key: 'loader'\n    }, /*#__PURE__*/React.createElement(Spinner, null))\n  }, renderContent()) : error ? /*#__PURE__*/React.createElement(CenterAlert, {\n    appearance: 'error'\n  }, errorMessage) : /*#__PURE__*/React.createElement(CenterAlert, null, emptyMessage);\n};\nList.defaultProps = {\n  errorMessage: 'Не удалось загрузить данные',\n  emptyMessage: 'Документов нет'\n};\nexport default List;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/List/index.js"],"names":["React","useState","useEffect","useCallback","useMemo","styled","useQuery","useSelector","Column","Table","Alert","Spinner","GridAside","Container","Loader","LowerLoader","LazyLoad","InfiniteScroll","useRouter","Wrap","CenterAlert","List","type","query","template","variables","component","errorMessage","emptyMessage","limit","startOffset","setCheckedList","onChecked","onClick","onEdit","onDelete","router","displayMethod","state","root","pageStart","Number","page","offset","setOffset","items","setItems","isEnd","setIsEnd","data","loading","error","refetch","loadMore","updateOffset","result","response","list","Object","keys","length","prev","renderContent","map","item","id","email","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Table from '../../atomic-ui/components/Table'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { GridAside as Container, Loader, LowerLoader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport { useRouter } from 'next/router'\n\nexport const Wrap = styled(Column)``\n\nexport const CenterAlert = styled(Alert)`\n  width: 100%;\n  text-align: center;\n`\n\nexport const List = ({\n  type,\n  query,\n  template,\n  variables,\n  component,\n  errorMessage,\n  emptyMessage,\n  limit = 6,\n  startOffset = 6,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const router = useRouter()\n  const displayMethod = useSelector((state) => state.root.displayMethod)\n\n  const pageStart = useMemo(() => Number(router.query?.page) || 1, [router])\n\n  const [offset, setOffset] = useState(startOffset + 1)\n  const [items, setItems] = useState([])\n  const [isEnd, setIsEnd] = useState(false)\n\n  const { data, loading, error, refetch } = useQuery(query, { variables })\n\n  const loadMore = async (page) => {\n    const updateOffset = () => setOffset(limit * page + startOffset + 1)\n\n    const result = { ...variables, offset, limit }\n\n    if (refetch) {\n      const response = await refetch(result)\n      const list = response.data[Object.keys(response.data)[0]]\n\n      if (list.length > 0) {\n        setItems((prev) => [...prev, ...list])\n        updateOffset()\n      }\n      if (list.length === 0) {\n        setIsEnd(true)\n      }\n    }\n  }\n\n  const renderContent = useCallback(() => {\n    if (displayMethod === 'grid') {\n      return (\n        <Container>\n          {(items || []).map((item) => (\n            <LazyLoad key={item.id || item.email}>{component(item)}</LazyLoad>\n          ))}\n        </Container>\n      )\n    }\n    return (\n      <Table\n        data={items}\n        template={template}\n        onChecked={onChecked}\n        onClick={onClick}\n        onEdit={onEdit}\n        onDelete={onDelete}\n      />\n    )\n  }, [items, displayMethod, onChecked, onClick, onEdit, onDelete])\n\n  useEffect(() => {\n    if (!loading && data) {\n      setItems(data[type])\n    }\n  }, [data, loading])\n\n  useEffect(() => {\n    if (items?.length > 0 && setCheckedList) {\n      setCheckedList(items)\n    }\n  }, [items, setCheckedList])\n\n  return !error ? (\n    <InfiniteScroll\n      pageStart={pageStart || 0}\n      loadMore={loadMore}\n      hasMore={!isEnd}\n      loader={\n        <LowerLoader key={'loader'}>\n          <Spinner />\n        </LowerLoader>\n      }>\n      {renderContent()}\n    </InfiniteScroll>\n  ) : error ? (\n    <CenterAlert appearance={'error'}>{errorMessage}</CenterAlert>\n  ) : (\n    <CenterAlert>{emptyMessage}</CenterAlert>\n  )\n}\n\nList.defaultProps = {\n  errorMessage: 'Не удалось загрузить данные',\n  emptyMessage: 'Документов нет'\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}
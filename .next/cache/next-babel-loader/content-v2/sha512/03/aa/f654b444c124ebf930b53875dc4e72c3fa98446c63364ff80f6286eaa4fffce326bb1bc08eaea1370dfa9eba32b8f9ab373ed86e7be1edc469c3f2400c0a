{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport Icon from '../Icon';\nexport const Wrap = styled.div`\n  display: flex;\n  grid-gap: 5px;\n  background: var(--default-color-accent-dim);\n  border-radius: 25rem;\n  padding: var(--space-offset-xs);\n  width: min-content;\n  height: fit-content;\n\n  ${({\n  disabled\n}) => disabled && css`\n      background: var(--ghost-color-background);\n    `}\n`;\nexport const Rate = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n\n  ${({\n  size\n}) => size === 'xs' && css`\n      width: 8px;\n      height: 8px;\n    `}\n\n  ${({\n  size\n}) => size === 's' && css`\n      width: 12px;\n      height: 12px;\n    `}\n\n  ${({\n  readOnly,\n  disabled\n}) => (readOnly || disabled) && css`\n      cursor: default;\n    `}\n\n  svg {\n    path {\n      stroke: none;\n      transition: fill 150ms linear;\n    }\n  }\n`;\nexport const Rating = (_ref) => {\n  let {\n    max,\n    icon,\n    size,\n    icons,\n    readOnly,\n    disabled,\n    defaultValue,\n    onChange\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"max\", \"icon\", \"size\", \"icons\", \"readOnly\", \"disabled\", \"defaultValue\", \"onChange\"]);\n\n  const list = new Array(max).fill(null).map((_, i) => i + 1);\n  const {\n    0: value,\n    1: setValue\n  } = useState(defaultValue);\n  const {\n    0: rate,\n    1: setRate\n  } = useState(null);\n\n  const onMouseEnter = item => {\n    if (!readOnly && !disabled) setRate(item);\n  };\n\n  const onMouseLeave = () => {\n    if (!readOnly && !disabled) setRate(null);\n  };\n\n  const onClick = item => {\n    if (!readOnly && !disabled) setValue(item);\n    if (onChange && !readOnly && !disabled) onChange(item);\n  };\n\n  return __jsx(Wrap, _extends({}, props, {\n    size: size,\n    disabled: disabled\n  }), list.map((item, index) => __jsx(Rate, {\n    key: item,\n    size: size,\n    onMouseEnter: () => onMouseEnter(item),\n    onMouseLeave: onMouseLeave,\n    onClick: () => onClick(item),\n    readOnly: readOnly,\n    disabled: disabled\n  }, __jsx(Icon, {\n    icon: icons && icons.length === max ? icons[index] : icon,\n    fill: item <= value || item <= rate ? 'var(--default-color-accent)' : disabled ? 'var(--default-color-text)' : 'var(--default-color-accent-gray)',\n    style: size === 'xs' ? {\n      transform: 'scale(.85)'\n    } : {},\n    size: 'xs'\n  }))));\n};\nRating.defaultProps = {\n  icon: 'star',\n  size: 's',\n  defaultValue: 0,\n  max: 5\n};\nexport default Rating;","map":null,"metadata":{},"sourceType":"module"}
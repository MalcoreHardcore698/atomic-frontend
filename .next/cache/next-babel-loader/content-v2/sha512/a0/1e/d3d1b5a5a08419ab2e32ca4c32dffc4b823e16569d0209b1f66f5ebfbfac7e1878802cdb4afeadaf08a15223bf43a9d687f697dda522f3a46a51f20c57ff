{"ast":null,"code":"import React from 'react';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Text from '../../atomic-ui/components/Text';\nimport Message from '../../atomic-ui/components/Message';\nimport Input from '../../atomic-ui/components/Input';\nimport Column from '../../atomic-ui/components/Column';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { Loader } from '../Styled';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"TicketChat__Wrap\",\n  componentId: \"sc-3e5jur-0\"\n})([\"width:100%;flex-grow:1;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"TicketChat__Header\",\n  componentId: \"sc-3e5jur-1\"\n})([\"justify-content:space-between;width:100%;\"]);\nexport const Messages = styled(Column).withConfig({\n  displayName: \"TicketChat__Messages\",\n  componentId: \"sc-3e5jur-2\"\n})([\"position:relative;background:#fbfbfb;border-radius:var(--surface-border-radius);padding:var(--default-gap);padding-top:55px;flex-grow:1;\"]);\nexport const Meta = styled(Row).withConfig({\n  displayName: \"TicketChat__Meta\",\n  componentId: \"sc-3e5jur-3\"\n})([\"position:absolute;top:0;left:0;width:100%;justify-content:space-between;padding:8px var(--default-gap);border-radius:var(--surface-border-radius) var(--surface-border-radius) 0 0;background:var(--ghost-color-background);\"]);\nexport const Empty = styled(Text).withConfig({\n  displayName: \"TicketChat__Empty\",\n  componentId: \"sc-3e5jur-4\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;flex-grow:1;\"]);\nexport const TicketChat = ({\n  ticket,\n  loading,\n  onLink,\n  onFinish,\n  onReport,\n  onAttach,\n  onSubmit,\n  ...props\n}) => {\n  var _ticket$author;\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  if (!ticket) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      appearance: 'error',\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      }\n    }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E\\u0431 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0438\");\n  }\n\n  return /*#__PURE__*/React.createElement(Wrap, props, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Difinition, {\n    label: 'Автор обращения',\n    text: ((_ticket$author = ticket.author) === null || _ticket$author === void 0 ? void 0 : _ticket$author.name) || '-'\n  }), /*#__PURE__*/React.createElement(Row, null, ticket.status !== 'CLOSED' && /*#__PURE__*/React.createElement(Button, {\n    onClick: onFinish,\n    disabled: !ticket\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: onReport,\n    kind: 'icon',\n    appearance: 'red',\n    disabled: !ticket\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'flag',\n    stroke: 'white'\n  })))), /*#__PURE__*/React.createElement(Messages, null, /*#__PURE__*/React.createElement(Meta, null, /*#__PURE__*/React.createElement(Text, null, \"\\u0422\\u0435\\u043C\\u0430: \", ticket.title), /*#__PURE__*/React.createElement(Text, null, ticket.createdAt)), ticket && ticket.messages && ticket.messages.length > 0 ? ticket.messages.map(message => {\n    var _message$user, _message$user$avatar;\n\n    return /*#__PURE__*/React.createElement(Message, {\n      key: message.id,\n      avatar: (_message$user = message.user) === null || _message$user === void 0 ? void 0 : (_message$user$avatar = _message$user.avatar) === null || _message$user$avatar === void 0 ? void 0 : _message$user$avatar.path,\n      side: message.side,\n      name: message.name,\n      text: message.text,\n      time: message.time,\n      onLink: onLink\n    });\n  }) : /*#__PURE__*/React.createElement(Empty, null, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\")), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    onSubmit: onAttach\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'attach',\n    stroke: 'white'\n  })), /*#__PURE__*/React.createElement(Input, {\n    placeholder: 'Отправьте сообщенение...',\n    appearance: 'ghost'\n  }), /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    onSubmit: onSubmit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'send',\n    stroke: 'white'\n  }))));\n};\nexport default TicketChat;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/TicketChat/index.js"],"names":["React","styled","Row","Difinition","Button","Icon","Text","Message","Input","Column","Spinner","Alert","Loader","Wrap","Header","Messages","Meta","Empty","TicketChat","ticket","loading","onLink","onFinish","onReport","onAttach","onSubmit","props","width","textAlign","author","name","status","title","createdAt","messages","length","map","message","id","user","avatar","path","side","text","time"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport Button from '../../atomic-ui/components/Button'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Text from '../../atomic-ui/components/Text'\nimport Message from '../../atomic-ui/components/Message'\nimport Input from '../../atomic-ui/components/Input'\nimport Column from '../../atomic-ui/components/Column'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Alert from '../../atomic-ui/components/Alert'\n\nimport { Loader } from '../Styled'\n\nexport const Wrap = styled(Column)`\n  width: 100%;\n  flex-grow: 1;\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n  width: 100%;\n`\n\nexport const Messages = styled(Column)`\n  position: relative;\n  background: #fbfbfb;\n  border-radius: var(--surface-border-radius);\n  padding: var(--default-gap);\n  padding-top: 55px;\n  flex-grow: 1;\n`\n\nexport const Meta = styled(Row)`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  justify-content: space-between;\n  padding: 8px var(--default-gap);\n  border-radius: var(--surface-border-radius) var(--surface-border-radius) 0 0;\n  background: var(--ghost-color-background);\n`\n\nexport const Empty = styled(Text)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n`\n\nexport const TicketChat = ({\n  ticket,\n  loading,\n  onLink,\n  onFinish,\n  onReport,\n  onAttach,\n  onSubmit,\n  ...props\n}) => {\n  if (loading) {\n    return (\n      <Loader>\n        <Spinner />\n      </Loader>\n    )\n  }\n\n  if (!ticket) {\n    return (\n      <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n        Упс! Не удалось загрузить информацию об обращении\n      </Alert>\n    )\n  }\n\n  return (\n    <Wrap {...props}>\n      <Header>\n        <Difinition label={'Автор обращения'} text={ticket.author?.name || '-'} />\n\n        <Row>\n          {ticket.status !== 'CLOSED' && (\n            <Button onClick={onFinish} disabled={!ticket}>\n              Закрыть обращение\n            </Button>\n          )}\n          <Button onClick={onReport} kind={'icon'} appearance={'red'} disabled={!ticket}>\n            <Icon icon={'flag'} stroke={'white'} />\n          </Button>\n        </Row>\n      </Header>\n\n      <Messages>\n        <Meta>\n          <Text>Тема: {ticket.title}</Text>\n          <Text>{ticket.createdAt}</Text>\n        </Meta>\n\n        {ticket && ticket.messages && ticket.messages.length > 0 ? (\n          ticket.messages.map((message) => (\n            <Message\n              key={message.id}\n              avatar={message.user?.avatar?.path}\n              side={message.side}\n              name={message.name}\n              text={message.text}\n              time={message.time}\n              onLink={onLink}\n            />\n          ))\n        ) : (\n          <Empty>Выберите обращение</Empty>\n        )}\n      </Messages>\n\n      <Row>\n        <Button kind={'icon'} onSubmit={onAttach}>\n          <Icon icon={'attach'} stroke={'white'} />\n        </Button>\n        <Input placeholder={'Отправьте сообщенение...'} appearance={'ghost'} />\n        <Button kind={'icon'} onSubmit={onSubmit}>\n          <Icon icon={'send'} stroke={'white'} />\n        </Button>\n      </Row>\n    </Wrap>\n  )\n}\n\nexport default TicketChat\n"]},"metadata":{},"sourceType":"module"}
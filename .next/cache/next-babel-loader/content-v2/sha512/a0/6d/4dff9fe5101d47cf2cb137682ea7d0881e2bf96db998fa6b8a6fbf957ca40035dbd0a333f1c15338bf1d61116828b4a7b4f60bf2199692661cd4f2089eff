{"ast":null,"code":"import React, { useState, useRef } from 'react';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Text from '../../atomic-ui/components/Text';\nimport DateText from '../../atomic-ui/components/DateText';\nimport Message from '../../atomic-ui/components/Message';\nimport Input from '../../atomic-ui/components/Input';\nimport Column from '../../atomic-ui/components/Column';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { Loader } from '../Styled';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"TicketChat__Wrap\",\n  componentId: \"sc-3e5jur-0\"\n})([\"width:100%;flex-grow:1;\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"TicketChat__Header\",\n  componentId: \"sc-3e5jur-1\"\n})([\"justify-content:space-between;width:100%;\"]);\nexport const Messages = styled(Column).withConfig({\n  displayName: \"TicketChat__Messages\",\n  componentId: \"sc-3e5jur-2\"\n})([\"position:relative;background:#fbfbfb;border-radius:var(--surface-border-radius);padding:var(--default-gap);padding-top:55px;flex-grow:1;\"]);\nexport const Meta = styled(Row).withConfig({\n  displayName: \"TicketChat__Meta\",\n  componentId: \"sc-3e5jur-3\"\n})([\"position:absolute;top:0;left:0;width:100%;justify-content:space-between;padding:8px var(--default-gap);border-radius:var(--surface-border-radius) var(--surface-border-radius) 0 0;background:var(--ghost-color-background);time{font-size:var(--font-size-m);font-weight:var(--font-weight-regular);color:var(--default-color-text);}\"]);\nexport const AuthAlert = styled(Alert).withConfig({\n  displayName: \"TicketChat__AuthAlert\",\n  componentId: \"sc-3e5jur-4\"\n})([\"width:100%;text-align:center;\"]);\nexport const Empty = styled(Text).withConfig({\n  displayName: \"TicketChat__Empty\",\n  componentId: \"sc-3e5jur-5\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;height:100%;flex-grow:1;\"]);\nexport const TicketChat = ({\n  auth,\n  ticket,\n  loading,\n  onLink,\n  onFinish,\n  // onReport,\n  onAttach,\n  onSubmit,\n  ...props\n}) => {\n  var _ticket$counsellor, _ticket$author, _ticket$messages, _ticket$counsellor3, _ticket$counsellor4;\n\n  const [message, setMessage] = useState('');\n  const messageRef = useRef(null);\n  const isAccess = (ticket === null || ticket === void 0 ? void 0 : (_ticket$counsellor = ticket.counsellor) === null || _ticket$counsellor === void 0 ? void 0 : _ticket$counsellor.email) === auth;\n  return /*#__PURE__*/React.createElement(Wrap, props, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Difinition, {\n    label: 'Автор обращения',\n    text: ticket !== null && ticket !== void 0 && (_ticket$author = ticket.author) !== null && _ticket$author !== void 0 && _ticket$author.name && !loading ? ticket.author.name : '-'\n  }), /*#__PURE__*/React.createElement(Row, null, (ticket === null || ticket === void 0 ? void 0 : ticket.status) !== 'CLOSED' && /*#__PURE__*/React.createElement(Button, {\n    onClick: onFinish,\n    disabled: !isAccess || loading || !ticket\n  }, \"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\"))), /*#__PURE__*/React.createElement(Messages, null, /*#__PURE__*/React.createElement(Meta, null, /*#__PURE__*/React.createElement(Text, null, \"\\u0422\\u0435\\u043C\\u0430: \", ticket !== null && ticket !== void 0 && ticket.title && !loading ? ticket.title : '-'), ticket !== null && ticket !== void 0 && ticket.createdAt && !loading ? /*#__PURE__*/React.createElement(DateText, {\n    text: ticket.createdAt,\n    options: {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric'\n    }\n  }) : /*#__PURE__*/React.createElement(Text, null, \"-\")), !loading && (ticket === null || ticket === void 0 ? void 0 : (_ticket$messages = ticket.messages) === null || _ticket$messages === void 0 ? void 0 : _ticket$messages.length) > 0 ? ((ticket === null || ticket === void 0 ? void 0 : ticket.messages) || []).map(message => {\n    var _message$user, _message$user$avatar, _message$user2, _ticket$counsellor2, _message$user3;\n\n    return /*#__PURE__*/React.createElement(Message, {\n      key: message.id,\n      avatar: (_message$user = message.user) === null || _message$user === void 0 ? void 0 : (_message$user$avatar = _message$user.avatar) === null || _message$user$avatar === void 0 ? void 0 : _message$user$avatar.path,\n      side: ((_message$user2 = message.user) === null || _message$user2 === void 0 ? void 0 : _message$user2.email) === ((_ticket$counsellor2 = ticket.counsellor) === null || _ticket$counsellor2 === void 0 ? void 0 : _ticket$counsellor2.email) ? 'owner' : 'observer',\n      name: (_message$user3 = message.user) === null || _message$user3 === void 0 ? void 0 : _message$user3.name,\n      text: message.text,\n      time: message.createdAt !== message.updatedAt ? message.updatedAt : message.createdAt,\n      tails: {\n        default: '/parts/tail.svg',\n        owner: '/parts/tail-owner.svg'\n      },\n      onLink: () => onLink(message.user)\n    });\n  }) : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : !ticket ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E\\u0431 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0438\") : /*#__PURE__*/React.createElement(Empty, null, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435\")), isAccess ? /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    disabled: loading || !ticket,\n    onSubmit: onAttach\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'attach',\n    stroke: 'white'\n  })), /*#__PURE__*/React.createElement(Input, {\n    ref: messageRef,\n    placeholder: 'Отправьте сообщенение...',\n    disabled: loading || !ticket,\n    appearance: 'ghost',\n    onChange: e => {\n      var _e$target;\n\n      return setMessage((e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value) || '');\n    },\n    onKeyDown: e => {\n      // Pressed ENTER\n      if (e.keyCode === 13) {\n        onSubmit(message);\n        messageRef.current.value = '';\n      }\n    },\n    tabIndex: -1\n  }), /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    disabled: loading || !ticket,\n    onClick: () => {\n      onSubmit(message);\n      messageRef.current.value = '';\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'send',\n    stroke: 'white'\n  }))) : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(AuthAlert, null, \"\\u0414\\u043B\\u044F \\u043E\\u0442\\u0432\\u0435\\u0442\\u0430 \\u043D\\u0430 \\u044D\\u0442\\u043E \\u043E\\u0431\\u0440\\u0430\\u0449\\u0435\\u043D\\u0438\\u0435, \\u0430\\u0432\\u0442\\u043E\\u0440\\u0438\\u0437\\u0443\\u0439\\u0442\\u0435\\u0441\\u044C \\u043F\\u043E\\u0434 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u043C \", ticket === null || ticket === void 0 ? void 0 : (_ticket$counsellor3 = ticket.counsellor) === null || _ticket$counsellor3 === void 0 ? void 0 : _ticket$counsellor3.name, \" (\", ticket === null || ticket === void 0 ? void 0 : (_ticket$counsellor4 = ticket.counsellor) === null || _ticket$counsellor4 === void 0 ? void 0 : _ticket$counsellor4.email, \")\"));\n};\nexport default TicketChat;","map":null,"metadata":{},"sourceType":"module"}
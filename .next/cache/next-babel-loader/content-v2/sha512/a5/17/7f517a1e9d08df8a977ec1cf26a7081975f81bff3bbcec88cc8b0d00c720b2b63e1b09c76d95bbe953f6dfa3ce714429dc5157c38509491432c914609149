{"ast":null,"code":"var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport gql from 'graphql-tag';\nimport { ProjectFields } from '../../fragments';\nexport var GET_PROJECT = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query getProject($id: ID!) {\\n    getProject(id: $id) {\\n      ...ProjectFields\\n    }\\n  }\\n  \", \"\\n\"])), ProjectFields);\nexport var GET_PROJECTS = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  query getProjects($offset: Int, $limit: Int, $category: ID, $status: PostStatus) {\\n    getProjects(offset: $offset, limit: $limit, category: $category, status: $status) {\\n      id\\n      title\\n      description\\n      company {\\n        name\\n        email\\n        avatar {\\n          path\\n        }\\n      }\\n      preview {\\n        id\\n        path\\n      }\\n      screenshots {\\n        id\\n        path\\n      }\\n      category {\\n        id\\n        name\\n      }\\n      status\\n    }\\n  }\\n\"])));\nexport var GET_PROJECTS_BY_IDS = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n  query getProjectsByIds($projects: [ID]!, $status: PostStatus) {\\n    getProjectsByIds(projects: $projects, status: $status) {\\n      ...ProjectFields\\n    }\\n  }\\n  \", \"\\n\"])), ProjectFields);\nexport var LIKE_PROJECT = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n  mutation likeProject($id: ID!) {\\n    likeProject(id: $id) {\\n      likedProjects {\\n        ...ProjectFields\\n      }\\n    }\\n  }\\n  \", \"\\n\"])), ProjectFields);\nexport var CREATE_PROJECT = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n  mutation createProject($input: ProjectCreateInput!, $status: PostStatus) {\\n    createProject(input: $input, status: $status) {\\n      ...ProjectFields\\n    }\\n  }\\n  \", \"\\n\"])), ProjectFields);\nexport var UPDATE_PROJECT = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n  mutation updateProject($id: ID!, $input: ProjectUpdateInput!, $status: PostStatus) {\\n    updateProject(id: $id, input: $input, status: $status) {\\n      ...ProjectFields\\n    }\\n  }\\n  \", \"\\n\"])), ProjectFields);\nexport var DELETE_PROJECT = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n  mutation deleteProject($id: ID!, $status: PostStatus) {\\n    deleteProject(id: $id, status: $status) {\\n      ...ProjectFields\\n    }\\n  }\\n  \", \"\\n\"])), ProjectFields);","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/graphql/queries/Project/index.js"],"names":["gql","ProjectFields","GET_PROJECT","GET_PROJECTS","GET_PROJECTS_BY_IDS","LIKE_PROJECT","CREATE_PROJECT","UPDATE_PROJECT","DELETE_PROJECT"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,aAAT,QAA8B,iBAA9B;AAEA,OAAO,IAAMC,WAAW,GAAGF,GAAH,+KAMpBC,aANoB,CAAjB;AASP,OAAO,IAAME,YAAY,GAAGH,GAAH,ikBAAlB;AA8BP,OAAO,IAAMI,mBAAmB,GAAGJ,GAAH,uPAM5BC,aAN4B,CAAzB;AASP,OAAO,IAAMI,YAAY,GAAGL,GAAH,wNAQrBC,aARqB,CAAlB;AAWP,OAAO,IAAMK,cAAc,GAAGN,GAAH,yPAMvBC,aANuB,CAApB;AASP,OAAO,IAAMM,cAAc,GAAGP,GAAH,4QAMvBC,aANuB,CAApB;AASP,OAAO,IAAMO,cAAc,GAAGR,GAAH,gOAMvBC,aANuB,CAApB","sourcesContent":["import gql from 'graphql-tag'\nimport { ProjectFields } from '../../fragments'\n\nexport const GET_PROJECT = gql`\n  query getProject($id: ID!) {\n    getProject(id: $id) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`\n\nexport const GET_PROJECTS = gql`\n  query getProjects($offset: Int, $limit: Int, $category: ID, $status: PostStatus) {\n    getProjects(offset: $offset, limit: $limit, category: $category, status: $status) {\n      id\n      title\n      description\n      company {\n        name\n        email\n        avatar {\n          path\n        }\n      }\n      preview {\n        id\n        path\n      }\n      screenshots {\n        id\n        path\n      }\n      category {\n        id\n        name\n      }\n      status\n    }\n  }\n`\n\nexport const GET_PROJECTS_BY_IDS = gql`\n  query getProjectsByIds($projects: [ID]!, $status: PostStatus) {\n    getProjectsByIds(projects: $projects, status: $status) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`\n\nexport const LIKE_PROJECT = gql`\n  mutation likeProject($id: ID!) {\n    likeProject(id: $id) {\n      likedProjects {\n        ...ProjectFields\n      }\n    }\n  }\n  ${ProjectFields}\n`\n\nexport const CREATE_PROJECT = gql`\n  mutation createProject($input: ProjectCreateInput!, $status: PostStatus) {\n    createProject(input: $input, status: $status) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`\n\nexport const UPDATE_PROJECT = gql`\n  mutation updateProject($id: ID!, $input: ProjectUpdateInput!, $status: PostStatus) {\n    updateProject(id: $id, input: $input, status: $status) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`\n\nexport const DELETE_PROJECT = gql`\n  mutation deleteProject($id: ID!, $status: PostStatus) {\n    deleteProject(id: $id, status: $status) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`\n"]},"metadata":{},"sourceType":"module"}
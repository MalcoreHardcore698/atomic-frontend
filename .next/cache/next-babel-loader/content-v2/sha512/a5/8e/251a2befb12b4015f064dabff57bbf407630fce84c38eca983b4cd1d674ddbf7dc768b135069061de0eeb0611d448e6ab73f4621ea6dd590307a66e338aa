{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport Title from '../atomic-ui/components/Title';\nimport ContentLayout from '../layouts/content';\nimport UserList from '../components/UserList';\nimport ArticleList from '../components/ArticleList';\nimport ProjectSuit from '../components/ProjectSuit';\nimport { useProject } from '../hooks/useProject';\nimport { COMMON_START_OFFSET, COMMON_LOAD_LIMIT } from '../constants';\nimport queries from '../graphql/queries';\nconst TITLE = 'Атомик';\nconst ASIDE_PROPS = {\n  limit: 3,\n  startOffset: COMMON_START_OFFSET,\n  gridOptions: {\n    length: 'auto-fit',\n    percentage: '1fr'\n  },\n  withoutSearch: true,\n  withoutMore: true\n};\nconst Aside = styled.aside.withConfig({\n  displayName: \"pages__Aside\",\n  componentId: \"sc-1kp8388-0\"\n})([\"display:flex;flex-direction:column;grid-gap:var(--default-gap);width:394px;@media only screen and (max-width:1196px){width:auto;}\"]);\n_c = Aside;\n\nconst Home = ({\n  store\n}) => {\n  _s();\n\n  const methods = useProject();\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    store: store,\n    getType: 'getProjects',\n    limit: COMMON_LOAD_LIMIT,\n    emptyMessage: 'Проектов нет',\n    getQuery: queries.GET_PROJECTS,\n    startOffsett: COMMON_START_OFFSET,\n    variables: {\n      status: 'PUBLISHED'\n    },\n    render: document => /*#__PURE__*/React.createElement(ProjectSuit, _extends({}, methods, {\n      project: document\n    })),\n    aside: /*#__PURE__*/React.createElement(Aside, null, /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u0410\\u0432\\u0442\\u043E\\u0440\\u044B\"), /*#__PURE__*/React.createElement(UserList, ASIDE_PROPS), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0438\"), /*#__PURE__*/React.createElement(ArticleList, _extends({}, ASIDE_PROPS, {\n      layout: 'column'\n    })))\n  });\n};\n\n_s(Home, \"1J2i0XYLTUPsHAaUowqhcO/eEy0=\", false, function () {\n  return [useProject];\n});\n\n_c2 = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Aside\");\n$RefreshReg$(_c2, \"Home\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/index.js"],"names":["React","styled","Title","ContentLayout","UserList","ArticleList","ProjectSuit","useProject","COMMON_START_OFFSET","COMMON_LOAD_LIMIT","queries","TITLE","ASIDE_PROPS","limit","startOffset","gridOptions","length","percentage","withoutSearch","withoutMore","Aside","aside","Home","store","methods","GET_PROJECTS","status","document"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,KAAP,MAAkB,+BAAlB;AAEA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AAEA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,cAAvD;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,MAAMC,KAAK,GAAG,QAAd;AAEA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,CADW;AAElBC,EAAAA,WAAW,EAAEN,mBAFK;AAGlBO,EAAAA,WAAW,EAAE;AAAEC,IAAAA,MAAM,EAAE,UAAV;AAAsBC,IAAAA,UAAU,EAAE;AAAlC,GAHK;AAIlBC,EAAAA,aAAa,EAAE,IAJG;AAKlBC,EAAAA,WAAW,EAAE;AALK,CAApB;AAQA,MAAMC,KAAK,GAAGnB,MAAM,CAACoB,KAAV;AAAA;AAAA;AAAA,yIAAX;KAAMD,K;;AAWN,MAAME,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAAA;;AAC1B,QAAMC,OAAO,GAAGjB,UAAU,EAA1B;AAEA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEI,KADT;AAEE,IAAA,KAAK,EAAEY,KAFT;AAGE,IAAA,OAAO,EAAE,aAHX;AAIE,IAAA,KAAK,EAAEd,iBAJT;AAKE,IAAA,YAAY,EAAE,cALhB;AAME,IAAA,QAAQ,EAAEC,OAAO,CAACe,YANpB;AAOE,IAAA,YAAY,EAAEjB,mBAPhB;AAQE,IAAA,SAAS,EAAE;AAAEkB,MAAAA,MAAM,EAAE;AAAV,KARb;AASE,IAAA,MAAM,EAAGC,QAAD,iBAAc,oBAAC,WAAD,eAAiBH,OAAjB;AAA0B,MAAA,OAAO,EAAEG;AAAnC,OATxB;AAUE,IAAA,KAAK,eACH,oBAAC,KAAD,qBACE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE;AAAZ,8CADF,eAEE,oBAAC,QAAD,EAAcf,WAAd,CAFF,eAIE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE;AAAZ,oDAJF,eAKE,oBAAC,WAAD,eAAiBA,WAAjB;AAA8B,MAAA,MAAM,EAAE;AAAtC,OALF;AAXJ,IADF;AAsBD,CAzBD;;GAAMU,I;UACYf,U;;;MADZe,I;;AAmDN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nimport Title from '../atomic-ui/components/Title'\n\nimport ContentLayout from '../layouts/content'\nimport UserList from '../components/UserList'\nimport ArticleList from '../components/ArticleList'\nimport ProjectSuit from '../components/ProjectSuit'\nimport { useProject } from '../hooks/useProject'\nimport { initializeApollo } from '../apollo'\nimport { COMMON_START_OFFSET, COMMON_LOAD_LIMIT } from '../constants'\nimport queries from '../graphql/queries'\n\nconst TITLE = 'Атомик'\n\nconst ASIDE_PROPS = {\n  limit: 3,\n  startOffset: COMMON_START_OFFSET,\n  gridOptions: { length: 'auto-fit', percentage: '1fr' },\n  withoutSearch: true,\n  withoutMore: true\n}\n\nconst Aside = styled.aside`\n  display: flex;\n  flex-direction: column;\n  grid-gap: var(--default-gap);\n  width: 394px;\n\n  @media only screen and (max-width: 1196px) {\n    width: auto;\n  }\n`\n\nconst Home = ({ store }) => {\n  const methods = useProject()\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      store={store}\n      getType={'getProjects'}\n      limit={COMMON_LOAD_LIMIT}\n      emptyMessage={'Проектов нет'}\n      getQuery={queries.GET_PROJECTS}\n      startOffsett={COMMON_START_OFFSET}\n      variables={{ status: 'PUBLISHED' }}\n      render={(document) => <ProjectSuit {...methods} project={document} />}\n      aside={\n        <Aside>\n          <Title tag={'h4'}>Авторы</Title>\n          <UserList {...ASIDE_PROPS} />\n\n          <Title tag={'h4'}>Новости</Title>\n          <ArticleList {...ASIDE_PROPS} layout={'column'} />\n        </Aside>\n      }\n    />\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let scaffold = null\n\n  try {\n    const response = await client.query({ query: queries.GET_META_SCAFFOLD })\n\n    if (response && response.data) {\n      scaffold = response.data.getDashboardSettings?.scaffold\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        scaffold\n      }\n    }\n  }\n}\n\nexport default Home\n"]},"metadata":{},"sourceType":"module"}
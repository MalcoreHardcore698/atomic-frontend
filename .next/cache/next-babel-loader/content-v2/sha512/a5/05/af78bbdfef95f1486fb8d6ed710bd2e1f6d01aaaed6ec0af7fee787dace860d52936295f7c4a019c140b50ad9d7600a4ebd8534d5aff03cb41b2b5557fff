{"ast":null,"code":"import React from 'react';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { ThemeProvider } from 'styled-components';\nimport { Provider } from 'react-redux';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport NextNprogress from 'nextjs-progressbar';\nimport { motion } from 'framer-motion';\nimport 'react-lazy-load-image-component/src/effects/opacity.css';\nimport '../atomic-ui/theme/default.css';\nimport '../atomic-ui/assets/styles/styles.css';\nimport theme from '../atomic-ui/theme';\nimport { setSettings } from '../store/actions/root';\nimport { useApollo, initializeApollo } from '../apollo';\nimport { useStore, initializeStore } from '../store';\nimport queries from '../graphql/queries';\n\nconst App = ({\n  Component,\n  pageProps\n}) => {\n  const client = useApollo(pageProps.initialApolloState);\n  const store = useStore(pageProps.initialReduxState);\n  const router = useRouter();\n  return /*#__PURE__*/React.createElement(Provider, {\n    store: store\n  }, /*#__PURE__*/React.createElement(ApolloProvider, {\n    client: client\n  }, /*#__PURE__*/React.createElement(Head, null, /*#__PURE__*/React.createElement(\"title\", null, \"\\u0410\\u0442\\u043E\\u043C\\u0438\\u043A\"), /*#__PURE__*/React.createElement(\"meta\", {\n    charSet: 'utf-8'\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: 'viewport',\n    content: 'minimum-scale=1, initial-scale=1, width=device-width'\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: 'theme-color',\n    content: '#000000'\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: 'description',\n    content: 'Атомик – портал для формирования новой сферы образования'\n  }), /*#__PURE__*/React.createElement(\"meta\", {\n    name: 'yandex-verification',\n    content: 'bfd04b96d30382f5'\n  })), /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(motion.div, {\n    key: router.route,\n    initial: 'pageInitial',\n    animate: 'pageAnimate',\n    variants: {\n      pageInitial: {\n        opacity: 0\n      },\n      pageAnimate: {\n        opacity: 1\n      }\n    }\n  }, /*#__PURE__*/React.createElement(Component, pageProps)), /*#__PURE__*/React.createElement(NextNprogress, {\n    color: 'var(--default-color-accent)',\n    startPosition: 0.3,\n    stopDelayMs: 200,\n    height: 3\n  }))));\n};\n\nexport const getServerSideProps = async () => {\n  const store = initializeStore();\n  const client = initializeApollo();\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META\n    });\n\n    if (response && response.data) {\n      const settings = response.data.getDashboardSettings;\n      if (settings) store.dispatch(setSettings(settings));\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      initialReduxState: store.getState(),\n      initialApolloState: client.cache.extract()\n    },\n    revalidate: 1\n  };\n};\nexport default App;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/_app.js"],"names":["React","Head","useRouter","ThemeProvider","Provider","ApolloProvider","NextNprogress","motion","theme","setSettings","useApollo","initializeApollo","useStore","initializeStore","queries","App","Component","pageProps","client","initialApolloState","store","initialReduxState","router","route","pageInitial","opacity","pageAnimate","getServerSideProps","response","query","GET_META","data","settings","getDashboardSettings","dispatch","err","console","log","props","getState","cache","extract","revalidate"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Head from 'next/head'\nimport { useRouter } from 'next/router'\nimport { ThemeProvider } from 'styled-components'\nimport { Provider } from 'react-redux'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport NextNprogress from 'nextjs-progressbar'\nimport { motion } from 'framer-motion'\n\nimport 'react-lazy-load-image-component/src/effects/opacity.css'\nimport '../atomic-ui/theme/default.css'\nimport '../atomic-ui/assets/styles/styles.css'\nimport theme from '../atomic-ui/theme'\n\nimport { setSettings } from '../store/actions/root'\nimport { useApollo, initializeApollo } from '../apollo'\nimport { useStore, initializeStore } from '../store'\nimport queries from '../graphql/queries'\n\nconst App = ({ Component, pageProps }) => {\n  const client = useApollo(pageProps.initialApolloState)\n  const store = useStore(pageProps.initialReduxState)\n  const router = useRouter()\n\n  return (\n    <Provider store={store}>\n      <ApolloProvider client={client}>\n        <Head>\n          <title>Атомик</title>\n          <meta charSet={'utf-8'} />\n          <meta\n            name={'viewport'}\n            content={'minimum-scale=1, initial-scale=1, width=device-width'}\n          />\n          <meta name={'theme-color'} content={'#000000'} />\n          <meta\n            name={'description'}\n            content={'Атомик – портал для формирования новой сферы образования'}\n          />\n          <meta name={'yandex-verification'} content={'bfd04b96d30382f5'} />\n        </Head>\n\n        <ThemeProvider theme={theme}>\n          <motion.div\n            key={router.route}\n            initial={'pageInitial'}\n            animate={'pageAnimate'}\n            variants={{\n              pageInitial: {\n                opacity: 0\n              },\n              pageAnimate: {\n                opacity: 1\n              }\n            }}>\n            <Component {...pageProps} />\n          </motion.div>\n\n          <NextNprogress\n            color={'var(--default-color-accent)'}\n            startPosition={0.3}\n            stopDelayMs={200}\n            height={3}\n          />\n        </ThemeProvider>\n      </ApolloProvider>\n    </Provider>\n  )\n}\n\nexport const getServerSideProps = async () => {\n  const store = initializeStore()\n  const client = initializeApollo()\n\n  try {\n    const response = await client.query({ query: queries.GET_META })\n\n    if (response && response.data) {\n      const settings = response.data.getDashboardSettings\n      if (settings) store.dispatch(setSettings(settings))\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      initialReduxState: store.getState(),\n      initialApolloState: client.cache.extract()\n    },\n    revalidate: 1\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
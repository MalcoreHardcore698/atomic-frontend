{"ast":null,"code":"import gql from 'graphql-tag';\nimport { UserFields, MessageFields, ProjectFields } from '../../fragments';\nexport const GOOGLE_AUTH = gql`\n  mutation googleAuth($accessToken: String!) {\n    googleAuth(accessToken: $accessToken) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const FACEBOOK_AUTH = gql`\n  mutation facebookAuth($accessToken: String!) {\n    facebookAuth(accessToken: $accessToken) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const CHECKIN = gql`\n  mutation checkin($login: String!) {\n    checkin(login: $login)\n  }\n`;\nexport const LOGIN = gql`\n  mutation login($login: String!, $password: String!) {\n    login(login: $login, password: $password) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const REGISTER = gql`\n  mutation register($input: RegisterInput) {\n    register(input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const LOGOUT = gql`\n  mutation logout {\n    logout\n  }\n`;\nexport const CHECK_USER = gql`\n  query checkUser($search: String!) {\n    checkUser(search: $search) {\n      status\n      message\n    }\n  }\n`;\nexport const GET_USER = gql`\n  query getUser($email: String) {\n    getUser(email: $email) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const GET_USERS = gql`\n  query getUsers($search: String, $email: [String], $account: [AccountType], $company: String) {\n    getUsers(search: $search, email: $email, account: $account, company: $company) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const GET_USER_MEMBERS = gql`\n  query getUserMembers($email: String!) {\n    getUserMembers(email: $email) {\n      name\n      about\n      avatar {\n        id\n        path\n      }\n      account\n      email\n    }\n  }\n`;\nexport const GET_USER_PARTICIPANT_PROJECTS = gql`\n  query getProjects($member: String) {\n    getProjects(member: $member) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`;\nexport const GET_USER_PROJECTS = gql`\n  query getProjects($author: String) {\n    getProjects(author: $author) {\n      ...ProjectFields\n    }\n  }\n  ${ProjectFields}\n`;\nexport const CREATE_USER = gql`\n  mutation createUser($input: UserCreateInput!) {\n    createUser(input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const UPDATE_CLIENT_USER = gql`\n  mutation updateClientUser($input: UserUpdateInput!) {\n    updateClientUser(input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const UPDATE_USER = gql`\n  mutation updateUser($email: String!, $input: UserUpdateInput!) {\n    updateUser(email: $email, input: $input) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const DELETE_USER = gql`\n  mutation deleteUser($email: String!) {\n    deleteUser(email: $email) {\n      ...UserFields\n    }\n  }\n  ${UserFields}\n`;\nexport const ADD_USER_PROJECT = gql`\n  mutation addUserProject($project: ID!, $folder: ID!) {\n    addUserProject(project: $project, folder: $folder)\n  }\n`;\nexport const ADD_USER_FOLDER = gql`\n  mutation addUserFolder($name: String!) {\n    addUserFolder(name: $name) {\n      id\n      name\n      projects {\n        id\n      }\n    }\n  }\n`;\nexport const DELETE_USER_FOLDER = gql`\n  mutation deleteUserFolder($id: ID!) {\n    deleteUserFolder(id: $id) {\n      id\n      name\n      projects {\n        id\n      }\n    }\n  }\n`;\nexport const GET_USER_CHATS = gql`\n  query getUserChats {\n    getUserChats {\n      chat {\n        id\n        type\n        title\n        members {\n          name\n          avatar {\n            path\n          }\n        }\n        messages {\n          ...MessageFields\n        }\n      }\n      status\n      updatedAt\n      createdAt\n    }\n  }\n  ${MessageFields}\n`;","map":null,"metadata":{},"sourceType":"module"}
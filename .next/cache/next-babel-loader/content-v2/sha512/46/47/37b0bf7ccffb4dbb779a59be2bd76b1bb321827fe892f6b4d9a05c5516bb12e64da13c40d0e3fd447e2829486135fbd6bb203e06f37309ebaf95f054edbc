{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport ContentLayout from '../../layouts/content';\nimport ProjectCard from '../../components/ProjectCard';\nimport { onProjectCreate, onProjectEdit, onProjectDelete, onProjectLink, onProjectScreenshot } from '../../store/helpers/project';\nimport { setDocuments } from '../../store/actions/documents';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport { onUserAboutMore } from '../../store/helpers/user';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Проекты';\nconst START_OFFSET = 12;\nconst LIMIT = 12;\n\nconst Projects = ({\n  store\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER'\n    }, {\n      type: 'SELECT',\n      options: store === null || store === void 0 ? void 0 : store.categories.map(category => ({\n        value: category.id,\n        label: getLabelCategory(category.name)\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата публикации',\n      value: 'createdAt'\n    }],\n    handle: {\n      icon: 'work',\n      buttonCreateText: 'Создать проект',\n      onCreate: recall(onProjectCreate, {\n        companies: store.companies,\n        categories: store.categories,\n        statuses: store.statuses,\n        canEditStatus,\n        mutation: queries.CREATE_PROJECT,\n        query: queries.GET_USERS\n      }),\n      onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n    },\n    limit: LIMIT,\n    startOffset: START_OFFSET,\n    bottomScrollOffset: 650,\n    query: queries.GET_PROJECTS,\n    variables: {\n      status: 'PUBLISHED'\n    },\n    store: {\n      documents: documents || store.projects\n    },\n    dashboard: true\n  }, ({\n    documents\n  }) => displayMethod === 'list' ? /*#__PURE__*/React.createElement(Table, {\n    data: documents,\n    template: templates.project,\n    onChecked: () => {},\n    onClick: project => recall(onProjectLink, {\n      id: project.id,\n      auth: user\n    })(),\n    onDelete: project => recall(onProjectDelete, {\n      id: project.id,\n      project,\n      auth: user,\n      mutation: queries.DELETE_PROJECT\n    })(),\n    onEdit: project => recall(onProjectEdit, {\n      id: project.id,\n      companies: store.companies,\n      categories: store.categories,\n      statuses: store.statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      })\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }) : /*#__PURE__*/React.createElement(Grid, null, documents.map(project => /*#__PURE__*/React.createElement(ProjectCard, {\n    key: project.id,\n    project: project,\n    onChecked: () => {},\n    onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n      screenshots: [project.preview, ...project.screenshots],\n      key\n    })(),\n    onLink: recall(onProjectLink, {\n      id: project.id,\n      user\n    }),\n    onAboutMore: recall(onUserAboutMore, {\n      user: project\n    }),\n    onDelete: recall(onProjectDelete, {\n      id: project.id,\n      project,\n      auth: user,\n      mutation: queries.DELETE_PROJECT\n    }),\n    onEdit: recall(onProjectEdit, {\n      id: project.id,\n      companies: store.companies,\n      categories: store.categories,\n      statuses: store.statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_PROJECT,\n      query: queries.GET_USERS,\n      onCompanyInputChange: mutate(queries.GET_USERS, {\n        account: 'ENTITY'\n      })\n    }),\n    preview: true\n  }))));\n};\n\n_s(Projects, \"rg1fjeEZnKoSgUaBgdOxxrHT1+I=\", false, function () {\n  return [useHelper, useMutate, useSelector, useDispatch];\n});\n\n_c = Projects;\nexport var __N_SSP = true;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/projects.js"],"names":["React","useState","useEffect","useMemo","useSelector","useDispatch","Grid","Table","templates","useHelper","useMutate","ContentLayout","ProjectCard","onProjectCreate","onProjectEdit","onProjectDelete","onProjectLink","onProjectScreenshot","setDocuments","getLabelCategory","onUserAboutMore","queries","TITLE","START_OFFSET","LIMIT","Projects","store","recall","mutate","user","documents","state","dispatch","displayMethod","onChangeDisplayMethod","canEditStatus","role","name","type","options","categories","map","category","value","id","label","icon","buttonCreateText","onCreate","companies","statuses","mutation","CREATE_PROJECT","query","GET_USERS","item","GET_PROJECTS","status","projects","project","auth","DELETE_PROJECT","UPDATE_PROJECT","onCompanyInputChange","account","overflowX","width","_","key","screenshots","preview"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Grid from '../../atomic-ui/components/Grid'\nimport Table from '../../atomic-ui/components/Table'\nimport templates from '../../atomic-ui/components/Table/templates'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\nimport ContentLayout from '../../layouts/content'\nimport ProjectCard from '../../components/ProjectCard'\nimport {\n  onProjectCreate,\n  onProjectEdit,\n  onProjectDelete,\n  onProjectLink,\n  onProjectScreenshot\n} from '../../store/helpers/project'\nimport { setDocuments } from '../../store/actions/documents'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\nimport { onUserAboutMore } from '../../store/helpers/user'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Проекты'\nconst START_OFFSET = 12\nconst LIMIT = 12\n\nconst Projects = ({ store }) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    documents: state.documents\n  }))\n  const dispatch = useDispatch()\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      filters={[\n        { type: 'DATEPICKER' },\n        {\n          type: 'SELECT',\n          options: store?.categories.map((category) => ({\n            value: category.id,\n            label: getLabelCategory(category.name)\n          }))\n        }\n      ]}\n      options={[\n        { label: 'Компания', value: 'company' },\n        { label: 'Участники', value: 'members' },\n        { label: 'Дата публикации', value: 'createdAt' }\n      ]}\n      handle={{\n        icon: 'work',\n        buttonCreateText: 'Создать проект',\n        onCreate: recall(onProjectCreate, {\n          companies: store.companies,\n          categories: store.categories,\n          statuses: store.statuses,\n          canEditStatus,\n          mutation: queries.CREATE_PROJECT,\n          query: queries.GET_USERS\n        }),\n        onChangeDisplayMethod: (item) => onChangeDisplayMethod(item.value)\n      }}\n      limit={LIMIT}\n      startOffset={START_OFFSET}\n      bottomScrollOffset={650}\n      query={queries.GET_PROJECTS}\n      variables={{ status: 'PUBLISHED' }}\n      store={{ documents: documents || store.projects }}\n      dashboard>\n      {({ documents }) =>\n        displayMethod === 'list' ? (\n          <Table\n            data={documents}\n            template={templates.project}\n            onChecked={() => {}}\n            onClick={(project) => recall(onProjectLink, { id: project.id, auth: user })()}\n            onDelete={(project) =>\n              recall(onProjectDelete, {\n                id: project.id,\n                project,\n                auth: user,\n                mutation: queries.DELETE_PROJECT\n              })()\n            }\n            onEdit={(project) =>\n              recall(onProjectEdit, {\n                id: project.id,\n                companies: store.companies,\n                categories: store.categories,\n                statuses: store.statuses,\n                canEditStatus,\n                mutation: queries.UPDATE_PROJECT,\n                query: queries.GET_USERS,\n                onCompanyInputChange: mutate(queries.GET_USERS, { account: 'ENTITY' })\n              })()\n            }\n            style={{ overflowX: 'auto', width: 'calc(100vw - 290px)' }}\n          />\n        ) : (\n          <Grid>\n            {documents.map((project) => (\n              <ProjectCard\n                key={project.id}\n                project={project}\n                onChecked={() => {}}\n                onScreenshotClick={(_, key) =>\n                  recall(onProjectScreenshot, {\n                    screenshots: [project.preview, ...project.screenshots],\n                    key\n                  })()\n                }\n                onLink={recall(onProjectLink, { id: project.id, user })}\n                onAboutMore={recall(onUserAboutMore, { user: project })}\n                onDelete={recall(onProjectDelete, {\n                  id: project.id,\n                  project,\n                  auth: user,\n                  mutation: queries.DELETE_PROJECT\n                })}\n                onEdit={recall(onProjectEdit, {\n                  id: project.id,\n                  companies: store.companies,\n                  categories: store.categories,\n                  statuses: store.statuses,\n                  canEditStatus,\n                  mutation: queries.UPDATE_PROJECT,\n                  query: queries.GET_USERS,\n                  onCompanyInputChange: mutate(queries.GET_USERS, { account: 'ENTITY' })\n                })}\n                preview\n              />\n            ))}\n          </Grid>\n        )\n      }\n    </ContentLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let projects = []\n  let companies = []\n  let categories = []\n  let statuses = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_PROJECTS,\n      variables: {\n        offset: 0,\n        limit: LIMIT,\n        account: ['ENTITY']\n      }\n    })\n\n    if (response && response.data) {\n      projects = response.data.getProjects\n      companies = response.data.getUsers\n      categories = response.data.getCategories\n      statuses = response.data.getPostStatus\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: {\n        projects,\n        companies,\n        categories,\n        statuses\n      }\n    }\n  }\n}\n\nexport default Projects\n"]},"metadata":{},"sourceType":"module"}
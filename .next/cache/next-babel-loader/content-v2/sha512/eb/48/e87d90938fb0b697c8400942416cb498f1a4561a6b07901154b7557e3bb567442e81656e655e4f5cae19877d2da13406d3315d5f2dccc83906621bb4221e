{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nexport const useInfiniteScroll = ({\n  callbackOnTop,\n  callbackOnBottom,\n  offset = 50\n}) => {\n  _s();\n\n  const ref = useRef(null);\n  const lastScrollTop = useRef(0);\n  useEffect(() => {\n    const scrollElement = ref.current;\n\n    const onScroll = () => {\n      if (!scrollElement) return;\n      console.log(scrollElement.scrollTop);\n      const dir = scrollElement.scrollTop - lastScrollTop.current;\n\n      if (callbackOnBottom && dir > 0 && scrollElement.scrollTop + scrollElement.clientHeight >= scrollElement.scrollHeight - offset) {\n        callbackOnBottom(scrollElement.scrollTop, scrollElement.scrollHeight);\n      }\n\n      if (callbackOnTop && dir < 0 && scrollElement.scrollTop <= offset) {\n        callbackOnTop(scrollElement.scrollTop, scrollElement.scrollHeight);\n      }\n\n      lastScrollTop.current = scrollElement.scrollTop;\n    };\n\n    if (scrollElement) {\n      scrollElement.addEventListener('scroll', onScroll);\n    }\n\n    return () => {\n      if (scrollElement) {\n        scrollElement.removeEventListener('scroll', onScroll);\n      }\n    };\n  }, [callbackOnTop, callbackOnBottom, offset]);\n  return [ref];\n};\n\n_s(useInfiniteScroll, \"wwcZTtFCTGP5KWb/sTC9wuYKlm0=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/hooks/useInfiniteScroll.js"],"names":["useEffect","useRef","useInfiniteScroll","callbackOnTop","callbackOnBottom","offset","ref","lastScrollTop","scrollElement","current","onScroll","console","log","scrollTop","dir","clientHeight","scrollHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,gBAAjB;AAAmCC,EAAAA,MAAM,GAAG;AAA5C,CAAD,KAAsD;AAAA;;AACrF,QAAMC,GAAG,GAAGL,MAAM,CAAC,IAAD,CAAlB;AACA,QAAMM,aAAa,GAAGN,MAAM,CAAC,CAAD,CAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,aAAa,GAAGF,GAAG,CAACG,OAA1B;;AAEA,UAAMC,QAAQ,GAAG,MAAM;AACrB,UAAI,CAACF,aAAL,EAAoB;AACpBG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,aAAa,CAACK,SAA1B;AACA,YAAMC,GAAG,GAAGN,aAAa,CAACK,SAAd,GAA0BN,aAAa,CAACE,OAApD;;AAEA,UACEL,gBAAgB,IAChBU,GAAG,GAAG,CADN,IAEAN,aAAa,CAACK,SAAd,GAA0BL,aAAa,CAACO,YAAxC,IAAwDP,aAAa,CAACQ,YAAd,GAA6BX,MAHvF,EAIE;AACAD,QAAAA,gBAAgB,CAACI,aAAa,CAACK,SAAf,EAA0BL,aAAa,CAACQ,YAAxC,CAAhB;AACD;;AACD,UAAIb,aAAa,IAAIW,GAAG,GAAG,CAAvB,IAA4BN,aAAa,CAACK,SAAd,IAA2BR,MAA3D,EAAmE;AACjEF,QAAAA,aAAa,CAACK,aAAa,CAACK,SAAf,EAA0BL,aAAa,CAACQ,YAAxC,CAAb;AACD;;AAEDT,MAAAA,aAAa,CAACE,OAAd,GAAwBD,aAAa,CAACK,SAAtC;AACD,KAjBD;;AAmBA,QAAIL,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAACS,gBAAd,CAA+B,QAA/B,EAAyCP,QAAzC;AACD;;AAED,WAAO,MAAM;AACX,UAAIF,aAAJ,EAAmB;AACjBA,QAAAA,aAAa,CAACU,mBAAd,CAAkC,QAAlC,EAA4CR,QAA5C;AACD;AACF,KAJD;AAKD,GA/BQ,EA+BN,CAACP,aAAD,EAAgBC,gBAAhB,EAAkCC,MAAlC,CA/BM,CAAT;AAiCA,SAAO,CAACC,GAAD,CAAP;AACD,CAtCM;;GAAMJ,iB;;AAwCb,eAAeA,iBAAf","sourcesContent":["import { useEffect, useRef } from 'react'\n\nexport const useInfiniteScroll = ({ callbackOnTop, callbackOnBottom, offset = 50 }) => {\n  const ref = useRef(null)\n  const lastScrollTop = useRef(0)\n\n  useEffect(() => {\n    const scrollElement = ref.current\n\n    const onScroll = () => {\n      if (!scrollElement) return\n      console.log(scrollElement.scrollTop)\n      const dir = scrollElement.scrollTop - lastScrollTop.current\n\n      if (\n        callbackOnBottom &&\n        dir > 0 &&\n        scrollElement.scrollTop + scrollElement.clientHeight >= scrollElement.scrollHeight - offset\n      ) {\n        callbackOnBottom(scrollElement.scrollTop, scrollElement.scrollHeight)\n      }\n      if (callbackOnTop && dir < 0 && scrollElement.scrollTop <= offset) {\n        callbackOnTop(scrollElement.scrollTop, scrollElement.scrollHeight)\n      }\n\n      lastScrollTop.current = scrollElement.scrollTop\n    }\n\n    if (scrollElement) {\n      scrollElement.addEventListener('scroll', onScroll)\n    }\n\n    return () => {\n      if (scrollElement) {\n        scrollElement.removeEventListener('scroll', onScroll)\n      }\n    }\n  }, [callbackOnTop, callbackOnBottom, offset])\n\n  return [ref]\n}\n\nexport default useInfiniteScroll\n"]},"metadata":{},"sourceType":"module"}
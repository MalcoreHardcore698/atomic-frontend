{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { onArticleCreate, onArticleEdit, onArticleLink } from '../store/helpers/article';\nimport { useHelper } from './useHelper';\nimport queries from '../graphql/queries';\nexport const useArticle = ({\n  isManage\n} = {}) => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const canEditStatus = useMemo(() => {\n    var _user$role;\n\n    return user && (user === null || user === void 0 ? void 0 : (_user$role = user.role) === null || _user$role === void 0 ? void 0 : _user$role.name) === 'ADMIN';\n  }, [user]);\n  const hasOwned = useCallback(article => {\n    var _user$articles;\n\n    return user === null || user === void 0 ? void 0 : (_user$articles = user.articles) === null || _user$articles === void 0 ? void 0 : _user$articles.find(item => item.id === article.id);\n  }, [user]);\n  const onLink = useCallback(article => {\n    recall(onArticleLink, {\n      id: article.id,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    });\n  }, [user, recall]);\n\n  const onEdit = (article, onAfter) => recall(onArticleEdit, {\n    id: article.id,\n    canEditStatus,\n    mutation: queries.UPDATE_ARTICLE,\n    onAfter\n  })();\n\n  const onCreate = onAfter => recall(onArticleCreate, {\n    canEditStatus,\n    mutation: queries.CREATE_ARTICLE,\n    onAfter\n  })();\n\n  return {\n    user,\n    hasOwned,\n    onLink,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  };\n};","map":null,"metadata":{},"sourceType":"module"}
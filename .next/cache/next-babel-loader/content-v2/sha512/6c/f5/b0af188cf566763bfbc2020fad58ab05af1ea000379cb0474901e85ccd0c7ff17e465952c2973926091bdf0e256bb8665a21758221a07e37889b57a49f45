{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { onArticleCreate, onArticleEdit, onArticleLink } from '../store/helpers/article';\nimport { useHelper } from './useHelper';\nimport queries from '../graphql/queries';\nexport const useArticle = ({\n  withStatus,\n  isManage\n} = {}) => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const canEditStatus = useMemo(() => {\n    var _user$role;\n\n    return user && (user === null || user === void 0 ? void 0 : (_user$role = user.role) === null || _user$role === void 0 ? void 0 : _user$role.name) === 'ADMIN';\n  }, [user]);\n  const hasOwned = useCallback(article => {\n    var _user$articles;\n\n    return user === null || user === void 0 ? void 0 : (_user$articles = user.articles) === null || _user$articles === void 0 ? void 0 : _user$articles.find(item => item.id === article.id);\n  }, [user]);\n  const onLink = useCallback(article => {\n    recall(onArticleLink, {\n      id: article.id,\n      auth: user === null || user === void 0 ? void 0 : user.email,\n      withStatus\n    });\n  }, [user, recall, withStatus]);\n\n  const onEdit = (article, onAfter) => recall(onArticleEdit, {\n    id: article.id,\n    canEditStatus,\n    mutation: queries.UPDATE_ARTICLE,\n    onAfter\n  })();\n\n  const onCreate = onAfter => recall(onArticleCreate, {\n    canEditStatus,\n    mutation: queries.CREATE_ARTICLE,\n    onAfter\n  })();\n\n  return {\n    user,\n    hasOwned,\n    onLink,\n    onEdit: isManage && onEdit,\n    onCreate: isManage && onCreate\n  };\n};","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/hooks/useArticle.js"],"names":["useCallback","useMemo","useSelector","onArticleCreate","onArticleEdit","onArticleLink","useHelper","queries","useArticle","withStatus","isManage","recall","user","state","canEditStatus","role","name","hasOwned","article","articles","find","item","id","onLink","auth","email","onEdit","onAfter","mutation","UPDATE_ARTICLE","onCreate","CREATE_ARTICLE"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,aAAzC,QAA8D,0BAA9D;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,IAA2B,EAA5B,KAAmC;AAC3D,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AACA,QAAMM,IAAI,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AAEA,QAAME,aAAa,GAAGb,OAAO,CAAC;AAAA;;AAAA,WAAMW,IAAI,IAAI,CAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEG,IAAN,0DAAYC,IAAZ,MAAqB,OAAnC;AAAA,GAAD,EAA6C,CAACJ,IAAD,CAA7C,CAA7B;AAEA,QAAMK,QAAQ,GAAGjB,WAAW,CACzBkB,OAAD;AAAA;;AAAA,WAAaN,IAAb,aAAaA,IAAb,yCAAaA,IAAI,CAAEO,QAAnB,mDAAa,eAAgBC,IAAhB,CAAsBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAAnD,CAAb;AAAA,GAD0B,EAE1B,CAACV,IAAD,CAF0B,CAA5B;AAKA,QAAMW,MAAM,GAAGvB,WAAW,CACvBkB,OAAD,IAAa;AACXP,IAAAA,MAAM,CAACN,aAAD,EAAgB;AAAEiB,MAAAA,EAAE,EAAEJ,OAAO,CAACI,EAAd;AAAkBE,MAAAA,IAAI,EAAEZ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEa,KAA9B;AAAqChB,MAAAA;AAArC,KAAhB,CAAN;AACD,GAHuB,EAIxB,CAACG,IAAD,EAAOD,MAAP,EAAeF,UAAf,CAJwB,CAA1B;;AAOA,QAAMiB,MAAM,GAAG,CAACR,OAAD,EAAUS,OAAV,KACbhB,MAAM,CAACP,aAAD,EAAgB;AACpBkB,IAAAA,EAAE,EAAEJ,OAAO,CAACI,EADQ;AAEpBR,IAAAA,aAFoB;AAGpBc,IAAAA,QAAQ,EAAErB,OAAO,CAACsB,cAHE;AAIpBF,IAAAA;AAJoB,GAAhB,CAAN,EADF;;AAQA,QAAMG,QAAQ,GAAIH,OAAD,IACfhB,MAAM,CAACR,eAAD,EAAkB;AACtBW,IAAAA,aADsB;AAEtBc,IAAAA,QAAQ,EAAErB,OAAO,CAACwB,cAFI;AAGtBJ,IAAAA;AAHsB,GAAlB,CAAN,EADF;;AAOA,SAAO;AAAEf,IAAAA,IAAF;AAAQK,IAAAA,QAAR;AAAkBM,IAAAA,MAAlB;AAA0BG,IAAAA,MAAM,EAAEhB,QAAQ,IAAIgB,MAA9C;AAAsDI,IAAAA,QAAQ,EAAEpB,QAAQ,IAAIoB;AAA5E,GAAP;AACD,CAlCM","sourcesContent":["import { useCallback, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { onArticleCreate, onArticleEdit, onArticleLink } from '../store/helpers/article'\nimport { useHelper } from './useHelper'\nimport queries from '../graphql/queries'\n\nexport const useArticle = ({ withStatus, isManage } = {}) => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n\n  const canEditStatus = useMemo(() => user && user?.role?.name === 'ADMIN', [user])\n\n  const hasOwned = useCallback(\n    (article) => user?.articles?.find((item) => item.id === article.id),\n    [user]\n  )\n\n  const onLink = useCallback(\n    (article) => {\n      recall(onArticleLink, { id: article.id, auth: user?.email, withStatus })\n    },\n    [user, recall, withStatus]\n  )\n\n  const onEdit = (article, onAfter) =>\n    recall(onArticleEdit, {\n      id: article.id,\n      canEditStatus,\n      mutation: queries.UPDATE_ARTICLE,\n      onAfter\n    })()\n\n  const onCreate = (onAfter) =>\n    recall(onArticleCreate, {\n      canEditStatus,\n      mutation: queries.CREATE_ARTICLE,\n      onAfter\n    })()\n\n  return { user, hasOwned, onLink, onEdit: isManage && onEdit, onCreate: isManage && onCreate }\n}\n"]},"metadata":{},"sourceType":"module"}
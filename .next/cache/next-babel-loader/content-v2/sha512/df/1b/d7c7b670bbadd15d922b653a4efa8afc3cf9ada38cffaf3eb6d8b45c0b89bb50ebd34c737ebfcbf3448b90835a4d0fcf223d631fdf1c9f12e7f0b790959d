{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Column from '../Column';\nimport Select from '../Select';\nimport Search from '../Search';\nimport Spinner from '../Spinner';\nimport Alert from '../Alert';\nexport const Wrap = styled(Column)`\n  padding: var(--default-gap);\n`;\nexport const Loader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n`;\n/*\n * const entities: entity[]\n * type entity = {\n *  label: string;\n *  value: ObjectID | string;\n *  render: ReactNode | Element | string;\n * }\n */\n\nexport const GlobalSearch = ({\n  result,\n  search,\n  loading,\n  entities,\n  initialEntity,\n  appearance,\n  style,\n  className,\n  onChange,\n  onSubmit\n}) => {\n  const {\n    0: entity,\n    1: setEntity\n  } = useState(initialEntity);\n  const searchRef = useRef(null);\n\n  const handleChange = value => {\n    setEntity(value);\n\n    if (searchRef !== null && searchRef !== void 0 && searchRef.current) {\n      searchRef.current.value = '';\n      if (onSubmit) onSubmit('');\n    }\n  };\n\n  const renderContent = () => __jsx(React.Fragment, null, __jsx(Search, {\n    ref: searchRef,\n    appearance: 'ghost',\n    placeholder: 'Поиск',\n    defaultValue: search,\n    onSubmit: onSubmit\n  }), (result === null || result === void 0 ? void 0 : result.length) > 0 ? result.map(item => entity.render && __jsx(React.Fragment, {\n    key: item.id || item.email\n  }, entity.render(item))) : __jsx(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center',\n      flexGrow: 1\n    }\n  }, \"\\u041D\\u0438\\u0447\\u0435\\u0433\\u043E \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"));\n\n  useEffect(() => {\n    if (onChange) onChange(entity);\n  }, [entity, onChange]);\n  return __jsx(Wrap, {\n    style: style,\n    className: className,\n    appearance: appearance\n  }, __jsx(Select, {\n    appearance: 'ghost',\n    defaultValue: entity,\n    placeholder: 'Где будем искать?',\n    label: 'Зона поиска',\n    options: entities,\n    onChange: handleChange,\n    isLoading: loading,\n    isSearchable: true,\n    isClearable: true\n  }), !loading && entity && renderContent(), loading && __jsx(Loader, null, __jsx(Spinner, null)));\n};\nGlobalSearch.defaultProps = {\n  appearance: 'clear'\n};\nexport default GlobalSearch;","map":null,"metadata":{},"sourceType":"module"}
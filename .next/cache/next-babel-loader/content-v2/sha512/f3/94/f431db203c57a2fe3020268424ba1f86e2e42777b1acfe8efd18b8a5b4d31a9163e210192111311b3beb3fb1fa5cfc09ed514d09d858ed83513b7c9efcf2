{"ast":null,"code":"import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport ContentLayout from '../layouts/content';\nimport UserCard from '../components/UserCard';\nimport LazyLoad from '../components/LazyLoad';\nimport FadeLoad from '../components/FadeLoad';\nimport { GridAside as Container } from '../components/Styled';\nimport { onUserAboutMore, onUserLink, onUserMembers } from '../store/helpers/user';\nimport { onChat } from '../store/helpers';\nimport queries from '../graphql/queries';\nconst TITLE = 'Авторы';\nconst START_OFFSET = 6;\n\nconst Creators = ({\n  store\n}) => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    filters: [{\n      type: 'DATEPICKER',\n      placeholder: 'Дата регистарции'\n    }, {\n      type: 'SELECT',\n      placeholder: 'Компания',\n      options: store === null || store === void 0 ? void 0 : store.companies.map(company => ({\n        value: company.email,\n        label: company.name\n      }))\n    }],\n    options: [{\n      label: 'Компания',\n      value: 'company'\n    }, {\n      label: 'Участники',\n      value: 'members'\n    }, {\n      label: 'Дата регистарции',\n      value: 'createdAt'\n    }],\n    query: queries.GET_USERS,\n    store: {\n      documents: store === null || store === void 0 ? void 0 : store.users\n    }\n  }, ({\n    documents\n  }) => /*#__PURE__*/React.createElement(Container, null, documents.map(author => {\n    var _author$company;\n\n    const owned = author.name === user.name;\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: author.email\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(UserCard, {\n      user: author,\n      owned: owned,\n      onChat: user.email && recall(onChat, {\n        sender: user,\n        recipient: author\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: author\n      }),\n      onMembers: recall(onUserMembers, {\n        id: author === null || author === void 0 ? void 0 : author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      }),\n      onLink: recall(onUserLink, {\n        id: author.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_author$company = author.company) === null || _author$company === void 0 ? void 0 : _author$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      })\n    })));\n  })));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let users = [];\n  let companies = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_AUTHORS,\n      variables: {\n        offset: 0,\n        limit: START_OFFSET\n      }\n    });\n\n    if (response && response.data) {\n      users = response.data.getUsers;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        users,\n        companies\n      }\n    }\n  };\n}\nexport default Creators;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Member from '../../atomic-ui/components/Member';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Search from '../SearchBar';\nimport { Wrap as WrapForm } from '../Form';\nimport ChatForm from '../FormChat';\nimport { setCurrentChat } from '../../store/actions/root';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Messenger__Wrap\",\n  componentId: \"sc-1hnkbvn-0\"\n})([\"height:100%;flex-grow:1;\", \"{width:100%;padding:0;}@media only screen and (max-width:568px){flex-direction:column;}\", \" \", \" \", \"\"], WrapForm, ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Chats = styled(Column).withConfig({\n  displayName: \"Messenger__Chats\",\n  componentId: \"sc-1hnkbvn-1\"\n})([\"grid-gap:15px;width:320px;@media only screen and (max-width:568px){width:100%;}\"]);\nexport const Chat = styled(Member).withConfig({\n  displayName: \"Messenger__Chat\",\n  componentId: \"sc-1hnkbvn-2\"\n})([\"margin:0;padding:0;border-radius:var(--surface-border-radius);\", \"\"], ({\n  active\n}) => active && css([\"background:var(--input-background);\"]));\nexport const Messenger = ({\n  queries,\n  mutations,\n  appearance,\n  recipient,\n  sender,\n  onSubmit,\n  onMemberLink,\n  ...props\n}) => {\n  var _userChats$getUserCha2;\n\n  if (!mutations) return null;\n  const currentChat = useSelector(state => state.root.chat);\n  const dispatch = useDispatch();\n  const {\n    data: userChats,\n    loading: userChatsLoading,\n    refetch: getUserChats\n  } = useQuery(queries.userChats);\n  const [getChatLazy, {\n    data: chat,\n    loading: chatLoading,\n    refetch: getChat,\n    networkStatus\n  }] = useLazyQuery(queries.chat);\n  const [addUserChat] = useMutation(mutations.addUserChat);\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: {\n          recipient: recipient.email\n        }\n      }).then(() => getUserChats());\n    }\n  }, [recipient, addUserChat]);\n  useEffect(() => {\n    if (recipient && !currentChat && !userChatsLoading && userChats && userChats.getUserChats) {\n      var _userChats$getUserCha;\n\n      getChatLazy({\n        variables: {\n          id: (_userChats$getUserCha = userChats.getUserChats.find(userChat => userChat.chat.members.find(member => member.name === recipient.name))) === null || _userChats$getUserCha === void 0 ? void 0 : _userChats$getUserCha.chat.id\n        }\n      });\n    }\n  }, [recipient, userChats, userChatsLoading]);\n  useEffect(() => {\n    if (!chatLoading && chat && chat.getChat && networkStatus === 7) {\n      dispatch(setCurrentChat(chat.getChat));\n    }\n  }, [chat, chatLoading, networkStatus]);\n  return /*#__PURE__*/React.createElement(Wrap, _extends({}, props, {\n    appearance: appearance\n  }), /*#__PURE__*/React.createElement(Chats, null, /*#__PURE__*/React.createElement(Search, {\n    appearance: 'ghost'\n  }), userChatsLoading && !userChats && /*#__PURE__*/React.createElement(Spinner, null), userChats && ((_userChats$getUserCha2 = userChats.getUserChats) === null || _userChats$getUserCha2 === void 0 ? void 0 : _userChats$getUserCha2.length) > 0 ? userChats.getUserChats.map(chat => {\n    var _chat$chat, _chat$chat2, _chat$chat3, _chat$chat3$members$f, _chat$chat4, _chat$chat4$messages, _chat$chat5, _chat$chat5$messages, _chat$chat6, _chat$chat6$messages, _chat$chat7, _chat$chat7$messages, _chat$chat8;\n\n    return /*#__PURE__*/React.createElement(Chat, {\n      key: (_chat$chat = chat.chat) === null || _chat$chat === void 0 ? void 0 : _chat$chat.id,\n      name: (_chat$chat2 = chat.chat) === null || _chat$chat2 === void 0 ? void 0 : _chat$chat2.members.filter(member => member.name !== sender.name)[0].name,\n      avatar: ((_chat$chat3 = chat.chat) === null || _chat$chat3 === void 0 ? void 0 : (_chat$chat3$members$f = _chat$chat3.members.filter(member => member.name !== sender.name)[0].avatar) === null || _chat$chat3$members$f === void 0 ? void 0 : _chat$chat3$members$f.path) || '/images/avatar-default.png',\n      budge: ((_chat$chat4 = chat.chat) === null || _chat$chat4 === void 0 ? void 0 : (_chat$chat4$messages = _chat$chat4.messages[((_chat$chat5 = chat.chat) === null || _chat$chat5 === void 0 ? void 0 : (_chat$chat5$messages = _chat$chat5.messages) === null || _chat$chat5$messages === void 0 ? void 0 : _chat$chat5$messages.length) - 1]) === null || _chat$chat4$messages === void 0 ? void 0 : _chat$chat4$messages.user.name) !== sender.name && ((_chat$chat6 = chat.chat) === null || _chat$chat6 === void 0 ? void 0 : (_chat$chat6$messages = _chat$chat6.messages) === null || _chat$chat6$messages === void 0 ? void 0 : _chat$chat6$messages.reduce((acc, item) => acc + (item.type === 'UNREADED' && item.user.name !== sender.name ? 1 : 0), 0)) || null,\n      position: ((_chat$chat7 = chat.chat) === null || _chat$chat7 === void 0 ? void 0 : (_chat$chat7$messages = _chat$chat7.messages[chat.chat.messages.length - 1]) === null || _chat$chat7$messages === void 0 ? void 0 : _chat$chat7$messages.text) || null,\n      onClick: () => chat.chat && getChat && (currentChat && chat.chat.id !== currentChat.id || !currentChat) && getChat({\n        id: chat.chat.id\n      }),\n      active: currentChat && currentChat.id === ((_chat$chat8 = chat.chat) === null || _chat$chat8 === void 0 ? void 0 : _chat$chat8.id)\n    });\n  }) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      marginTop: 15\n    }\n  }, \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0435 \\u0447\\u0430\\u0442\\u044B \\u043E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u044E\\u0442\")), /*#__PURE__*/React.createElement(ChatForm, {\n    mutation: mutations.sendMessage,\n    messages: currentChat && currentChat.messages.map(message => ({ ...message,\n      side: sender.name === message.user.name ? 'owner' : 'observer'\n    })),\n    appearance: 'ghost',\n    loading: chatLoading,\n    onLink: onMemberLink,\n    onSubmit: async (form, action) => {\n      await onSubmit(form, action, currentChat.members.find(member => sender.name !== member.name));\n      await getChat({\n        id: currentChat.id\n      });\n    }\n  }));\n};\nMessenger.defaultProps = {\n  appearance: 'default'\n};\nexport default Messenger;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/Messenger/index.js"],"names":["React","useEffect","styled","css","useSelector","useDispatch","useQuery","useLazyQuery","useMutation","Row","Column","Member","Alert","Spinner","Search","Wrap","WrapForm","ChatForm","setCurrentChat","appearance","Chats","Chat","active","Messenger","queries","mutations","recipient","sender","onSubmit","onMemberLink","props","currentChat","state","root","chat","dispatch","data","userChats","loading","userChatsLoading","refetch","getUserChats","getChatLazy","chatLoading","getChat","networkStatus","addUserChat","variables","email","then","id","find","userChat","members","member","name","length","map","filter","avatar","path","messages","user","reduce","acc","item","type","text","marginTop","sendMessage","message","side","form","action","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Member from '../../atomic-ui/components/Member'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport Search from '../SearchBar'\nimport { Wrap as WrapForm } from '../Form'\nimport ChatForm from '../FormChat'\nimport { setCurrentChat } from '../../store/actions/root'\n\nexport const Wrap = styled(Row)`\n  height: 100%;\n  flex-grow: 1;\n\n  ${WrapForm} {\n    width: 100%;\n    padding: 0;\n  }\n\n  @media only screen and (max-width: 568px) {\n    flex-direction: column;\n  }\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const Chats = styled(Column)`\n  grid-gap: 15px;\n  width: 320px;\n\n  @media only screen and (max-width: 568px) {\n    width: 100%;\n  }\n`\n\nexport const Chat = styled(Member)`\n  margin: 0;\n  padding: 0;\n  border-radius: var(--surface-border-radius);\n\n  ${({ active }) =>\n    active &&\n    css`\n      background: var(--input-background);\n    `}\n`\n\nexport const Messenger = ({\n  queries,\n  mutations,\n  appearance,\n  recipient,\n  sender,\n  onSubmit,\n  onMemberLink,\n  ...props\n}) => {\n  if (!mutations) return null\n\n  const currentChat = useSelector((state) => state.root.chat)\n  const dispatch = useDispatch()\n\n  const { data: userChats, loading: userChatsLoading, refetch: getUserChats } = useQuery(\n    queries.userChats\n  )\n\n  const [\n    getChatLazy,\n    { data: chat, loading: chatLoading, refetch: getChat, networkStatus }\n  ] = useLazyQuery(queries.chat)\n\n  const [addUserChat] = useMutation(mutations.addUserChat)\n\n  useEffect(() => {\n    if (recipient) {\n      addUserChat({\n        variables: { recipient: recipient.email }\n      }).then(() => getUserChats())\n    }\n  }, [recipient, addUserChat])\n\n  useEffect(() => {\n    if (recipient && !currentChat && !userChatsLoading && userChats && userChats.getUserChats) {\n      getChatLazy({\n        variables: {\n          id: userChats.getUserChats.find((userChat) =>\n            userChat.chat.members.find((member) => member.name === recipient.name)\n          )?.chat.id\n        }\n      })\n    }\n  }, [recipient, userChats, userChatsLoading])\n\n  useEffect(() => {\n    if (!chatLoading && chat && chat.getChat && networkStatus === 7) {\n      dispatch(setCurrentChat(chat.getChat))\n    }\n  }, [chat, chatLoading, networkStatus])\n\n  return (\n    <Wrap {...props} appearance={appearance}>\n      <Chats>\n        <Search appearance={'ghost'} />\n        {userChatsLoading && !userChats && <Spinner />}\n        {userChats && userChats.getUserChats?.length > 0 ? (\n          userChats.getUserChats.map((chat) => (\n            <Chat\n              key={chat.chat?.id}\n              name={chat.chat?.members.filter((member) => member.name !== sender.name)[0].name}\n              avatar={\n                chat.chat?.members.filter((member) => member.name !== sender.name)[0].avatar\n                  ?.path || '/images/avatar-default.png'\n              }\n              budge={\n                (chat.chat?.messages[chat.chat?.messages?.length - 1]?.user.name !== sender.name &&\n                  chat.chat?.messages?.reduce(\n                    (acc, item) =>\n                      acc + (item.type === 'UNREADED' && item.user.name !== sender.name ? 1 : 0),\n                    0\n                  )) ||\n                null\n              }\n              position={chat.chat?.messages[chat.chat.messages.length - 1]?.text || null}\n              onClick={() =>\n                chat.chat &&\n                getChat &&\n                ((currentChat && chat.chat.id !== currentChat.id) || !currentChat) &&\n                getChat({ id: chat.chat.id })\n              }\n              active={currentChat && currentChat.id === chat.chat?.id}\n            />\n          ))\n        ) : (\n          <Alert style={{ marginTop: 15 }}>Активные чаты отсутствуют</Alert>\n        )}\n      </Chats>\n      <ChatForm\n        mutation={mutations.sendMessage}\n        messages={\n          currentChat &&\n          currentChat.messages.map((message) => ({\n            ...message,\n            side: sender.name === message.user.name ? 'owner' : 'observer'\n          }))\n        }\n        appearance={'ghost'}\n        loading={chatLoading}\n        onLink={onMemberLink}\n        onSubmit={async (form, action) => {\n          await onSubmit(\n            form,\n            action,\n            currentChat.members.find((member) => sender.name !== member.name)\n          )\n          await getChat({ id: currentChat.id })\n        }}\n      />\n    </Wrap>\n  )\n}\n\nMessenger.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Messenger\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _taggedTemplateLiteral from \"C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  min-width: 128px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport AsyncSelect, { components } from 'react-select';\nexport var Wrap = styled.div(_templateObject());\nvar surface = {\n  background: 'white',\n  border: 'var(--surface-border)',\n  boxShadow: 'var(--surface-shadow)',\n  borderRadius: 'var(--surface-border-radius)'\n};\nvar ghost = {\n  background: 'var(--input-background)',\n  border: 'none',\n  boxShadow: 'none',\n  borderRadius: 'var(--surface-border-radius)'\n};\nvar font = {\n  fontSize: 'var(--font-size-m)',\n  fontWeight: 'var(--font-weight-regular)',\n  fontFamily: 'var(--font-family)'\n};\nexport var Menu = function Menu(props) {\n  return __jsx(\"div\", {\n    className: \"ui-select-menu\"\n  }, __jsx(components.Menu, props, props.children));\n};\nexport var Select = function Select(_ref) {\n  var appearance = _ref.appearance,\n      className = _ref.className,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, [\"appearance\", \"className\", \"style\"]);\n\n  return __jsx(Wrap, {\n    className: className,\n    style: style\n  }, __jsx(AsyncSelect, _extends({}, props, {\n    styles: {\n      control: function control(provided, state) {\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, provided), appearance === 'ghost' ? ghost : surface), font), {}, {\n          minHeight: '38px',\n          padding: '0 5px',\n          color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-color)' : 'var(--ghost-color-text)',\n          cursor: 'pointer',\n          transition: 'all 150ms ease'\n        });\n      },\n      valueContainer: function valueContainer(provided) {\n        return _objectSpread(_objectSpread({}, provided), {}, {\n          padding: '5px'\n        });\n      },\n      singleValue: function singleValue(provided, state) {\n        return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, provided), appearance === 'ghost' ? ghost : surface), font), {}, {\n          color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-color)' : 'var(--ghost-color-text)',\n          transition: 'all 150ms ease'\n        });\n      },\n      placeholder: function placeholder(provided, state) {\n        return _objectSpread(_objectSpread({}, provided), {}, {\n          color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-placeholder-color)' : 'var(--ghost-color-text)',\n          transition: 'all 150ms ease'\n        });\n      },\n      menu: function menu(provided) {\n        return _objectSpread(_objectSpread(_objectSpread({}, provided), surface), {}, {\n          boxShadow: 'var(--default-shadow)',\n          zIndex: 'var(--z-102)'\n        }, font);\n      },\n      option: function option(provided, state) {\n        return _objectSpread(_objectSpread(_objectSpread({}, provided), font), {}, {\n          color: state.isFocused ? 'var(--default-color-accent)' : appearance === 'ghost' ? 'var(--input-color)' : 'rgba(0, 0, 0, 75%)',\n          background: 'none !important',\n          cursor: 'pointer',\n          transition: 'all 150ms ease'\n        });\n      },\n      multiValue: function multiValue(provided) {\n        return _objectSpread(_objectSpread({}, provided), {}, {\n          borderRadius: '5px',\n          background: 'var(--default-color-accent)',\n          color: 'white'\n        });\n      },\n      multiValueLabel: function multiValueLabel(provided) {\n        return _objectSpread(_objectSpread(_objectSpread({}, provided), font), {}, {\n          color: 'white',\n          fontSize: 'var(--font-size-xs)'\n        });\n      }\n    },\n    components: {\n      Menu: Menu\n    }\n  })));\n};\nexport default Select;","map":null,"metadata":{},"sourceType":"module"}
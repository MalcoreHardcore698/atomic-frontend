{"ast":null,"code":"function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport Dropzone, { Wrap as WrapDropzone } from '../../atomic-ui/components/Dropzone';\nimport Button from '../../atomic-ui/components/Button';\nexport var Wrap = styled(Column).withConfig({\n  displayName: \"FormAddFile__Wrap\",\n  componentId: \"sc-18zjfvs-0\"\n})([\"padding:15px;\", \"{height:auto;}\"], WrapDropzone);\nexport var AddFile = function AddFile(_ref) {\n  var limit = _ref.limit,\n      accept = _ref.accept,\n      placeholder = _ref.placeholder,\n      submitText = _ref.submitText,\n      className = _ref.className,\n      onSubmit = _ref.onSubmit;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      files = _useState2[0],\n      setFiles = _useState2[1];\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    name: 'file',\n    accept: accept || 'image/*',\n    placeholder: placeholder || \"\\u041F\\u0435\\u0440\\u0435\\u0442\\u0430\\u0449\\u0438\\u0442\\u0435 \\u0441\\u044E\\u0434\\u0430 \\u0444\\u0430\\u0439\\u043B\\u044B (\\u041D\\u0435 \\u0431\\u043E\\u043B\\u044C\\u0448\\u0435 \".concat(limit, \")\"),\n    onChange: function onChange(files) {\n      return setFiles(files);\n    },\n    maxFiles: limit,\n    multiple: true\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      return (files === null || files === void 0 ? void 0 : files.length) > 0 && onSubmit(files);\n    },\n    disabled: (files === null || files === void 0 ? void 0 : files.length) === 0\n  }, submitText || 'Добавить файлы'));\n};\nAddFile.defaultProps = {\n  limit: 10\n};\nexport default AddFile;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormAddFile/index.js"],"names":["React","useState","styled","Column","Dropzone","Wrap","WrapDropzone","Button","AddFile","limit","accept","placeholder","submitText","className","onSubmit","files","setFiles","length","defaultProps"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,QAAP,IAAmBC,IAAI,IAAIC,YAA3B,QAA+C,qCAA/C;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AAEA,OAAO,IAAMF,IAAI,GAAGH,MAAM,CAACC,MAAD,CAAT;AAAA;AAAA;AAAA,wCAGbG,YAHa,CAAV;AAQP,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,OAAqE;AAAA,MAAlEC,KAAkE,QAAlEA,KAAkE;AAAA,MAA3DC,MAA2D,QAA3DA,MAA2D;AAAA,MAAnDC,WAAmD,QAAnDA,WAAmD;AAAA,MAAtCC,UAAsC,QAAtCA,UAAsC;AAAA,MAA1BC,SAA0B,QAA1BA,SAA0B;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBAChEb,QAAQ,EADwD;AAAA;AAAA,MACnFc,KADmF;AAAA,MAC5EC,QAD4E;;AAG1F,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEH;AAAjB,kBACE,oBAAC,QAAD;AACE,IAAA,IAAI,EAAE,MADR;AAEE,IAAA,MAAM,EAAEH,MAAM,IAAI,SAFpB;AAGE,IAAA,WAAW,EAAEC,WAAW,sLAAwCF,KAAxC,MAH1B;AAIE,IAAA,QAAQ,EAAE,kBAACM,KAAD;AAAA,aAAWC,QAAQ,CAACD,KAAD,CAAnB;AAAA,KAJZ;AAKE,IAAA,QAAQ,EAAEN,KALZ;AAME,IAAA,QAAQ;AANV,IADF,eAUE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAM,CAAAM,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,MAAP,IAAgB,CAAhB,IAAqBH,QAAQ,CAACC,KAAD,CAAnC;AAAA,KAAjB;AAA6D,IAAA,QAAQ,EAAE,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEE,MAAP,MAAkB;AAAzF,KACGL,UAAU,IAAI,gBADjB,CAVF,CADF;AAgBD,CAnBM;AAqBPJ,OAAO,CAACU,YAAR,GAAuB;AACrBT,EAAAA,KAAK,EAAE;AADc,CAAvB;AAIA,eAAeD,OAAf","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Dropzone, { Wrap as WrapDropzone } from '../../atomic-ui/components/Dropzone'\nimport Button from '../../atomic-ui/components/Button'\n\nexport const Wrap = styled(Column)`\n  padding: 15px;\n\n  ${WrapDropzone} {\n    height: auto;\n  }\n`\n\nexport const AddFile = ({ limit, accept, placeholder, submitText, className, onSubmit }) => {\n  const [files, setFiles] = useState()\n\n  return (\n    <Wrap className={className}>\n      <Dropzone\n        name={'file'}\n        accept={accept || 'image/*'}\n        placeholder={placeholder || `Перетащите сюда файлы (Не больше ${limit})`}\n        onChange={(files) => setFiles(files)}\n        maxFiles={limit}\n        multiple\n      />\n\n      <Button onClick={() => files?.length > 0 && onSubmit(files)} disabled={files?.length === 0}>\n        {submitText || 'Добавить файлы'}\n      </Button>\n    </Wrap>\n  )\n}\n\nAddFile.defaultProps = {\n  limit: 10\n}\n\nexport default AddFile\n"]},"metadata":{},"sourceType":"module"}
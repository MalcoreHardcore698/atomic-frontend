{"ast":null,"code":"import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentPage } from '../store/actions/root';\nimport { onArticleCreate } from '../store/helpers/article';\nimport { onProjectCreate } from '../store/helpers/project';\nimport { onUserClientEdit } from '../store/helpers/user';\nimport { useHelper } from './useHelper';\nimport { useSearch } from './useSearch';\nimport { useUser } from './useUser';\nimport queries from '../graphql/queries';\nexport const useProfile = ({\n  isManage\n} = {}) => {\n  const recall = useHelper();\n  const [onSearch] = useSearch();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const {\n    onAboutMore,\n    onMembers,\n    onCompanyLink\n  } = useUser({\n    isManage\n  });\n\n  const onChangePage = item => {\n    onSearch(null, null);\n    dispatch(setCurrentPage(item.value));\n  };\n\n  const onPurposeProject = useCallback(() => {\n    recall(onProjectCreate, {\n      mutation: queries.CREATE_PROJECT,\n      query: queries.GET_USERS,\n      isPurpose: true\n    })();\n  }, [recall]);\n  const onPurposeArticle = useCallback(() => {\n    recall(onArticleCreate, {\n      mutation: queries.CREATE_ARTICLE,\n      isPurpose: true\n    })();\n  }, [recall]);\n  const onEdit = useCallback(() => {\n    recall(onUserClientEdit, {\n      user: user === null || user === void 0 ? void 0 : user.email,\n      mutations: {\n        del: queries.DELETE_USER,\n        forgotEmail: queries.LOGIN,\n        forgotPassword: queries.RESET,\n        changePassword: queries.UPDATE_CLIENT_USER,\n        checkResetToken: queries.CHECK_RESET_TOKEN,\n        update: queries.UPDATE_CLIENT_USER\n      }\n    })();\n  }, [user, recall]);\n  return {\n    user,\n    onChangePage,\n    onCompanyLink,\n    onPurposeProject,\n    onPurposeArticle,\n    onAboutMore,\n    onMembers,\n    onEdit\n  };\n};","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/hooks/useProfile.js"],"names":["useCallback","useDispatch","useSelector","setCurrentPage","onArticleCreate","onProjectCreate","onUserClientEdit","useHelper","useSearch","useUser","queries","useProfile","isManage","recall","onSearch","user","state","dispatch","onAboutMore","onMembers","onCompanyLink","onChangePage","item","value","onPurposeProject","mutation","CREATE_PROJECT","query","GET_USERS","isPurpose","onPurposeArticle","CREATE_ARTICLE","onEdit","email","mutations","del","DELETE_USER","forgotEmail","LOGIN","forgotPassword","RESET","changePassword","UPDATE_CLIENT_USER","checkResetToken","CHECK_RESET_TOKEN","update"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AAEA,OAAO,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,IAAe,EAAhB,KAAuB;AAC/C,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAM,CAACO,QAAD,IAAaN,SAAS,EAA5B;AAEA,QAAMO,IAAI,GAAGb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAME,QAAQ,GAAGhB,WAAW,EAA5B;AAEA,QAAM;AAAEiB,IAAAA,WAAF;AAAeC,IAAAA,SAAf;AAA0BC,IAAAA;AAA1B,MAA4CX,OAAO,CAAC;AAAEG,IAAAA;AAAF,GAAD,CAAzD;;AAEA,QAAMS,YAAY,GAAIC,IAAD,IAAU;AAC7BR,IAAAA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;AACAG,IAAAA,QAAQ,CAACd,cAAc,CAACmB,IAAI,CAACC,KAAN,CAAf,CAAR;AACD,GAHD;;AAKA,QAAMC,gBAAgB,GAAGxB,WAAW,CAAC,MAAM;AACzCa,IAAAA,MAAM,CAACR,eAAD,EAAkB;AACtBoB,MAAAA,QAAQ,EAAEf,OAAO,CAACgB,cADI;AAEtBC,MAAAA,KAAK,EAAEjB,OAAO,CAACkB,SAFO;AAGtBC,MAAAA,SAAS,EAAE;AAHW,KAAlB,CAAN;AAKD,GANmC,EAMjC,CAAChB,MAAD,CANiC,CAApC;AAQA,QAAMiB,gBAAgB,GAAG9B,WAAW,CAAC,MAAM;AACzCa,IAAAA,MAAM,CAACT,eAAD,EAAkB;AACtBqB,MAAAA,QAAQ,EAAEf,OAAO,CAACqB,cADI;AAEtBF,MAAAA,SAAS,EAAE;AAFW,KAAlB,CAAN;AAID,GALmC,EAKjC,CAAChB,MAAD,CALiC,CAApC;AAOA,QAAMmB,MAAM,GAAGhC,WAAW,CAAC,MAAM;AAC/Ba,IAAAA,MAAM,CAACP,gBAAD,EAAmB;AACvBS,MAAAA,IAAI,EAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEkB,KADW;AAEvBC,MAAAA,SAAS,EAAE;AACTC,QAAAA,GAAG,EAAEzB,OAAO,CAAC0B,WADJ;AAETC,QAAAA,WAAW,EAAE3B,OAAO,CAAC4B,KAFZ;AAGTC,QAAAA,cAAc,EAAE7B,OAAO,CAAC8B,KAHf;AAITC,QAAAA,cAAc,EAAE/B,OAAO,CAACgC,kBAJf;AAKTC,QAAAA,eAAe,EAAEjC,OAAO,CAACkC,iBALhB;AAMTC,QAAAA,MAAM,EAAEnC,OAAO,CAACgC;AANP;AAFY,KAAnB,CAAN;AAWD,GAZyB,EAYvB,CAAC3B,IAAD,EAAOF,MAAP,CAZuB,CAA1B;AAcA,SAAO;AACLE,IAAAA,IADK;AAELM,IAAAA,YAFK;AAGLD,IAAAA,aAHK;AAILI,IAAAA,gBAJK;AAKLM,IAAAA,gBALK;AAMLZ,IAAAA,WANK;AAOLC,IAAAA,SAPK;AAQLa,IAAAA;AARK,GAAP;AAUD,CArDM","sourcesContent":["import { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { setCurrentPage } from '../store/actions/root'\nimport { onArticleCreate } from '../store/helpers/article'\nimport { onProjectCreate } from '../store/helpers/project'\nimport { onUserClientEdit } from '../store/helpers/user'\nimport { useHelper } from './useHelper'\nimport { useSearch } from './useSearch'\nimport { useUser } from './useUser'\nimport queries from '../graphql/queries'\n\nexport const useProfile = ({ isManage } = {}) => {\n  const recall = useHelper()\n  const [onSearch] = useSearch()\n\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  const { onAboutMore, onMembers, onCompanyLink } = useUser({ isManage })\n\n  const onChangePage = (item) => {\n    onSearch(null, null)\n    dispatch(setCurrentPage(item.value))\n  }\n\n  const onPurposeProject = useCallback(() => {\n    recall(onProjectCreate, {\n      mutation: queries.CREATE_PROJECT,\n      query: queries.GET_USERS,\n      isPurpose: true\n    })()\n  }, [recall])\n\n  const onPurposeArticle = useCallback(() => {\n    recall(onArticleCreate, {\n      mutation: queries.CREATE_ARTICLE,\n      isPurpose: true\n    })()\n  }, [recall])\n\n  const onEdit = useCallback(() => {\n    recall(onUserClientEdit, {\n      user: user?.email,\n      mutations: {\n        del: queries.DELETE_USER,\n        forgotEmail: queries.LOGIN,\n        forgotPassword: queries.RESET,\n        changePassword: queries.UPDATE_CLIENT_USER,\n        checkResetToken: queries.CHECK_RESET_TOKEN,\n        update: queries.UPDATE_CLIENT_USER\n      }\n    })()\n  }, [user, recall])\n\n  return {\n    user,\n    onChangePage,\n    onCompanyLink,\n    onPurposeProject,\n    onPurposeArticle,\n    onAboutMore,\n    onMembers,\n    onEdit\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
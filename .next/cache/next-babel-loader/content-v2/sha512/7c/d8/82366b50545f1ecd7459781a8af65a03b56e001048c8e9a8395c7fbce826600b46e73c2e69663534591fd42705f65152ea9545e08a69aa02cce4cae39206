{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Switch, { Track as SwitchTrack } from '../../atomic-ui/components/Switch';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Tooltip, { Wrap as WrapTooltip } from '../../atomic-ui/components/Tooltip';\nimport { setVisibleFilters } from '../../store/actions/root';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"HandleBar__Wrap\",\n  componentId: \"phr6ix-0\"\n})([\"\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"HandleBar__Header\",\n  componentId: \"phr6ix-1\"\n})([\"justify-content:space-between;grid-gap:var(--default-gap);flex-wrap:wrap;\"]);\nexport const ActionGroup = styled(Row).withConfig({\n  displayName: \"HandleBar__ActionGroup\",\n  componentId: \"phr6ix-2\"\n})([\"justify-content:flex-end;@media only screen and (max-width:996px){width:100%;\", \"{width:auto;}}@media only screen and (max-width:480px){flex-wrap:wrap;grid-gap:var(--default-gap);\", \"{flex-direction:row;flex-grow:1;}\", \"{button{width:100%;height:100%;}}}\"], SwitchTrack, SwitchTrack, WrapTooltip);\nexport const CreateButton = styled(Button).withConfig({\n  displayName: \"HandleBar__CreateButton\",\n  componentId: \"phr6ix-3\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}@media only screen and (max-width:996px){width:100%;}\"]);\nexport const Footer = styled(Row).withConfig({\n  displayName: \"HandleBar__Footer\",\n  componentId: \"phr6ix-4\"\n})([\"justify-content:space-between;@media only screen and (max-width:480px){flex-direction:column;align-items:end;grid-gap:var(--default-gap);}\"]);\nexport const DeleteButton = styled(Button).withConfig({\n  displayName: \"HandleBar__DeleteButton\",\n  componentId: \"phr6ix-5\"\n})([\"color:var(--default-color-red);background:none;border:none;&:hover{background:none;border:none;color:var(--default-color-red);}\", \"\"], ({\n  disabled\n}) => disabled && css([\"color:var(--ghost-color-text);&:hover{color:var(--ghost-color-text);}\"]));\nexport const displayMethods = [{\n  label: /*#__PURE__*/React.createElement(Icon, {\n    icon: 'menu'\n  }),\n  value: 'list',\n  tooltip: 'Отображение списком'\n}, {\n  label: /*#__PURE__*/React.createElement(Icon, {\n    icon: 'category'\n  }),\n  value: 'grid',\n  tooltip: 'Отображение сеткой'\n}];\nexport const Handle = ({\n  icon,\n  title,\n  buttonCreateText,\n  buttonDeleteDisabled,\n  defaultDisplayMethod,\n  withoutFooter,\n  withFilters,\n  checked,\n  onCreate,\n  onChecked,\n  onDeleteAll,\n  onChangeDisplayMethod\n}) => {\n  const [isChecked, setChecked] = useState(checked);\n  const [displayMethod, setDisplayMethod] = useState(displayMethods.find(item => item.value === defaultDisplayMethod));\n  const visibleFilters = useSelector(state => state.root.visibleFilters);\n  const dispatch = useDispatch();\n\n  const onVisibleFilter = () => dispatch(setVisibleFilters(!visibleFilters));\n\n  const onDisplayMethod = item => {\n    setDisplayMethod(item);\n    if (onChangeDisplayMethod) onChangeDisplayMethod(item);\n  };\n\n  const onChangeChecked = e => {\n    const value = e.target.checked;\n    setChecked(value);\n    if (onChecked) onChecked(value);\n  };\n\n  useEffect(() => {\n    setChecked(checked);\n  }, [checked]);\n  return /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Difinition, {\n    icon: icon,\n    text: title\n  }), /*#__PURE__*/React.createElement(ActionGroup, null, onCreate && /*#__PURE__*/React.createElement(CreateButton, {\n    type: 'button',\n    onClick: onCreate\n  }, /*#__PURE__*/React.createElement(\"span\", null, buttonCreateText), /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'white'\n  })), withFilters && /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отображение фильтров'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onVisibleFilter,\n    revert: !visibleFilters\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'filter2',\n    stroke: !visibleFilters ? 'var(--default-color-accent)' : 'white'\n  }))), /*#__PURE__*/React.createElement(Switch, {\n    defaultValue: displayMethod || displayMethods[1],\n    options: displayMethods,\n    onChange: item => onDisplayMethod(item)\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), !withoutFooter && /*#__PURE__*/React.createElement(Footer, null, /*#__PURE__*/React.createElement(Checkbox, {\n    label: 'Выделить все',\n    checked: isChecked,\n    onChange: onChangeChecked\n  }), /*#__PURE__*/React.createElement(DeleteButton, {\n    appearance: 'clear',\n    disabled: buttonDeleteDisabled,\n    onClick: onDeleteAll\n  }, \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C \\u0432\\u044B\\u0434\\u0435\\u043B\\u0435\\u043D\\u043D\\u043E\\u0435\")));\n};\nHandle.defaultProps = {\n  buttonCreateText: 'Добавить',\n  buttonDeleteDisabled: true\n};\nexport default Handle;","map":null,"metadata":{},"sourceType":"module"}
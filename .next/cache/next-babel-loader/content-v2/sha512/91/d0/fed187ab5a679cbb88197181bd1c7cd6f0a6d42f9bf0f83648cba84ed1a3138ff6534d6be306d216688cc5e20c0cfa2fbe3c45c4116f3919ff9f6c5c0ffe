{"ast":null,"code":"import { useMemo } from 'react';\nimport merge from 'deepmerge';\nimport createApolloClient from './client';\nlet apolloClient;\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient();\n\n  if (initialState) {\n    const existingCache = _apolloClient.extract();\n\n    const data = merge(initialState, existingCache);\n\n    _apolloClient.cache.restore(data);\n  }\n\n  if (true) return _apolloClient;\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function useApollo(initialState) {\n  return useMemo(() => initializeApollo(initialState), [initialState]);\n}","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/apollo/index.js"],"names":["useMemo","merge","createApolloClient","apolloClient","initializeApollo","initialState","_apolloClient","existingCache","extract","data","cache","restore","useApollo"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AAEA,OAAOC,kBAAP,MAA+B,UAA/B;AAEA,IAAIC,YAAJ;AAEA,OAAO,SAASC,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGH,YAAH,2DAAmBD,kBAAkB,EAAxD;;AAEA,MAAIG,YAAJ,EAAkB;AAChB,UAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB;;AACA,UAAMC,IAAI,GAAGR,KAAK,CAACI,YAAD,EAAeE,aAAf,CAAlB;;AAEAD,IAAAA,aAAa,CAACI,KAAd,CAAoBC,OAApB,CAA4BF,IAA5B;AACD;;AAED,YAAmC,OAAOH,aAAP;AACnC,MAAI,CAACH,YAAL,EAAmBA,YAAY,GAAGG,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASM,SAAT,CAAmBP,YAAnB,EAAiC;AACtC,SAAOL,OAAO,CAAC,MAAMI,gBAAgB,CAACC,YAAD,CAAvB,EAAuC,CAACA,YAAD,CAAvC,CAAd;AACD","sourcesContent":["import { useMemo } from 'react'\nimport merge from 'deepmerge'\n\nimport createApolloClient from './client'\n\nlet apolloClient\n\nexport function initializeApollo(initialState = null) {\n  const _apolloClient = apolloClient ?? createApolloClient()\n\n  if (initialState) {\n    const existingCache = _apolloClient.extract()\n    const data = merge(initialState, existingCache)\n\n    _apolloClient.cache.restore(data)\n  }\n\n  if (typeof window === 'undefined') return _apolloClient\n  if (!apolloClient) apolloClient = _apolloClient\n\n  return _apolloClient\n}\n\nexport function useApollo(initialState) {\n  return useMemo(() => initializeApollo(initialState), [initialState])\n}\n"]},"metadata":{},"sourceType":"module"}
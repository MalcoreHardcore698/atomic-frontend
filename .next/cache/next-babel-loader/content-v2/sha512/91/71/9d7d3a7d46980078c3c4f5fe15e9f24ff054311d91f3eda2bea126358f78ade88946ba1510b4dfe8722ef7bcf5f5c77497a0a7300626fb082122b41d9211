{"ast":null,"code":"import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Image from '../../atomic-ui/components/Image';\nimport Meta from '../../atomic-ui/components/Meta';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport Processed from '../../components/Processed';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"CategoryView__Wrap\",\n  componentId: \"sc-1leuzf2-0\"\n})([\"\", \" \", \" \", \"\"], ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Poster = styled(Image).withConfig({\n  displayName: \"CategoryView__Poster\",\n  componentId: \"sc-1leuzf2-1\"\n})([\"object-fit:cover;width:100%;height:512px;border-radius:var(--surface-border-radius);\"]);\nexport const Content = styled(Column).withConfig({\n  displayName: \"CategoryView__Content\",\n  componentId: \"sc-1leuzf2-2\"\n})([\"grid-gap:0;\"]);\nexport const View = ({\n  category,\n  appearance,\n  className,\n  style\n}) => {\n  var _data$getCategory, _data$getCategory2, _data$getCategory3, _data$getCategory4;\n\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_CATEGORY, {\n    variables: {\n      id: category\n    }\n  });\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(Processed, {\n    data: data,\n    loading: loading,\n    error: error,\n    errorMessage: 'Упс! Не удалось загрузить информацию о категории',\n    emptyMessage: 'Кажется такой категории не существует'\n  }, /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Meta, {\n    date: data === null || data === void 0 ? void 0 : (_data$getCategory = data.getCategory) === null || _data$getCategory === void 0 ? void 0 : _data$getCategory.createdAt,\n    category: getLabelCategory(data === null || data === void 0 ? void 0 : (_data$getCategory2 = data.getCategory) === null || _data$getCategory2 === void 0 ? void 0 : _data$getCategory2.type)\n  }), /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, data === null || data === void 0 ? void 0 : (_data$getCategory3 = data.getCategory) === null || _data$getCategory3 === void 0 ? void 0 : _data$getCategory3.name), /*#__PURE__*/React.createElement(Text, null, data === null || data === void 0 ? void 0 : (_data$getCategory4 = data.getCategory) === null || _data$getCategory4 === void 0 ? void 0 : _data$getCategory4.description))));\n};\nView.defaultProps = {\n  appearance: 'default'\n};\nexport default View;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/CategoryView/index.js"],"names":["React","styled","css","useQuery","Column","Title","Text","Image","Meta","getLabelCategory","Processed","queries","Wrap","appearance","Poster","Content","View","category","className","style","data","loading","error","GET_CATEGORY","variables","id","getCategory","createdAt","type","name","description","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AAEA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,OAAO,MAAMC,IAAI,GAAGX,MAAM,CAACG,MAAD,CAAT;AAAA;AAAA;AAAA,uBACb,CAAC;AAAES,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,SAAf,IACAX,GADA,+KAFa,EAWb,CAAC;AAAEW,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,OAAf,IACAX,GADA,4EAZa,EAqBb,CAAC;AAAEW,EAAAA;AAAF,CAAD,KACAA,UAAU,KAAK,OAAf,IACAX,GADA,4EAtBa,CAAV;AAgCP,OAAO,MAAMY,MAAM,GAAGb,MAAM,CAACM,KAAD,CAAT;AAAA;AAAA;AAAA,4FAAZ;AAOP,OAAO,MAAMQ,OAAO,GAAGd,MAAM,CAACG,MAAD,CAAT;AAAA;AAAA;AAAA,mBAAb;AAIP,OAAO,MAAMY,IAAI,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYJ,EAAAA,UAAZ;AAAwBK,EAAAA,SAAxB;AAAmCC,EAAAA;AAAnC,CAAD,KAAgD;AAAA;;AAClE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BnB,QAAQ,CAACQ,OAAO,CAACY,YAAT,EAAuB;AAC9DC,IAAAA,SAAS,EAAE;AACTC,MAAAA,EAAE,EAAER;AADK;AADmD,GAAvB,CAAzC;AAMA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAEC,SAAjB;AAA4B,IAAA,KAAK,EAAEC,KAAnC;AAA0C,IAAA,UAAU,EAAEN;AAAtD,kBACE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAEO,IADR;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,KAAK,EAAEC,KAHT;AAIE,IAAA,YAAY,EAAE,kDAJhB;AAKE,IAAA,YAAY,EAAE;AALhB,kBAME,oBAAC,OAAD,qBACE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAEF,IAAF,aAAEA,IAAF,4CAAEA,IAAI,CAAEM,WAAR,sDAAE,kBAAmBC,SAD3B;AAEE,IAAA,QAAQ,EAAElB,gBAAgB,CAACW,IAAD,aAACA,IAAD,6CAACA,IAAI,CAAEM,WAAP,uDAAC,mBAAmBE,IAApB;AAF5B,IADF,eAKE,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAE;AAAZ,KAAmBR,IAAnB,aAAmBA,IAAnB,6CAAmBA,IAAI,CAAEM,WAAzB,uDAAmB,mBAAmBG,IAAtC,CALF,eAME,oBAAC,IAAD,QAAOT,IAAP,aAAOA,IAAP,6CAAOA,IAAI,CAAEM,WAAb,uDAAO,mBAAmBI,WAA1B,CANF,CANF,CADF,CADF;AAmBD,CA1BM;AA4BPd,IAAI,CAACe,YAAL,GAAoB;AAClBlB,EAAAA,UAAU,EAAE;AADM,CAApB;AAIA,eAAeG,IAAf","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Image from '../../atomic-ui/components/Image'\nimport Meta from '../../atomic-ui/components/Meta'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\n\nimport Processed from '../../components/Processed'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled(Column)`\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const Poster = styled(Image)`\n  object-fit: cover;\n  width: 100%;\n  height: 512px;\n  border-radius: var(--surface-border-radius);\n`\n\nexport const Content = styled(Column)`\n  grid-gap: 0;\n`\n\nexport const View = ({ category, appearance, className, style }) => {\n  const { data, loading, error } = useQuery(queries.GET_CATEGORY, {\n    variables: {\n      id: category\n    }\n  })\n\n  return (\n    <Wrap className={className} style={style} appearance={appearance}>\n      <Processed\n        data={data}\n        loading={loading}\n        error={error}\n        errorMessage={'Упс! Не удалось загрузить информацию о категории'}\n        emptyMessage={'Кажется такой категории не существует'}>\n        <Content>\n          <Meta\n            date={data?.getCategory?.createdAt}\n            category={getLabelCategory(data?.getCategory?.type)}\n          />\n          <Title tag={'h4'}>{data?.getCategory?.name}</Title>\n          <Text>{data?.getCategory?.description}</Text>\n        </Content>\n      </Processed>\n    </Wrap>\n  )\n}\n\nView.defaultProps = {\n  appearance: 'default'\n}\n\nexport default View\n"]},"metadata":{},"sourceType":"module"}
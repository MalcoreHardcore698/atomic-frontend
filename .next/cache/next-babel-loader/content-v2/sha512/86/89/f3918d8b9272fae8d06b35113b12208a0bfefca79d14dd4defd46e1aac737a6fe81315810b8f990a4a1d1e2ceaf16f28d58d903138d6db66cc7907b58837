{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useCallback } from 'react';\nimport styled, { css } from 'styled-components';\nimport imageCompression from 'browser-image-compression';\nimport { useDropzone } from 'react-dropzone';\nimport { v4 } from 'uuid';\nimport Image from '../Image';\nimport Text from '../Text';\nimport Grid from '../Grid';\nimport Tooltip from '../Tooltip';\nimport Icon from '../Icon';\nexport const Wrap = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  grid-gap: 10px;\n\n  width: 100%;\n  height: 256px;\n  min-height: 256px;\n`;\nexport const InfoTooltip = styled(Tooltip)`\n  position: absolute;\n  right: var(--default-gap);\n  bottom: var(--default-gap);\n  z-index: var(--z-15);\n`;\nexport const InfoIcon = styled(Icon)`\n  cursor: pointer;\n  transition: opacity 450ms ease;\n\n  &:hover {\n    opacity: 0.65;\n  }\n`;\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  position: relative;\n  z-index: var(--z-12);\n\n  font-weight: var(--font-weight-medium);\n  font-size: var(--font-size-s);\n  font-family: var(--font-family);\n  color: var(--input-placeholder-color);\n\n  width: 100%;\n  height: 100%;\n  border-radius: var(--surface-border-radius);\n  border: 2px dashed var(--input-placeholder-color);\n  outline: none;\n  overflow: hidden;\n  flex-grow: 1;\n\n  cursor: pointer;\n  transition: all 150ms ease;\n\n  ${({\n  error\n}) => error && css`\n      color: var(--default-color-red);\n      border: 2px dashed var(--default-color-red);\n    `}\n\n  &:hover {\n    color: var(--default-color-accent);\n    border: 2px dashed var(--default-color-accent);\n\n    ${({\n  error\n}) => error && css`\n        color: var(--default-color-red);\n        border: 2px dashed var(--default-color-red);\n      `}\n  }\n`;\nexport const Area = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n`;\nexport const PreviewList = styled(Grid)`\n  img {\n    height: 128px;\n  }\n`;\nexport const Preview = styled(Image)`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: var(--surface-border-radius);\n`;\nexport const Placeholder = styled(Text)`\n  color: inherit;\n  padding: var(--default-gap);\n  text-align: center;\n`;\nexport function getFile(file) {\n  var _file$type;\n\n  return {\n    file,\n    id: v4(),\n    blob: ((_file$type = file.type) === null || _file$type === void 0 ? void 0 : _file$type.includes('image')) && URL.createObjectURL(file)\n  };\n}\nexport async function compressedUpload(file, maxWidthOrHeight = 1366) {\n  try {\n    return await imageCompression(file, {\n      maxSizeMB: 1,\n      maxWidthOrHeight,\n      useWebWorker: true\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport const Dropzone = ({\n  style,\n  accept,\n  className,\n  defaultValue,\n  placeholder,\n  tooltip,\n  multiple,\n  maxFiles,\n  onChange\n}) => {\n  const {\n    0: error,\n    1: setError\n  } = useState(false);\n  const {\n    0: images,\n    1: setImages\n  } = useState([]);\n  const onDrop = useCallback(async droppedFiles => {\n    setError(false);\n\n    if (droppedFiles.length > maxFiles || droppedFiles.length === 0) {\n      setError(true);\n      return false;\n    }\n\n    const candidate = multiple ? [] : await compressedUpload(droppedFiles[0]);\n\n    if (multiple) {\n      for (let file of droppedFiles) {\n        var _file$type2;\n\n        let compressedFile;\n        let miniature;\n\n        if ((_file$type2 = file.type) !== null && _file$type2 !== void 0 && _file$type2.includes('image')) {\n          compressedFile = await compressedUpload(file);\n          miniature = await compressedUpload(file, 185);\n        } else {\n          compressedFile = file;\n        }\n\n        if (compressedFile) {\n          candidate.push(_objectSpread(_objectSpread({}, getFile(compressedFile)), {}, {\n            size: compressedFile.size,\n            miniature: _objectSpread(_objectSpread({}, getFile(miniature)), {}, {\n              size: miniature.size\n            })\n          }));\n        }\n      }\n    }\n\n    const result = candidate.length > 1 ? candidate : _objectSpread(_objectSpread({}, getFile(candidate)), {}, {\n      size: droppedFiles[0].size\n    });\n    setImages(result);\n\n    if (onChange) {\n      onChange(result);\n    }\n  }, [setImages]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    multiple,\n    accept\n  });\n  return __jsx(Wrap, {\n    className: className,\n    style: style\n  }, tooltip && __jsx(InfoTooltip, {\n    text: tooltip,\n    maxWidth: 215\n  }, __jsx(InfoIcon, {\n    size: 's',\n    icon: 'infoCircle',\n    stroke: (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.length) > 0 ? 'white' : 'var(--default-color-accent)'\n  })), __jsx(Container, _extends({\n    className: 'dropzone-container'\n  }, getRootProps(), {\n    error: error\n  }), __jsx(\"input\", _extends({\n    accept: accept\n  }, getInputProps(), {\n    hidden: true\n  })), __jsx(Area, {\n    className: 'dropzone-area',\n    active: isDragActive\n  }, !defaultValue && images.length === 0 && __jsx(Placeholder, null, error ? `Файлов не может быть больше ${maxFiles} или равно нулю` : placeholder), multiple && (Array.isArray(images) && images.length > 1 || Array.isArray(defaultValue) && (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.length) > 1) && __jsx(PreviewList, {\n    percentage: 'minmax(196px, 1fr)'\n  }, (defaultValue || images).map(file => __jsx(Preview, {\n    key: v4(),\n    src: (file === null || file === void 0 ? void 0 : file.blob) || file,\n    alt: file.id\n  }))), !multiple && (!Array.isArray(images) || defaultValue) && __jsx(Preview, {\n    src: images.blob || (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.path) || (defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.blob),\n    alt: defaultValue === null || defaultValue === void 0 ? void 0 : defaultValue.name\n  }))));\n};\nDropzone.defaultProps = {\n  maxFiles: 1,\n  multiple: false\n};\nexport default Dropzone;","map":null,"metadata":{},"sourceType":"module"}
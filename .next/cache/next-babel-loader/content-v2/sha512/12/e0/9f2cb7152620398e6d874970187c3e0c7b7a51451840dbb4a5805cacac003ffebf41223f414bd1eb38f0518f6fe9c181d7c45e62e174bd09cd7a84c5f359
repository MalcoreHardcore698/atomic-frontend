{"ast":null,"code":"import React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Icon from '../../atomic-ui/components/Icon';\nimport Meta from '../../atomic-ui/components/Meta';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Checkbox from '../../atomic-ui/components/Checkbox';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport { useEntityQuery } from '../../hooks/useEntityQuery';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"TicketCard__Wrap\",\n  componentId: \"sc-3sqqk7-0\"\n})([\"grid-gap:var(--default-gap);height:100%;\", \" \", \" \", \"\"], ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Header = styled(Row).withConfig({\n  displayName: \"TicketCard__Header\",\n  componentId: \"sc-3sqqk7-1\"\n})([\"justify-content:space-between;align-items:center;\"]);\nexport const Actions = styled(Row).withConfig({\n  displayName: \"TicketCard__Actions\",\n  componentId: \"sc-3sqqk7-2\"\n})([\"grid-gap:5px;height:100%;\"]);\nexport const Name = styled(Title).withConfig({\n  displayName: \"TicketCard__Name\",\n  componentId: \"sc-3sqqk7-3\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\nexport const Status = styled(Text).withConfig({\n  displayName: \"TicketCard__Status\",\n  componentId: \"sc-3sqqk7-4\"\n})([\"color:\", \";\"], ({\n  status\n}) => `var(--default-color-${status === 'OPENED' ? 'accent' : 'red'})`);\nexport const Footer = styled(Row).withConfig({\n  displayName: \"TicketCard__Footer\",\n  componentId: \"sc-3sqqk7-5\"\n})([\"justify-content:space-between;align-items:center;flex-grow:1;\"]);\nexport const Card = ({\n  ticket,\n  appearance,\n  className,\n  style,\n  onLink,\n  onAuthorLink,\n  onChecked,\n  onEdit,\n  onDelete\n}) => {\n  var _ticket$category, _ticket$author, _ticket$author$avatar, _ticket$author2, _ticket$messages;\n\n  const {\n    setQuery\n  } = useEntityQuery();\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(Column, {\n    style: {\n      gridGap: 0\n    }\n  }, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Meta, {\n    date: ticket.createdAt,\n    category: (_ticket$category = ticket.category) === null || _ticket$category === void 0 ? void 0 : _ticket$category.name\n  }), onChecked && onEdit && onDelete && /*#__PURE__*/React.createElement(Actions, null, /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Удалить обращение'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    appearance: 'red',\n    onClick: onDelete\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'delete',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Редактировать обращение'\n  }, /*#__PURE__*/React.createElement(Button, {\n    kind: 'icon',\n    size: 'xs',\n    onClick: onEdit\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'edit',\n    size: 'xs',\n    stroke: 'white'\n  }))), /*#__PURE__*/React.createElement(Tooltip, {\n    text: 'Отметить обращение',\n    self: true\n  }, /*#__PURE__*/React.createElement(Checkbox, null)))), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: () => setQuery(ticket.id, 'ticket', onLink)\n  }, ticket.title), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      gridGap: 5\n    }\n  }, /*#__PURE__*/React.createElement(Status, {\n    status: ticket.status\n  }, ticket.status))), /*#__PURE__*/React.createElement(Divider, {\n    clear: true\n  }), /*#__PURE__*/React.createElement(Footer, null, /*#__PURE__*/React.createElement(Difinition, {\n    label: 'Автор',\n    img: (_ticket$author = ticket.author) === null || _ticket$author === void 0 ? void 0 : (_ticket$author$avatar = _ticket$author.avatar) === null || _ticket$author$avatar === void 0 ? void 0 : _ticket$author$avatar.path,\n    text: (_ticket$author2 = ticket.author) === null || _ticket$author2 === void 0 ? void 0 : _ticket$author2.name,\n    onLink: onAuthorLink && (() => {\n      var _ticket$author3;\n\n      return onAuthorLink((_ticket$author3 = ticket.author) === null || _ticket$author3 === void 0 ? void 0 : _ticket$author3.email);\n    })\n  }), /*#__PURE__*/React.createElement(Difinition, {\n    icon: 'chat',\n    label: 'Сообщений',\n    text: (_ticket$messages = ticket.messages) === null || _ticket$messages === void 0 ? void 0 : _ticket$messages.length\n  })));\n};\nCard.defaultProps = {\n  appearance: 'default'\n};\nexport default Card;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/TicketCard/index.js"],"names":["React","styled","css","Row","Column","Title","Text","Icon","Meta","Divider","Button","Difinition","Checkbox","Tooltip","useEntityQuery","Wrap","appearance","Header","Actions","Name","onClick","Status","status","Footer","Card","ticket","className","style","onLink","onAuthorLink","onChecked","onEdit","onDelete","setQuery","gridGap","createdAt","category","name","id","title","author","avatar","path","email","messages","length","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Icon from '../../atomic-ui/components/Icon'\nimport Meta from '../../atomic-ui/components/Meta'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Button from '../../atomic-ui/components/Button'\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport Checkbox from '../../atomic-ui/components/Checkbox'\nimport Tooltip from '../../atomic-ui/components/Tooltip'\n\nimport { useEntityQuery } from '../../hooks/useEntityQuery'\n\nexport const Wrap = styled(Column)`\n  grid-gap: var(--default-gap);\n  height: 100%;\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const Actions = styled(Row)`\n  grid-gap: 5px;\n  height: 100%;\n`\n\nexport const Name = styled(Title)`\n  transition: opacity 150ms ease;\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.45;\n      }\n    `}\n`\n\nexport const Status = styled(Text)`\n  color: ${({ status }) => `var(--default-color-${status === 'OPENED' ? 'accent' : 'red'})`};\n`\n\nexport const Footer = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n  flex-grow: 1;\n`\n\nexport const Card = ({\n  ticket,\n  appearance,\n  className,\n  style,\n  onLink,\n  onAuthorLink,\n  onChecked,\n  onEdit,\n  onDelete\n}) => {\n  const { setQuery } = useEntityQuery()\n\n  return (\n    <Wrap className={className} style={style} appearance={appearance}>\n      <Column style={{ gridGap: 0 }}>\n        <Header>\n          <Meta date={ticket.createdAt} category={ticket.category?.name} />\n\n          {onChecked && onEdit && onDelete && (\n            <Actions>\n              <Tooltip text={'Удалить обращение'}>\n                <Button kind={'icon'} size={'xs'} appearance={'red'} onClick={onDelete}>\n                  <Icon icon={'delete'} size={'xs'} stroke={'white'} />\n                </Button>\n              </Tooltip>\n              <Tooltip text={'Редактировать обращение'}>\n                <Button kind={'icon'} size={'xs'} onClick={onEdit}>\n                  <Icon icon={'edit'} size={'xs'} stroke={'white'} />\n                </Button>\n              </Tooltip>\n              <Tooltip text={'Отметить обращение'} self>\n                <Checkbox />\n              </Tooltip>\n            </Actions>\n          )}\n        </Header>\n\n        <Name tag={'h4'} onClick={() => setQuery(ticket.id, 'ticket', onLink)}>\n          {ticket.title}\n        </Name>\n\n        <Row style={{ gridGap: 5 }}>\n          <Status status={ticket.status}>{ticket.status}</Status>\n        </Row>\n      </Column>\n\n      <Divider clear />\n\n      <Footer>\n        <Difinition\n          label={'Автор'}\n          img={ticket.author?.avatar?.path}\n          text={ticket.author?.name}\n          onLink={onAuthorLink && (() => onAuthorLink(ticket.author?.email))}\n        />\n\n        <Difinition icon={'chat'} label={'Сообщений'} text={ticket.messages?.length} />\n      </Footer>\n    </Wrap>\n  )\n}\n\nCard.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Card\n"]},"metadata":{},"sourceType":"module"}
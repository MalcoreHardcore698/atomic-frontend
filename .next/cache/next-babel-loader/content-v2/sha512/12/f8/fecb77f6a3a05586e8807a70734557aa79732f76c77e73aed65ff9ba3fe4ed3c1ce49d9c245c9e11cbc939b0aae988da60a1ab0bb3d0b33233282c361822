{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/article';\nimport { useHelper } from '../../hooks/useHelper';\nimport ArticleCard from '../../components/ArticleCard';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { onArticleCreate, onArticleEdit, onArticleLink } from '../../store/helpers/article';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Статьи';\nconst START_OFFSET = 0;\nconst LIMIT = 12;\n\nconst Articles = () => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    icon: 'document',\n    template: template,\n    startOffset: START_OFFSET,\n    emptyMessage: 'Статей нет',\n    buttonCreateText: 'Создать статью',\n    getType: 'getArticles',\n    getQuery: queries.GET_ARTICLES,\n    deleteQuery: queries.DELETE_ARTICLE,\n    deleteEntityMultiText: 'статьи',\n    deleteEntitySingleText: 'статья',\n    onLink: article => recall(onArticleLink, {\n      id: article.id\n    })(),\n    onEdit: article => recall(onArticleEdit, {\n      id: article.id,\n      canEditStatus,\n      mutation: queries.UPDATE_ARTICLE\n    })(),\n    onCreate: recall(onArticleCreate, {\n      canEditStatus,\n      mutation: queries.CREATE_ARTICLE\n    }),\n    render: document => /*#__PURE__*/React.createElement(ArticleCard, {\n      layout: 'column',\n      article: document,\n      withSocials: true\n    })\n  });\n};\n\nexport default Articles;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/articles.js"],"names":["React","useEffect","useMemo","useSelector","useDispatch","template","useHelper","ArticleCard","ContentLayout","onArticleCreate","onArticleEdit","onArticleLink","setDocuments","queries","TITLE","START_OFFSET","LIMIT","Articles","recall","user","state","dispatch","canEditStatus","role","name","GET_ARTICLES","DELETE_ARTICLE","article","id","mutation","UPDATE_ARTICLE","CREATE_ARTICLE","document"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,QAAP,MAAqB,oDAArB;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,eAAT,EAA0BC,aAA1B,EAAyCC,aAAzC,QAA8D,6BAA9D;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,MAAMC,KAAK,GAAG,QAAd;AACA,MAAMC,YAAY,GAAG,CAArB;AACA,MAAMC,KAAK,GAAG,EAAd;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,MAAM,GAAGZ,SAAS,EAAxB;AACA,QAAMa,IAAI,GAAGhB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AACA,QAAME,QAAQ,GAAGjB,WAAW,EAA5B;AAEA,QAAMkB,aAAa,GAAGpB,OAAO,CAAC,MAAMiB,IAAI,IAAIA,IAAI,CAACI,IAAL,CAAUC,IAAV,KAAmB,OAAlC,EAA2C,CAACL,IAAD,CAA3C,CAA7B;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,QAAQ,CAACT,YAAY,CAAC,IAAD,CAAb,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAEE,KADT;AAEE,IAAA,KAAK,EAAEE,KAFT;AAGE,IAAA,IAAI,EAAE,UAHR;AAIE,IAAA,QAAQ,EAAEX,QAJZ;AAKE,IAAA,WAAW,EAAEU,YALf;AAME,IAAA,YAAY,EAAE,YANhB;AAOE,IAAA,gBAAgB,EAAE,gBAPpB;AAQE,IAAA,OAAO,EAAE,aARX;AASE,IAAA,QAAQ,EAAEF,OAAO,CAACY,YATpB;AAUE,IAAA,WAAW,EAAEZ,OAAO,CAACa,cAVvB;AAWE,IAAA,qBAAqB,EAAE,QAXzB;AAYE,IAAA,sBAAsB,EAAE,QAZ1B;AAaE,IAAA,MAAM,EAAGC,OAAD,IAAaT,MAAM,CAACP,aAAD,EAAgB;AAAEiB,MAAAA,EAAE,EAAED,OAAO,CAACC;AAAd,KAAhB,CAAN,EAbvB;AAcE,IAAA,MAAM,EAAGD,OAAD,IACNT,MAAM,CAACR,aAAD,EAAgB;AACpBkB,MAAAA,EAAE,EAAED,OAAO,CAACC,EADQ;AAEpBN,MAAAA,aAFoB;AAGpBO,MAAAA,QAAQ,EAAEhB,OAAO,CAACiB;AAHE,KAAhB,CAAN,EAfJ;AAqBE,IAAA,QAAQ,EAAEZ,MAAM,CAACT,eAAD,EAAkB;AAChCa,MAAAA,aADgC;AAEhCO,MAAAA,QAAQ,EAAEhB,OAAO,CAACkB;AAFc,KAAlB,CArBlB;AAyBE,IAAA,MAAM,EAAGC,QAAD,iBAAc,oBAAC,WAAD;AAAa,MAAA,MAAM,EAAE,QAArB;AAA+B,MAAA,OAAO,EAAEA,QAAxC;AAAkD,MAAA,WAAW;AAA7D;AAzBxB,IADF;AA6BD,CAxCD;;AA0CA,eAAef,QAAf","sourcesContent":["import React, { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport template from '../../atomic-ui/components/Table/templates/article'\n\nimport { useHelper } from '../../hooks/useHelper'\nimport ArticleCard from '../../components/ArticleCard'\nimport ContentLayout from '../../layouts/dashboard/content'\nimport { onArticleCreate, onArticleEdit, onArticleLink } from '../../store/helpers/article'\nimport { setDocuments } from '../../store/actions/documents'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Статьи'\nconst START_OFFSET = 0\nconst LIMIT = 12\n\nconst Articles = () => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      limit={LIMIT}\n      icon={'document'}\n      template={template}\n      startOffset={START_OFFSET}\n      emptyMessage={'Статей нет'}\n      buttonCreateText={'Создать статью'}\n      getType={'getArticles'}\n      getQuery={queries.GET_ARTICLES}\n      deleteQuery={queries.DELETE_ARTICLE}\n      deleteEntityMultiText={'статьи'}\n      deleteEntitySingleText={'статья'}\n      onLink={(article) => recall(onArticleLink, { id: article.id })()}\n      onEdit={(article) =>\n        recall(onArticleEdit, {\n          id: article.id,\n          canEditStatus,\n          mutation: queries.UPDATE_ARTICLE\n        })()\n      }\n      onCreate={recall(onArticleCreate, {\n        canEditStatus,\n        mutation: queries.CREATE_ARTICLE\n      })}\n      render={(document) => <ArticleCard layout={'column'} article={document} withSocials />}\n    />\n  )\n}\n\nexport default Articles\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled, { css } from 'styled-components';\nimport Column from '../../atomic-ui/components/Column';\nimport { Wrap as WrapText } from '../../atomic-ui/components/Text';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Button from '../../atomic-ui/components/Button';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Icon from '../../atomic-ui/components/Icon';\nimport { onUserFolderAdd, onUserFolderDelete } from '../../store/helpers/user';\nimport { setFolder, setIgnoreFetch } from '../../store/actions/root';\nimport { setUserFolder } from '../../store/actions/user';\nimport { useHelper } from '../../hooks/useHelper';\nimport queries from '../../graphql/queries';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"Organizer__Wrap\",\n  componentId: \"sc-1rvcbdn-0\"\n})([\"width:265px;min-width:265px;\"]);\nconst CreateButton = styled(Button).withConfig({\n  displayName: \"Organizer__CreateButton\",\n  componentId: \"sc-1rvcbdn-1\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}\"]);\nconst RemoveTooltip = styled(Tooltip).withConfig({\n  displayName: \"Organizer__RemoveTooltip\",\n  componentId: \"sc-1rvcbdn-2\"\n})([\"position:absolute;right:8px;z-index:var(--z-11);display:none;\"]);\nconst ListItem = styled.div.withConfig({\n  displayName: \"Organizer__ListItem\",\n  componentId: \"sc-1rvcbdn-3\"\n})([\"position:relative;display:flex;justify-content:space-between;align-items:center;height:var(--input-height-s);background:var(--ghost-color-background);border-radius:var(--surface-border-radius);padding:8px 10px;width:100%;height:auto;cursor:pointer;transition:all 150ms ease;\", \",h4{color:var(--ghost-color-text);}\", \"{svg path{color:var(--ghost-color-text);}}&:hover{\", \"{display:flex;svg path{stroke:black;}}\", \",h4{color:black;}}\", \"\"], WrapText, RemoveTooltip, RemoveTooltip, WrapText, ({\n  active\n}) => active && css([\"color:var(--default-color-accent);background:var(--default-color-accent-dim);\", \"{svg path{stroke:var(--default-color-accent) !important;}}\", \",h4,p{color:var(--default-color-accent);}&:hover{\", \",h4,p{color:var(--default-color-accent);}}\"], RemoveTooltip, WrapText, WrapText));\nexport const Organizer = () => {\n  const recall = useHelper();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const dispatch = useDispatch();\n  const defaultFolder = useMemo(() => user === null || user === void 0 ? void 0 : user.folders[0], [user]);\n\n  const onFolderClick = item => {\n    if (item.projects && item) {\n      const result = { ...item,\n        projects: item.projects\n      };\n      dispatch(setIgnoreFetch(false));\n      dispatch(setFolder(result));\n      dispatch(setUserFolder(result));\n    }\n  };\n\n  useEffect(() => {\n    if (defaultFolder) {\n      dispatch(setFolder(defaultFolder));\n    }\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(Wrap, null, user.folders && user.folders.length > 0 ? /*#__PURE__*/React.createElement(Column, null, user.folders.map(item => {\n    const length = item.projects.length;\n    const label = length === 1 ? 'проект' : length > 1 && length < 5 ? 'проекта' : 'проектов';\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: item.id,\n      active: folder && item.id === folder.id\n    }, /*#__PURE__*/React.createElement(Difinition, {\n      text: item.name,\n      label: `${length} ${label}`,\n      onLink: () => onFolderClick(item),\n      revert: true\n    }), /*#__PURE__*/React.createElement(RemoveTooltip, {\n      place: 'left',\n      text: 'Удалить'\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: 'xs',\n      kind: 'icon',\n      type: 'button',\n      appearance: 'clear',\n      onClick: recall(onUserFolderDelete, {\n        id: item.id,\n        mutation: queries.DELETE_USER_FOLDER,\n        callback: () => onFolderClick(defaultFolder)\n      })\n    }, /*#__PURE__*/React.createElement(Icon, {\n      size: 'xs',\n      icon: 'delete',\n      stroke: 'var(--ghost-color-text)'\n    }))));\n  })) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0430\\u043F\\u043E\\u043A \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(CreateButton, {\n    onClick: recall(onUserFolderAdd, {\n      mutation: queries.ADD_USER_FOLDER\n    })\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430\"), /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'white'\n  })));\n};\nexport default Organizer;","map":null,"metadata":{},"sourceType":"module"}
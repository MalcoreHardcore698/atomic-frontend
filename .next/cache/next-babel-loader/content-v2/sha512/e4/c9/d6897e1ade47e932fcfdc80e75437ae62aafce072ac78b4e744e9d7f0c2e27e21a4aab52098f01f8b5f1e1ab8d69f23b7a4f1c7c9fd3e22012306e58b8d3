{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useQuery, useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Member from '../../atomic-ui/components/Member';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Search from '../SearchBar';\nimport { Wrap as WrapForm } from '../Form';\nimport ChatForm from '../FormChat';\nimport { setCurrentChat } from '../../store/actions/root';\nexport const Wrap = styled(Row).withConfig({\n  displayName: \"Messenger__Wrap\",\n  componentId: \"sc-1hnkbvn-0\"\n})([\"height:100%;flex-grow:1;\", \"{width:100%;padding:0;}@media only screen and (max-width:568px){flex-direction:column;}\", \" \", \" \", \"\"], WrapForm, ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\nexport const Chats = styled(Column).withConfig({\n  displayName: \"Messenger__Chats\",\n  componentId: \"sc-1hnkbvn-1\"\n})([\"grid-gap:0;width:320px;@media only screen and (max-width:568px){width:100%;}\"]);\nexport const Chat = styled(Member).withConfig({\n  displayName: \"Messenger__Chat\",\n  componentId: \"sc-1hnkbvn-2\"\n})([\"margin:10px 0 0 0;padding:10px;border-radius:var(--surface-border-radius);\", \"\"], ({\n  active\n}) => active && css([\"background:var(--input-background);\"]));\nexport const Messenger = ({\n  queries,\n  mutations,\n  appearance,\n  recipient,\n  sender,\n  onSubmit,\n  onMemberLink,\n  ...props\n}) => {\n  var _userChats$getUserCha2;\n\n  if (!mutations) return null;\n  const currentChat = useSelector(state => state.root.chat);\n  const dispatch = useDispatch();\n  const {\n    data: userChats,\n    loading: userChatsLoading,\n    refetch: getUserChats\n  } = useQuery(queries.userChats);\n  const [getChatLazy, {\n    data: chat,\n    loading: chatLoading,\n    refetch: getChat,\n    networkStatus\n  }] = useLazyQuery(queries.chat);\n  const [addUserChat] = useMutation(mutations.addUserChat);\n  useEffect(() => {\n    addUserChat({\n      variables: {\n        recipient: recipient.email\n      }\n    }).then(() => getUserChats());\n  }, [addUserChat]);\n  useEffect(() => {\n    if (!currentChat && !userChatsLoading && userChats && userChats.getUserChats) {\n      var _userChats$getUserCha;\n\n      getChatLazy({\n        variables: {\n          id: (_userChats$getUserCha = userChats.getUserChats.find(userChat => userChat.chat.members.find(member => member.name === recipient.name))) === null || _userChats$getUserCha === void 0 ? void 0 : _userChats$getUserCha.chat.id\n        }\n      });\n    }\n  }, [userChats, userChatsLoading]);\n  useEffect(() => {\n    if (!chatLoading && chat && chat.getChat && networkStatus === 7) {\n      dispatch(setCurrentChat(chat.getChat));\n    }\n  }, [chat, chatLoading, networkStatus]);\n  return /*#__PURE__*/React.createElement(Wrap, _extends({}, props, {\n    appearance: appearance\n  }), /*#__PURE__*/React.createElement(Chats, null, /*#__PURE__*/React.createElement(Search, {\n    appearance: 'ghost'\n  }), userChatsLoading && !userChats && /*#__PURE__*/React.createElement(Spinner, null), userChats && ((_userChats$getUserCha2 = userChats.getUserChats) === null || _userChats$getUserCha2 === void 0 ? void 0 : _userChats$getUserCha2.length) > 0 ? userChats.getUserChats.map(chat => {\n    var _chat$chat, _chat$chat2, _chat$chat3, _chat$chat3$members$f, _chat$chat4, _chat$chat4$messages, _chat$chat5, _chat$chat5$messages, _chat$chat6, _chat$chat6$messages, _chat$chat7, _chat$chat7$messages, _chat$chat8;\n\n    return /*#__PURE__*/React.createElement(Chat, {\n      key: (_chat$chat = chat.chat) === null || _chat$chat === void 0 ? void 0 : _chat$chat.id,\n      name: (_chat$chat2 = chat.chat) === null || _chat$chat2 === void 0 ? void 0 : _chat$chat2.members.filter(member => member.name !== sender.name)[0].name,\n      avatar: ((_chat$chat3 = chat.chat) === null || _chat$chat3 === void 0 ? void 0 : (_chat$chat3$members$f = _chat$chat3.members.filter(member => member.name !== sender.name)[0].avatar) === null || _chat$chat3$members$f === void 0 ? void 0 : _chat$chat3$members$f.path) || '/images/avatar-default.png',\n      budge: ((_chat$chat4 = chat.chat) === null || _chat$chat4 === void 0 ? void 0 : (_chat$chat4$messages = _chat$chat4.messages[((_chat$chat5 = chat.chat) === null || _chat$chat5 === void 0 ? void 0 : (_chat$chat5$messages = _chat$chat5.messages) === null || _chat$chat5$messages === void 0 ? void 0 : _chat$chat5$messages.length) - 1]) === null || _chat$chat4$messages === void 0 ? void 0 : _chat$chat4$messages.user.name) !== sender.name && ((_chat$chat6 = chat.chat) === null || _chat$chat6 === void 0 ? void 0 : (_chat$chat6$messages = _chat$chat6.messages) === null || _chat$chat6$messages === void 0 ? void 0 : _chat$chat6$messages.reduce((acc, item) => acc + (item.type === 'UNREADED' && item.user.name !== sender.name ? 1 : 0), 0)) || null,\n      position: ((_chat$chat7 = chat.chat) === null || _chat$chat7 === void 0 ? void 0 : (_chat$chat7$messages = _chat$chat7.messages[chat.chat.messages.length - 1]) === null || _chat$chat7$messages === void 0 ? void 0 : _chat$chat7$messages.text) || null,\n      onClick: () => chat.chat && getChat && (currentChat && chat.chat.id !== currentChat.id || !currentChat) && getChat({\n        id: chat.chat.id\n      }),\n      active: currentChat && currentChat.id === ((_chat$chat8 = chat.chat) === null || _chat$chat8 === void 0 ? void 0 : _chat$chat8.id)\n    });\n  }) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      marginTop: 15\n    }\n  }, \"\\u0410\\u043A\\u0442\\u0438\\u0432\\u043D\\u044B\\u0435 \\u0447\\u0430\\u0442\\u044B \\u043E\\u0442\\u0441\\u0443\\u0442\\u0441\\u0442\\u0432\\u0443\\u044E\\u0442\")), /*#__PURE__*/React.createElement(ChatForm, {\n    mutation: mutations.sendMessage,\n    messages: currentChat && currentChat.messages.map(message => ({ ...message,\n      side: sender.name === message.user.name ? 'owner' : 'observer'\n    })),\n    appearance: 'ghost',\n    loading: chatLoading,\n    onLink: onMemberLink,\n    onSubmit: async (form, action) => {\n      await onSubmit(form, action, currentChat.members.find(member => sender.name !== member.name));\n      await getChat({\n        id: currentChat.id\n      });\n    }\n  }));\n};\nMessenger.defaultProps = {\n  appearance: 'default'\n};\nexport default Messenger;","map":null,"metadata":{},"sourceType":"module"}
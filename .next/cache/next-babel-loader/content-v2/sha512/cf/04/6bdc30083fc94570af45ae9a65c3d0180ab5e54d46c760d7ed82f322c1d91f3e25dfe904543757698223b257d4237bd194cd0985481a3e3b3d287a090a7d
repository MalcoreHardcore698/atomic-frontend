{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Select from '../../atomic-ui/components/Select';\nexport const AsyncSelect = ({\n  type,\n  name,\n  query,\n  variables = {},\n  defaultValue,\n  placeholder,\n  selectValueField,\n  selectLabelField,\n  selectRestrictions,\n  selectLabelDecorator,\n  onChange\n}) => {\n  _s();\n\n  const params = useSelector(state => state.root.params);\n  const {\n    data,\n    loading\n  } = useQuery(query, {\n    variables\n  });\n  const getLabel = useCallback(item => {\n    if (selectLabelField) {\n      const field = item[selectLabelField];\n\n      if (selectLabelDecorator) {\n        return selectLabelDecorator(field);\n      } else {\n        return field;\n      }\n    }\n\n    if (!selectLabelField && selectLabelDecorator) {\n      return selectLabelDecorator(item);\n    }\n\n    return item;\n  }, [selectLabelField, selectLabelDecorator]);\n  const options = useMemo(() => {\n    const opts = type && data && data[type] || [];\n\n    const isInclude = item => (Array.isArray(selectRestrictions) ? selectRestrictions : []).includes(item);\n\n    return opts.filter(item => Boolean(selectRestrictions ? !isInclude(item) : item)).map(item => ({\n      value: selectValueField ? item[selectValueField] : item,\n      label: getLabel(item)\n    }));\n  }, [type, data, selectValueField, selectRestrictions, getLabel]);\n  useEffect(() => {\n    if (!loading && data) {\n      const candidate = options.find(option => (option === null || option === void 0 ? void 0 : option.value) === params[name]);\n\n      if (candidate) {\n        onChange(candidate);\n      }\n    }\n  }, [name, data, params, options, loading, onChange]);\n  return /*#__PURE__*/React.createElement(Select, {\n    options: options,\n    placeholder: placeholder,\n    defaultValue: defaultValue,\n    onChange: onChange,\n    isLoading: loading,\n    isSearchable: true,\n    isClearable: true\n  });\n};\n\n_s(AsyncSelect, \"myylYLQJ/XTPDJ4yWXzsDDCjmPk=\", false, function () {\n  return [useSelector, useQuery];\n});\n\n_c = AsyncSelect;\nexport default AsyncSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"AsyncSelect\");","map":{"version":3,"sources":["D:/Documents/Workspace/FREELANCE/atomic/atomic-frontend/components/AsyncSelect/index.js"],"names":["React","useEffect","useCallback","useMemo","useQuery","useSelector","Select","AsyncSelect","type","name","query","variables","defaultValue","placeholder","selectValueField","selectLabelField","selectRestrictions","selectLabelDecorator","onChange","params","state","root","data","loading","getLabel","item","field","options","opts","isInclude","Array","isArray","includes","filter","Boolean","map","value","label","candidate","find","option"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useMemo } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport Select from '../../atomic-ui/components/Select'\r\n\r\nexport const AsyncSelect = ({\r\n  type,\r\n  name,\r\n  query,\r\n  variables = {},\r\n  defaultValue,\r\n  placeholder,\r\n  selectValueField,\r\n  selectLabelField,\r\n  selectRestrictions,\r\n  selectLabelDecorator,\r\n  onChange\r\n}) => {\r\n  const params = useSelector((state) => state.root.params)\r\n  const { data, loading } = useQuery(query, { variables })\r\n\r\n  const getLabel = useCallback(\r\n   (item) => {\r\n      if (selectLabelField) {\r\n        const field = item[selectLabelField]\r\n\r\n        if (selectLabelDecorator) {\r\n          return selectLabelDecorator(field)\r\n        }\r\n        else {\r\n          return field\r\n        }\r\n      }\r\n     if (!selectLabelField && selectLabelDecorator) {\r\n       return selectLabelDecorator(item)\r\n     }\r\n     return item\r\n   },\r\n   [selectLabelField, selectLabelDecorator]\r\n  )\r\n\r\n  const options = useMemo(\r\n   () => {\r\n     const opts = (type && data && (data[type])) || []\r\n\r\n     const isInclude = (item) => (\r\n      Array.isArray(selectRestrictions) ? selectRestrictions : []\r\n     ).includes(item)\r\n\r\n     return opts\r\n      .filter((item) => Boolean(selectRestrictions ? !isInclude(item) : item))\r\n      .map((item) => ({\r\n        value: selectValueField ? item[selectValueField] : item,\r\n        label: getLabel(item)\r\n      }))\r\n   },\r\n   [type, data, selectValueField, selectRestrictions, getLabel]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!loading && data) {\r\n      const candidate = options.find((option) => option?.value === params[name])\r\n      if (candidate) {\r\n        onChange(candidate)\r\n      }\r\n    }\r\n  }, [name, data, params, options, loading, onChange])\r\n\r\n  return (\r\n    <Select\r\n      options={options}\r\n      placeholder={placeholder}\r\n      defaultValue={defaultValue}\r\n      onChange={onChange}\r\n      isLoading={loading}\r\n      isSearchable\r\n      isClearable\r\n    />\r\n  )\r\n}\r\n\r\nexport default AsyncSelect\r\n"]},"metadata":{},"sourceType":"module"}
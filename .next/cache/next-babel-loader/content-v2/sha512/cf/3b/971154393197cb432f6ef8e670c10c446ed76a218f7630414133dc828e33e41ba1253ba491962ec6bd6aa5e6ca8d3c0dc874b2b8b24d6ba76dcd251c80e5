{"ast":null,"code":"var _s = $RefreshSig$();\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport Row from '../../../atomic-ui/components/Row';\nimport List from '../../List';\nimport Organizer from '../../Organizer';\nimport ProjectSuit from '../../ProjectSuit';\nimport { useProject } from '../../../hooks/useProject';\nimport { COMMON_LOAD_LIMIT, COMMON_START_OFFSET } from '../../../constants';\nimport { INITIAL_DISPLAY_METHOD } from '../../../layouts/content';\nimport queries from '../../../graphql/queries';\nconst Wrap = styled(Row).withConfig({\n  displayName: \"Feed__Wrap\",\n  componentId: \"wt5as6-0\"\n})([\"grid-gap:var(--default-gap);@media only screen and (max-width:768px){flex-direction:column;}\"]);\n_c = Wrap;\nexport const Feed = () => {\n  _s();\n\n  const methods = useProject();\n  const user = useSelector(state => state.user);\n  const defaultFolder = useMemo(() => user === null || user === void 0 ? void 0 : user.folders[0], [user]);\n  return /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(Organizer, {\n    defaultFolder: defaultFolder\n  }), /*#__PURE__*/React.createElement(List, {\n    type: 'getProjectsByIds',\n    limit: COMMON_LOAD_LIMIT,\n    emptyMessage: 'Проектов нет',\n    startOffset: COMMON_START_OFFSET,\n    query: queries.GET_PROJECTS_BY_IDS,\n    initialDisplayMethod: INITIAL_DISPLAY_METHOD,\n    variables: {\n      projects: defaultFolder.projects\n    },\n    component: document => /*#__PURE__*/React.createElement(ProjectSuit, _extends({}, methods, {\n      project: document,\n      layout: 'row'\n    }))\n  }));\n};\n\n_s(Feed, \"CidCUWEpN8cIT6WsFPziniaLDQs=\", false, function () {\n  return [useProject, useSelector];\n});\n\n_c2 = Feed;\nexport default Feed;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Feed\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/Profile/Feed/index.js"],"names":["React","useMemo","useSelector","styled","Row","List","Organizer","ProjectSuit","useProject","COMMON_LOAD_LIMIT","COMMON_START_OFFSET","INITIAL_DISPLAY_METHOD","queries","Wrap","Feed","methods","user","state","defaultFolder","folders","GET_PROJECTS_BY_IDS","projects","document"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,GAAP,MAAgB,mCAAhB;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,oBAAvD;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,OAAOC,OAAP,MAAoB,0BAApB;AAEA,MAAMC,IAAI,GAAGV,MAAM,CAACC,GAAD,CAAT;AAAA;AAAA;AAAA,oGAAV;KAAMS,I;AAQN,OAAO,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACxB,QAAMC,OAAO,GAAGP,UAAU,EAA1B;AACA,QAAMQ,IAAI,GAAGd,WAAW,CAAEe,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAAxB;AAEA,QAAME,aAAa,GAAGjB,OAAO,CAAC,MAAMe,IAAN,aAAMA,IAAN,uBAAMA,IAAI,CAAEG,OAAN,CAAc,CAAd,CAAP,EAAyB,CAACH,IAAD,CAAzB,CAA7B;AAEA,sBACE,oBAAC,IAAD,qBACE,oBAAC,SAAD;AAAW,IAAA,aAAa,EAAEE;AAA1B,IADF,eAGE,oBAAC,IAAD;AACE,IAAA,IAAI,EAAE,kBADR;AAEE,IAAA,KAAK,EAAET,iBAFT;AAGE,IAAA,YAAY,EAAE,cAHhB;AAIE,IAAA,WAAW,EAAEC,mBAJf;AAKE,IAAA,KAAK,EAAEE,OAAO,CAACQ,mBALjB;AAME,IAAA,oBAAoB,EAAET,sBANxB;AAOE,IAAA,SAAS,EAAE;AAAEU,MAAAA,QAAQ,EAAEH,aAAa,CAACG;AAA1B,KAPb;AAQE,IAAA,SAAS,EAAGC,QAAD,iBAAc,oBAAC,WAAD,eAAiBP,OAAjB;AAA0B,MAAA,OAAO,EAAEO,QAAnC;AAA6C,MAAA,MAAM,EAAE;AAArD;AAR3B,IAHF,CADF;AAgBD,CAtBM;;GAAMR,I;UACKN,U,EACHN,W;;;MAFFY,I;AAwBb,eAAeA,IAAf","sourcesContent":["import React, { useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\nimport Row from '../../../atomic-ui/components/Row'\n\nimport List from '../../List'\nimport Organizer from '../../Organizer'\nimport ProjectSuit from '../../ProjectSuit'\nimport { useProject } from '../../../hooks/useProject'\nimport { COMMON_LOAD_LIMIT, COMMON_START_OFFSET } from '../../../constants'\nimport { INITIAL_DISPLAY_METHOD } from '../../../layouts/content'\nimport queries from '../../../graphql/queries'\n\nconst Wrap = styled(Row)`\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`\n\nexport const Feed = () => {\n  const methods = useProject()\n  const user = useSelector((state) => state.user)\n\n  const defaultFolder = useMemo(() => user?.folders[0], [user])\n\n  return (\n    <Wrap>\n      <Organizer defaultFolder={defaultFolder} />\n\n      <List\n        type={'getProjectsByIds'}\n        limit={COMMON_LOAD_LIMIT}\n        emptyMessage={'Проектов нет'}\n        startOffset={COMMON_START_OFFSET}\n        query={queries.GET_PROJECTS_BY_IDS}\n        initialDisplayMethod={INITIAL_DISPLAY_METHOD}\n        variables={{ projects: defaultFolder.projects }}\n        component={(document) => <ProjectSuit {...methods} project={document} layout={'row'} />}\n      />\n    </Wrap>\n  )\n}\n\nexport default Feed\n"]},"metadata":{},"sourceType":"module"}
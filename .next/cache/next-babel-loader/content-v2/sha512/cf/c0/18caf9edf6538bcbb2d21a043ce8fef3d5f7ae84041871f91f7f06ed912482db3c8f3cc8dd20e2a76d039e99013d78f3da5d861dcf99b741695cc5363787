{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport styled, { css } from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport Row from '../atomic-ui/components/Row';\nimport Column from '../atomic-ui/components/Column';\nimport Switch from '../atomic-ui/components/Switch';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport Button from '../atomic-ui/components/Button';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Tooltip from '../atomic-ui/components/Tooltip';\nimport { Wrap as WrapText } from '../atomic-ui/components/Text';\nimport Icon from '../atomic-ui/components/Icon';\nimport templates from '../atomic-ui/components/Table/templates';\nimport { initializeApollo } from '../apollo';\nimport { useHelper } from '../hooks/useHelper';\nimport DefaultLayout from '../layouts/default';\nimport UserBar from '../components/UserBar';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport ProjectList from '../components/ProjectList';\nimport Difinition from '../atomic-ui/components/Difinition';\nimport { Loader } from '../components/Styled';\nimport { setUserFolder } from '../store/actions/user';\nimport { setFolder } from '../store/actions/root';\nimport { onUserClientEdit, onUserAboutMore, onUserFolderAdd, onUserFolderDelete } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nimport { profilePages } from '../__mock__';\nconst TITLE = 'Профиль';\nconst ContainerInProgress = styled(Row).withConfig({\n  displayName: \"profile__ContainerInProgress\",\n  componentId: \"sc-84d5hd-0\"\n})([\"grid-gap:var(--default-gap);@media only screen and (max-width:768px){flex-direction:column;}\"]);\nconst CreateButton = styled(Button).withConfig({\n  displayName: \"profile__CreateButton\",\n  componentId: \"sc-84d5hd-1\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}\"]);\nconst Organizer = styled(Column).withConfig({\n  displayName: \"profile__Organizer\",\n  componentId: \"sc-84d5hd-2\"\n})([\"width:265px;min-width:265px;\"]);\nconst RemoveTooltip = styled(Tooltip).withConfig({\n  displayName: \"profile__RemoveTooltip\",\n  componentId: \"sc-84d5hd-3\"\n})([\"position:absolute;right:8px;z-index:var(--z-11);display:none;\"]);\nconst CentralAlert = styled(Alert).withConfig({\n  displayName: \"profile__CentralAlert\",\n  componentId: \"sc-84d5hd-4\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;flex-grow:10;\"]);\nconst ListItem = styled.div.withConfig({\n  displayName: \"profile__ListItem\",\n  componentId: \"sc-84d5hd-5\"\n})([\"position:relative;display:flex;justify-content:space-between;align-items:center;height:var(--input-height-s);background:var(--ghost-color-background);border-radius:var(--surface-border-radius);padding:8px 10px;width:100%;height:auto;cursor:pointer;transition:all 150ms ease;\", \",h4{color:var(--ghost-color-text);}\", \"{svg path{color:var(--ghost-color-text);}}&:hover{\", \"{display:flex;svg path{stroke:black;}}\", \",h4{color:black;}}\", \"\"], WrapText, RemoveTooltip, RemoveTooltip, WrapText, ({\n  active\n}) => active && css([\"color:var(--default-color-accent);background:var(--default-color-accent-dim);\", \"{svg path{stroke:var(--default-color-accent) !important;}}\", \",h4,p{color:var(--default-color-accent);}&:hover{\", \",h4,p{color:var(--default-color-accent);}}\"], RemoveTooltip, WrapText, WrapText));\n\nconst Projects = ({\n  variables,\n  projects\n}) => /*#__PURE__*/React.createElement(ProjectList, {\n  variables: variables,\n  initialList: projects,\n  layout: true\n});\n\nconst InProgress = () => {\n  const recall = useHelper();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const dispatch = useDispatch();\n  const defaultFolder = useMemo(() => user === null || user === void 0 ? void 0 : user.folders[0], [user]);\n  const [getProjects, {\n    data,\n    loading,\n    refetch\n  }] = useLazyQuery(queries.GET_PROJECTS_BY_IDS);\n  const [customLoading, setCustomLoading] = useState(false);\n\n  const onRefetch = async (item, projects) => {\n    if (projects && refetch) {\n      setCustomLoading(true);\n\n      if (item) {\n        const result = { ...item,\n          projects\n        };\n        dispatch(setFolder(result));\n        dispatch(setUserFolder(result));\n      }\n\n      await refetch({\n        projects\n      });\n      setCustomLoading(false);\n    }\n  };\n\n  const onFolderClick = item => onRefetch(item, item.projects);\n\n  useEffect(() => {\n    if (defaultFolder) {\n      dispatch(setFolder(defaultFolder));\n    }\n  }, [defaultFolder, dispatch]);\n  useEffect(() => {\n    if (!refetch && !data && defaultFolder) {\n      getProjects({\n        variables: {\n          projects: defaultFolder.projects\n        }\n      });\n    }\n  }, [data, refetch, defaultFolder, getProjects]);\n  return /*#__PURE__*/React.createElement(ContainerInProgress, null, /*#__PURE__*/React.createElement(Organizer, null, user.folders && user.folders.length > 0 ? /*#__PURE__*/React.createElement(Column, null, user.folders.map(item => {\n    const length = item.projects.length;\n    const label = length === 1 ? 'проект' : length > 1 && length < 5 ? 'проекта' : 'проектов';\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: item.id,\n      active: folder && item.id === folder.id\n    }, /*#__PURE__*/React.createElement(Difinition, {\n      text: item.name,\n      label: `${length} ${label}`,\n      onLink: () => onFolderClick(item),\n      revert: true\n    }), /*#__PURE__*/React.createElement(RemoveTooltip, {\n      place: 'left',\n      text: 'Удалить'\n    }, /*#__PURE__*/React.createElement(Button, {\n      size: 'xs',\n      kind: 'icon',\n      type: 'button',\n      disabled: loading,\n      appearance: 'clear',\n      onClick: recall(onUserFolderDelete, {\n        id: item.id,\n        mutation: queries.DELETE_USER_FOLDER,\n        callback: () => onFolderClick(defaultFolder)\n      })\n    }, /*#__PURE__*/React.createElement(Icon, {\n      size: 'xs',\n      icon: 'delete',\n      stroke: 'var(--ghost-color-text)'\n    }))));\n  })) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0430\\u043F\\u043E\\u043A \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(CreateButton, {\n    onClick: recall(onUserFolderAdd, {\n      mutation: queries.ADD_USER_FOLDER\n    })\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430\"), /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'white'\n  }))), !loading && !customLoading && data && data.getProjectsByIds.length > 0 ? /*#__PURE__*/React.createElement(ProjectList, {\n    initialList: folder ? data.getProjectsByIds : [],\n    initialRefetch: projects => onRefetch(folder, projects),\n    eliminable: true,\n    layout: true\n  }) : loading || customLoading ? /*#__PURE__*/React.createElement(Loader, {\n    style: {\n      height: 'auto'\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(CentralAlert, null, \"\\u0412 \\u044D\\u0442\\u043E\\u0439 \\u043F\\u0430\\u043F\\u043A\\u0435 \\u043D\\u0435\\u0442 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432\"));\n};\n\nconst Profile = ({\n  categories\n}) => {\n  const recall = useHelper();\n  const router = useRouter();\n  const user = useSelector(state => state.user);\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [currentPage, setCurrentPage] = useState(profilePages[0]);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const isAdmin = useMemo(() => (user === null || user === void 0 ? void 0 : user.account) === 'ADMIN', [user]);\n  const renderContentPage = useCallback(() => {\n    if (!user) return null;\n\n    switch (currentPage.value) {\n      case '/projects':\n        return /*#__PURE__*/React.createElement(Projects, {\n          variables: {\n            author: user.email\n          },\n          projects: user.projects\n        });\n\n      case '/liked':\n        return /*#__PURE__*/React.createElement(Projects, {\n          variables: {\n            rating: user.email\n          },\n          projects: user.likedProjects\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(InProgress, null);\n    }\n  }, [user, currentPage]);\n  useEffect(() => {\n    if (!user.authenticated) {\n      router.push('/auth');\n    }\n  }, [user]);\n\n  if (!user.authenticated) {\n    return /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: user.authenticated ? user.name || TITLE : 'Авторизация'\n  }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(UserBar, {\n    user: user,\n    onEdit: recall(onUserClientEdit, {\n      user: user === null || user === void 0 ? void 0 : user.email,\n      canEditAccount: !isAdmin,\n      mutations: {\n        update: queries.UPDATE_CLIENT_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_CLIENT_USER\n      }\n    }),\n    onAboutMore: recall(onUserAboutMore, {\n      user\n    })\n  }), /*#__PURE__*/React.createElement(Switch, {\n    defaultValue: currentPage,\n    options: profilePages,\n    onChange: item => setCurrentPage(item),\n    stretch: true\n  }), /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 'publishedAt',\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 'categories',\n      options: categories.map(category => ({\n        value: category.id,\n        label: category.name\n      })),\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: templates.project.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), renderContentPage()));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let categories = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_CATEGORIES\n    });\n\n    if (response && response.data) {\n      categories = response.data.getCategories;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      categories\n    }\n  };\n}\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}
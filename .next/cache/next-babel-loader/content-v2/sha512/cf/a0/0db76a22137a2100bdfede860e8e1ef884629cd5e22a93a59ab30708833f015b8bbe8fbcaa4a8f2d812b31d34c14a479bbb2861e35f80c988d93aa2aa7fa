{"ast":null,"code":"import React, { useState } from 'react';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { createSelectOptions, getLabelPermission } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nexport const Role = ({\n  role,\n  permissions,\n  mutation,\n  appearance,\n  className,\n  onSubmit\n}) => {\n  var _role$permissions;\n\n  const [permissionsError, setPermissionsError] = useState(false);\n  const [selectedPermissions, setSelectedPermissions] = useState((role === null || role === void 0 ? void 0 : (_role$permissions = role.permissions) === null || _role$permissions === void 0 ? void 0 : _role$permissions.map(permission => ({\n    value: permission,\n    label: getLabelPermission(permission)\n  }))) || null);\n  const [disabled, setDisabled] = useState(true);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => {\n      if ((selectedPermissions === null || selectedPermissions === void 0 ? void 0 : selectedPermissions.length) > 0) {\n        onSubmit({ ...form,\n          permissions: selectedPermissions\n        }, action);\n      } else {\n        setPermissionsError(true);\n      }\n    }\n  }, ({\n    register,\n    loading,\n    errors,\n    getValues\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(Title, {\n    tag: 'h4'\n  }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), errors && errors.name && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0440\\u043E\\u043B\\u0438 \\u0434\\u043E\\u043B\\u0436\\u043D\\u043E \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u043B\\u0430\\u0442\\u0438\\u043D\\u0441\\u043A\\u0438\\u0435 \\u0441\\u0438\\u043C\\u0432\\u043E\\u043B\\u044B\"), /*#__PURE__*/React.createElement(Input, {\n    type: 'text',\n    name: 'name',\n    ref: register({\n      required: true,\n      pattern: /[A-Za-z]/\n    }),\n    onChange: e => {\n      if (e.target.value === (role === null || role === void 0 ? void 0 : role.name)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    defaultValue: (role === null || role === void 0 ? void 0 : role.name) || getValues('name'),\n    placeholder: 'Название',\n    appearance: 'ghost',\n    disabled: loading\n  }), permissionsError && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%'\n    },\n    appearance: 'error'\n  }, \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u043F\\u0440\\u0438\\u0432\\u0438\\u043B\\u0435\\u0433\\u0438\\u0439 \\u0434\\u043E\\u043B\\u0436\\u0435\\u043D \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u0442\\u044C \\u0445\\u043E\\u0442\\u044F \\u0431\\u044B \\u043E\\u0434\\u0438\\u043D \\u044D\\u043B\\u0435\\u043C\\u0435\\u043D\\u0442\"), /*#__PURE__*/React.createElement(Select, {\n    name: 'permissions',\n    appearance: 'ghost',\n    defaultValue: selectedPermissions,\n    onChange: value => {\n      var _role$permissions2;\n\n      setSelectedPermissions(value);\n      setPermissionsError(false);\n\n      if (value.value.length === (role === null || role === void 0 ? void 0 : (_role$permissions2 = role.permissions) === null || _role$permissions2 === void 0 ? void 0 : _role$permissions2.length)) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    },\n    placeholder: 'Выберите привелегии',\n    options: createSelectOptions(permissions).map(option => ({ ...option,\n      label: getLabelPermission(option.label)\n    })),\n    isLoading: loading,\n    isClearable: true,\n    isMulti: true\n  })), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      flexGrow: 1\n    },\n    type: 'submit',\n    disabled: disabled || loading\n  }, role ? 'Сохранить' : 'Создать'))));\n};\nexport default Role;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/FormRole/index.js"],"names":["React","useState","Row","Column","Title","Input","Button","Select","Alert","createSelectOptions","getLabelPermission","Form","Role","role","permissions","mutation","appearance","className","onSubmit","permissionsError","setPermissionsError","selectedPermissions","setSelectedPermissions","map","permission","value","label","disabled","setDisabled","form","action","length","register","loading","errors","getValues","name","width","required","pattern","e","target","option","flexGrow"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Select from '../../atomic-ui/components/Select'\nimport Alert from '../../atomic-ui/components/Alert'\nimport { createSelectOptions, getLabelPermission } from '../../atomic-ui/utils/functions'\n\nimport Form from '../Form'\n\nexport const Role = ({ role, permissions, mutation, appearance, className, onSubmit }) => {\n  const [permissionsError, setPermissionsError] = useState(false)\n  const [selectedPermissions, setSelectedPermissions] = useState(\n    role?.permissions?.map((permission) => ({\n      value: permission,\n      label: getLabelPermission(permission)\n    })) || null\n  )\n  const [disabled, setDisabled] = useState(true)\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) => {\n        if (selectedPermissions?.length > 0) {\n          onSubmit({ ...form, permissions: selectedPermissions }, action)\n        } else {\n          setPermissionsError(true)\n        }\n      }}>\n      {({ register, loading, errors, getValues }) => (\n        <React.Fragment>\n          <Column>\n            <Title tag={'h4'}>Основное</Title>\n\n            {errors && errors.name && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Название роли должно содержать только латинские символы\n              </Alert>\n            )}\n            <Input\n              type={'text'}\n              name={'name'}\n              ref={register({\n                required: true,\n                pattern: /[A-Za-z]/\n              })}\n              onChange={(e) => {\n                if (e.target.value === role?.name) {\n                  setDisabled(true)\n                } else {\n                  setDisabled(false)\n                }\n              }}\n              defaultValue={role?.name || getValues('name')}\n              placeholder={'Название'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n\n            {permissionsError && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Список привилегий должен содержать хотя бы один элемент\n              </Alert>\n            )}\n            <Select\n              name={'permissions'}\n              appearance={'ghost'}\n              defaultValue={selectedPermissions}\n              onChange={(value) => {\n                setSelectedPermissions(value)\n                setPermissionsError(false)\n                if (value.value.length === role?.permissions?.length) {\n                  setDisabled(true)\n                } else {\n                  setDisabled(false)\n                }\n              }}\n              placeholder={'Выберите привелегии'}\n              options={createSelectOptions(permissions).map((option) => ({\n                ...option,\n                label: getLabelPermission(option.label)\n              }))}\n              isLoading={loading}\n              isClearable\n              isMulti\n            />\n          </Column>\n\n          <Row>\n            <Button style={{ flexGrow: 1 }} type={'submit'} disabled={disabled || loading}>\n              {role ? 'Сохранить' : 'Создать'}\n            </Button>\n          </Row>\n        </React.Fragment>\n      )}\n    </Form>\n  )\n}\n\nexport default Role\n"]},"metadata":{},"sourceType":"module"}
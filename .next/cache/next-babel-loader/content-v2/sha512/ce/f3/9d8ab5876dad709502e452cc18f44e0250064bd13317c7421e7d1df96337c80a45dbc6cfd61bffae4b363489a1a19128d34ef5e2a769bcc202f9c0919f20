{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport Column from '../atomic-ui/components/Column';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport { useHelper } from '../hooks/useHelper';\nimport DefaultLayout from '../layouts/default';\nimport ArticleCard from '../components/ArticleCard';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport { onArticleLink } from '../store/helpers/article';\nimport { filters } from '../__mock__';\nconst TITLE = 'Статьи';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"articles__Wrap\",\n  componentId: \"x1h2c3-0\"\n})([\"margin-top:120px;margin-bottom:80px;@media only screen and (max-width:480px){margin-top:0;}\"]);\n_c = Wrap;\nconst Container = styled.aside.withConfig({\n  displayName: \"articles__Container\",\n  componentId: \"x1h2c3-1\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\n_c2 = Container;\n\nconst Articles = ({\n  store,\n  categories\n}) => {\n  _s();\n\n  const recall = useHelper();\n  const documents = useSelector(state => state.documents);\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const articles = useMemo(() => documents || store.articles, [documents, store]);\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: categories,\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: filters\n  }), /*#__PURE__*/React.createElement(Container, null, articles.length > 0 ? articles.map(article => /*#__PURE__*/React.createElement(ArticleCard, {\n    key: article.id,\n    article: article,\n    onLink: recall(onArticleLink, {\n      id: article.id,\n      article\n    })\n  })) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0435\\u0439 \\u043D\\u0435\\u0442\"))));\n};\n\n_s(Articles, \"U96p7gfLqYm0x/0QTFCV1yCEG+A=\", false, function () {\n  return [useHelper, useSelector];\n});\n\n_c3 = Articles;\nexport var __N_SSP = true;\nexport default Articles;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Articles\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/articles.js"],"names":["React","useState","useMemo","styled","useSelector","Column","Alert","DatePicker","Select","useHelper","DefaultLayout","ArticleCard","FilterBar","SearchBar","onArticleLink","filters","TITLE","Wrap","Container","aside","Articles","store","categories","recall","documents","state","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","articles","item","length","map","article","id","width","textAlign"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useSelector } from 'react-redux'\n\nimport Column from '../atomic-ui/components/Column'\nimport Alert from '../atomic-ui/components/Alert'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Select from '../atomic-ui/components/Select'\n\nimport { initializeApollo } from '../apollo'\nimport { useHelper } from '../hooks/useHelper'\nimport DefaultLayout from '../layouts/default'\nimport ArticleCard from '../components/ArticleCard'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport { onArticleLink } from '../store/helpers/article'\nimport queries from '../graphql/queries'\nimport { filters } from '../__mock__'\n\nconst TITLE = 'Статьи'\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst Container = styled.aside`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nconst Articles = ({ store, categories }) => {\n  const recall = useHelper()\n  const documents = useSelector((state) => state.documents)\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n\n  const articles = useMemo(() => documents || store.articles, [documents, store])\n\n  return (\n    <DefaultLayout title={TITLE}>\n      <Wrap>\n        <SearchBar onChangeFilter={() => setVisibleFilter(!visibleFilter)} />\n\n        <FilterBar\n          isOpen={visibleFilter}\n          filters={[\n            <DatePicker\n              key={0}\n              value={date}\n              placeholder={'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />,\n            <Select\n              key={1}\n              options={categories}\n              placeholder={'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          ]}\n          options={filters}\n        />\n\n        <Container>\n          {articles.length > 0 ? (\n            articles.map((article) => (\n              <ArticleCard\n                key={article.id}\n                article={article}\n                onLink={recall(onArticleLink, { id: article.id, article })}\n              />\n            ))\n          ) : (\n            <Alert style={{ width: '100%', textAlign: 'center' }}>Новостей нет</Alert>\n          )}\n        </Container>\n      </Wrap>\n    </DefaultLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let articles = []\n  let categories = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_ARTICLES,\n      variables: {\n        status: 'PUBLISHED'\n      }\n    })\n\n    if (response && response.data) {\n      articles = response.data.getArticles\n      categories = response.data.getCategories\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { articles },\n      categories\n    }\n  }\n}\n\nexport default Articles\n"]},"metadata":{},"sourceType":"module"}
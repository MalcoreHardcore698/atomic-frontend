{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport styled, { css } from 'styled-components';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { v4 } from 'uuid';\nimport Column from '../atomic-ui/components/Column';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Select from '../atomic-ui/components/Select';\nimport DefaultLayout from '../layouts/default';\nimport DashboardLayout from './dashboard';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport HandleBar from '../components/HandleBar';\nimport { LowerLoader } from '../components/Styled';\nconst Wrap = styled(Column).withConfig({\n  displayName: \"content__Wrap\",\n  componentId: \"sc-1afm75p-0\"\n})([\"margin-top:120px;margin-bottom:80px;\", \" @media only screen and (max-width:480px){margin-top:0;}\"], ({\n  clear\n}) => clear && css([\"margin:0;\"]));\n_c = Wrap;\n\nconst ContentLayout = ({\n  title,\n  store,\n  query,\n  handle,\n  filters,\n  options,\n  research,\n  scaffold,\n  dashboard,\n  variables = {},\n  limit = 6,\n  startOffset = 6,\n  initialize,\n  children\n}) => {\n  _s();\n\n  var _router$query;\n\n  const router = useRouter();\n  const Layout = dashboard ? DashboardLayout : DefaultLayout;\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [search, setSearch] = useState(null);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [offset, setOffset] = useState(startOffset);\n  const [documents, setDocuments] = useState((store === null || store === void 0 ? void 0 : store.documents) || []);\n  const [loadDocumentsBySearch, {\n    data: dataBySearch,\n    loading: loadingBySearch,\n    refetch: refetchBySearch\n  }] = useLazyQuery(query);\n  const [loadDocuments, {\n    data,\n    loading,\n    refetch\n  }] = useLazyQuery(query);\n\n  const getFilters = () => {\n    return filters.map(filter => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return /*#__PURE__*/React.createElement(DatePicker, {\n            key: v4(),\n            value: date,\n            placeholder: filter.placeholder || 'Дата публикации',\n            onChange: onChangeDate,\n            withNavigate: true\n          });\n\n        case 'SELECT':\n          return /*#__PURE__*/React.createElement(Select, {\n            key: v4(),\n            options: filter.options,\n            placeholder: filter.placeholder || 'Раздел',\n            selected: select,\n            onChange: item => onChangeSelect(item)\n          });\n\n        default:\n          return null;\n      }\n    });\n  };\n\n  const onSearch = value => {\n    setDocuments([]);\n\n    if (value) {\n      setSearch(value);\n      loadDocumentsBySearch({\n        variables: { ...variables,\n          search: value,\n          offset: 0,\n          limit: startOffset\n        }\n      });\n    } else {\n      const result = { ...variables,\n        offset: 0,\n        limit\n      };\n      setSearch(null);\n      if (refetch) refetch(result);else loadDocuments({\n        variables: result\n      });\n    }\n\n    setOffset(0);\n  };\n\n  const loadMore = async page => {\n    console.log(page);\n\n    const updateOffset = () => setOffset(prev => prev + limit);\n\n    const result = { ...variables,\n      offset,\n      limit\n    };\n\n    if (search) {\n      await refetchBySearch(variables);\n    } else {\n      if (refetch) {\n        await refetch(result);\n        updateOffset();\n      } else {\n        await loadDocuments({\n          variables: result\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (initialize) loadDocuments({\n      variables: {\n        offset,\n        limit\n      }\n    });\n  }, [initialize]);\n  useEffect(() => {\n    if (research) onSearch(research);\n  }, [research]);\n  useEffect(() => {\n    const isCommon = !search && !loading && data;\n    const isSearch = search && !loadingBySearch && dataBySearch;\n    const result = isCommon || isSearch;\n    if (result) setDocuments(prev => [...prev, ...result[Object.keys(result)[0]]]);\n  }, [search, loading, loadingBySearch, data, dataBySearch]);\n  return /*#__PURE__*/React.createElement(Layout, {\n    title: title,\n    scaffold: scaffold\n  }, /*#__PURE__*/React.createElement(Wrap, {\n    clear: scaffold || dashboard\n  }, !scaffold && !dashboard && /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter),\n    onSubmit: onSearch\n  }), dashboard && handle && /*#__PURE__*/React.createElement(HandleBar, {\n    title: title,\n    icon: handle.icon,\n    buttonCreateText: handle.buttonCreateText,\n    onCreate: handle.onCreate,\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: handle.onChangeDisplayMethod\n  }), (filters || options) && /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: getFilters(),\n    options: options\n  }), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: ((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 0,\n    loadMore: loadMore,\n    hasMore: true,\n    loader: /*#__PURE__*/React.createElement(LowerLoader, null, /*#__PURE__*/React.createElement(Spinner, null))\n  }, typeof children === 'function' ? React.createElement(children, {\n    documents\n  }) : children)));\n};\n\n_s(ContentLayout, \"lAnOuytoOC5rxvGwsmB49VKsg2E=\", false, function () {\n  return [useRouter, useLazyQuery, useLazyQuery];\n});\n\n_c2 = ContentLayout;\nexport default ContentLayout;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"ContentLayout\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/layouts/content.js"],"names":["React","useState","useEffect","useRouter","styled","css","useLazyQuery","InfiniteScroll","v4","Column","DatePicker","Spinner","Select","DefaultLayout","DashboardLayout","FilterBar","SearchBar","HandleBar","LowerLoader","Wrap","clear","ContentLayout","title","store","query","handle","filters","options","research","scaffold","dashboard","variables","limit","startOffset","initialize","children","router","Layout","date","onChangeDate","select","onChangeSelect","search","setSearch","visibleFilter","setVisibleFilter","offset","setOffset","documents","setDocuments","loadDocumentsBySearch","data","dataBySearch","loading","loadingBySearch","refetch","refetchBySearch","loadDocuments","getFilters","map","filter","type","placeholder","item","onSearch","value","result","loadMore","page","console","log","updateOffset","prev","isCommon","isSearch","Object","keys","icon","buttonCreateText","onCreate","onChangeDisplayMethod","createElement"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useRouter } from 'next/router'\nimport styled, { css } from 'styled-components'\nimport { useLazyQuery } from '@apollo/react-hooks'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport { v4 } from 'uuid'\n\nimport Column from '../atomic-ui/components/Column'\nimport DatePicker from '../atomic-ui/components/DatePicker'\nimport Spinner from '../atomic-ui/components/Spinner'\nimport Select from '../atomic-ui/components/Select'\n\nimport DefaultLayout from '../layouts/default'\nimport DashboardLayout from './dashboard'\nimport FilterBar from '../components/FilterBar'\nimport SearchBar from '../components/SearchBar'\nimport HandleBar from '../components/HandleBar'\nimport { LowerLoader } from '../components/Styled'\n\nconst Wrap = styled(Column)`\n  margin-top: 120px;\n  margin-bottom: 80px;\n\n  ${({ clear }) =>\n    clear &&\n    css`\n      margin: 0;\n    `}\n\n  @media only screen and (max-width: 480px) {\n    margin-top: 0;\n  }\n`\n\nconst ContentLayout = ({\n  title,\n  store,\n  query,\n  handle,\n  filters,\n  options,\n  research,\n  scaffold,\n  dashboard,\n  variables = {},\n  limit = 6,\n  startOffset = 6,\n  initialize,\n  children\n}) => {\n  const router = useRouter()\n  const Layout = dashboard ? DashboardLayout : DefaultLayout\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [search, setSearch] = useState(null)\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [offset, setOffset] = useState(startOffset)\n  const [documents, setDocuments] = useState(store?.documents || [])\n\n  const [\n    loadDocumentsBySearch,\n    { data: dataBySearch, loading: loadingBySearch, refetch: refetchBySearch }\n  ] = useLazyQuery(query)\n\n  const [loadDocuments, { data, loading, refetch }] = useLazyQuery(query)\n\n  const getFilters = () => {\n    return filters.map((filter) => {\n      switch (filter.type) {\n        case 'DATEPICKER':\n          return (\n            <DatePicker\n              key={v4()}\n              value={date}\n              placeholder={filter.placeholder || 'Дата публикации'}\n              onChange={onChangeDate}\n              withNavigate\n            />\n          )\n        case 'SELECT':\n          return (\n            <Select\n              key={v4()}\n              options={filter.options}\n              placeholder={filter.placeholder || 'Раздел'}\n              selected={select}\n              onChange={(item) => onChangeSelect(item)}\n            />\n          )\n        default:\n          return null\n      }\n    })\n  }\n\n  const onSearch = (value) => {\n    setDocuments([])\n    if (value) {\n      setSearch(value)\n      loadDocumentsBySearch({\n        variables: { ...variables, search: value, offset: 0, limit: startOffset }\n      })\n    } else {\n      const result = { ...variables, offset: 0, limit }\n\n      setSearch(null)\n\n      if (refetch) refetch(result)\n      else loadDocuments({ variables: result })\n    }\n    setOffset(0)\n  }\n\n  const loadMore = async (page) => {\n    console.log(page)\n    const updateOffset = () => setOffset((prev) => prev + limit)\n\n    const result = { ...variables, offset, limit }\n\n    if (search) {\n      await refetchBySearch(variables)\n    } else {\n      if (refetch) {\n        await refetch(result)\n        updateOffset()\n      } else {\n        await loadDocuments({ variables: result })\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (initialize) loadDocuments({ variables: { offset, limit } })\n  }, [initialize])\n\n  useEffect(() => {\n    if (research) onSearch(research)\n  }, [research])\n\n  useEffect(() => {\n    const isCommon = !search && !loading && data\n    const isSearch = search && !loadingBySearch && dataBySearch\n    const result = isCommon || isSearch\n    if (result) setDocuments((prev) => [...prev, ...result[Object.keys(result)[0]]])\n  }, [search, loading, loadingBySearch, data, dataBySearch])\n\n  return (\n    <Layout title={title} scaffold={scaffold}>\n      <Wrap clear={scaffold || dashboard}>\n        {!scaffold && !dashboard && (\n          <SearchBar onChangeFilter={() => setVisibleFilter(!visibleFilter)} onSubmit={onSearch} />\n        )}\n\n        {dashboard && handle && (\n          <HandleBar\n            title={title}\n            icon={handle.icon}\n            buttonCreateText={handle.buttonCreateText}\n            onCreate={handle.onCreate}\n            onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n            onChangeDisplayMethod={handle.onChangeDisplayMethod}\n          />\n        )}\n\n        {(filters || options) && (\n          <FilterBar isOpen={visibleFilter} filters={getFilters()} options={options} />\n        )}\n\n        <InfiniteScroll\n          pageStart={router.query?.page || 0}\n          loadMore={loadMore}\n          hasMore={true}\n          loader={\n            <LowerLoader>\n              <Spinner />\n            </LowerLoader>\n          }>\n          {typeof children === 'function' ? React.createElement(children, { documents }) : children}\n        </InfiniteScroll>\n      </Wrap>\n    </Layout>\n  )\n}\n\nexport default ContentLayout\n"]},"metadata":{},"sourceType":"module"}
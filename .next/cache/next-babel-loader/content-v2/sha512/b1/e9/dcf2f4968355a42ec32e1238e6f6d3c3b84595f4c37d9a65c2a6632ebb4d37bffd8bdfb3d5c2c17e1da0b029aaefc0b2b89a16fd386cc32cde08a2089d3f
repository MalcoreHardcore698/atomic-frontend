{"ast":null,"code":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport ReactTooltip from 'react-tooltip';\nimport { v4 } from 'uuid';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"Tooltip__Wrap\",\n  componentId: \"mguwd9-0\"\n})([\"position:relative;display:inline-flex;\"]);\nexport const Content = styled(ReactTooltip).withConfig({\n  displayName: \"Tooltip__Content\",\n  componentId: \"mguwd9-1\"\n})([\"padding:7px 10px !important;font-size:var(--font-size-s) !important;line-height:14px !important;background:rgba(0,0,0,0.7) !important;border-radius:var(--surface-border-radius) !important;border:none !important;color:white !important;opacity:0.9;\", \"\"], ({\n  maxWidth\n}) => maxWidth && css([\"max-width:\", \"px !important;\"], maxWidth));\nexport const Tooltip = ({\n  text,\n  self,\n  children,\n  style,\n  className,\n  maxWidth,\n  ...props\n}) => {\n  const id = `tooltip-${v4()}`;\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style\n  }, React.cloneElement(self ? /*#__PURE__*/React.createElement(\"div\", null, children) : children, { ...{\n      'data-arrow-color': 'rgba(0, 0, 0, .7)',\n      'data-tip': true,\n      'data-for': id\n    }\n  }), /*#__PURE__*/React.createElement(Content, _extends({\n    id: id\n  }, props, {\n    maxWidth: maxWidth\n  }), /*#__PURE__*/React.createElement(\"span\", null, text)));\n};\nTooltip.defaultProps = {\n  place: 'top',\n  effect: 'solid',\n  delayShow: 500\n};\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}
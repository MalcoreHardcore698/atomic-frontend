{"ast":null,"code":"import React from 'react';\nimport CategoryForm from '../../components/FormCategory';\nimport DeleteForm from '../../components/FormDelete';\nimport CategoryView from '../../components/CategoryView';\nimport { setDocuments } from '../actions/documents';\nimport { setDrawer } from '../actions/drawer';\nimport { setItem } from '../actions/snacks';\nexport function onCategoryLink(dispatch, props) {\n  const {\n    id\n  } = props;\n  dispatch(setDrawer({\n    icon: 'folder',\n    title: 'Категория',\n    content: /*#__PURE__*/React.createElement(CategoryView, {\n      category: id,\n      appearance: 'clear'\n    })\n  }));\n}\nexport function onCategoryCreate(dispatch, props) {\n  const {\n    types,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'folder',\n    title: 'Создание категории',\n    content: /*#__PURE__*/React.createElement(CategoryForm, {\n      mutation: mutation,\n      categoryTypes: types,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          const categories = await action({\n            variables: {\n              input: {\n                name: form.name,\n                type: form.type.value,\n                description: form.description\n              }\n            }\n          });\n          dispatch(setDocuments(categories.data.createCategory));\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Категория успешно создана'\n          }));\n        } catch (_unused) {\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось создать категорию'\n          }));\n        }\n      }\n    })\n  }));\n}\nexport function onCategoryEdit(dispatch, props) {\n  const {\n    category,\n    types,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'folder',\n    title: 'Редактирование категории',\n    content: /*#__PURE__*/React.createElement(CategoryForm, {\n      category: category,\n      mutation: mutation,\n      categoryTypes: types,\n      appearance: 'clear',\n      onSubmit: async (form, action) => {\n        try {\n          const categories = await action({\n            variables: {\n              id: category.id,\n              input: {\n                name: form.name,\n                type: form.type.value,\n                description: form.description\n              }\n            }\n          });\n          dispatch(setDocuments(categories.data.updateCategory));\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Категория успешно отредактирована'\n          }));\n        } catch (_unused2) {\n          dispatch(setDrawer(null));\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось отредактировать категорию'\n          }));\n        }\n      }\n    })\n  }));\n}\nexport function onCategoryDelete(dispatch, props) {\n  const {\n    id,\n    mutation\n  } = props;\n  dispatch(setDrawer({\n    icon: 'delete',\n    color: 'red',\n    title: 'Удаление категории',\n    content: /*#__PURE__*/React.createElement(DeleteForm, {\n      mutation: mutation,\n      appearance: 'clear',\n      onCancel: () => dispatch(setDrawer(null)),\n      onSubmit: async (_, action) => {\n        try {\n          const categories = await action({\n            variables: {\n              id\n            }\n          });\n          dispatch(setDocuments(categories.data.deleteCategory));\n          dispatch(setItem({\n            type: 'success',\n            message: 'Категория успешно удалена'\n          }));\n        } catch (_unused3) {\n          dispatch(setItem({\n            type: 'error',\n            message: 'Не удалось удалить категорию'\n          }));\n        } finally {\n          dispatch(setDrawer(null));\n        }\n      }\n    }, /*#__PURE__*/React.createElement(CategoryView, {\n      category: id,\n      appearance: 'clear'\n    }))\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}
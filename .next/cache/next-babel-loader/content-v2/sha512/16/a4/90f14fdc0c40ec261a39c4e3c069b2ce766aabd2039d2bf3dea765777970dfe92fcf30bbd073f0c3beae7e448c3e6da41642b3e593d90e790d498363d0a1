{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useLazyQuery, useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Button from '../../atomic-ui/components/Button';\nimport Table, { Wrap as WrapTable } from '../../atomic-ui/components/Table';\nimport Alert from '../../atomic-ui/components/Alert';\nimport { GridAside as Container, LowerLoader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"List__Wrap\",\n  componentId: \"sc-1jo6mxw-0\"\n})([\"\", \"{width:calc(100vw - 280px);}\"], WrapTable);\n_c = Wrap;\nexport const CenterAlert = styled(Alert).withConfig({\n  displayName: \"List__CenterAlert\",\n  componentId: \"sc-1jo6mxw-1\"\n})([\"width:100%;text-align:center;\"]);\nexport const Content = ({\n  type,\n  query,\n  template,\n  component,\n  variables,\n  loading,\n  refetch,\n  limit = 6,\n  initialDisplayMethod,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  _s();\n\n  var _router$query;\n\n  const router = useRouter();\n  const {\n    search,\n    displayMethod\n  } = useSelector(state => ({\n    search: state.root.search,\n    displayMethod: state.root.displayMethod\n  }));\n  const [items, setItems] = useState([]);\n  const [page, setPage] = useState(Number((_router$query = router.query) === null || _router$query === void 0 ? void 0 : _router$query.page) || 1);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEnd, setIsEnd] = useState(false);\n  const [loadSearch, {\n    data,\n    loading: isSearching,\n    refetch: refetchSearch\n  }] = useLazyQuery(query);\n\n  const loadMore = async () => {\n    if (!isEnd && !loading && (refetchSearch || refetch)) {\n      setIsLoading(true);\n      const response = await (refetchSearch || refetch)({ ...variables,\n        offset: limit * page,\n        search,\n        limit\n      });\n\n      if (response !== null && response !== void 0 && response.data) {\n        const list = response.data[type];\n        if (list.length === 0) setIsEnd(true);\n        if (list.length > 0) setItems(prev => [...prev, ...list]);\n        setPage(prev => prev + 1);\n      }\n\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (search) {\n      loadSearch({ ...variables,\n        offset: limit * page,\n        search,\n        limit\n      });\n    }\n  }, [variables, search, limit, page]); // Necessary for determination checkList outside [content]\n\n  useEffect(() => {\n    if ((items === null || items === void 0 ? void 0 : items.length) > 0 && setCheckedList) setCheckedList(items);\n  }, [items, setCheckedList]);\n  useEffect(() => {\n    if (type && data && data[type] && !isSearching) {\n      setItems(data[type]);\n    }\n  }, [type, search, data, isSearching, setItems]);\n  return /*#__PURE__*/React.createElement(Wrap, null, (initialDisplayMethod || displayMethod) === 'grid' && /*#__PURE__*/React.createElement(Container, null, (items || []).map(item => /*#__PURE__*/React.createElement(LazyLoad, {\n    key: item.id || item.email\n  }, component(item)))), (initialDisplayMethod || displayMethod) === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: items,\n    template: template,\n    onChecked: onChecked,\n    onClick: onClick,\n    onEdit: onEdit,\n    onDelete: onDelete\n  }), (loading || isSearching || isLoading) && /*#__PURE__*/React.createElement(LowerLoader, {\n    key: 'loader'\n  }, /*#__PURE__*/React.createElement(Spinner, null)), !isEnd && !loading && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(Row, {\n    style: {\n      justifyContent: 'center'\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    disabled: isSearching || isLoading,\n    style: {\n      width: 245\n    },\n    onClick: loadMore\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0435\\u0449\\u0435\"))));\n};\n\n_s(Content, \"MZg/e8mKNHMnoozDpTbeyR9UB1E=\", false, function () {\n  return [useRouter, useSelector, useLazyQuery];\n});\n\n_c2 = Content;\nexport const List = ({\n  type,\n  query,\n  limit,\n  template,\n  variables,\n  component,\n  startOffset,\n  initialDisplayMethod,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  _s2();\n\n  const {\n    data,\n    loading,\n    refetch\n  } = useQuery(query, {\n    variables: { ...variables,\n      offset: startOffset,\n      limit\n    }\n  });\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(LowerLoader, {\n      key: 'loader'\n    }, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(Content, {\n    type: type,\n    limit: limit,\n    refetch: refetch,\n    template: template,\n    component: component,\n    initialList: type && data && data[type],\n    initialDisplayMethod: initialDisplayMethod,\n    setCheckedList: setCheckedList,\n    onChecked: onChecked,\n    onDelete: onDelete,\n    onClick: onClick,\n    onEdit: onEdit\n  });\n};\n\n_s2(List, \"fWmgXHxMhhEYHOqccxelYXaWMm0=\", false, function () {\n  return [useQuery];\n});\n\n_c3 = List;\nList.defaultProps = {\n  startOffset: 0\n};\nexport default List;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Content\");\n$RefreshReg$(_c3, \"List\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/List/index.js"],"names":["React","useState","useEffect","useLazyQuery","useQuery","useSelector","useRouter","styled","Row","Spinner","Divider","Button","Table","Wrap","WrapTable","Alert","GridAside","Container","LowerLoader","LazyLoad","div","CenterAlert","Content","type","query","template","component","variables","loading","refetch","limit","initialDisplayMethod","setCheckedList","onChecked","onClick","onEdit","onDelete","router","search","displayMethod","state","root","items","setItems","page","setPage","Number","isLoading","setIsLoading","isEnd","setIsEnd","loadSearch","data","isSearching","refetchSearch","loadMore","response","offset","list","length","prev","map","item","id","email","justifyContent","width","List","startOffset","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useLazyQuery, useQuery } from '@apollo/react-hooks'\nimport { useSelector } from 'react-redux'\nimport { useRouter } from 'next/router'\nimport styled from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Button from '../../atomic-ui/components/Button'\nimport Table, { Wrap as WrapTable } from '../../atomic-ui/components/Table'\nimport Alert from '../../atomic-ui/components/Alert'\n\nimport { GridAside as Container, LowerLoader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\n\nexport const Wrap = styled.div`\n  ${WrapTable} {\n    width: calc(100vw - 280px);\n  }\n`\n\nexport const CenterAlert = styled(Alert)`\n  width: 100%;\n  text-align: center;\n`\n\nexport const Content = ({\n  type,\n  query,\n  template,\n  component,\n  variables,\n  loading,\n  refetch,\n  limit = 6,\n  initialDisplayMethod,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const router = useRouter()\n  const { search, displayMethod } = useSelector((state) => ({\n    search: state.root.search,\n    displayMethod: state.root.displayMethod\n  }))\n\n  const [items, setItems] = useState([])\n  const [page, setPage] = useState(Number(router.query?.page) || 1)\n  const [isLoading, setIsLoading] = useState(false)\n  const [isEnd, setIsEnd] = useState(false)\n\n  const [loadSearch, { data, loading: isSearching, refetch: refetchSearch }] = useLazyQuery(query)\n\n  const loadMore = async () => {\n    if (!isEnd && !loading && (refetchSearch || refetch)) {\n      setIsLoading(true)\n\n      const response = await (refetchSearch || refetch)({\n        ...variables,\n        offset: limit * page,\n        search,\n        limit\n      })\n\n      if (response?.data) {\n        const list = response.data[type]\n        if (list.length === 0) setIsEnd(true)\n        if (list.length > 0) setItems((prev) => [...prev, ...list])\n        setPage((prev) => prev + 1)\n      }\n\n      setIsLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    if (search) {\n      loadSearch({\n        ...variables,\n        offset: limit * page,\n        search,\n        limit\n      })\n    }\n  }, [variables, search, limit, page])\n\n  // Necessary for determination checkList outside [content]\n  useEffect(() => {\n    if (items?.length > 0 && setCheckedList) setCheckedList(items)\n  }, [items, setCheckedList])\n\n  useEffect(() => {\n    if (type && data && data[type] && !isSearching) {\n      setItems(data[type])\n    }\n  }, [type, search, data, isSearching, setItems])\n\n  return (\n    <Wrap>\n      {(initialDisplayMethod || displayMethod) === 'grid' && (\n        <Container>\n          {(items || []).map((item) => (\n            <LazyLoad key={item.id || item.email}>{component(item)}</LazyLoad>\n          ))}\n        </Container>\n      )}\n\n      {(initialDisplayMethod || displayMethod) === 'list' && (\n        <Table\n          data={items}\n          template={template}\n          onChecked={onChecked}\n          onClick={onClick}\n          onEdit={onEdit}\n          onDelete={onDelete}\n        />\n      )}\n\n      {(loading || isSearching || isLoading) && (\n        <LowerLoader key={'loader'}>\n          <Spinner />\n        </LowerLoader>\n      )}\n\n      {!isEnd && !loading && (\n        <React.Fragment>\n          <Divider />\n          <Row style={{ justifyContent: 'center' }}>\n            <Button\n              type={'button'}\n              disabled={isSearching || isLoading}\n              style={{ width: 245 }}\n              onClick={loadMore}>\n              Загрузить еще\n            </Button>\n          </Row>\n        </React.Fragment>\n      )}\n    </Wrap>\n  )\n}\n\nexport const List = ({\n  type,\n  query,\n  limit,\n  template,\n  variables,\n  component,\n  startOffset,\n  initialDisplayMethod,\n  setCheckedList,\n  onChecked,\n  onClick,\n  onEdit,\n  onDelete\n}) => {\n  const { data, loading, refetch } = useQuery(query, {\n    variables: {\n      ...variables,\n      offset: startOffset,\n      limit\n    }\n  })\n\n  if (loading) {\n    return (\n      <LowerLoader key={'loader'}>\n        <Spinner />\n      </LowerLoader>\n    )\n  }\n\n  return (\n    <Content\n      type={type}\n      limit={limit}\n      refetch={refetch}\n      template={template}\n      component={component}\n      initialList={type && data && data[type]}\n      initialDisplayMethod={initialDisplayMethod}\n      setCheckedList={setCheckedList}\n      onChecked={onChecked}\n      onDelete={onDelete}\n      onClick={onClick}\n      onEdit={onEdit}\n    />\n  )\n}\n\nList.defaultProps = {\n  startOffset: 0\n}\n\nexport default List\n"]},"metadata":{},"sourceType":"module"}
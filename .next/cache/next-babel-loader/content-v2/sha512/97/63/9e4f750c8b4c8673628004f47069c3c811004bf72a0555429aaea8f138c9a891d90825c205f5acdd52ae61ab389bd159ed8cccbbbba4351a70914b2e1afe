{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Button from '../../atomic-ui/components/Button';\nimport Icon from '../../atomic-ui/components/Icon';\nimport SearchField from '../../atomic-ui/components/Search';\nexport var Wrap = styled(Row).withConfig({\n  displayName: \"SearchBar__Wrap\",\n  componentId: \"sc-1ruwjhl-0\"\n})([\"width:100%;\"]);\n_c = Wrap;\nexport var WrapSearchField = styled(SearchField).withConfig({\n  displayName: \"SearchBar__WrapSearchField\",\n  componentId: \"sc-1ruwjhl-1\"\n})([\"flex-grow:100;\"]);\n_c2 = WrapSearchField;\nexport var WrapButton = styled(Button).withConfig({\n  displayName: \"SearchBar__WrapButton\",\n  componentId: \"sc-1ruwjhl-2\"\n})([\"background:var(--default-color-accent-dim);border:none;&:hover{svg{path,circle{stroke:white;}}}\", \"\"], function (_ref) {\n  var visibleFilter = _ref.visibleFilter;\n  return visibleFilter && css([\"background:var(--default-color-accent);\"]);\n});\n_c3 = WrapButton;\nexport var Search = function Search(_ref2) {\n  _s2();\n\n  var appearance = _ref2.appearance,\n      onChangeFilter = _ref2.onChangeFilter,\n      onSubmit = _ref2.onSubmit;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visibleFilter = _useState2[0],\n      setVisibleFilter = _useState2[1];\n\n  var onClick = function onClick() {\n    setVisibleFilter(!visibleFilter);\n    if (onChangeFilter) onChangeFilter(!visibleFilter);\n  };\n\n  return /*#__PURE__*/React.createElement(Wrap, null, /*#__PURE__*/React.createElement(WrapSearchField, {\n    appearance: appearance,\n    placeholder: 'Поиск',\n    onSubmit: onSubmit\n  }), /*#__PURE__*/React.createElement(WrapButton, {\n    type: 'button',\n    kind: 'icon',\n    onClick: onClick,\n    visibleFilter: visibleFilter\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: 'filter2',\n    stroke: visibleFilter ? 'white' : 'var(--default-color-accent)'\n  })));\n};\n\n_s2(Search, \"YrAzhF4RCfnMQ29QgiuPOw62mSg=\");\n\n_c4 = Search;\nexport default Search;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"WrapSearchField\");\n$RefreshReg$(_c3, \"WrapButton\");\n$RefreshReg$(_c4, \"Search\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/SearchBar/index.js"],"names":["React","useState","styled","css","Row","Button","Icon","SearchField","Wrap","WrapSearchField","WrapButton","visibleFilter","Search","appearance","onChangeFilter","onSubmit","setVisibleFilter","onClick"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,IAAiBC,GAAjB,QAA4B,mBAA5B;AAEA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AAEA,OAAO,IAAMC,IAAI,GAAGN,MAAM,CAACE,GAAD,CAAT;AAAA;AAAA;AAAA,mBAAV;KAAMI,I;AAIb,OAAO,IAAMC,eAAe,GAAGP,MAAM,CAACK,WAAD,CAAT;AAAA;AAAA;AAAA,sBAArB;MAAME,e;AAIb,OAAO,IAAMC,UAAU,GAAGR,MAAM,CAACG,MAAD,CAAT;AAAA;AAAA;AAAA,4GAanB;AAAA,MAAGM,aAAH,QAAGA,aAAH;AAAA,SACAA,aAAa,IACbR,GADa,6CADb;AAAA,CAbmB,CAAhB;MAAMO,U;AAoBb,OAAO,IAAME,MAAM,GAAG,SAATA,MAAS,QAA8C;AAAA;;AAAA,MAA3CC,UAA2C,SAA3CA,UAA2C;AAAA,MAA/BC,cAA+B,SAA/BA,cAA+B;AAAA,MAAfC,QAAe,SAAfA,QAAe;;AAAA,kBACxBd,QAAQ,CAAC,KAAD,CADgB;AAAA;AAAA,MAC3DU,aAD2D;AAAA,MAC5CK,gBAD4C;;AAGlE,MAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpBD,IAAAA,gBAAgB,CAAC,CAACL,aAAF,CAAhB;AACA,QAAIG,cAAJ,EAAoBA,cAAc,CAAC,CAACH,aAAF,CAAd;AACrB,GAHD;;AAKA,sBACE,oBAAC,IAAD,qBACE,oBAAC,eAAD;AAAiB,IAAA,UAAU,EAAEE,UAA7B;AAAyC,IAAA,WAAW,EAAE,OAAtD;AAA+D,IAAA,QAAQ,EAAEE;AAAzE,IADF,eAEE,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAE,QAAlB;AAA4B,IAAA,IAAI,EAAE,MAAlC;AAA0C,IAAA,OAAO,EAAEE,OAAnD;AAA4D,IAAA,aAAa,EAAEN;AAA3E,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,SAAZ;AAAuB,IAAA,MAAM,EAAEA,aAAa,GAAG,OAAH,GAAa;AAAzD,IADF,CAFF,CADF;AAQD,CAhBM;;IAAMC,M;;MAAAA,M;AAkBb,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Button from '../../atomic-ui/components/Button'\nimport Icon from '../../atomic-ui/components/Icon'\nimport SearchField from '../../atomic-ui/components/Search'\n\nexport const Wrap = styled(Row)`\n  width: 100%;\n`\n\nexport const WrapSearchField = styled(SearchField)`\n  flex-grow: 100;\n`\n\nexport const WrapButton = styled(Button)`\n  background: var(--default-color-accent-dim);\n  border: none;\n\n  &:hover {\n    svg {\n      path,\n      circle {\n        stroke: white;\n      }\n    }\n  }\n\n  ${({ visibleFilter }) =>\n    visibleFilter &&\n    css`\n      background: var(--default-color-accent);\n    `}\n`\n\nexport const Search = ({ appearance, onChangeFilter, onSubmit }) => {\n  const [visibleFilter, setVisibleFilter] = useState(false)\n\n  const onClick = () => {\n    setVisibleFilter(!visibleFilter)\n    if (onChangeFilter) onChangeFilter(!visibleFilter)\n  }\n\n  return (\n    <Wrap>\n      <WrapSearchField appearance={appearance} placeholder={'Поиск'} onSubmit={onSubmit} />\n      <WrapButton type={'button'} kind={'icon'} onClick={onClick} visibleFilter={visibleFilter}>\n        <Icon icon={'filter2'} stroke={visibleFilter ? 'white' : 'var(--default-color-accent)'} />\n      </WrapButton>\n    </Wrap>\n  )\n}\n\nexport default Search\n"]},"metadata":{},"sourceType":"module"}
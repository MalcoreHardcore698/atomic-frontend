{"ast":null,"code":"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport template from '../../atomic-ui/components/Table/templates/ticket';\nimport TicketCard from '../../components/TicketCard';\nimport ContentLayout from '../../layouts/dashboard/content';\nimport { tickets as filterConfig } from '../../components/FilterBar/config';\nimport { onTicketCreate, onTicketEdit, onTicketLink } from '../../store/helpers/ticket';\nimport { setDocuments } from '../../store/actions/documents';\nimport { onUserLink } from '../../store/helpers/user';\nimport { useHelper } from '../../hooks/useHelper';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Обращения';\nconst LIMIT = 12;\nconst START_OFFSET = 0;\n\nconst Tickets = () => {\n  const recall = useHelper();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(ContentLayout, {\n    title: TITLE,\n    limit: LIMIT,\n    icon: 'ticket',\n    template: template,\n    startOffset: START_OFFSET,\n    filterConfig: filterConfig,\n    variables: {\n      status: null\n    },\n    emptyMessage: 'Обращений нет',\n    buttonCreateText: 'Создать обращение',\n    entityType: 'ticket',\n    getType: 'getTickets',\n    getQuery: queries.GET_TICKETS,\n    deleteQuery: queries.DELETE_TICKET,\n    deleteEntityMultiText: 'обращения',\n    deleteEntitySingleText: 'обращение',\n    onLink: ticket => recall(onTicketLink, {\n      id: ticket.id,\n      auth: user === null || user === void 0 ? void 0 : user.email\n    })(),\n    onEdit: (ticket, onAfter) => recall(onTicketEdit, {\n      id: ticket.id,\n      mutation: queries.UPDATE_TICKET,\n      onAfter\n    })(),\n    onCreate: onAfter => recall(onTicketCreate, {\n      mutation: queries.CREATE_TICKET,\n      onAfter\n    })(),\n    render: document => /*#__PURE__*/React.createElement(TicketCard, {\n      ticket: document,\n      onAuthorLink: author => recall(onUserLink, {\n        id: author,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned: author === user.name\n      })()\n    })\n  });\n};\n\nexport default Tickets;","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/pages/dashboard/tickets.js"],"names":["React","useEffect","useDispatch","useSelector","template","TicketCard","ContentLayout","tickets","filterConfig","onTicketCreate","onTicketEdit","onTicketLink","setDocuments","onUserLink","useHelper","queries","TITLE","LIMIT","START_OFFSET","Tickets","recall","user","state","dispatch","status","GET_TICKETS","DELETE_TICKET","ticket","id","auth","email","onAfter","mutation","UPDATE_TICKET","CREATE_TICKET","document","author","owned","name"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport template from '../../atomic-ui/components/Table/templates/ticket'\n\nimport TicketCard from '../../components/TicketCard'\nimport ContentLayout from '../../layouts/dashboard/content'\nimport { tickets as filterConfig } from '../../components/FilterBar/config'\nimport { onTicketCreate, onTicketEdit, onTicketLink } from '../../store/helpers/ticket'\nimport { setDocuments } from '../../store/actions/documents'\nimport { onUserLink } from '../../store/helpers/user'\nimport { useHelper } from '../../hooks/useHelper'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Обращения'\n\nconst LIMIT = 12\nconst START_OFFSET = 0\n\nconst Tickets = () => {\n  const recall = useHelper()\n  const user = useSelector((state) => state.user)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <ContentLayout\n      title={TITLE}\n      limit={LIMIT}\n      icon={'ticket'}\n      template={template}\n      startOffset={START_OFFSET}\n      filterConfig={filterConfig}\n      variables={{ status: null }}\n      emptyMessage={'Обращений нет'}\n      buttonCreateText={'Создать обращение'}\n      entityType={'ticket'}\n      getType={'getTickets'}\n      getQuery={queries.GET_TICKETS}\n      deleteQuery={queries.DELETE_TICKET}\n      deleteEntityMultiText={'обращения'}\n      deleteEntitySingleText={'обращение'}\n      onLink={(ticket) => recall(onTicketLink, { id: ticket.id, auth: user?.email })()}\n      onEdit={(ticket, onAfter) =>\n        recall(onTicketEdit, {\n          id: ticket.id,\n          mutation: queries.UPDATE_TICKET,\n          onAfter\n        })()\n      }\n      onCreate={(onAfter) => recall(onTicketCreate, { mutation: queries.CREATE_TICKET, onAfter })()}\n      render={(document) => (\n        <TicketCard\n          ticket={document}\n          onAuthorLink={(author) =>\n            recall(onUserLink, {\n              id: author,\n              auth: user?.email,\n              owned: author === user.name\n            })()\n          }\n        />\n      )}\n    />\n  )\n}\n\nexport default Tickets\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport Row from '../../atomic-ui/components/Row';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Column from '../../atomic-ui/components/Column';\nimport Difinition, { MarkedText } from '../../atomic-ui/components/Difinition';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Button from '../../atomic-ui/components/Button';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Icon from '../../atomic-ui/components/Icon';\nimport { getLabelRole, hasAccess } from '../../atomic-ui/utils/functions';\nimport { useEntityQuery } from '../../hooks/useEntityQuery';\nimport queries from '../../graphql/queries';\nimport { Loader } from '../Styled';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"Members__Wrap\",\n  componentId: \"sc-2k8qnt-0\"\n})([\"grid-gap:0;flex-grow:1;\", \" \", \" \", \"\"], ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\n\nconst hasResponsibleMember = member => hasAccess(member, 'PURPOSE_PROJECT') && hasAccess(member, 'PURPOSE_ARTICLE');\n\nexport const Members = ({\n  user,\n  style,\n  appearance,\n  className,\n  onMemberLink,\n  onMembersInvite,\n  onMemberAppoint,\n  onMemberDismiss,\n  onMemberExclude\n}) => {\n  const {\n    setQuery\n  } = useEntityQuery();\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(queries.GET_USER_MEMBERS, {\n    variables: {\n      email: user\n    }\n  });\n\n  const getExclude = member => ({\n    text: 'Исключить',\n    color: 'red',\n    onClick: () => onMemberExclude(member)\n  });\n\n  const getDefaultActions = member => [{\n    text: 'Назначить ответственным',\n    onClick: () => onMemberAppoint()\n  }, getExclude(member)];\n\n  const getResponsibleActions = member => [{\n    text: 'Снять полномочия',\n    onClick: () => onMemberDismiss()\n  }, getExclude(member)];\n\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    appearance: appearance\n  }, !loading && data ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    percentage: 'minmax(320px, 1fr)'\n  }, data.getUserMembers.map(member => {\n    var _member$avatar;\n\n    return /*#__PURE__*/React.createElement(Difinition, {\n      key: member.email,\n      img: ((_member$avatar = member.avatar) === null || _member$avatar === void 0 ? void 0 : _member$avatar.path) || '/images/avatar-default.png',\n      label: /*#__PURE__*/React.createElement(MarkedText, null, /*#__PURE__*/React.createElement(\"span\", null, getLabelRole(member.role)), hasResponsibleMember(member) ? ` | ${/*#__PURE__*/React.createElement(Tooltip, {\n        text: 'Ответственный'\n      }, /*#__PURE__*/React.createElement(Icon, {\n        icon: 'shieldDone',\n        size: 'xs',\n        stroke: 'var(--ghost-color-text)'\n      }))}` : ''),\n      text: member.name,\n      actions: hasResponsibleMember(member) ? getResponsibleActions(member) : getDefaultActions(member),\n      onLink: () => setQuery(member.email, 'user', onMemberLink),\n      stretch: true\n    });\n  })), onMembersInvite && /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n    style: {\n      flexGrow: 1\n    },\n    type: 'button',\n    onClick: onMembersInvite\n  }, \"\\u041F\\u0440\\u0438\\u0433\\u043B\\u0430\\u0441\\u0438\\u0442\\u044C \\u0443\\u0447\\u0430\\u0441\\u0442\\u043D\\u0438\\u043A\\u043E\\u0432\"))) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u0443\\u0447\\u0430\\u0441\\u0442\\u043D\\u0438\\u043A\\u0430\\u0445\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)));\n};\nMembers.defaultProps = {\n  appearance: 'default'\n};\nexport default Members;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/Members/index.js"],"names":["React","styled","css","useQuery","Row","Grid","Column","Difinition","MarkedText","Spinner","Button","Tooltip","Alert","Icon","getLabelRole","hasAccess","useEntityQuery","queries","Loader","Wrap","appearance","hasResponsibleMember","member","Members","user","style","className","onMemberLink","onMembersInvite","onMemberAppoint","onMemberDismiss","onMemberExclude","setQuery","data","loading","error","GET_USER_MEMBERS","variables","email","getExclude","text","color","onClick","getDefaultActions","getResponsibleActions","getUserMembers","map","avatar","path","role","name","flexGrow","width","textAlign","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Grid from '../../atomic-ui/components/Grid'\nimport Column from '../../atomic-ui/components/Column'\nimport Difinition, { MarkedText } from '../../atomic-ui/components/Difinition'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Button from '../../atomic-ui/components/Button'\nimport Tooltip from '../../atomic-ui/components/Tooltip'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Icon from '../../atomic-ui/components/Icon'\nimport { getLabelRole, hasAccess } from '../../atomic-ui/utils/functions'\n\nimport { useEntityQuery } from '../../hooks/useEntityQuery'\nimport queries from '../../graphql/queries'\nimport { Loader } from '../Styled'\n\nexport const Wrap = styled(Column)`\n  grid-gap: 0;\n  flex-grow: 1;\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nconst hasResponsibleMember = (member) =>\n  hasAccess(member, 'PURPOSE_PROJECT') && hasAccess(member, 'PURPOSE_ARTICLE')\n\nexport const Members = ({\n  user,\n  style,\n  appearance,\n  className,\n  onMemberLink,\n  onMembersInvite,\n  onMemberAppoint,\n  onMemberDismiss,\n  onMemberExclude\n}) => {\n  const { setQuery } = useEntityQuery()\n  const { data, loading, error } = useQuery(queries.GET_USER_MEMBERS, {\n    variables: {\n      email: user\n    }\n  })\n\n  const getExclude = (member) => ({\n    text: 'Исключить',\n    color: 'red',\n    onClick: () => onMemberExclude(member)\n  })\n\n  const getDefaultActions = (member) => [\n    { text: 'Назначить ответственным', onClick: () => onMemberAppoint() },\n    getExclude(member)\n  ]\n\n  const getResponsibleActions = (member) => [\n    { text: 'Снять полномочия', onClick: () => onMemberDismiss() },\n    getExclude(member)\n  ]\n\n  return (\n    <Wrap className={className} style={style} appearance={appearance}>\n      {!loading && data ? (\n        <React.Fragment>\n          <Grid percentage={'minmax(320px, 1fr)'}>\n            {data.getUserMembers.map((member) => (\n              <Difinition\n                key={member.email}\n                img={member.avatar?.path || '/images/avatar-default.png'}\n                label={\n                  <MarkedText>\n                    <span>{getLabelRole(member.role)}</span>\n                    {hasResponsibleMember(member)\n                      ? ` | ${(\n                          <Tooltip text={'Ответственный'}>\n                            <Icon\n                              icon={'shieldDone'}\n                              size={'xs'}\n                              stroke={'var(--ghost-color-text)'}\n                            />\n                          </Tooltip>\n                        )}`\n                      : ''}\n                  </MarkedText>\n                }\n                text={member.name}\n                actions={\n                  hasResponsibleMember(member)\n                    ? getResponsibleActions(member)\n                    : getDefaultActions(member)\n                }\n                onLink={() => setQuery(member.email, 'user', onMemberLink)}\n                stretch\n              />\n            ))}\n          </Grid>\n          {onMembersInvite && (\n            <Row>\n              <Button style={{ flexGrow: 1 }} type={'button'} onClick={onMembersInvite}>\n                Пригласить участников\n              </Button>\n            </Row>\n          )}\n        </React.Fragment>\n      ) : error ? (\n        <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n          Упс! Не удалось загрузить информацию о участниках\n        </Alert>\n      ) : (\n        <Loader>\n          <Spinner />\n        </Loader>\n      )}\n    </Wrap>\n  )\n}\n\nMembers.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Members\n"]},"metadata":{},"sourceType":"module"}
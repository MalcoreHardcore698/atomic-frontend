{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { Controller } from 'react-hook-form';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { v4 } from 'uuid';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Title from '../../atomic-ui/components/Title';\nimport Input from '../../atomic-ui/components/Input';\nimport Button from '../../atomic-ui/components/Button';\nimport Select from '../../atomic-ui/components/Select';\nimport TextArea from '../../atomic-ui/components/TextArea';\nimport TextEditor from '../../atomic-ui/components/TextEditor';\nimport CharacteristicEditor, { AddButton } from '../../atomic-ui/components/CharacteristicEditor';\nimport Dropzone from '../../atomic-ui/components/Dropzone';\nimport ActionRow from '../../atomic-ui/components/ActionRow';\nimport Difinition from '../../atomic-ui/components/Difinition';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport Divider from '../../atomic-ui/components/Divider';\nimport Tooltip from '../../atomic-ui/components/Tooltip';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Icon from '../../atomic-ui/components/Icon';\nimport { getLabelStatus, getLabelCategory, getLabelRole, getFileSize } from '../../atomic-ui/utils/functions';\nimport Form from '../Form';\nimport { Loader } from '../Styled';\nimport { setProjectMembers, setProjectScreenshots, setProjectFiles } from '../../store/actions/root';\nimport queries from '../../graphql/queries';\nimport config from '../../config';\nexport const AdaptiveRow = styled(Row).withConfig({\n  displayName: \"FormProject__AdaptiveRow\",\n  componentId: \"sc-1t0r6a3-0\"\n})([\"grid-gap:var(--default-gap);@media only screen and (max-width:768px){flex-wrap:wrap;}\"]);\n_c = AdaptiveRow;\nexport const Preview = styled(Dropzone).withConfig({\n  displayName: \"FormProject__Preview\",\n  componentId: \"sc-1t0r6a3-1\"\n})([\"width:40%;height:289px;@media only screen and (max-width:768px){width:100%;height:256px;}\"]);\n_c2 = Preview;\nexport const General = styled(Column).withConfig({\n  displayName: \"FormProject__General\",\n  componentId: \"sc-1t0r6a3-2\"\n})([\"width:60%;@media only screen and (max-width:768px){width:100%;}\"]);\n_c3 = General;\nexport const DescriptionArea = styled(TextArea).withConfig({\n  displayName: \"FormProject__DescriptionArea\",\n  componentId: \"sc-1t0r6a3-3\"\n})([\"height:100%;\"]);\n_c4 = DescriptionArea;\nexport const RemoveTooltip = styled(Tooltip).withConfig({\n  displayName: \"FormProject__RemoveTooltip\",\n  componentId: \"sc-1t0r6a3-4\"\n})([\"display:none;\"]);\n_c5 = RemoveTooltip;\nexport const AlignmentRow = styled(Row).withConfig({\n  displayName: \"FormProject__AlignmentRow\",\n  componentId: \"sc-1t0r6a3-5\"\n})([\"position:relative;justify-content:space-between;align-items:center;overflow:hidden;width:100%;&:hover{\", \"{display:flex;}}\"], RemoveTooltip);\n_c6 = AlignmentRow;\nexport const Characteristics = ({\n  project,\n  watch,\n  control,\n  getValues\n}) => {\n  _s();\n\n  var _getValues;\n\n  const initialValue = useMemo(() => getValues('characteristics') || (project === null || project === void 0 ? void 0 : project.characteristics) || null, [getValues, project]);\n  const [isPreviewCharacteristics, setIsPreviewCharacteristics] = useState((initialValue === null || initialValue === void 0 ? void 0 : initialValue.length) > 0);\n  const characteristics = watch('characteristics');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ActionRow, {\n    title: 'Характеристики',\n    labelChecked: 'Превью',\n    disabledChecked: (characteristics === null || characteristics === void 0 ? void 0 : characteristics.length) === 0,\n    defaultChecked: isPreviewCharacteristics,\n    onChecked: setIsPreviewCharacteristics,\n    rtlChecked: true,\n    checkbox: true\n  }), isPreviewCharacteristics && /*#__PURE__*/React.createElement(CharacteristicEditor, {\n    appearance: 'ghost',\n    defaultValue: characteristics,\n    readOnly: true\n  }), /*#__PURE__*/React.createElement(Controller, {\n    key: characteristics === null || characteristics === void 0 ? void 0 : characteristics.length,\n    control: control,\n    name: 'characteristics',\n    rules: {\n      required: ((_getValues = getValues('characteristics')) === null || _getValues === void 0 ? void 0 : _getValues.length) > 0\n    },\n    defaultValue: characteristics,\n    render: ({\n      value,\n      onChange\n    }) => /*#__PURE__*/React.createElement(CharacteristicEditor, {\n      appearance: 'ghost',\n      defaultValue: value,\n      onChange: onChange\n    })\n  }));\n};\n\n_s(Characteristics, \"2MZji7fR0NjfQtdvfrogmfYVegM=\");\n\n_c7 = Characteristics;\nexport const Project = ({\n  project,\n  mutation,\n  appearance,\n  className,\n  canEditStatus,\n  onMemberAdd,\n  onScreenshotAdd,\n  onFileAdd,\n  onMemberRemove,\n  onScreenshotRemove,\n  onFileRemove,\n  onSubmit,\n  isPurpose\n}) => {\n  _s2();\n\n  const {\n    data,\n    loading: loadingData,\n    error\n  } = project ? useQuery(queries.GET_PROJECT, {\n    variables: {\n      id: project\n    }\n  }) : {\n    data: {\n      getProject: {}\n    },\n    loading: false,\n    error: false\n  };\n  const {\n    data: dataCompanies,\n    loading: loadingCompanies\n  } = useQuery(queries.GET_USERS, {\n    variables: {\n      account: ['ENTITY']\n    }\n  });\n  const {\n    data: dataCategories,\n    loading: loadingCategories\n  } = useQuery(queries.GET_CATEGORIES);\n  const {\n    data: dataStatuses,\n    loading: loadingStatuses\n  } = useQuery(queries.GET_POST_STATUSES);\n  const [companies, setCompanies] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [statuses, setStatuses] = useState([]);\n  const {\n    members,\n    screenshots,\n    files\n  } = useSelector(state => ({\n    members: state.root.members,\n    screenshots: state.root.screenshots,\n    files: state.root.files\n  }));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (!loadingData && data) {\n      var _data$getProject, _data$getProject2, _data$getProject3;\n\n      if ((_data$getProject = data.getProject) !== null && _data$getProject !== void 0 && _data$getProject.members) {\n        dispatch(setProjectMembers(data.getProject.members));\n      }\n\n      if ((_data$getProject2 = data.getProject) !== null && _data$getProject2 !== void 0 && _data$getProject2.screenshots) {\n        dispatch(setProjectScreenshots(data.getProject.screenshots));\n      }\n\n      if ((_data$getProject3 = data.getProject) !== null && _data$getProject3 !== void 0 && _data$getProject3.files) {\n        dispatch(setProjectFiles(data.getProject.files));\n      }\n    }\n  }, [loadingData, data]);\n  useEffect(() => {\n    if (!loadingCompanies && dataCompanies) {\n      setCompanies(dataCompanies.getUsers);\n    }\n  }, [loadingCompanies, dataCompanies]);\n  useEffect(() => {\n    if (!loadingCategories && dataCategories) {\n      setCategories(dataCategories.getCategories);\n    }\n  }, [loadingCategories, dataCategories]);\n  useEffect(() => {\n    if (!loadingStatuses && dataStatuses) {\n      setStatuses(dataStatuses.getPostStatus);\n    }\n  }, [loadingStatuses, dataStatuses]);\n  return /*#__PURE__*/React.createElement(Form, {\n    className: className,\n    appearance: appearance,\n    mutation: mutation,\n    onSubmit: (form, action) => onSubmit({ ...form,\n      screenshots,\n      members,\n      files\n    }, action)\n  }, ({\n    watch,\n    register,\n    loading,\n    errors,\n    control,\n    getValues\n  }) => {\n    var _data$getProject4, _data$getProject5, _data$getProject6, _data$getProject7, _data$getProject8, _data$getProject9, _data$getProject10, _data$getProject11;\n\n    return !loading && !loadingData && data ? /*#__PURE__*/React.createElement(React.Fragment, null, errors && errors.preview && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435 \\u0434\\u043B\\u044F \\u043F\\u0440\\u0435\\u0432\\u044C\\u044E\"), errors && errors.title && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u0430\"), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u041E\\u0441\\u043D\\u043E\\u0432\\u043D\\u043E\\u0435\"), /*#__PURE__*/React.createElement(AdaptiveRow, null, /*#__PURE__*/React.createElement(Controller, {\n      name: 'preview',\n      control: control,\n      rules: {\n        required: true\n      },\n      defaultValue: getValues('preview') || ((_data$getProject4 = data.getProject) === null || _data$getProject4 === void 0 ? void 0 : _data$getProject4.preview) || null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Preview, {\n        accept: 'image/*',\n        defaultValue: value,\n        onChange: onChange,\n        placeholder: 'Перетащите сюда изображение для превью',\n        tooltip: 'Разрешение: 700x600px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB'\n      })\n    }), /*#__PURE__*/React.createElement(General, null, /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      name: 'title',\n      ref: register({\n        required: true\n      }),\n      defaultValue: getValues('title') || ((_data$getProject5 = data.getProject) === null || _data$getProject5 === void 0 ? void 0 : _data$getProject5.title),\n      placeholder: 'Название',\n      appearance: 'ghost',\n      disabled: loading\n    }), /*#__PURE__*/React.createElement(Controller, {\n      name: 'company',\n      control: control,\n      defaultValue: getValues('company') || ((_data$getProject6 = data.getProject) !== null && _data$getProject6 !== void 0 && _data$getProject6.company ? {\n        value: data.getProject.company.id,\n        label: data.getProject.company.name\n      } : null),\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        options: !loading && companies ? companies.map(user => ({\n          value: user,\n          label: user.name\n        })) : [],\n        appearance: 'ghost',\n        defaultValue: value,\n        placeholder: 'Выберите компанию',\n        onChange: onChange,\n        isLoading: loading || loadingCompanies,\n        isSearchable: true\n      })\n    }), /*#__PURE__*/React.createElement(Controller, {\n      name: 'category',\n      control: control,\n      defaultValue: getValues('category') || ((_data$getProject7 = data.getProject) !== null && _data$getProject7 !== void 0 && _data$getProject7.category ? {\n        value: data.getProject.category.id,\n        label: getLabelCategory(data.getProject.category.name)\n      } : null),\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        appearance: 'ghost',\n        placeholder: 'Выберите раздел',\n        options: categories.filter(category => category.type === 'DIVISION').map(item => ({\n          value: item.id,\n          label: getLabelCategory(item.name)\n        })),\n        onChange: onChange,\n        defaultValue: value,\n        isLoading: loading || loadingCategories,\n        isClearable: true\n      })\n    }), errors && errors.description && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043E\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u0435 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u0430\"), /*#__PURE__*/React.createElement(DescriptionArea, {\n      ref: register(),\n      name: 'description',\n      appearance: 'ghost',\n      defaultValue: getValues('description') || ((_data$getProject8 = data.getProject) === null || _data$getProject8 === void 0 ? void 0 : _data$getProject8.description),\n      placeholder: 'Описание',\n      disabled: loading\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Characteristics, {\n      project: data.getProject,\n      watch: watch,\n      control: control,\n      getValues: getValues\n    }), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Title, {\n      tag: 'h4'\n    }, \"\\u0421\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u043D\\u0438\\u0435\"), errors && errors.body && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0441\\u043E\\u0434\\u0435\\u0440\\u0436\\u0430\\u043D\\u0438\\u0435 \\u0441\\u0442\\u0430\\u0442\\u044C\\u0438\"), /*#__PURE__*/React.createElement(Controller, {\n      name: 'body',\n      control: control,\n      rules: {\n        required: true\n      },\n      defaultValue: getValues('body') || ((_data$getProject9 = data.getProject) === null || _data$getProject9 === void 0 ? void 0 : _data$getProject9.body) || null,\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(TextEditor, {\n        apiKey: config.get('tiny-key'),\n        appearance: 'ghost',\n        defaultValue: value,\n        onChange: onChange\n      })\n    }), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Column, {\n      style: {\n        flexGrow: 1\n      }\n    }, /*#__PURE__*/React.createElement(ActionRow, {\n      title: 'Участники проекта'\n    }), (members === null || members === void 0 ? void 0 : members.length) > 0 ? /*#__PURE__*/React.createElement(Grid, {\n      percentage: 'minmax(320px, 1fr)'\n    }, members.map(member => {\n      var _member$value, _member$value2, _member$value2$avatar, _member$avatar, _member$value3, _member$value4;\n\n      return /*#__PURE__*/React.createElement(AlignmentRow, {\n        key: v4()\n      }, /*#__PURE__*/React.createElement(Difinition, {\n        style: {\n          width: '100%'\n        },\n        key: ((_member$value = member.value) === null || _member$value === void 0 ? void 0 : _member$value.email) || (member === null || member === void 0 ? void 0 : member.email),\n        img: ((_member$value2 = member.value) === null || _member$value2 === void 0 ? void 0 : (_member$value2$avatar = _member$value2.avatar) === null || _member$value2$avatar === void 0 ? void 0 : _member$value2$avatar.path) || ((_member$avatar = member.avatar) === null || _member$avatar === void 0 ? void 0 : _member$avatar.path) || '/images/avatar-default.png',\n        label: getLabelRole((member === null || member === void 0 ? void 0 : (_member$value3 = member.value) === null || _member$value3 === void 0 ? void 0 : _member$value3.account) || (member === null || member === void 0 ? void 0 : member.account)),\n        text: ((_member$value4 = member.value) === null || _member$value4 === void 0 ? void 0 : _member$value4.name) || (member === null || member === void 0 ? void 0 : member.name)\n      }), /*#__PURE__*/React.createElement(RemoveTooltip, {\n        place: 'left',\n        text: 'Удалить'\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: 'button',\n        kind: 'icon',\n        size: 'xs',\n        onClick: () => {\n          var _member$value5;\n\n          return onMemberRemove((member === null || member === void 0 ? void 0 : (_member$value5 = member.value) === null || _member$value5 === void 0 ? void 0 : _member$value5.email) || (member === null || member === void 0 ? void 0 : member.email));\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        size: 'xs',\n        icon: 'delete',\n        stroke: 'white'\n      }))));\n    })) : /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        textAlign: 'center'\n      },\n      width: '100%'\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u044C\\u0442\\u0435 \\u0443\\u0447\\u0430\\u0441\\u0442\\u043D\\u0438\\u043A\\u043E\\u0432\"), /*#__PURE__*/React.createElement(AddButton, {\n      type: 'button',\n      onClick: onMemberAdd || (() => {})\n    }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"), /*#__PURE__*/React.createElement(Icon, {\n      type: 'button',\n      icon: 'add',\n      stroke: 'white'\n    }))), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(ActionRow, {\n      title: 'Изображения',\n      info: 'Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB'\n    }), (screenshots === null || screenshots === void 0 ? void 0 : screenshots.length) > 0 ? /*#__PURE__*/React.createElement(Grid, {\n      percentage: 'minmax(196px, 1fr)'\n    }, screenshots.map(screenshot => {\n      var _screenshot$file, _screenshot$file2, _screenshot$file3, _screenshot$file4;\n\n      return /*#__PURE__*/React.createElement(AlignmentRow, {\n        key: v4()\n      }, /*#__PURE__*/React.createElement(Difinition, {\n        key: screenshot.id,\n        style: {\n          width: '100%'\n        },\n        img: screenshot.blob || ((_screenshot$file = screenshot.file) === null || _screenshot$file === void 0 ? void 0 : _screenshot$file.path) || screenshot.path,\n        label: (((_screenshot$file2 = screenshot.file) === null || _screenshot$file2 === void 0 ? void 0 : _screenshot$file2.name) || ((_screenshot$file3 = screenshot.file) === null || _screenshot$file3 === void 0 ? void 0 : _screenshot$file3.path) || (screenshot === null || screenshot === void 0 ? void 0 : screenshot.name) || (screenshot === null || screenshot === void 0 ? void 0 : screenshot.path)).split('/').slice(-1)[0],\n        text: getFileSize(screenshot.size || ((_screenshot$file4 = screenshot.file) === null || _screenshot$file4 === void 0 ? void 0 : _screenshot$file4.size))\n      }), !project && /*#__PURE__*/React.createElement(RemoveTooltip, {\n        place: 'left',\n        text: 'Удалить'\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: 'button',\n        kind: 'icon',\n        size: 'xs',\n        onClick: () => onScreenshotRemove(screenshot.id)\n      }, /*#__PURE__*/React.createElement(Icon, {\n        size: 'xs',\n        icon: 'delete',\n        stroke: 'white'\n      }))));\n    })) : /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        textAlign: 'center'\n      },\n      width: '100%'\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u044C\\u0442\\u0435 \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u044F\"), /*#__PURE__*/React.createElement(AddButton, {\n      type: 'button',\n      onClick: !project && onScreenshotAdd || (() => {})\n    }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"), /*#__PURE__*/React.createElement(Icon, {\n      type: 'button',\n      icon: 'add',\n      stroke: 'white'\n    })), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(ActionRow, {\n      title: 'Файлы',\n      info: 'Допустимые форматы: pdf, docx, .doc. Макс. размер: 15 MB'\n    }), (files === null || files === void 0 ? void 0 : files.length) > 0 ? /*#__PURE__*/React.createElement(Grid, {\n      percentage: 'minmax(196px, 1fr)'\n    }, files.map(file => {\n      var _file$file, _file$file2, _file$file3;\n\n      return /*#__PURE__*/React.createElement(AlignmentRow, {\n        key: v4()\n      }, /*#__PURE__*/React.createElement(Difinition, {\n        key: file.id,\n        icon: 'document',\n        style: {\n          width: '100%'\n        },\n        label: (((_file$file = file.file) === null || _file$file === void 0 ? void 0 : _file$file.name) || ((_file$file2 = file.file) === null || _file$file2 === void 0 ? void 0 : _file$file2.path) || (file === null || file === void 0 ? void 0 : file.name) || (file === null || file === void 0 ? void 0 : file.path)).split('/').slice(-1)[0],\n        text: getFileSize(file.size || ((_file$file3 = file.file) === null || _file$file3 === void 0 ? void 0 : _file$file3.size))\n      }), !project && /*#__PURE__*/React.createElement(RemoveTooltip, {\n        place: 'left',\n        text: 'Удалить'\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: 'button',\n        kind: 'icon',\n        size: 'xs',\n        onClick: () => onFileRemove(file.id)\n      }, /*#__PURE__*/React.createElement(Icon, {\n        size: 'xs',\n        icon: 'delete',\n        stroke: 'white'\n      }))));\n    })) : /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        textAlign: 'center'\n      },\n      width: '100%'\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u044C\\u0442\\u0435 \\u0444\\u0430\\u0439\\u043B\\u044B\"), /*#__PURE__*/React.createElement(AddButton, {\n      type: 'button',\n      onClick: onFileAdd || (() => {})\n    }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C\"), /*#__PURE__*/React.createElement(Icon, {\n      type: 'button',\n      icon: 'add',\n      stroke: 'white'\n    })), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), errors && errors.presentation && /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%'\n      },\n      appearance: 'error'\n    }, \"\\u0412\\u0441\\u0442\\u0430\\u0432\\u044C\\u0442\\u0435 \\u0441\\u0441\\u044B\\u043B\\u043A\\u0443 \\u043D\\u0430 \\u0432\\u0438\\u0434\\u0435\\u043E\"), /*#__PURE__*/React.createElement(Input, {\n      type: 'text',\n      ref: register(),\n      name: 'presentation',\n      defaultValue: getValues('presentation') || ((_data$getProject10 = data.getProject) === null || _data$getProject10 === void 0 ? void 0 : _data$getProject10.presentation),\n      placeholder: 'Вставьте ссылку на видео',\n      label: 'Видео-презентация',\n      appearance: 'ghost',\n      disabled: loading\n    }), canEditStatus && /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), canEditStatus && /*#__PURE__*/React.createElement(Controller, {\n      name: 'status',\n      control: control,\n      defaultValue: getValues('status') || ((_data$getProject11 = data.getProject) !== null && _data$getProject11 !== void 0 && _data$getProject11.status ? {\n        value: data.getProject.status,\n        label: getLabelStatus(data.getProject.status)\n      } : null),\n      render: ({\n        value,\n        onChange\n      }) => /*#__PURE__*/React.createElement(Select, {\n        appearance: 'ghost',\n        placeholder: 'Выберите статус',\n        options: statuses.map(item => ({\n          value: item,\n          label: getLabelStatus(item)\n        })),\n        onChange: onChange,\n        defaultValue: value,\n        menuPlacement: 'top',\n        isLoading: loading || loadingStatuses,\n        isClearable: true\n      })\n    }), /*#__PURE__*/React.createElement(Divider, {\n      clear: true\n    }), /*#__PURE__*/React.createElement(Row, null, /*#__PURE__*/React.createElement(Button, {\n      style: {\n        flexGrow: 1\n      },\n      type: 'submit',\n      disabled: loading\n    }, isPurpose ? 'Предложить' : project ? 'Сохранить' : 'Создать'))) : error ? /*#__PURE__*/React.createElement(Alert, {\n      appearance: 'error',\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      }\n    }, \"\\u0423\\u043F\\u0441! \\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044E \\u043E \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u0435\") : /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  });\n};\n\n_s2(Project, \"GkK+yvluI1yQzZz6dPGPuYkTdNE=\", false, function () {\n  return [useQuery, useQuery, useQuery, useQuery, useSelector, useDispatch];\n});\n\n_c8 = Project;\nexport default Project;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n\n$RefreshReg$(_c, \"AdaptiveRow\");\n$RefreshReg$(_c2, \"Preview\");\n$RefreshReg$(_c3, \"General\");\n$RefreshReg$(_c4, \"DescriptionArea\");\n$RefreshReg$(_c5, \"RemoveTooltip\");\n$RefreshReg$(_c6, \"AlignmentRow\");\n$RefreshReg$(_c7, \"Characteristics\");\n$RefreshReg$(_c8, \"Project\");","map":{"version":3,"sources":["/Users/malcore/Documents/workspace/freelance/atomic/atomic-frontend/components/FormProject/index.js"],"names":["React","useState","useEffect","useMemo","styled","Controller","useQuery","useSelector","useDispatch","v4","Row","Column","Grid","Title","Input","Button","Select","TextArea","TextEditor","CharacteristicEditor","AddButton","Dropzone","ActionRow","Difinition","Spinner","Divider","Tooltip","Alert","Icon","getLabelStatus","getLabelCategory","getLabelRole","getFileSize","Form","Loader","setProjectMembers","setProjectScreenshots","setProjectFiles","queries","config","AdaptiveRow","Preview","General","DescriptionArea","RemoveTooltip","AlignmentRow","Characteristics","project","watch","control","getValues","initialValue","characteristics","isPreviewCharacteristics","setIsPreviewCharacteristics","length","required","value","onChange","Project","mutation","appearance","className","canEditStatus","onMemberAdd","onScreenshotAdd","onFileAdd","onMemberRemove","onScreenshotRemove","onFileRemove","onSubmit","isPurpose","data","loading","loadingData","error","GET_PROJECT","variables","id","getProject","dataCompanies","loadingCompanies","GET_USERS","account","dataCategories","loadingCategories","GET_CATEGORIES","dataStatuses","loadingStatuses","GET_POST_STATUSES","companies","setCompanies","categories","setCategories","statuses","setStatuses","members","screenshots","files","state","root","dispatch","getUsers","getCategories","getPostStatus","form","action","register","errors","preview","width","title","company","label","name","map","user","category","filter","type","item","description","body","get","flexGrow","member","email","avatar","path","textAlign","screenshot","blob","file","split","slice","size","presentation","status"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,OAArC,QAAoD,OAApD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,EAAT,QAAmB,MAAnB;AAEA,OAAOC,GAAP,MAAgB,gCAAhB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,OAAOC,oBAAP,IAA+BC,SAA/B,QAAgD,iDAAhD;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,SAAP,MAAsB,sCAAtB;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,OAAP,MAAoB,oCAApB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,SACEC,cADF,EAEEC,gBAFF,EAGEC,YAHF,EAIEC,WAJF,QAKO,iCALP;AAOA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,EAAmDC,eAAnD,QAA0E,0BAA1E;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,OAAO,MAAMC,WAAW,GAAGpC,MAAM,CAACM,GAAD,CAAT;AAAA;AAAA;AAAA,6FAAjB;KAAM8B,W;AAQb,OAAO,MAAMC,OAAO,GAAGrC,MAAM,CAACiB,QAAD,CAAT;AAAA;AAAA;AAAA,iGAAb;MAAMoB,O;AAUb,OAAO,MAAMC,OAAO,GAAGtC,MAAM,CAACO,MAAD,CAAT;AAAA;AAAA;AAAA,uEAAb;MAAM+B,O;AAQb,OAAO,MAAMC,eAAe,GAAGvC,MAAM,CAACa,QAAD,CAAT;AAAA;AAAA;AAAA,oBAArB;MAAM0B,e;AAIb,OAAO,MAAMC,aAAa,GAAGxC,MAAM,CAACsB,OAAD,CAAT;AAAA;AAAA;AAAA,qBAAnB;MAAMkB,a;AAIb,OAAO,MAAMC,YAAY,GAAGzC,MAAM,CAACM,GAAD,CAAT;AAAA;AAAA;AAAA,mIAQnBkC,aARmB,CAAlB;MAAMC,Y;AAcb,OAAO,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,KAAX;AAAkBC,EAAAA,OAAlB;AAA2BC,EAAAA;AAA3B,CAAD,KAA4C;AAAA;;AAAA;;AACzE,QAAMC,YAAY,GAAGhD,OAAO,CAC1B,MAAM+C,SAAS,CAAC,iBAAD,CAAT,KAAgCH,OAAhC,aAAgCA,OAAhC,uBAAgCA,OAAO,CAAEK,eAAzC,KAA4D,IADxC,EAE1B,CAACF,SAAD,EAAYH,OAAZ,CAF0B,CAA5B;AAKA,QAAM,CAACM,wBAAD,EAA2BC,2BAA3B,IAA0DrD,QAAQ,CAAC,CAAAkD,YAAY,SAAZ,IAAAA,YAAY,WAAZ,YAAAA,YAAY,CAAEI,MAAd,IAAuB,CAAxB,CAAxE;AAEA,QAAMH,eAAe,GAAGJ,KAAK,CAAC,iBAAD,CAA7B;AAEA,sBACE,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE,gBADT;AAEE,IAAA,YAAY,EAAE,QAFhB;AAGE,IAAA,eAAe,EAAE,CAAAI,eAAe,SAAf,IAAAA,eAAe,WAAf,YAAAA,eAAe,CAAEG,MAAjB,MAA4B,CAH/C;AAIE,IAAA,cAAc,EAAEF,wBAJlB;AAKE,IAAA,SAAS,EAAEC,2BALb;AAME,IAAA,UAAU,MANZ;AAOE,IAAA,QAAQ;AAPV,IADF,EAWGD,wBAAwB,iBACvB,oBAAC,oBAAD;AAAsB,IAAA,UAAU,EAAE,OAAlC;AAA2C,IAAA,YAAY,EAAED,eAAzD;AAA0E,IAAA,QAAQ;AAAlF,IAZJ,eAcE,oBAAC,UAAD;AACE,IAAA,GAAG,EAAEA,eAAF,aAAEA,eAAF,uBAAEA,eAAe,CAAEG,MADxB;AAEE,IAAA,OAAO,EAAEN,OAFX;AAGE,IAAA,IAAI,EAAE,iBAHR;AAIE,IAAA,KAAK,EAAE;AAAEO,MAAAA,QAAQ,EAAE,eAAAN,SAAS,CAAC,iBAAD,CAAT,0DAA8BK,MAA9B,IAAuC;AAAnD,KAJT;AAKE,IAAA,YAAY,EAAEH,eALhB;AAME,IAAA,MAAM,EAAE,CAAC;AAAEK,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAD,kBACN,oBAAC,oBAAD;AAAsB,MAAA,UAAU,EAAE,OAAlC;AAA2C,MAAA,YAAY,EAAED,KAAzD;AAAgE,MAAA,QAAQ,EAAEC;AAA1E;AAPJ,IAdF,CADF;AA2BD,CArCM;;GAAMZ,e;;MAAAA,e;AAuCb,OAAO,MAAMa,OAAO,GAAG,CAAC;AACtBZ,EAAAA,OADsB;AAEtBa,EAAAA,QAFsB;AAGtBC,EAAAA,UAHsB;AAItBC,EAAAA,SAJsB;AAKtBC,EAAAA,aALsB;AAMtBC,EAAAA,WANsB;AAOtBC,EAAAA,eAPsB;AAQtBC,EAAAA,SARsB;AAStBC,EAAAA,cATsB;AAUtBC,EAAAA,kBAVsB;AAWtBC,EAAAA,YAXsB;AAYtBC,EAAAA,QAZsB;AAatBC,EAAAA;AAbsB,CAAD,KAcjB;AAAA;;AACJ,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAO,EAAEC,WAAjB;AAA8BC,IAAAA;AAA9B,MAAwC5B,OAAO,GACjDzC,QAAQ,CAACgC,OAAO,CAACsC,WAAT,EAAsB;AAC5BC,IAAAA,SAAS,EAAE;AACTC,MAAAA,EAAE,EAAE/B;AADK;AADiB,GAAtB,CADyC,GAMjD;AAAEyB,IAAAA,IAAI,EAAE;AAAEO,MAAAA,UAAU,EAAE;AAAd,KAAR;AAA4BN,IAAAA,OAAO,EAAE,KAArC;AAA4CE,IAAAA,KAAK,EAAE;AAAnD,GANJ;AAQA,QAAM;AAAEH,IAAAA,IAAI,EAAEQ,aAAR;AAAuBP,IAAAA,OAAO,EAAEQ;AAAhC,MAAqD3E,QAAQ,CAACgC,OAAO,CAAC4C,SAAT,EAAoB;AACrFL,IAAAA,SAAS,EAAE;AACTM,MAAAA,OAAO,EAAE,CAAC,QAAD;AADA;AAD0E,GAApB,CAAnE;AAKA,QAAM;AAAEX,IAAAA,IAAI,EAAEY,cAAR;AAAwBX,IAAAA,OAAO,EAAEY;AAAjC,MAAuD/E,QAAQ,CAACgC,OAAO,CAACgD,cAAT,CAArE;AACA,QAAM;AAAEd,IAAAA,IAAI,EAAEe,YAAR;AAAsBd,IAAAA,OAAO,EAAEe;AAA/B,MAAmDlF,QAAQ,CAACgC,OAAO,CAACmD,iBAAT,CAAjE;AAEA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B1F,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC2F,UAAD,EAAaC,aAAb,IAA8B5F,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAAC6F,QAAD,EAAWC,WAAX,IAA0B9F,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM;AAAE+F,IAAAA,OAAF;AAAWC,IAAAA,WAAX;AAAwBC,IAAAA;AAAxB,MAAkC3F,WAAW,CAAE4F,KAAD,KAAY;AAC9DH,IAAAA,OAAO,EAAEG,KAAK,CAACC,IAAN,CAAWJ,OAD0C;AAE9DC,IAAAA,WAAW,EAAEE,KAAK,CAACC,IAAN,CAAWH,WAFsC;AAG9DC,IAAAA,KAAK,EAAEC,KAAK,CAACC,IAAN,CAAWF;AAH4C,GAAZ,CAAD,CAAnD;AAKA,QAAMG,QAAQ,GAAG7F,WAAW,EAA5B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwE,WAAD,IAAgBF,IAApB,EAA0B;AAAA;;AACxB,8BAAIA,IAAI,CAACO,UAAT,6CAAI,iBAAiBiB,OAArB,EAA8B;AAC5BK,QAAAA,QAAQ,CAAClE,iBAAiB,CAACqC,IAAI,CAACO,UAAL,CAAgBiB,OAAjB,CAAlB,CAAR;AACD;;AACD,+BAAIxB,IAAI,CAACO,UAAT,8CAAI,kBAAiBkB,WAArB,EAAkC;AAChCI,QAAAA,QAAQ,CAACjE,qBAAqB,CAACoC,IAAI,CAACO,UAAL,CAAgBkB,WAAjB,CAAtB,CAAR;AACD;;AACD,+BAAIzB,IAAI,CAACO,UAAT,8CAAI,kBAAiBmB,KAArB,EAA4B;AAC1BG,QAAAA,QAAQ,CAAChE,eAAe,CAACmC,IAAI,CAACO,UAAL,CAAgBmB,KAAjB,CAAhB,CAAR;AACD;AACF;AACF,GAZQ,EAYN,CAACxB,WAAD,EAAcF,IAAd,CAZM,CAAT;AAcAtE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC+E,gBAAD,IAAqBD,aAAzB,EAAwC;AACtCW,MAAAA,YAAY,CAACX,aAAa,CAACsB,QAAf,CAAZ;AACD;AACF,GAJQ,EAIN,CAACrB,gBAAD,EAAmBD,aAAnB,CAJM,CAAT;AAMA9E,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACmF,iBAAD,IAAsBD,cAA1B,EAA0C;AACxCS,MAAAA,aAAa,CAACT,cAAc,CAACmB,aAAhB,CAAb;AACD;AACF,GAJQ,EAIN,CAAClB,iBAAD,EAAoBD,cAApB,CAJM,CAAT;AAMAlF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACsF,eAAD,IAAoBD,YAAxB,EAAsC;AACpCQ,MAAAA,WAAW,CAACR,YAAY,CAACiB,aAAd,CAAX;AACD;AACF,GAJQ,EAIN,CAAChB,eAAD,EAAkBD,YAAlB,CAJM,CAAT;AAMA,sBACE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAEzB,SADb;AAEE,IAAA,UAAU,EAAED,UAFd;AAGE,IAAA,QAAQ,EAAED,QAHZ;AAIE,IAAA,QAAQ,EAAE,CAAC6C,IAAD,EAAOC,MAAP,KACRpC,QAAQ,CACN,EACE,GAAGmC,IADL;AAEER,MAAAA,WAFF;AAGED,MAAAA,OAHF;AAIEE,MAAAA;AAJF,KADM,EAONQ,MAPM;AALZ,KAeG,CAAC;AAAE1D,IAAAA,KAAF;AAAS2D,IAAAA,QAAT;AAAmBlC,IAAAA,OAAnB;AAA4BmC,IAAAA,MAA5B;AAAoC3D,IAAAA,OAApC;AAA6CC,IAAAA;AAA7C,GAAD;AAAA;;AAAA,WACC,CAACuB,OAAD,IAAY,CAACC,WAAb,IAA4BF,IAA5B,gBACE,oBAAC,KAAD,CAAO,QAAP,QACGoC,MAAM,IAAIA,MAAM,CAACC,OAAjB,iBACC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAAd;AAAiC,MAAA,UAAU,EAAE;AAA7C,qLAFJ,EAMGF,MAAM,IAAIA,MAAM,CAACG,KAAjB,iBACC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAED,QAAAA,KAAK,EAAE;AAAT,OAAd;AAAiC,MAAA,UAAU,EAAE;AAA7C,gJAPJ,eAYE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE;AAAZ,0DAZF,eAaE,oBAAC,WAAD,qBACE,oBAAC,UAAD;AACE,MAAA,IAAI,EAAE,SADR;AAEE,MAAA,OAAO,EAAE7D,OAFX;AAGE,MAAA,KAAK,EAAE;AAAEO,QAAAA,QAAQ,EAAE;AAAZ,OAHT;AAIE,MAAA,YAAY,EAAEN,SAAS,CAAC,SAAD,CAAT,0BAAwBsB,IAAI,CAACO,UAA7B,sDAAwB,kBAAiB8B,OAAzC,KAAoD,IAJpE;AAKE,MAAA,MAAM,EAAE,CAAC;AAAEpD,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,kBACN,oBAAC,OAAD;AACE,QAAA,MAAM,EAAE,SADV;AAEE,QAAA,YAAY,EAAED,KAFhB;AAGE,QAAA,QAAQ,EAAEC,QAHZ;AAIE,QAAA,WAAW,EAAE,wCAJf;AAKE,QAAA,OAAO,EACL;AANJ;AANJ,MADF,eAmBE,oBAAC,OAAD,qBACE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAE,MADR;AAEE,MAAA,IAAI,EAAE,OAFR;AAGE,MAAA,GAAG,EAAEiD,QAAQ,CAAC;AAAEnD,QAAAA,QAAQ,EAAE;AAAZ,OAAD,CAHf;AAIE,MAAA,YAAY,EAAEN,SAAS,CAAC,OAAD,CAAT,0BAAsBsB,IAAI,CAACO,UAA3B,sDAAsB,kBAAiBgC,KAAvC,CAJhB;AAKE,MAAA,WAAW,EAAE,UALf;AAME,MAAA,UAAU,EAAE,OANd;AAOE,MAAA,QAAQ,EAAEtC;AAPZ,MADF,eAWE,oBAAC,UAAD;AACE,MAAA,IAAI,EAAE,SADR;AAEE,MAAA,OAAO,EAAExB,OAFX;AAGE,MAAA,YAAY,EACVC,SAAS,CAAC,SAAD,CAAT,KACC,qBAAAsB,IAAI,CAACO,UAAL,gEAAiBiC,OAAjB,GACG;AACEvD,QAAAA,KAAK,EAAEe,IAAI,CAACO,UAAL,CAAgBiC,OAAhB,CAAwBlC,EADjC;AAEEmC,QAAAA,KAAK,EAAEzC,IAAI,CAACO,UAAL,CAAgBiC,OAAhB,CAAwBE;AAFjC,OADH,GAKG,IANJ,CAJJ;AAYE,MAAA,MAAM,EAAE,CAAC;AAAEzD,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,kBACN,oBAAC,MAAD;AACE,QAAA,OAAO,EACL,CAACe,OAAD,IAAYiB,SAAZ,GACIA,SAAS,CAACyB,GAAV,CAAeC,IAAD,KAAW;AACvB3D,UAAAA,KAAK,EAAE2D,IADgB;AAEvBH,UAAAA,KAAK,EAAEG,IAAI,CAACF;AAFW,SAAX,CAAd,CADJ,GAKI,EAPR;AASE,QAAA,UAAU,EAAE,OATd;AAUE,QAAA,YAAY,EAAEzD,KAVhB;AAWE,QAAA,WAAW,EAAE,mBAXf;AAYE,QAAA,QAAQ,EAAEC,QAZZ;AAaE,QAAA,SAAS,EAAEe,OAAO,IAAIQ,gBAbxB;AAcE,QAAA,YAAY;AAdd;AAbJ,MAXF,eA2CE,oBAAC,UAAD;AACE,MAAA,IAAI,EAAE,UADR;AAEE,MAAA,OAAO,EAAEhC,OAFX;AAGE,MAAA,YAAY,EACVC,SAAS,CAAC,UAAD,CAAT,KACC,qBAAAsB,IAAI,CAACO,UAAL,gEAAiBsC,QAAjB,GACG;AACE5D,QAAAA,KAAK,EAAEe,IAAI,CAACO,UAAL,CAAgBsC,QAAhB,CAAyBvC,EADlC;AAEEmC,QAAAA,KAAK,EAAEnF,gBAAgB,CAAC0C,IAAI,CAACO,UAAL,CAAgBsC,QAAhB,CAAyBH,IAA1B;AAFzB,OADH,GAKG,IANJ,CAJJ;AAYE,MAAA,MAAM,EAAE,CAAC;AAAEzD,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,kBACN,oBAAC,MAAD;AACE,QAAA,UAAU,EAAE,OADd;AAEE,QAAA,WAAW,EAAE,iBAFf;AAGE,QAAA,OAAO,EAAEkC,UAAU,CAChB0B,MADM,CACED,QAAD,IAAcA,QAAQ,CAACE,IAAT,KAAkB,UADjC,EAENJ,GAFM,CAEDK,IAAD,KAAW;AACd/D,UAAAA,KAAK,EAAE+D,IAAI,CAAC1C,EADE;AAEdmC,UAAAA,KAAK,EAAEnF,gBAAgB,CAAC0F,IAAI,CAACN,IAAN;AAFT,SAAX,CAFE,CAHX;AASE,QAAA,QAAQ,EAAExD,QATZ;AAUE,QAAA,YAAY,EAAED,KAVhB;AAWE,QAAA,SAAS,EAAEgB,OAAO,IAAIY,iBAXxB;AAYE,QAAA,WAAW;AAZb;AAbJ,MA3CF,EAyEGuB,MAAM,IAAIA,MAAM,CAACa,WAAjB,iBACC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAEX,QAAAA,KAAK,EAAE;AAAT,OAAd;AAAiC,MAAA,UAAU,EAAE;AAA7C,gJA1EJ,eA8EE,oBAAC,eAAD;AACE,MAAA,GAAG,EAAEH,QAAQ,EADf;AAEE,MAAA,IAAI,EAAE,aAFR;AAGE,MAAA,UAAU,EAAE,OAHd;AAIE,MAAA,YAAY,EAAEzD,SAAS,CAAC,aAAD,CAAT,0BAA4BsB,IAAI,CAACO,UAAjC,sDAA4B,kBAAiB0C,WAA7C,CAJhB;AAKE,MAAA,WAAW,EAAE,UALf;AAME,MAAA,QAAQ,EAAEhD;AANZ,MA9EF,CAnBF,CAbF,eAyHE,oBAAC,OAAD;AAAS,MAAA,KAAK;AAAd,MAzHF,eA2HE,oBAAC,eAAD;AACE,MAAA,OAAO,EAAED,IAAI,CAACO,UADhB;AAEE,MAAA,KAAK,EAAE/B,KAFT;AAGE,MAAA,OAAO,EAAEC,OAHX;AAIE,MAAA,SAAS,EAAEC;AAJb,MA3HF,eAkIE,oBAAC,OAAD;AAAS,MAAA,KAAK;AAAd,MAlIF,eAoIE,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAE;AAAZ,sEApIF,EAqIG0D,MAAM,IAAIA,MAAM,CAACc,IAAjB,iBACC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAEZ,QAAAA,KAAK,EAAE;AAAT,OAAd;AAAiC,MAAA,UAAU,EAAE;AAA7C,sJAtIJ,eA0IE,oBAAC,UAAD;AACE,MAAA,IAAI,EAAE,MADR;AAEE,MAAA,OAAO,EAAE7D,OAFX;AAGE,MAAA,KAAK,EAAE;AAAEO,QAAAA,QAAQ,EAAE;AAAZ,OAHT;AAIE,MAAA,YAAY,EAAEN,SAAS,CAAC,MAAD,CAAT,0BAAqBsB,IAAI,CAACO,UAA1B,sDAAqB,kBAAiB2C,IAAtC,KAA8C,IAJ9D;AAKE,MAAA,MAAM,EAAE,CAAC;AAAEjE,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,kBACN,oBAAC,UAAD;AACE,QAAA,MAAM,EAAEnB,MAAM,CAACoF,GAAP,CAAW,UAAX,CADV;AAEE,QAAA,UAAU,EAAE,OAFd;AAGE,QAAA,YAAY,EAAElE,KAHhB;AAIE,QAAA,QAAQ,EAAEC;AAJZ;AANJ,MA1IF,eAyJE,oBAAC,OAAD;AAAS,MAAA,KAAK;AAAd,MAzJF,eA2JE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAEkE,QAAAA,QAAQ,EAAE;AAAZ;AAAf,oBACE,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAE;AAAlB,MADF,EAGG,CAAA5B,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEzC,MAAT,IAAkB,CAAlB,gBACC,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAE;AAAlB,OACGyC,OAAO,CAACmB,GAAR,CAAaU,MAAD;AAAA;;AAAA,0BACX,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAEpH,EAAE;AAArB,sBACE,oBAAC,UAAD;AACE,QAAA,KAAK,EAAE;AAAEqG,UAAAA,KAAK,EAAE;AAAT,SADT;AAEE,QAAA,GAAG,EAAE,kBAAAe,MAAM,CAACpE,KAAP,gEAAcqE,KAAd,MAAuBD,MAAvB,aAAuBA,MAAvB,uBAAuBA,MAAM,CAAEC,KAA/B,CAFP;AAGE,QAAA,GAAG,EACD,mBAAAD,MAAM,CAACpE,KAAP,2FAAcsE,MAAd,gFAAsBC,IAAtB,wBACAH,MAAM,CAACE,MADP,mDACA,eAAeC,IADf,KAEA,4BANJ;AAQE,QAAA,KAAK,EAAEjG,YAAY,CAAC,CAAA8F,MAAM,SAAN,IAAAA,MAAM,WAAN,8BAAAA,MAAM,CAAEpE,KAAR,kEAAe0B,OAAf,MAA0B0C,MAA1B,aAA0BA,MAA1B,uBAA0BA,MAAM,CAAE1C,OAAlC,CAAD,CARrB;AASE,QAAA,IAAI,EAAE,mBAAA0C,MAAM,CAACpE,KAAP,kEAAcyD,IAAd,MAAsBW,MAAtB,aAAsBA,MAAtB,uBAAsBA,MAAM,CAAEX,IAA9B;AATR,QADF,eAYE,oBAAC,aAAD;AAAe,QAAA,KAAK,EAAE,MAAtB;AAA8B,QAAA,IAAI,EAAE;AAApC,sBACE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAE,QADR;AAEE,QAAA,IAAI,EAAE,MAFR;AAGE,QAAA,IAAI,EAAE,IAHR;AAIE,QAAA,OAAO,EAAE;AAAA;;AAAA,iBAAM/C,cAAc,CAAC,CAAA0D,MAAM,SAAN,IAAAA,MAAM,WAAN,8BAAAA,MAAM,CAAEpE,KAAR,kEAAeqE,KAAf,MAAwBD,MAAxB,aAAwBA,MAAxB,uBAAwBA,MAAM,CAAEC,KAAhC,CAAD,CAApB;AAAA;AAJX,sBAKE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE,IAAZ;AAAkB,QAAA,IAAI,EAAE,QAAxB;AAAkC,QAAA,MAAM,EAAE;AAA1C,QALF,CADF,CAZF,CADW;AAAA,KAAZ,CADH,CADD,gBA4BC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAAd;AAAuC,MAAA,KAAK,EAAE;AAA9C,uHA/BJ,eAoCE,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,QAAjB;AAA2B,MAAA,OAAO,EAAEjE,WAAW,KAAK,MAAM,CAAE,CAAb;AAA/C,oBACE,qFADF,eAEE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,QAAZ;AAAsB,MAAA,IAAI,EAAE,KAA5B;AAAmC,MAAA,MAAM,EAAE;AAA3C,MAFF,CApCF,CA3JF,eAqME,oBAAC,OAAD;AAAS,MAAA,KAAK;AAAd,MArMF,eAuME,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,aADT;AAEE,MAAA,IAAI,EAAE;AAFR,MAvMF,EA4MG,CAAAiC,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAE1C,MAAb,IAAsB,CAAtB,gBACC,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAE;AAAlB,OACG0C,WAAW,CAACkB,GAAZ,CAAiBe,UAAD;AAAA;;AAAA,0BACf,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAEzH,EAAE;AAArB,sBACE,oBAAC,UAAD;AACE,QAAA,GAAG,EAAEyH,UAAU,CAACpD,EADlB;AAEE,QAAA,KAAK,EAAE;AAAEgC,UAAAA,KAAK,EAAE;AAAT,SAFT;AAGE,QAAA,GAAG,EAAEoB,UAAU,CAACC,IAAX,yBAAmBD,UAAU,CAACE,IAA9B,qDAAmB,iBAAiBJ,IAApC,KAA4CE,UAAU,CAACF,IAH9D;AAIE,QAAA,KAAK,EACH,CACE,sBAAAE,UAAU,CAACE,IAAX,wEAAiBlB,IAAjB,2BACAgB,UAAU,CAACE,IADX,sDACA,kBAAiBJ,IADjB,MAEAE,UAFA,aAEAA,UAFA,uBAEAA,UAAU,CAAEhB,IAFZ,MAGAgB,UAHA,aAGAA,UAHA,uBAGAA,UAAU,CAAEF,IAHZ,CADF,EAMGK,KANH,CAMS,GANT,EAOGC,KAPH,CAOS,CAAC,CAPV,EAOa,CAPb,CALJ;AAcE,QAAA,IAAI,EAAEtG,WAAW,CAACkG,UAAU,CAACK,IAAX,0BAAmBL,UAAU,CAACE,IAA9B,sDAAmB,kBAAiBG,IAApC,CAAD;AAdnB,QADF,EAiBG,CAACxF,OAAD,iBACC,oBAAC,aAAD;AAAe,QAAA,KAAK,EAAE,MAAtB;AAA8B,QAAA,IAAI,EAAE;AAApC,sBACE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAE,QADR;AAEE,QAAA,IAAI,EAAE,MAFR;AAGE,QAAA,IAAI,EAAE,IAHR;AAIE,QAAA,OAAO,EAAE,MAAMqB,kBAAkB,CAAC8D,UAAU,CAACpD,EAAZ;AAJnC,sBAKE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE,IAAZ;AAAkB,QAAA,IAAI,EAAE,QAAxB;AAAkC,QAAA,MAAM,EAAE;AAA1C,QALF,CADF,CAlBJ,CADe;AAAA,KAAhB,CADH,CADD,gBAmCC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAEmD,QAAAA,SAAS,EAAE;AAAb,OAAd;AAAuC,MAAA,KAAK,EAAE;AAA9C,6HA/OJ,eAoPE,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,QAAjB;AAA2B,MAAA,OAAO,EAAG,CAAClF,OAAD,IAAYkB,eAAb,KAAkC,MAAM,CAAE,CAA1C;AAApC,oBACE,qFADF,eAEE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,QAAZ;AAAsB,MAAA,IAAI,EAAE,KAA5B;AAAmC,MAAA,MAAM,EAAE;AAA3C,MAFF,CApPF,eAyPE,oBAAC,OAAD;AAAS,MAAA,KAAK;AAAd,MAzPF,eA2PE,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE,OADT;AAEE,MAAA,IAAI,EAAE;AAFR,MA3PF,EAgQG,CAAAiC,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAE3C,MAAP,IAAgB,CAAhB,gBACC,oBAAC,IAAD;AAAM,MAAA,UAAU,EAAE;AAAlB,OACG2C,KAAK,CAACiB,GAAN,CAAWiB,IAAD;AAAA;;AAAA,0BACT,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAE3H,EAAE;AAArB,sBACE,oBAAC,UAAD;AACE,QAAA,GAAG,EAAE2H,IAAI,CAACtD,EADZ;AAEE,QAAA,IAAI,EAAE,UAFR;AAGE,QAAA,KAAK,EAAE;AAAEgC,UAAAA,KAAK,EAAE;AAAT,SAHT;AAIE,QAAA,KAAK,EACH,CAAC,eAAAsB,IAAI,CAACA,IAAL,0DAAWlB,IAAX,qBAAmBkB,IAAI,CAACA,IAAxB,gDAAmB,YAAWJ,IAA9B,MAAsCI,IAAtC,aAAsCA,IAAtC,uBAAsCA,IAAI,CAAElB,IAA5C,MAAoDkB,IAApD,aAAoDA,IAApD,uBAAoDA,IAAI,CAAEJ,IAA1D,CAAD,EACGK,KADH,CACS,GADT,EAEGC,KAFH,CAES,CAAC,CAFV,EAEa,CAFb,CALJ;AASE,QAAA,IAAI,EAAEtG,WAAW,CAACoG,IAAI,CAACG,IAAL,oBAAaH,IAAI,CAACA,IAAlB,gDAAa,YAAWG,IAAxB,CAAD;AATnB,QADF,EAYG,CAACxF,OAAD,iBACC,oBAAC,aAAD;AAAe,QAAA,KAAK,EAAE,MAAtB;AAA8B,QAAA,IAAI,EAAE;AAApC,sBACE,oBAAC,MAAD;AACE,QAAA,IAAI,EAAE,QADR;AAEE,QAAA,IAAI,EAAE,MAFR;AAGE,QAAA,IAAI,EAAE,IAHR;AAIE,QAAA,OAAO,EAAE,MAAMsB,YAAY,CAAC+D,IAAI,CAACtD,EAAN;AAJ7B,sBAKE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAE,IAAZ;AAAkB,QAAA,IAAI,EAAE,QAAxB;AAAkC,QAAA,MAAM,EAAE;AAA1C,QALF,CADF,CAbJ,CADS;AAAA,KAAV,CADH,CADD,gBA8BC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAEmD,QAAAA,SAAS,EAAE;AAAb,OAAd;AAAuC,MAAA,KAAK,EAAE;AAA9C,yFA9RJ,eAmSE,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAE,QAAjB;AAA2B,MAAA,OAAO,EAAE/D,SAAS,KAAK,MAAM,CAAE,CAAb;AAA7C,oBACE,qFADF,eAEE,oBAAC,IAAD;AAAM,MAAA,IAAI,EAAE,QAAZ;AAAsB,MAAA,IAAI,EAAE,KAA5B;AAAmC,MAAA,MAAM,EAAE;AAA3C,MAFF,CAnSF,eAwSE,oBAAC,OAAD;AAAS,MAAA,KAAK;AAAd,MAxSF,EA0SG0C,MAAM,IAAIA,MAAM,CAAC4B,YAAjB,iBACC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAE1B,QAAAA,KAAK,EAAE;AAAT,OAAd;AAAiC,MAAA,UAAU,EAAE;AAA7C,2IA3SJ,eA+SE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAE,MADR;AAEE,MAAA,GAAG,EAAEH,QAAQ,EAFf;AAGE,MAAA,IAAI,EAAE,cAHR;AAIE,MAAA,YAAY,EAAEzD,SAAS,CAAC,cAAD,CAAT,2BAA6BsB,IAAI,CAACO,UAAlC,uDAA6B,mBAAiByD,YAA9C,CAJhB;AAKE,MAAA,WAAW,EAAE,0BALf;AAME,MAAA,KAAK,EAAE,mBANT;AAOE,MAAA,UAAU,EAAE,OAPd;AAQE,MAAA,QAAQ,EAAE/D;AARZ,MA/SF,EA0TGV,aAAa,iBAAI,oBAAC,OAAD;AAAS,MAAA,KAAK;AAAd,MA1TpB,EA4TGA,aAAa,iBACZ,oBAAC,UAAD;AACE,MAAA,IAAI,EAAE,QADR;AAEE,MAAA,OAAO,EAAEd,OAFX;AAGE,MAAA,YAAY,EACVC,SAAS,CAAC,QAAD,CAAT,KACC,sBAAAsB,IAAI,CAACO,UAAL,kEAAiB0D,MAAjB,GACG;AACEhF,QAAAA,KAAK,EAAEe,IAAI,CAACO,UAAL,CAAgB0D,MADzB;AAEExB,QAAAA,KAAK,EAAEpF,cAAc,CAAC2C,IAAI,CAACO,UAAL,CAAgB0D,MAAjB;AAFvB,OADH,GAKG,IANJ,CAJJ;AAYE,MAAA,MAAM,EAAE,CAAC;AAAEhF,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAAD,kBACN,oBAAC,MAAD;AACE,QAAA,UAAU,EAAE,OADd;AAEE,QAAA,WAAW,EAAE,iBAFf;AAGE,QAAA,OAAO,EAAEoC,QAAQ,CAACqB,GAAT,CAAcK,IAAD,KAAW;AAC/B/D,UAAAA,KAAK,EAAE+D,IADwB;AAE/BP,UAAAA,KAAK,EAAEpF,cAAc,CAAC2F,IAAD;AAFU,SAAX,CAAb,CAHX;AAOE,QAAA,QAAQ,EAAE9D,QAPZ;AAQE,QAAA,YAAY,EAAED,KARhB;AASE,QAAA,aAAa,EAAE,KATjB;AAUE,QAAA,SAAS,EAAEgB,OAAO,IAAIe,eAVxB;AAWE,QAAA,WAAW;AAXb;AAbJ,MA7TJ,eA2VE,oBAAC,OAAD;AAAS,MAAA,KAAK;AAAd,MA3VF,eA6VE,oBAAC,GAAD,qBACE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAEoC,QAAAA,QAAQ,EAAE;AAAZ,OAAf;AAAgC,MAAA,IAAI,EAAE,QAAtC;AAAgD,MAAA,QAAQ,EAAEnD;AAA1D,OACGF,SAAS,GAAG,YAAH,GAAkBxB,OAAO,GAAG,WAAH,GAAiB,SADtD,CADF,CA7VF,CADF,GAoWI4B,KAAK,gBACP,oBAAC,KAAD;AAAO,MAAA,UAAU,EAAE,OAAnB;AAA4B,MAAA,KAAK,EAAE;AAAEmC,QAAAA,KAAK,EAAE,MAAT;AAAiBmB,QAAAA,SAAS,EAAE;AAA5B;AAAnC,2PADO,gBAKP,oBAAC,MAAD,qBACE,oBAAC,OAAD,OADF,CA1WH;AAAA,GAfH,CADF;AAiYD,CA3cM;;IAAMtE,O;UAgBPrD,Q,EAOuDA,Q,EAKEA,Q,EACJA,Q,EAMjBC,W,EAKvBC,W;;;MAxCNmD,O;AA6cb,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Controller } from 'react-hook-form'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { v4 } from 'uuid'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Grid from '../../atomic-ui/components/Grid'\nimport Title from '../../atomic-ui/components/Title'\nimport Input from '../../atomic-ui/components/Input'\nimport Button from '../../atomic-ui/components/Button'\nimport Select from '../../atomic-ui/components/Select'\nimport TextArea from '../../atomic-ui/components/TextArea'\nimport TextEditor from '../../atomic-ui/components/TextEditor'\nimport CharacteristicEditor, { AddButton } from '../../atomic-ui/components/CharacteristicEditor'\nimport Dropzone from '../../atomic-ui/components/Dropzone'\nimport ActionRow from '../../atomic-ui/components/ActionRow'\nimport Difinition from '../../atomic-ui/components/Difinition'\nimport Spinner from '../../atomic-ui/components/Spinner'\nimport Divider from '../../atomic-ui/components/Divider'\nimport Tooltip from '../../atomic-ui/components/Tooltip'\nimport Alert from '../../atomic-ui/components/Alert'\nimport Icon from '../../atomic-ui/components/Icon'\nimport {\n  getLabelStatus,\n  getLabelCategory,\n  getLabelRole,\n  getFileSize\n} from '../../atomic-ui/utils/functions'\n\nimport Form from '../Form'\nimport { Loader } from '../Styled'\nimport { setProjectMembers, setProjectScreenshots, setProjectFiles } from '../../store/actions/root'\nimport queries from '../../graphql/queries'\nimport config from '../../config'\n\nexport const AdaptiveRow = styled(Row)`\n  grid-gap: var(--default-gap);\n\n  @media only screen and (max-width: 768px) {\n    flex-wrap: wrap;\n  }\n`\n\nexport const Preview = styled(Dropzone)`\n  width: 40%;\n  height: 289px;\n\n  @media only screen and (max-width: 768px) {\n    width: 100%;\n    height: 256px;\n  }\n`\n\nexport const General = styled(Column)`\n  width: 60%;\n\n  @media only screen and (max-width: 768px) {\n    width: 100%;\n  }\n`\n\nexport const DescriptionArea = styled(TextArea)`\n  height: 100%;\n`\n\nexport const RemoveTooltip = styled(Tooltip)`\n  display: none;\n`\n\nexport const AlignmentRow = styled(Row)`\n  position: relative;\n  justify-content: space-between;\n  align-items: center;\n  overflow: hidden;\n  width: 100%;\n\n  &:hover {\n    ${RemoveTooltip} {\n      display: flex;\n    }\n  }\n`\n\nexport const Characteristics = ({ project, watch, control, getValues }) => {\n  const initialValue = useMemo(\n    () => getValues('characteristics') || project?.characteristics || null,\n    [getValues, project]\n  )\n\n  const [isPreviewCharacteristics, setIsPreviewCharacteristics] = useState(initialValue?.length > 0)\n\n  const characteristics = watch('characteristics')\n\n  return (\n    <React.Fragment>\n      <ActionRow\n        title={'Характеристики'}\n        labelChecked={'Превью'}\n        disabledChecked={characteristics?.length === 0}\n        defaultChecked={isPreviewCharacteristics}\n        onChecked={setIsPreviewCharacteristics}\n        rtlChecked\n        checkbox\n      />\n\n      {isPreviewCharacteristics && (\n        <CharacteristicEditor appearance={'ghost'} defaultValue={characteristics} readOnly />\n      )}\n      <Controller\n        key={characteristics?.length}\n        control={control}\n        name={'characteristics'}\n        rules={{ required: getValues('characteristics')?.length > 0 }}\n        defaultValue={characteristics}\n        render={({ value, onChange }) => (\n          <CharacteristicEditor appearance={'ghost'} defaultValue={value} onChange={onChange} />\n        )}\n      />\n    </React.Fragment>\n  )\n}\n\nexport const Project = ({\n  project,\n  mutation,\n  appearance,\n  className,\n  canEditStatus,\n  onMemberAdd,\n  onScreenshotAdd,\n  onFileAdd,\n  onMemberRemove,\n  onScreenshotRemove,\n  onFileRemove,\n  onSubmit,\n  isPurpose\n}) => {\n  const { data, loading: loadingData, error } = project\n    ? useQuery(queries.GET_PROJECT, {\n        variables: {\n          id: project\n        }\n      })\n    : { data: { getProject: {} }, loading: false, error: false }\n\n  const { data: dataCompanies, loading: loadingCompanies } = useQuery(queries.GET_USERS, {\n    variables: {\n      account: ['ENTITY']\n    }\n  })\n  const { data: dataCategories, loading: loadingCategories } = useQuery(queries.GET_CATEGORIES)\n  const { data: dataStatuses, loading: loadingStatuses } = useQuery(queries.GET_POST_STATUSES)\n\n  const [companies, setCompanies] = useState([])\n  const [categories, setCategories] = useState([])\n  const [statuses, setStatuses] = useState([])\n\n  const { members, screenshots, files } = useSelector((state) => ({\n    members: state.root.members,\n    screenshots: state.root.screenshots,\n    files: state.root.files\n  }))\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    if (!loadingData && data) {\n      if (data.getProject?.members) {\n        dispatch(setProjectMembers(data.getProject.members))\n      }\n      if (data.getProject?.screenshots) {\n        dispatch(setProjectScreenshots(data.getProject.screenshots))\n      }\n      if (data.getProject?.files) {\n        dispatch(setProjectFiles(data.getProject.files))\n      }\n    }\n  }, [loadingData, data])\n\n  useEffect(() => {\n    if (!loadingCompanies && dataCompanies) {\n      setCompanies(dataCompanies.getUsers)\n    }\n  }, [loadingCompanies, dataCompanies])\n\n  useEffect(() => {\n    if (!loadingCategories && dataCategories) {\n      setCategories(dataCategories.getCategories)\n    }\n  }, [loadingCategories, dataCategories])\n\n  useEffect(() => {\n    if (!loadingStatuses && dataStatuses) {\n      setStatuses(dataStatuses.getPostStatus)\n    }\n  }, [loadingStatuses, dataStatuses])\n\n  return (\n    <Form\n      className={className}\n      appearance={appearance}\n      mutation={mutation}\n      onSubmit={(form, action) =>\n        onSubmit(\n          {\n            ...form,\n            screenshots,\n            members,\n            files\n          },\n          action\n        )\n      }>\n      {({ watch, register, loading, errors, control, getValues }) =>\n        !loading && !loadingData && data ? (\n          <React.Fragment>\n            {errors && errors.preview && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Выберите изображение для превью\n              </Alert>\n            )}\n            {errors && errors.title && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Введите название проекта\n              </Alert>\n            )}\n\n            <Title tag={'h4'}>Основное</Title>\n            <AdaptiveRow>\n              <Controller\n                name={'preview'}\n                control={control}\n                rules={{ required: true }}\n                defaultValue={getValues('preview') || data.getProject?.preview || null}\n                render={({ value, onChange }) => (\n                  <Preview\n                    accept={'image/*'}\n                    defaultValue={value}\n                    onChange={onChange}\n                    placeholder={'Перетащите сюда изображение для превью'}\n                    tooltip={\n                      'Разрешение: 700x600px. Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB'\n                    }\n                  />\n                )}\n              />\n\n              <General>\n                <Input\n                  type={'text'}\n                  name={'title'}\n                  ref={register({ required: true })}\n                  defaultValue={getValues('title') || data.getProject?.title}\n                  placeholder={'Название'}\n                  appearance={'ghost'}\n                  disabled={loading}\n                />\n\n                <Controller\n                  name={'company'}\n                  control={control}\n                  defaultValue={\n                    getValues('company') ||\n                    (data.getProject?.company\n                      ? {\n                          value: data.getProject.company.id,\n                          label: data.getProject.company.name\n                        }\n                      : null)\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      options={\n                        !loading && companies\n                          ? companies.map((user) => ({\n                              value: user,\n                              label: user.name\n                            }))\n                          : []\n                      }\n                      appearance={'ghost'}\n                      defaultValue={value}\n                      placeholder={'Выберите компанию'}\n                      onChange={onChange}\n                      isLoading={loading || loadingCompanies}\n                      isSearchable\n                    />\n                  )}\n                />\n\n                <Controller\n                  name={'category'}\n                  control={control}\n                  defaultValue={\n                    getValues('category') ||\n                    (data.getProject?.category\n                      ? {\n                          value: data.getProject.category.id,\n                          label: getLabelCategory(data.getProject.category.name)\n                        }\n                      : null)\n                  }\n                  render={({ value, onChange }) => (\n                    <Select\n                      appearance={'ghost'}\n                      placeholder={'Выберите раздел'}\n                      options={categories\n                        .filter((category) => category.type === 'DIVISION')\n                        .map((item) => ({\n                          value: item.id,\n                          label: getLabelCategory(item.name)\n                        }))}\n                      onChange={onChange}\n                      defaultValue={value}\n                      isLoading={loading || loadingCategories}\n                      isClearable\n                    />\n                  )}\n                />\n\n                {errors && errors.description && (\n                  <Alert style={{ width: '100%' }} appearance={'error'}>\n                    Введите описание проекта\n                  </Alert>\n                )}\n                <DescriptionArea\n                  ref={register()}\n                  name={'description'}\n                  appearance={'ghost'}\n                  defaultValue={getValues('description') || data.getProject?.description}\n                  placeholder={'Описание'}\n                  disabled={loading}\n                />\n              </General>\n            </AdaptiveRow>\n\n            <Divider clear />\n\n            <Characteristics\n              project={data.getProject}\n              watch={watch}\n              control={control}\n              getValues={getValues}\n            />\n\n            <Divider clear />\n\n            <Title tag={'h4'}>Содержание</Title>\n            {errors && errors.body && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Введите содержание статьи\n              </Alert>\n            )}\n            <Controller\n              name={'body'}\n              control={control}\n              rules={{ required: true }}\n              defaultValue={getValues('body') || data.getProject?.body || null}\n              render={({ value, onChange }) => (\n                <TextEditor\n                  apiKey={config.get('tiny-key')}\n                  appearance={'ghost'}\n                  defaultValue={value}\n                  onChange={onChange}\n                />\n              )}\n            />\n\n            <Divider clear />\n\n            <Column style={{ flexGrow: 1 }}>\n              <ActionRow title={'Участники проекта'} />\n\n              {members?.length > 0 ? (\n                <Grid percentage={'minmax(320px, 1fr)'}>\n                  {members.map((member) => (\n                    <AlignmentRow key={v4()}>\n                      <Difinition\n                        style={{ width: '100%' }}\n                        key={member.value?.email || member?.email}\n                        img={\n                          member.value?.avatar?.path ||\n                          member.avatar?.path ||\n                          '/images/avatar-default.png'\n                        }\n                        label={getLabelRole(member?.value?.account || member?.account)}\n                        text={member.value?.name || member?.name}\n                      />\n                      <RemoveTooltip place={'left'} text={'Удалить'}>\n                        <Button\n                          type={'button'}\n                          kind={'icon'}\n                          size={'xs'}\n                          onClick={() => onMemberRemove(member?.value?.email || member?.email)}>\n                          <Icon size={'xs'} icon={'delete'} stroke={'white'} />\n                        </Button>\n                      </RemoveTooltip>\n                    </AlignmentRow>\n                  ))}\n                </Grid>\n              ) : (\n                <Alert style={{ textAlign: 'center' }} width={'100%'}>\n                  Добавьте участников\n                </Alert>\n              )}\n\n              <AddButton type={'button'} onClick={onMemberAdd || (() => {})}>\n                <span>Добавить</span>\n                <Icon type={'button'} icon={'add'} stroke={'white'} />\n              </AddButton>\n            </Column>\n\n            <Divider clear />\n\n            <ActionRow\n              title={'Изображения'}\n              info={'Допустимые форматы: jpeg, jpg, png. Макс. размер: 15 MB'}\n            />\n\n            {screenshots?.length > 0 ? (\n              <Grid percentage={'minmax(196px, 1fr)'}>\n                {screenshots.map((screenshot) => (\n                  <AlignmentRow key={v4()}>\n                    <Difinition\n                      key={screenshot.id}\n                      style={{ width: '100%' }}\n                      img={screenshot.blob || screenshot.file?.path || screenshot.path}\n                      label={\n                        (\n                          screenshot.file?.name ||\n                          screenshot.file?.path ||\n                          screenshot?.name ||\n                          screenshot?.path\n                        )\n                          .split('/')\n                          .slice(-1)[0]\n                      }\n                      text={getFileSize(screenshot.size || screenshot.file?.size)}\n                    />\n                    {!project && (\n                      <RemoveTooltip place={'left'} text={'Удалить'}>\n                        <Button\n                          type={'button'}\n                          kind={'icon'}\n                          size={'xs'}\n                          onClick={() => onScreenshotRemove(screenshot.id)}>\n                          <Icon size={'xs'} icon={'delete'} stroke={'white'} />\n                        </Button>\n                      </RemoveTooltip>\n                    )}\n                  </AlignmentRow>\n                ))}\n              </Grid>\n            ) : (\n              <Alert style={{ textAlign: 'center' }} width={'100%'}>\n                Добавьте изображения\n              </Alert>\n            )}\n\n            <AddButton type={'button'} onClick={(!project && onScreenshotAdd) || (() => {})}>\n              <span>Добавить</span>\n              <Icon type={'button'} icon={'add'} stroke={'white'} />\n            </AddButton>\n\n            <Divider clear />\n\n            <ActionRow\n              title={'Файлы'}\n              info={'Допустимые форматы: pdf, docx, .doc. Макс. размер: 15 MB'}\n            />\n\n            {files?.length > 0 ? (\n              <Grid percentage={'minmax(196px, 1fr)'}>\n                {files.map((file) => (\n                  <AlignmentRow key={v4()}>\n                    <Difinition\n                      key={file.id}\n                      icon={'document'}\n                      style={{ width: '100%' }}\n                      label={\n                        (file.file?.name || file.file?.path || file?.name || file?.path)\n                          .split('/')\n                          .slice(-1)[0]\n                      }\n                      text={getFileSize(file.size || file.file?.size)}\n                    />\n                    {!project && (\n                      <RemoveTooltip place={'left'} text={'Удалить'}>\n                        <Button\n                          type={'button'}\n                          kind={'icon'}\n                          size={'xs'}\n                          onClick={() => onFileRemove(file.id)}>\n                          <Icon size={'xs'} icon={'delete'} stroke={'white'} />\n                        </Button>\n                      </RemoveTooltip>\n                    )}\n                  </AlignmentRow>\n                ))}\n              </Grid>\n            ) : (\n              <Alert style={{ textAlign: 'center' }} width={'100%'}>\n                Добавьте файлы\n              </Alert>\n            )}\n\n            <AddButton type={'button'} onClick={onFileAdd || (() => {})}>\n              <span>Добавить</span>\n              <Icon type={'button'} icon={'add'} stroke={'white'} />\n            </AddButton>\n\n            <Divider clear />\n\n            {errors && errors.presentation && (\n              <Alert style={{ width: '100%' }} appearance={'error'}>\n                Вставьте ссылку на видео\n              </Alert>\n            )}\n            <Input\n              type={'text'}\n              ref={register()}\n              name={'presentation'}\n              defaultValue={getValues('presentation') || data.getProject?.presentation}\n              placeholder={'Вставьте ссылку на видео'}\n              label={'Видео-презентация'}\n              appearance={'ghost'}\n              disabled={loading}\n            />\n\n            {canEditStatus && <Divider clear />}\n\n            {canEditStatus && (\n              <Controller\n                name={'status'}\n                control={control}\n                defaultValue={\n                  getValues('status') ||\n                  (data.getProject?.status\n                    ? {\n                        value: data.getProject.status,\n                        label: getLabelStatus(data.getProject.status)\n                      }\n                    : null)\n                }\n                render={({ value, onChange }) => (\n                  <Select\n                    appearance={'ghost'}\n                    placeholder={'Выберите статус'}\n                    options={statuses.map((item) => ({\n                      value: item,\n                      label: getLabelStatus(item)\n                    }))}\n                    onChange={onChange}\n                    defaultValue={value}\n                    menuPlacement={'top'}\n                    isLoading={loading || loadingStatuses}\n                    isClearable\n                  />\n                )}\n              />\n            )}\n\n            <Divider clear />\n\n            <Row>\n              <Button style={{ flexGrow: 1 }} type={'submit'} disabled={loading}>\n                {isPurpose ? 'Предложить' : project ? 'Сохранить' : 'Создать'}\n              </Button>\n            </Row>\n          </React.Fragment>\n        ) : error ? (\n          <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n            Упс! Не удалось загрузить информацию о проекте\n          </Alert>\n        ) : (\n          <Loader>\n            <Spinner />\n          </Loader>\n        )\n      }\n    </Form>\n  )\n}\n\nexport default Project\n"]},"metadata":{},"sourceType":"module"}
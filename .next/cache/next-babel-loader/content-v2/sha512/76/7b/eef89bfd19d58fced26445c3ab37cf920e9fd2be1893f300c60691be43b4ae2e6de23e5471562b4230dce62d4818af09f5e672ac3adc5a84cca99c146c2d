{"ast":null,"code":"import React, { useState, useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Grid from '../../atomic-ui/components/Grid';\nimport Alert from '../../atomic-ui/components/Alert';\nimport DatePicker from '../../atomic-ui/components/DatePicker';\nimport Select from '../../atomic-ui/components/Select';\nimport Table from '../../atomic-ui/components/Table';\nimport templates from '../../atomic-ui/components/Table/templates';\nimport { createSelectOptions } from '../../atomic-ui/utils/functions';\nimport { initializeApollo } from '../../apollo';\nimport { useHelper } from '../../hooks/useHelper';\nimport DashboardLayout from '../../layouts/dashboard';\nimport HandleBar from '../../components/HandleBar';\nimport FilterBar from '../../components/FilterBar';\nimport ArticleCard from '../../components/ArticleCard';\nimport LazyLoad from '../../components/LazyLoad';\nimport FadeLoad from '../../components/FadeLoad';\nimport { onArticleCreate, onArticleEdit, onArticleDelete, onArticleLink } from '../../store/helpers/article';\nimport { setDocuments } from '../../store/actions/documents';\nimport queries from '../../graphql/queries';\nconst TITLE = 'Статьи';\n\nconst Articles = ({\n  store,\n  categories,\n  statuses\n}) => {\n  const recall = useHelper();\n  const {\n    user,\n    documents\n  } = useSelector(state => ({\n    user: state.user,\n    documents: state.documents\n  }));\n  const dispatch = useDispatch();\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const [displayMethod, onChangeDisplayMethod] = useState('grid');\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user]);\n  const articles = useMemo(() => documents || store.articles, [documents, store]);\n  useEffect(() => {\n    dispatch(setDocuments(null));\n  }, []);\n  return /*#__PURE__*/React.createElement(DashboardLayout, {\n    title: TITLE\n  }, /*#__PURE__*/React.createElement(HandleBar, {\n    icon: 'document',\n    title: TITLE,\n    buttonCreateText: 'Создать статью',\n    onCreate: recall(onArticleCreate, {\n      categories,\n      statuses,\n      canEditStatus,\n      mutation: queries.CREATE_ARTICLE\n    }),\n    onChangeVisibleFilter: () => setVisibleFilter(!visibleFilter),\n    onChangeDisplayMethod: item => onChangeDisplayMethod(item.value)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 0,\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 1,\n      options: createSelectOptions(categories),\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: displayMethod === 'list' ? [] : templates.article.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), articles.length === 0 && /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u043E\\u0432\\u043E\\u0441\\u0442\\u0435\\u0439 \\u043D\\u0435\\u0442\"), displayMethod === 'list' && /*#__PURE__*/React.createElement(Table, {\n    data: articles,\n    template: templates.article,\n    onChecked: () => {},\n    onClick: article => recall(onArticleLink, {\n      id: article.id\n    })(),\n    onDelete: article => recall(onArticleDelete, {\n      id: article.id,\n      article,\n      mutation: queries.DELETE_ARTICLE\n    })(),\n    onEdit: article => recall(onArticleEdit, {\n      id: article.id,\n      categories,\n      statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_ARTICLE\n    })(),\n    style: {\n      overflowX: 'auto',\n      width: 'calc(100vw - 290px)'\n    }\n  }), displayMethod === 'grid' && /*#__PURE__*/React.createElement(Grid, null, articles.map(article => /*#__PURE__*/React.createElement(FadeLoad, {\n    key: article.id\n  }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(ArticleCard, {\n    layout: 'column',\n    article: article,\n    onChecked: () => {},\n    onLink: recall(onArticleLink, {\n      id: article.id\n    }),\n    onDelete: recall(onArticleDelete, {\n      id: article.id,\n      article,\n      mutation: queries.DELETE_ARTICLE\n    }),\n    onEdit: recall(onArticleEdit, {\n      id: article.id,\n      categories,\n      statuses,\n      canEditStatus,\n      mutation: queries.UPDATE_ARTICLE\n    })\n  }))))));\n};\n\nexport async function getServerSideProps() {\n  const client = initializeApollo();\n  let articles = [];\n  let categories = [];\n  let statuses = [];\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_ARTICLES\n    });\n\n    if (response && response.data) {\n      articles = response.data.getArticles;\n      categories = response.data.getCategories;\n      statuses = response.data.getPostStatus;\n    }\n  } catch (err) {\n    console.log(err);\n  }\n\n  return {\n    props: {\n      store: {\n        articles\n      },\n      categories,\n      statuses\n    }\n  };\n}\nexport default Articles;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/pages/dashboard/articles.js"],"names":["React","useState","useEffect","useMemo","useSelector","useDispatch","Grid","Alert","DatePicker","Select","Table","templates","createSelectOptions","initializeApollo","useHelper","DashboardLayout","HandleBar","FilterBar","ArticleCard","LazyLoad","FadeLoad","onArticleCreate","onArticleEdit","onArticleDelete","onArticleLink","setDocuments","queries","TITLE","Articles","store","categories","statuses","recall","user","documents","state","dispatch","date","onChangeDate","select","onChangeSelect","visibleFilter","setVisibleFilter","displayMethod","onChangeDisplayMethod","canEditStatus","role","name","articles","mutation","CREATE_ARTICLE","item","value","article","map","index","label","header","length","width","textAlign","id","DELETE_ARTICLE","UPDATE_ARTICLE","overflowX","getServerSideProps","client","response","query","GET_META_DASHBOARD_ARTICLES","data","getArticles","getCategories","getPostStatus","err","console","log","props"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport Grid from '../../atomic-ui/components/Grid'\nimport Alert from '../../atomic-ui/components/Alert'\nimport DatePicker from '../../atomic-ui/components/DatePicker'\nimport Select from '../../atomic-ui/components/Select'\nimport Table from '../../atomic-ui/components/Table'\nimport templates from '../../atomic-ui/components/Table/templates'\nimport { createSelectOptions } from '../../atomic-ui/utils/functions'\n\nimport { initializeApollo } from '../../apollo'\nimport { useHelper } from '../../hooks/useHelper'\nimport DashboardLayout from '../../layouts/dashboard'\nimport HandleBar from '../../components/HandleBar'\nimport FilterBar from '../../components/FilterBar'\nimport ArticleCard from '../../components/ArticleCard'\nimport LazyLoad from '../../components/LazyLoad'\nimport FadeLoad from '../../components/FadeLoad'\nimport {\n  onArticleCreate,\n  onArticleEdit,\n  onArticleDelete,\n  onArticleLink\n} from '../../store/helpers/article'\nimport { setDocuments } from '../../store/actions/documents'\nimport queries from '../../graphql/queries'\n\nconst TITLE = 'Статьи'\n\nconst Articles = ({ store, categories, statuses }) => {\n  const recall = useHelper()\n  const { user, documents } = useSelector((state) => ({\n    user: state.user,\n    documents: state.documents\n  }))\n  const dispatch = useDispatch()\n  const [date, onChangeDate] = useState()\n  const [select, onChangeSelect] = useState()\n  const [visibleFilter, setVisibleFilter] = useState(false)\n  const [displayMethod, onChangeDisplayMethod] = useState('grid')\n  const canEditStatus = useMemo(() => user && user.role.name === 'ADMIN', [user])\n\n  const articles = useMemo(() => documents || store.articles, [documents, store])\n\n  useEffect(() => {\n    dispatch(setDocuments(null))\n  }, [])\n\n  return (\n    <DashboardLayout title={TITLE}>\n      <HandleBar\n        icon={'document'}\n        title={TITLE}\n        buttonCreateText={'Создать статью'}\n        onCreate={recall(onArticleCreate, {\n          categories,\n          statuses,\n          canEditStatus,\n          mutation: queries.CREATE_ARTICLE\n        })}\n        onChangeVisibleFilter={() => setVisibleFilter(!visibleFilter)}\n        onChangeDisplayMethod={(item) => onChangeDisplayMethod(item.value)}\n      />\n\n      <FilterBar\n        isOpen={visibleFilter}\n        filters={[\n          <DatePicker\n            key={0}\n            value={date}\n            placeholder={'Дата публикации'}\n            onChange={onChangeDate}\n            withNavigate\n          />,\n          <Select\n            key={1}\n            options={createSelectOptions(categories)}\n            placeholder={'Раздел'}\n            selected={select}\n            onChange={(item) => onChangeSelect(item)}\n          />\n        ]}\n        options={\n          displayMethod === 'list'\n            ? []\n            : templates.article.map((item, index) => ({\n                label: item.header,\n                value: index\n              }))\n        }\n      />\n\n      {articles.length === 0 && (\n        <Alert style={{ width: '100%', textAlign: 'center' }}>Новостей нет</Alert>\n      )}\n\n      {displayMethod === 'list' && (\n        <Table\n          data={articles}\n          template={templates.article}\n          onChecked={() => {}}\n          onClick={(article) => recall(onArticleLink, { id: article.id })()}\n          onDelete={(article) =>\n            recall(onArticleDelete, { id: article.id, article, mutation: queries.DELETE_ARTICLE })()\n          }\n          onEdit={(article) =>\n            recall(onArticleEdit, {\n              id: article.id,\n              categories,\n              statuses,\n              canEditStatus,\n              mutation: queries.UPDATE_ARTICLE\n            })()\n          }\n          style={{ overflowX: 'auto', width: 'calc(100vw - 290px)' }}\n        />\n      )}\n\n      {displayMethod === 'grid' && (\n        <Grid>\n          {articles.map((article) => (\n            <FadeLoad key={article.id}>\n              <LazyLoad>\n                <ArticleCard\n                  layout={'column'}\n                  article={article}\n                  onChecked={() => {}}\n                  onLink={recall(onArticleLink, { id: article.id })}\n                  onDelete={recall(onArticleDelete, {\n                    id: article.id,\n                    article,\n                    mutation: queries.DELETE_ARTICLE\n                  })}\n                  onEdit={recall(onArticleEdit, {\n                    id: article.id,\n                    categories,\n                    statuses,\n                    canEditStatus,\n                    mutation: queries.UPDATE_ARTICLE\n                  })}\n                />\n              </LazyLoad>\n            </FadeLoad>\n          ))}\n        </Grid>\n      )}\n    </DashboardLayout>\n  )\n}\n\nexport async function getServerSideProps() {\n  const client = initializeApollo()\n\n  let articles = []\n  let categories = []\n  let statuses = []\n\n  try {\n    const response = await client.query({\n      query: queries.GET_META_DASHBOARD_ARTICLES\n    })\n\n    if (response && response.data) {\n      articles = response.data.getArticles\n      categories = response.data.getCategories\n      statuses = response.data.getPostStatus\n    }\n  } catch (err) {\n    console.log(err)\n  }\n\n  return {\n    props: {\n      store: { articles },\n      categories,\n      statuses\n    }\n  }\n}\n\nexport default Articles\n"]},"metadata":{},"sourceType":"module"}
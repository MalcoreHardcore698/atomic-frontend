{"ast":null,"code":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useRouter } from 'next/router';\nimport styled, { css } from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport Row from '../atomic-ui/components/Row';\nimport Column from '../atomic-ui/components/Column';\nimport Switch from '../atomic-ui/components/Switch';\nimport Alert from '../atomic-ui/components/Alert';\nimport DatePicker from '../atomic-ui/components/DatePicker';\nimport Select from '../atomic-ui/components/Select';\nimport Button from '../atomic-ui/components/Button';\nimport Spinner from '../atomic-ui/components/Spinner';\nimport Tooltip from '../atomic-ui/components/Tooltip';\nimport Text, { Wrap as WrapText } from '../atomic-ui/components/Text';\nimport Icon from '../atomic-ui/components/Icon';\nimport templates from '../atomic-ui/components/Table/templates';\nimport { useHelper } from '../hooks/useHelper';\nimport { useMutate } from '../hooks/useMutate';\nimport DefaultLayout from '../layouts/default';\nimport UserBar from '../components/UserBar';\nimport FilterBar from '../components/FilterBar';\nimport SearchBar from '../components/SearchBar';\nimport ProjectCard from '../components/ProjectCard';\nimport LazyLoad from '../components/LazyLoad';\nimport FadeLoad from '../components/FadeLoad';\nimport { setFolder } from '../store/actions/root';\nimport { updateUser } from '../store/actions/user';\nimport { onProjectLink, onProjectAdd, onProjectScreenshot } from '../store/helpers/project';\nimport { onUserLink, onUserClientEdit, onUserAboutMore, onUserFolderAdd, onUserFolderDelete } from '../store/helpers/user';\nimport queries from '../graphql/queries';\nimport { profilePages } from '../__mock__';\nconst TITLE = 'Профиль';\nconst Container = styled.aside.withConfig({\n  displayName: \"profile__Container\",\n  componentId: \"sc-84d5hd-0\"\n})([\"display:grid;grid-template-columns:repeat(auto-fill,minmax(442px,1fr));grid-gap:var(--default-gap);@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fill,minmax(285px,1fr));}\"]);\nconst ContainerInProgress = styled(Row).withConfig({\n  displayName: \"profile__ContainerInProgress\",\n  componentId: \"sc-84d5hd-1\"\n})([\"grid-gap:var(--default-gap);@media only screen and (max-width:768px){flex-direction:column;}\"]);\nconst CreateButton = styled(Button).withConfig({\n  displayName: \"profile__CreateButton\",\n  componentId: \"sc-84d5hd-2\"\n})([\"display:flex;justify-content:center;align-items:center;grid-gap:10px;span{white-space:nowrap;}\"]);\nconst Orginizer = styled(Column).withConfig({\n  displayName: \"profile__Orginizer\",\n  componentId: \"sc-84d5hd-3\"\n})([\"width:265px;\"]);\nconst RemoveTooltip = styled(Tooltip).withConfig({\n  displayName: \"profile__RemoveTooltip\",\n  componentId: \"sc-84d5hd-4\"\n})([\"position:absolute;right:5px;display:none;\"]);\nconst ListItem = styled.div.withConfig({\n  displayName: \"profile__ListItem\",\n  componentId: \"sc-84d5hd-5\"\n})([\"position:relative;display:flex;justify-content:space-between;align-items:center;height:var(--input-height-s);cursor:pointer;transition:all 150ms ease;\", \"{display:flex;align-items:center;border-radius:var(--surface-border-radius);background:var(--ghost-color-background);width:100%;height:var(--input-height-s);padding:0 10px;transition:all 150ms ease;}&:hover{\", \"{display:flex;}\", \"{color:black;}}\", \"\"], WrapText, RemoveTooltip, WrapText, ({\n  active\n}) => active && css([\"\", \"{color:var(--default-color-accent);background:var(--default-color-accent-dim);}&:hover{\", \"{color:var(--default-color-accent);}}\"], WrapText, WrapText));\nconst AlertEmpty = styled(Alert).withConfig({\n  displayName: \"profile__AlertEmpty\",\n  componentId: \"sc-84d5hd-6\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;\"]);\nconst Loader = styled.div.withConfig({\n  displayName: \"profile__Loader\",\n  componentId: \"sc-84d5hd-7\"\n})([\"display:flex;justify-content:center;width:100%;height:80px;\"]);\n\nconst Projects = ({\n  projects\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const user = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  if (projects && projects.length === 0) {\n    return /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        width: '100%',\n        textAlign: 'center'\n      }\n    }, \"\\u041F\\u0440\\u043E\\u0435\\u043A\\u0442\\u043E\\u0432 \\u043D\\u0435\\u0442\");\n  }\n\n  return /*#__PURE__*/React.createElement(Container, null, projects && projects.length > 0 && projects.map(project => {\n    var _project$company;\n\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: project.id\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(ProjectCard, {\n      owned: true,\n      project: project,\n      liked: !!((user === null || user === void 0 ? void 0 : user.likedProjects) || []).find(item => item.id === project.id),\n      onLike: mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        project,\n        owned: true\n      }),\n      onAdd: recall(onProjectAdd, {\n        id: project.id,\n        project\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onCompanyLink: project.company && recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    })));\n  }));\n};\n\nconst InProgress = () => {\n  const recall = useHelper();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const dispatch = useDispatch();\n  const [getProjects, {\n    data,\n    loading,\n    refetch\n  }] = useLazyQuery(queries.GET_PROJECTS_BY_IDS);\n\n  const onFolderClick = async item => {\n    if (refetch) await refetch({\n      projects: item.projects.map(project => project.id)\n    });\n    dispatch(setFolder(item));\n  };\n\n  useEffect(() => {\n    if (!folder && user !== null && user !== void 0 && user.folders && user.folders.length > 0) {\n      const defaultFolder = user.folders[0];\n\n      if (defaultFolder.projects.length > 0) {\n        getProjects({\n          variables: {\n            projects: defaultFolder.projects.map(project => project.id)\n          }\n        });\n      }\n\n      dispatch(setFolder(defaultFolder));\n    }\n  }, [folder, user, dispatch, getProjects]);\n  return /*#__PURE__*/React.createElement(ContainerInProgress, null, /*#__PURE__*/React.createElement(Orginizer, null, user.folders && user.folders.length > 0 ? /*#__PURE__*/React.createElement(Column, null, user.folders.map(item => /*#__PURE__*/React.createElement(ListItem, {\n    key: item.id,\n    active: folder && item.id === folder.id,\n    onClick: () => onFolderClick(item)\n  }, /*#__PURE__*/React.createElement(Text, null, item.name), /*#__PURE__*/React.createElement(RemoveTooltip, {\n    place: 'left',\n    text: 'Удалить'\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: 'button',\n    kind: 'icon',\n    size: 'xs',\n    disabled: loading,\n    onClick: recall(onUserFolderDelete, {\n      id: item.id,\n      mutation: queries.DELETE_USER_FOLDER\n    })\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: 'xs',\n    icon: 'delete',\n    stroke: 'white'\n  })))))) : /*#__PURE__*/React.createElement(Alert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041F\\u0430\\u043F\\u043E\\u043A \\u043D\\u0435\\u0442\"), /*#__PURE__*/React.createElement(CreateButton, {\n    onClick: recall(onUserFolderAdd, {\n      mutation: queries.ADD_USER_FOLDER\n    })\n  }, /*#__PURE__*/React.createElement(\"span\", null, \"\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430\"), /*#__PURE__*/React.createElement(Icon, {\n    icon: 'add',\n    stroke: 'white'\n  }))), loading && /*#__PURE__*/React.createElement(Spinner, null), data && data.getProjectsByIds.length > 0 && data.getProjectsByIds.map(project => {\n    var _project$company2;\n\n    return /*#__PURE__*/React.createElement(FadeLoad, {\n      key: project.id\n    }, /*#__PURE__*/React.createElement(LazyLoad, null, /*#__PURE__*/React.createElement(ProjectCard, {\n      owned: true,\n      project: project,\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        project,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        owned: true\n      }),\n      onAdd: recall(onProjectAdd, {\n        project\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onCompanyLink: project.company && recall(onUserLink, {\n        id: (_project$company2 = project.company) === null || _project$company2 === void 0 ? void 0 : _project$company2.email,\n        auth: user === null || user === void 0 ? void 0 : user.email\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    })));\n  }), (data && data.getProjectsByIds.length === 0 || !data) && /*#__PURE__*/React.createElement(AlertEmpty, null, \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043F\\u0430\\u043F\\u043A\\u0443 \\u0441 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442\\u0430\\u043C\\u0438\"));\n};\n\nconst Profile = ({\n  categories\n}) => {\n  const recall = useHelper();\n  const router = useRouter();\n  const user = useSelector(state => state.user);\n  const [date, onChangeDate] = useState();\n  const [select, onChangeSelect] = useState();\n  const [currentPage, setCurrentPage] = useState(profilePages[0]);\n  const [visibleFilter, setVisibleFilter] = useState(false);\n  const isAdmin = useMemo(() => (user === null || user === void 0 ? void 0 : user.account) === 'ADMIN', [user]);\n  const renderContentPage = useCallback(() => {\n    switch (currentPage.value) {\n      case '/projects':\n        return /*#__PURE__*/React.createElement(Projects, {\n          projects: user.projects\n        });\n\n      case '/liked':\n        return /*#__PURE__*/React.createElement(Projects, {\n          projects: user.likedProjects\n        });\n\n      default:\n        return /*#__PURE__*/React.createElement(InProgress, null);\n    }\n  }, [currentPage]);\n  useEffect(() => {\n    if (!user.authenticated) {\n      router.push('/auth');\n    }\n  }, [user]);\n\n  if (!user.authenticated) {\n    return /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null));\n  }\n\n  return /*#__PURE__*/React.createElement(DefaultLayout, {\n    title: user.authenticated ? user.name || TITLE : 'Авторизация'\n  }, /*#__PURE__*/React.createElement(Column, null, /*#__PURE__*/React.createElement(UserBar, {\n    user: user,\n    onEdit: recall(onUserClientEdit, {\n      user: user === null || user === void 0 ? void 0 : user.email,\n      canEditAccount: !isAdmin,\n      mutations: {\n        update: queries.UPDATE_CLIENT_USER,\n        del: queries.DELETE_USER,\n        changePassword: queries.UPDATE_CLIENT_USER\n      }\n    }),\n    onAboutMore: recall(onUserAboutMore, {\n      user\n    })\n  }), /*#__PURE__*/React.createElement(Switch, {\n    defaultValue: currentPage,\n    options: profilePages,\n    onChange: item => setCurrentPage(item),\n    stretch: true\n  }), /*#__PURE__*/React.createElement(SearchBar, {\n    onChangeFilter: () => setVisibleFilter(!visibleFilter)\n  }), /*#__PURE__*/React.createElement(FilterBar, {\n    isOpen: visibleFilter,\n    filters: [/*#__PURE__*/React.createElement(DatePicker, {\n      key: 'publishedAt',\n      value: date,\n      placeholder: 'Дата публикации',\n      onChange: onChangeDate,\n      withNavigate: true\n    }), /*#__PURE__*/React.createElement(Select, {\n      key: 'categories',\n      options: categories.map(category => ({\n        value: category.id,\n        label: category.name\n      })),\n      placeholder: 'Раздел',\n      selected: select,\n      onChange: item => onChangeSelect(item)\n    })],\n    options: templates.project.map((item, index) => ({\n      label: item.header,\n      value: index\n    }))\n  }), renderContentPage()));\n};\n\nexport var __N_SSP = true;\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React, { useEffect, useCallback, useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useSelector } from 'react-redux';\nimport Select from '../../atomic-ui/components/Select';\nexport const AsyncSelect = ({\n  type,\n  name,\n  query,\n  variables = {},\n  defaultValue,\n  placeholder,\n  selectValueField,\n  selectLabelField,\n  selectRestrictions,\n  selectLabelDecorator,\n  isMulti,\n  onChange\n}) => {\n  const params = useSelector(state => state.root.params);\n  const {\n    data,\n    loading\n  } = useQuery(query, {\n    variables\n  });\n  const getLabel = useCallback(item => {\n    if (selectLabelField) {\n      const field = item[selectLabelField];\n\n      if (selectLabelDecorator) {\n        return selectLabelDecorator(field);\n      } else {\n        return field;\n      }\n    }\n\n    if (!selectLabelField && selectLabelDecorator) {\n      return selectLabelDecorator(item);\n    }\n\n    return item;\n  }, [selectLabelField, selectLabelDecorator]);\n  const options = useMemo(() => {\n    const opts = type && data && data[type] || [];\n\n    const isInclude = item => (Array.isArray(selectRestrictions) ? selectRestrictions : []).includes(item);\n\n    return opts.filter(item => Boolean(selectRestrictions ? !isInclude(item) : item)).map(item => ({\n      value: selectValueField ? item[selectValueField] : item,\n      label: getLabel(item)\n    }));\n  }, [type, data, selectValueField, selectRestrictions, getLabel]);\n  return /*#__PURE__*/React.createElement(Select, {\n    options: options,\n    placeholder: placeholder,\n    defaultValue: options.find(option => (option === null || option === void 0 ? void 0 : option.value) === params[name]) || defaultValue,\n    onChange: onChange,\n    isLoading: loading,\n    isMulti: isMulti,\n    isSearchable: true,\n    isClearable: true\n  });\n};\nexport default AsyncSelect;","map":null,"metadata":{},"sourceType":"module"}
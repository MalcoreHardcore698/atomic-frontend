{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useQuery } from '@apollo/react-hooks';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Alert from '../../atomic-ui/components/Alert';\nimport Spinner from '../../atomic-ui/components/Spinner';\nimport { Loader } from '../Styled';\nimport LazyLoad from '../LazyLoad';\nimport ProjectCard from '../ProjectCard';\nimport { useHelper } from '../../hooks/useHelper';\nimport { useMutate } from '../../hooks/useMutate';\nimport { updateUser } from '../../store/actions/user';\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user';\nimport { onProjectAdd, onProjectRemove, onProjectLink, onProjectScreenshot } from '../../store/helpers/project';\nimport queries from '../../graphql/queries';\nexport const Wrap = styled.div.withConfig({\n  displayName: \"ProjectList__Wrap\",\n  componentId: \"zcwfmw-0\"\n})([\"display:grid;grid-template-columns:repeat(auto-fit,minmax(442px,1fr));grid-gap:var(--default-gap);grid-auto-rows:max-content;@media only screen and (max-width:768px){grid-template-columns:repeat(auto-fit,minmax(285px,1fr));}\"]);\nconst CentralAlert = styled(Alert).withConfig({\n  displayName: \"ProjectList__CentralAlert\",\n  componentId: \"zcwfmw-1\"\n})([\"display:flex;justify-content:center;align-items:center;width:100%;flex-grow:10;\"]);\nexport const ProjectList = ({\n  variables,\n  layout,\n  eliminable,\n  data: initialData,\n  loading: initialLoading,\n  error: initialError,\n  refetch: initialRefetch,\n  emptyMessage\n}) => {\n  const recall = useHelper();\n  const mutate = useMutate();\n  const {\n    user,\n    folder\n  } = useSelector(state => ({\n    user: state.user,\n    folder: state.root.folder\n  }));\n  const [projects, setProjects] = useState([]);\n  const dispatch = useDispatch();\n  const {\n    data,\n    loading,\n    error\n  } = initialData ? {\n    data: null,\n    loading: initialLoading,\n    error: initialError\n  } : useQuery(queries.GET_PROJECTS, {\n    variables\n  });\n  useEffect(() => {\n    if (!loading && data) {\n      setProjects(data.getProjects);\n    }\n  }, [data, loading]);\n  useEffect(() => {\n    if (!initialLoading && initialData) {\n      setProjects(initialData);\n    }\n  }, [initialData, initialLoading]);\n  return /*#__PURE__*/React.createElement(Wrap, null, (projects === null || projects === void 0 ? void 0 : projects.length) > 0 ? projects.map(project => {\n    var _user$projects, _user$folders, _project$company;\n\n    const owned = user === null || user === void 0 ? void 0 : (_user$projects = user.projects) === null || _user$projects === void 0 ? void 0 : _user$projects.find(candidate => candidate.id === project.id);\n    return /*#__PURE__*/React.createElement(LazyLoad, {\n      key: project.id\n    }, /*#__PURE__*/React.createElement(ProjectCard, {\n      project: project,\n      eliminable: eliminable,\n      layout: layout || 'column',\n      owned: owned,\n      added: !!(user !== null && user !== void 0 && (_user$folders = user.folders) !== null && _user$folders !== void 0 && _user$folders.find(folder => !!(folder !== null && folder !== void 0 && folder.projects.find(item => item === project.id)))),\n      liked: !!(project.rating || []).find(item => item.email === user.email),\n      onLink: recall(onProjectLink, {\n        id: project.id,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        liked: !!(project.rating || []).find(item => item.email === user.email),\n        onLike: user.email && mutate(queries.LIKE_PROJECT, {\n          id: project.id\n        }, response => dispatch(updateUser(response.data.likeProject))),\n        onAdd: user.email && recall(onProjectAdd, {\n          id: project.id,\n          folders: user === null || user === void 0 ? void 0 : user.folders,\n          mutations: {\n            addProject: queries.ADD_USER_PROJECT,\n            createFolder: queries.ADD_USER_FOLDER\n          }\n        }),\n        owned\n      }),\n      onLike: user.email && mutate(queries.LIKE_PROJECT, {\n        id: project.id\n      }, response => dispatch(updateUser(response.data.likeProject))),\n      onAdd: user.email && recall(onProjectAdd, {\n        id: project.id,\n        folders: user === null || user === void 0 ? void 0 : user.folders,\n        mutations: {\n          addProject: queries.ADD_USER_PROJECT,\n          createFolder: queries.ADD_USER_FOLDER\n        }\n      }),\n      onRemove: user.email && recall(onProjectRemove, {\n        id: project.id,\n        folder,\n        mutation: queries.REMOVE_USER_PROJECT,\n        callback: () => initialRefetch && initialRefetch(projects.filter(pr => pr.id !== project.id))\n      }),\n      onAboutMore: recall(onUserAboutMore, {\n        user: project\n      }),\n      onCompanyLink: recall(onUserLink, {\n        id: (_project$company = project.company) === null || _project$company === void 0 ? void 0 : _project$company.email,\n        auth: user === null || user === void 0 ? void 0 : user.email,\n        recipient: project.author,\n        query: queries.GET_USER_CHATS,\n        mutation: queries.SEND_MESSAGE\n      }),\n      onScreenshotClick: (_, key) => recall(onProjectScreenshot, {\n        screenshots: [project.preview, ...project.screenshots],\n        key\n      })()\n    }));\n  }) : error ? /*#__PURE__*/React.createElement(Alert, {\n    appearance: 'error',\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, \"\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0434\\u0430\\u043D\\u043D\\u044B\\u0435\") : loading ? /*#__PURE__*/React.createElement(Loader, null, /*#__PURE__*/React.createElement(Spinner, null)) : /*#__PURE__*/React.createElement(CentralAlert, {\n    style: {\n      width: '100%',\n      textAlign: 'center'\n    }\n  }, emptyMessage));\n};\nProjectList.defaultProps = {\n  emptyMessage: 'Проектов нет'\n};\nexport default ProjectList;","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/ProjectList/index.js"],"names":["React","useState","useEffect","styled","useQuery","useDispatch","useSelector","Alert","Spinner","Loader","LazyLoad","ProjectCard","useHelper","useMutate","updateUser","onUserAboutMore","onUserLink","onProjectAdd","onProjectRemove","onProjectLink","onProjectScreenshot","queries","Wrap","div","CentralAlert","ProjectList","variables","layout","eliminable","data","initialData","loading","initialLoading","error","initialError","refetch","initialRefetch","emptyMessage","recall","mutate","user","folder","state","root","projects","setProjects","dispatch","GET_PROJECTS","getProjects","length","map","project","owned","find","candidate","id","folders","item","rating","email","auth","liked","onLike","LIKE_PROJECT","response","likeProject","onAdd","mutations","addProject","ADD_USER_PROJECT","createFolder","ADD_USER_FOLDER","mutation","REMOVE_USER_PROJECT","callback","filter","pr","company","recipient","author","query","GET_USER_CHATS","SEND_MESSAGE","_","key","screenshots","preview","width","textAlign","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { useQuery } from '@apollo/react-hooks'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport Alert from '../../atomic-ui/components/Alert'\nimport Spinner from '../../atomic-ui/components/Spinner'\n\nimport { Loader } from '../Styled'\nimport LazyLoad from '../LazyLoad'\nimport ProjectCard from '../ProjectCard'\nimport { useHelper } from '../../hooks/useHelper'\nimport { useMutate } from '../../hooks/useMutate'\nimport { updateUser } from '../../store/actions/user'\nimport { onUserAboutMore, onUserLink } from '../../store/helpers/user'\nimport {\n  onProjectAdd,\n  onProjectRemove,\n  onProjectLink,\n  onProjectScreenshot\n} from '../../store/helpers/project'\nimport queries from '../../graphql/queries'\n\nexport const Wrap = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(442px, 1fr));\n  grid-gap: var(--default-gap);\n  grid-auto-rows: max-content;\n\n  @media only screen and (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(285px, 1fr));\n  }\n`\n\nconst CentralAlert = styled(Alert)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  flex-grow: 10;\n`\n\nexport const ProjectList = ({\n  variables,\n  layout,\n  eliminable,\n  data: initialData,\n  loading: initialLoading,\n  error: initialError,\n  refetch: initialRefetch,\n  emptyMessage\n}) => {\n  const recall = useHelper()\n  const mutate = useMutate()\n  const { user, folder } = useSelector((state) => ({\n    user: state.user,\n    folder: state.root.folder\n  }))\n  const [projects, setProjects] = useState([])\n  const dispatch = useDispatch()\n\n  const { data, loading, error } = initialData\n    ? { data: null, loading: initialLoading, error: initialError }\n    : useQuery(queries.GET_PROJECTS, { variables })\n\n  useEffect(() => {\n    if (!loading && data) {\n      setProjects(data.getProjects)\n    }\n  }, [data, loading])\n\n  useEffect(() => {\n    if (!initialLoading && initialData) {\n      setProjects(initialData)\n    }\n  }, [initialData, initialLoading])\n\n  return (\n    <Wrap>\n      {projects?.length > 0 ? (\n        projects.map((project) => {\n          const owned = user?.projects?.find((candidate) => candidate.id === project.id)\n\n          return (\n            <LazyLoad key={project.id}>\n              <ProjectCard\n                project={project}\n                eliminable={eliminable}\n                layout={layout || 'column'}\n                owned={owned}\n                added={\n                  !!user?.folders?.find(\n                    (folder) => !!folder?.projects.find((item) => item === project.id)\n                  )\n                }\n                liked={!!(project.rating || []).find((item) => item.email === user.email)}\n                onLink={recall(onProjectLink, {\n                  id: project.id,\n                  auth: user?.email,\n                  liked: !!(project.rating || []).find((item) => item.email === user.email),\n                  onLike:\n                    user.email &&\n                    mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                      dispatch(updateUser(response.data.likeProject))\n                    ),\n                  onAdd:\n                    user.email &&\n                    recall(onProjectAdd, {\n                      id: project.id,\n                      folders: user?.folders,\n                      mutations: {\n                        addProject: queries.ADD_USER_PROJECT,\n                        createFolder: queries.ADD_USER_FOLDER\n                      }\n                    }),\n                  owned\n                })}\n                onLike={\n                  user.email &&\n                  mutate(queries.LIKE_PROJECT, { id: project.id }, (response) =>\n                    dispatch(updateUser(response.data.likeProject))\n                  )\n                }\n                onAdd={\n                  user.email &&\n                  recall(onProjectAdd, {\n                    id: project.id,\n                    folders: user?.folders,\n                    mutations: {\n                      addProject: queries.ADD_USER_PROJECT,\n                      createFolder: queries.ADD_USER_FOLDER\n                    }\n                  })\n                }\n                onRemove={\n                  user.email &&\n                  recall(onProjectRemove, {\n                    id: project.id,\n                    folder,\n                    mutation: queries.REMOVE_USER_PROJECT,\n                    callback: () =>\n                      initialRefetch &&\n                      initialRefetch(projects.filter((pr) => pr.id !== project.id))\n                  })\n                }\n                onAboutMore={recall(onUserAboutMore, { user: project })}\n                onCompanyLink={recall(onUserLink, {\n                  id: project.company?.email,\n                  auth: user?.email,\n                  recipient: project.author,\n                  query: queries.GET_USER_CHATS,\n                  mutation: queries.SEND_MESSAGE\n                })}\n                onScreenshotClick={(_, key) =>\n                  recall(onProjectScreenshot, {\n                    screenshots: [project.preview, ...project.screenshots],\n                    key\n                  })()\n                }\n              />\n            </LazyLoad>\n          )\n        })\n      ) : error ? (\n        <Alert appearance={'error'} style={{ width: '100%', textAlign: 'center' }}>\n          Не удалось загрузить данные\n        </Alert>\n      ) : loading ? (\n        <Loader>\n          <Spinner />\n        </Loader>\n      ) : (\n        <CentralAlert style={{ width: '100%', textAlign: 'center' }}>{emptyMessage}</CentralAlert>\n      )}\n    </Wrap>\n  )\n}\n\nProjectList.defaultProps = {\n  emptyMessage: 'Проектов нет'\n}\n\nexport default ProjectList\n"]},"metadata":{},"sourceType":"module"}
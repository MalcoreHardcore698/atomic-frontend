{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Suspense } from 'react';\nimport styled, { css } from 'styled-components';\nimport Scrollbars from 'react-custom-scrollbars';\nimport Transition from '../Transition';\nimport Spinner from '../Spinner';\nimport Icon from '../Icon';\nexport const Overlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: var(--default-color-overlay);\n  transition: opacity 0.2s;\n`;\nexport const Side = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  margin-left: auto;\n  max-width: 70%;\n  height: 100vh;\n  background: white;\n  transition: transform 0.3s;\n\n  @media only screen and (max-width: 1098px) {\n    width: calc(100% - 60px);\n\n    ${({\n  half\n}) => half && css`\n        width: 196px;\n      `}\n  }\n\n  @media only screen and (max-width: 480px) {\n    width: 100%;\n\n    ${({\n  half\n}) => half && css`\n        width: 196px;\n      `}\n  }\n\n  ${({\n  half\n}) => half && css`\n      width: 196px;\n      margin-left: 0;\n    `}\n`;\nexport const BackButton = styled(Icon)`\n  position: absolute;\n  top: 40px;\n  right: calc(100% + 30px);\n  z-index: var(--z-15);\n  width: 40px;\n  cursor: pointer;\n  transform: translateY(-50%);\n  transition: opacity 0.3s;\n\n  @media only screen and (max-width: 1098px) {\n    right: calc(100% + 12px);\n  }\n\n  @media only screen and (max-width: 480px) {\n    display: none;\n  }\n`;\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: var(--default-gap);\n  min-height: 100%;\n`;\nexport const Wrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 1000;\n\n  &.slide-left-enter,\n  &.slide-left-appear {\n    ${Overlay} {\n      opacity: 0;\n    }\n\n    ${Side} {\n      transform: translateX(-100%);\n    }\n\n    ${BackButton} {\n      opacity: 0;\n    }\n  }\n\n  &.slide-left-enter-active,\n  &.slide-left-appear-active {\n    ${Overlay} {\n      opacity: 1;\n    }\n\n    ${Side} {\n      transform: initial;\n      transition-delay: 150ms;\n    }\n\n    ${BackButton} {\n      opacity: 1;\n    }\n  }\n\n  &.slide-left-exit {\n    ${Overlay} {\n      opacity: 1;\n    }\n\n    ${Side} {\n      transform: initial;\n    }\n\n    ${BackButton} {\n      opacity: 1;\n    }\n  }\n\n  &.slide-left-exit-active {\n    ${Overlay} {\n      opacity: 0;\n    }\n\n    ${Side} {\n      transform: translateX(-100%);\n    }\n\n    ${BackButton} {\n      opacity: 0;\n    }\n  }\n\n  &.slide-right-enter,\n  &.slide-right-appear {\n    ${Overlay} {\n      opacity: 0;\n    }\n\n    ${Side} {\n      transform: translateX(100%);\n    }\n\n    ${BackButton} {\n      opacity: 0;\n    }\n  }\n\n  &.slide-right-enter-active,\n  &.slide-right-appear-active {\n    ${Overlay} {\n      opacity: 1;\n    }\n\n    ${Side} {\n      transform: initial;\n      transition-delay: 150ms;\n    }\n\n    ${BackButton} {\n      opacity: 1;\n    }\n  }\n\n  &.slide-right-exit {\n    ${Overlay} {\n      opacity: 1;\n    }\n\n    ${Side} {\n      transform: initial;\n    }\n\n    ${BackButton} {\n      opacity: 1;\n    }\n  }\n\n  &.slide-right-exit-active {\n    ${Overlay} {\n      opacity: 0;\n    }\n\n    ${Side} {\n      transform: translateX(100%);\n    }\n\n    ${BackButton} {\n      opacity: 0;\n    }\n  }\n`;\nexport const Loader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 100%;\n  flex-grow: 1;\n`;\nexport const Drawer = (_ref) => {\n  let {\n    children,\n    side,\n    half,\n    isOpen,\n    onBack\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"side\", \"half\", \"isOpen\", \"onBack\"]);\n\n  return __jsx(Transition, _extends({\n    in: isOpen,\n    timeout: {\n      appear: 500,\n      enter: 500,\n      exit: 300\n    },\n    animation: side === 'right' ? 'slide-right' : 'slide-left',\n    unmountOnExit: true,\n    appear: true\n  }, props), __jsx(Wrapper, props, __jsx(Overlay, {\n    onClick: onBack\n  }), __jsx(Side, {\n    half: half\n  }, __jsx(BackButton, {\n    onClick: onBack,\n    icon: 'arrowLeft',\n    size: 64,\n    stroke: 'white'\n  }), __jsx(Scrollbars, null, __jsx(Content, null, __jsx(Suspense, {\n    fallback: __jsx(Loader, null, __jsx(Spinner, null))\n  }, children))))));\n};\nexport default Drawer;","map":null,"metadata":{},"sourceType":"module"}
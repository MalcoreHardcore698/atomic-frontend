{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport Row from '../../atomic-ui/components/Row';\nimport Column from '../../atomic-ui/components/Column';\nimport Title from '../../atomic-ui/components/Title';\nimport Text from '../../atomic-ui/components/Text';\nimport Image from '../../atomic-ui/components/Image';\nimport Meta from '../../atomic-ui/components/Meta';\nimport { getLabelCategory } from '../../atomic-ui/utils/functions';\nimport { useEntityQuery } from '../../hooks/useEntityQuery';\nimport CardActions from '../CardActions';\nexport const Wrap = styled(Column).withConfig({\n  displayName: \"CategoryCard__Wrap\",\n  componentId: \"sc-10psc0b-0\"\n})([\"position:relative;height:100%;min-height:100px;\", \" \", \" \", \" \", \"\"], ({\n  checked\n}) => checked && css([\"opacity:0.45;\"]), ({\n  appearance\n}) => appearance === 'default' && css([\"padding:var(--default-gap);background:var(--surface-background);border:var(--surface-border);border-radius:var(--surface-border-radius);box-shadow:var(--surface-shadow);\"]), ({\n  appearance\n}) => appearance === 'ghost' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]), ({\n  appearance\n}) => appearance === 'clear' && css([\"padding:0;border:none;background:none;border-radius:0;box-shadow:none;\"]));\n_c = Wrap;\nexport const Poster = styled(Image).withConfig({\n  displayName: \"CategoryCard__Poster\",\n  componentId: \"sc-10psc0b-1\"\n})([\"object-fit:cover;width:100%;height:512px;border-radius:var(--surface-border-radius);\"]);\nexport const Header = styled(Row).withConfig({\n  displayName: \"CategoryCard__Header\",\n  componentId: \"sc-10psc0b-2\"\n})([\"justify-content:space-between;align-items:center;\"]);\n_c2 = Header;\nexport const Content = styled(Column).withConfig({\n  displayName: \"CategoryCard__Content\",\n  componentId: \"sc-10psc0b-3\"\n})([\"grid-gap:0;\"]);\n_c3 = Content;\nexport const Name = styled(Title).withConfig({\n  displayName: \"CategoryCard__Name\",\n  componentId: \"sc-10psc0b-4\"\n})([\"transition:opacity 150ms ease;\", \"\"], ({\n  onClick\n}) => onClick && css([\"cursor:pointer;&:hover{opacity:0.45;}\"]));\n_c4 = Name;\nexport const Card = ({\n  category,\n  checked,\n  appearance,\n  className,\n  style,\n  onLink,\n  onChecked,\n  onDelete,\n  onEdit\n}) => {\n  _s();\n\n  const {\n    setQuery\n  } = useEntityQuery();\n  return /*#__PURE__*/React.createElement(Wrap, {\n    className: className,\n    style: style,\n    checked: checked,\n    appearance: appearance\n  }, /*#__PURE__*/React.createElement(Content, null, /*#__PURE__*/React.createElement(Header, null, /*#__PURE__*/React.createElement(Meta, {\n    date: category.createdAt,\n    category: getLabelCategory(category.type)\n  }), /*#__PURE__*/React.createElement(CardActions, {\n    typeText: 'категорию',\n    checked: checked,\n    onEdit: onEdit,\n    onDelete: onDelete,\n    onChecked: onChecked\n  })), /*#__PURE__*/React.createElement(Name, {\n    tag: 'h4',\n    onClick: () => setQuery(category.id, 'category', onLink)\n  }, category.name), /*#__PURE__*/React.createElement(Text, null, category.description)));\n};\n\n_s(Card, \"yoWAwPpWz99uzhosc0kQOuUekVs=\", false, function () {\n  return [useEntityQuery];\n});\n\n_c5 = Card;\nCard.defaultProps = {\n  appearance: 'default'\n};\nexport default Card;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Content\");\n$RefreshReg$(_c4, \"Name\");\n$RefreshReg$(_c5, \"Card\");","map":{"version":3,"sources":["C:/Users/dan82/Documents/workspace/FREELANCE/atomic/atomic-frontend/components/CategoryCard/index.js"],"names":["React","styled","css","Row","Column","Title","Text","Image","Meta","getLabelCategory","useEntityQuery","CardActions","Wrap","checked","appearance","Poster","Header","Content","Name","onClick","Card","category","className","style","onLink","onChecked","onDelete","onEdit","setQuery","createdAt","type","id","name","description","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport Row from '../../atomic-ui/components/Row'\nimport Column from '../../atomic-ui/components/Column'\nimport Title from '../../atomic-ui/components/Title'\nimport Text from '../../atomic-ui/components/Text'\nimport Image from '../../atomic-ui/components/Image'\nimport Meta from '../../atomic-ui/components/Meta'\nimport { getLabelCategory } from '../../atomic-ui/utils/functions'\n\nimport { useEntityQuery } from '../../hooks/useEntityQuery'\nimport CardActions from '../CardActions'\n\nexport const Wrap = styled(Column)`\n  position: relative;\n  height: 100%;\n  min-height: 100px;\n\n  ${({ checked }) =>\n    checked &&\n    css`\n      opacity: 0.45;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'default' &&\n    css`\n      padding: var(--default-gap);\n      background: var(--surface-background);\n      border: var(--surface-border);\n      border-radius: var(--surface-border-radius);\n      box-shadow: var(--surface-shadow);\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'ghost' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n\n  ${({ appearance }) =>\n    appearance === 'clear' &&\n    css`\n      padding: 0;\n      border: none;\n      background: none;\n      border-radius: 0;\n      box-shadow: none;\n    `}\n`\n\nexport const Poster = styled(Image)`\n  object-fit: cover;\n  width: 100%;\n  height: 512px;\n  border-radius: var(--surface-border-radius);\n`\n\nexport const Header = styled(Row)`\n  justify-content: space-between;\n  align-items: center;\n`\n\nexport const Content = styled(Column)`\n  grid-gap: 0;\n`\n\nexport const Name = styled(Title)`\n  transition: opacity 150ms ease;\n\n  ${({ onClick }) =>\n    onClick &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.45;\n      }\n    `}\n`\n\nexport const Card = ({\n  category,\n  checked,\n  appearance,\n  className,\n  style,\n  onLink,\n  onChecked,\n  onDelete,\n  onEdit\n}) => {\n  const { setQuery } = useEntityQuery()\n\n  return (\n    <Wrap className={className} style={style} checked={checked} appearance={appearance}>\n      <Content>\n        <Header>\n          <Meta date={category.createdAt} category={getLabelCategory(category.type)} />\n\n          <CardActions\n            typeText={'категорию'}\n            checked={checked}\n            onEdit={onEdit}\n            onDelete={onDelete}\n            onChecked={onChecked}\n          />\n        </Header>\n\n        <Name tag={'h4'} onClick={() => setQuery(category.id, 'category', onLink)}>\n          {category.name}\n        </Name>\n\n        <Text>{category.description}</Text>\n      </Content>\n    </Wrap>\n  )\n}\n\nCard.defaultProps = {\n  appearance: 'default'\n}\n\nexport default Card\n"]},"metadata":{},"sourceType":"module"}